{
  "type": "issue",
  "issue": {
    "id": 3527492138,
    "node_id": "I_kwDOABII587SQUIq",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33647",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33647/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33647/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33647/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/33647",
    "number": 33647,
    "state": "open",
    "state_reason": null,
    "title": "[`v30.0`] `createNewBlock` never returns",
    "body": "while connected to `testnet4` and letting the current implementation of SRI client connected for a while, `bitcoin-node` stops responding to IPC calls\n\nsteps to reproduce:\n- build `bitcoin-node` from `v30.0` tag\n- clone https://github.com/plebhash/sv2-bitcoin-core\n- check out `2025-10-17-hanging-ipc` branch\n- launch `bitcoin-node` with `-testnet4 -ipc-bind=unix -debug=ipc`\n- launch `sv2-bitcoin-core` with `RUST_LOG=debug cargo run --example logger \"/path/to/node.sock\"`\n- let it run for a while (for me it took ~25 minutes)\n\neventually, the logs on the rust client start to look like this:\n```\n2025-10-17T15:29:29.614817Z  INFO logger: Sent new CoinbaseOutputConstraints\n2025-10-17T15:29:29.614853Z DEBUG bitcoin_core_sv2: Received: CoinbaseOutputConstraints: CoinbaseOutputConstraints(coinbase_output_max_additional_size: 2, coinbase_output_max_additional_sigops: 2)\n2025-10-17T15:29:29.614934Z DEBUG bitcoin_core_sv2: monitor_incoming_messages() processing message\n2025-10-17T15:29:29.614973Z DEBUG bitcoin_core_sv2: Received CoinbaseOutputConstraints - max_additional_size: 2, max_additional_sigops: 2\n2025-10-17T15:29:29.615022Z DEBUG bitcoin_core_sv2: handle_coinbase_output_constraints() called\n2025-10-17T15:29:29.615058Z DEBUG bitcoin_core_sv2: Cancelling template_ipc_client_cancellation_token\n2025-10-17T15:29:29.615099Z DEBUG bitcoin_core_sv2: Creating new template IPC client with new constraints\n2025-10-17T15:29:29.615139Z DEBUG bitcoin_core_sv2: new_template_ipc_client() called - max_size: 2, max_sigops: 2\n2025-10-17T15:29:29.615219Z DEBUG bitcoin_core_sv2: Setting block_reserved_weight: 2000\n2025-10-17T15:29:29.615255Z DEBUG bitcoin_core_sv2: Sending createNewBlock request to Bitcoin Core\n2025-10-17T15:29:39.616976Z  INFO logger: Sent new CoinbaseOutputConstraints\n2025-10-17T15:29:49.619034Z  INFO logger: Sent new CoinbaseOutputConstraints\n2025-10-17T15:29:59.621747Z  INFO logger: Sent new CoinbaseOutputConstraints\n2025-10-17T15:30:09.624253Z  INFO logger: Sent new CoinbaseOutputConstraints\n2025-10-17T15:30:19.625848Z  INFO logger: Sent new CoinbaseOutputConstraints\n2025-10-17T15:30:29.627359Z  INFO logger: Sent new CoinbaseOutputConstraints\n```\n\nthis is a clear indication that `createNewBlock` IPC call got stuck and never returned\n\nthe rust client becomes unkillable via ctrl+c, since there's hanging futures inside... so the process must be killed with other methods\n\nif we restart the rust client, the normal bootstrapping process doesn't go through, which indicates that `bitcoin-node` is no longer able to respond to any IPC calls whatsoever\n\nadditionally, `bitcoin-node` also becomes unkillable via ctrl+c\n\n---\n\nhere's logs of `bitcoin-node` around the timestamp where `createNewBlock` IPC call got stuck:\n\n```\n2025-10-17T15:29:24Z [ipc] {bitcoin-node-58573/b-capnp-loop-26537354} IPC server send response #347 BlockTemplate.waitNext$Results (result = <external capability>)\n2025-10-17T15:29:24Z [ipc] {bitcoin-node-58573/b-capnp-loop-26537354} IPC server send response #349 BlockTemplate.waitNext$Results (result = <external capability>)\n2025-10-17T15:29:24Z [ipc] {bitcoin-node-58573/b-capnp-loop-26537354} IPC server recv request  #350 BlockTemplate.getBlock$Params (context = (thread = <external capability>))\n2025-10-17T15:29:24Z [ipc] {bitcoin-node-58573/b-capnp-loop-26537354} IPC server post request  #350 {bitcoin-node-58573/26538479 (from )}\n2025-10-17T15:29:24Z [ipc] {bitcoin-node-58573/b-capnp-loop-26537354} IPC server recv request  #351 BlockTemplate.getBlock$Params (context = (thread = <external capability>))\n2025-10-17T15:29:24Z [ipc] {bitcoin-node-58573/b-capnp-loop-26537354} IPC server post request  #351 {bitcoin-node-58573/26538479 (from )}\n2025-10-17T15:42:11Z Saw new header hash=000000001fe51f6e5b13b64e87e1c66f475adc2b4fa97b0b39c7b9a20fe0ea0e height=106954 peer=5\n2025-10-17T15:42:11Z UpdateTip: new best=000000001fe51f6e5b13b64e87e1c66f475adc2b4fa97b0b39c7b9a20fe0ea0e height=106954 version=0x20000000 log2_work=74.802497 tx=12113955 date='2025-10-17T17:42:11Z' progress=1.000000 cache=0.3MiB(337txo)\n2025-10-17T15:42:11Z Saw new header hash=00000000e206db80ad182ffdabc05bf9f6a1e13bd62b5ec4a51750c42e456648 height=106954 peer=8\n2025-10-17T15:45:11Z New block-relay-only v2 peer connected: version: 70016, blocks=106954, peer=15\n2025-10-17T15:58:34Z New block-relay-only v2 peer connected: version: 70016, blocks=106954, peer=16\n2025-10-17T15:59:44Z New block-relay-only v2 peer connected: version: 70016, blocks=106954, peer=17\n2025-10-17T16:02:12Z Saw new cmpctblock header hash=000000009a3bbd6b55b974200199e2cb7272deb8c892d2ee7b4215ec9b1e0876 height=106955 peer=4\n2025-10-17T16:02:12Z UpdateTip: new best=000000009a3bbd6b55b974200199e2cb7272deb8c892d2ee7b4215ec9b1e0876 height=106955 version=0x20000000 log2_work=74.802497 tx=12113988 date='2025-10-17T18:02:12Z' progress=1.000000 cache=0.3MiB(342txo)\n2025-10-17T16:04:58Z Flushed fee estimates to fee_estimates.dat.\n2025-10-17T16:22:13Z Saw new header hash=0000000073d29bfc7123c09a0dda5e64bd3e58383d85621c64625fad817215fa height=106956 peer=5\n2025-10-17T16:22:13Z Saw new header hash=0000000001f79e1b92f6f254cc5a5ff72bb8ce76731c53d50c28176663949972 height=106956 peer=1\n2025-10-17T16:22:13Z UpdateTip: new best=0000000001f79e1b92f6f254cc5a5ff72bb8ce76731c53d50c28176663949972 height=106956 version=0x20000000 log2_work=74.802497 tx=12114006 date='2025-10-17T18:22:13Z' progress=1.000000 cache=0.3MiB(391txo)\n2025-10-17T16:22:13Z Saw new header hash=00000000a820139f0791d0a2994bec73a29cb8563c34f4a68b96d7fe31cac7ef height=106956 peer=10\n2025-10-17T16:35:29Z New block-relay-only v2 peer connected: version: 70016, blocks=106956, peer=19\n2025-10-17T16:36:29Z New block-relay-only v2 peer connected: version: 70016, blocks=106956, peer=20\n2025-10-17T16:39:45Z Saw new cmpctblock header hash=00000000000000015ef791c938c1399989dcc68ead8057c508e03e585d2110c0 height=106957 peer=4\n2025-10-17T16:39:45Z UpdateTip: new best=00000000000000015ef791c938c1399989dcc68ead8057c508e03e585d2110c0 height=106957 version=0x200f2000 log2_work=74.803065 tx=12114029 date='2025-10-17T16:42:09Z' progress=1.000000 cache=0.3MiB(429txo)\n```\n\ncc @ryanofsky ",
    "user": {
      "login": "plebhash",
      "id": 147345153,
      "node_id": "U_kgDOCMhPAQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plebhash",
      "html_url": "https://github.com/plebhash",
      "followers_url": "https://api.github.com/users/plebhash/followers",
      "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
      "organizations_url": "https://api.github.com/users/plebhash/orgs",
      "repos_url": "https://api.github.com/users/plebhash/repos",
      "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/plebhash/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 2260068353,
        "node_id": "MDU6TGFiZWwyMjYwMDY4MzUz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/interfaces",
        "name": "interfaces",
        "description": "",
        "color": "83c9fc",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "NONE",
    "locked": false,
    "comments": 3,
    "created_at": "2025-10-17T20:42:18Z",
    "updated_at": "2025-10-18T13:39:55Z"
  },
  "events": [
    {
      "event": "mentioned",
      "id": 20352559569,
      "node_id": "MEE_lADOABII587SQUIqzwAAAAS9G2nR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20352559569",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-17T20:46:13Z"
    },
    {
      "event": "subscribed",
      "id": 20352559583,
      "node_id": "SE_lADOABII587SQUIqzwAAAAS9G2nf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20352559583",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-17T20:46:13Z"
    },
    {
      "event": "commented",
      "id": 3418147325,
      "node_id": "IC_kwDOABII587LvMn9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3418147325",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-18T09:59:24Z",
      "updated_at": "2025-10-18T09:59:24Z",
      "author_association": "MEMBER",
      "body": "cc @Sjors ",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33647#issuecomment-3418147325",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33647"
    },
    {
      "event": "mentioned",
      "id": 20358280353,
      "node_id": "MEE_lADOABII587SQUIqzwAAAAS9crSh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20358280353",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-18T09:59:25Z"
    },
    {
      "event": "subscribed",
      "id": 20358280419,
      "node_id": "SE_lADOABII587SQUIqzwAAAAS9crTj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20358280419",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-18T09:59:25Z"
    },
    {
      "event": "labeled",
      "id": 20358493270,
      "node_id": "LE_lADOABII587SQUIqzwAAAAS9dfRW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20358493270",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-18T10:18:45Z",
      "label": {
        "name": "interfaces",
        "color": "83c9fc"
      }
    },
    {
      "event": "commented",
      "id": 3418203160,
      "node_id": "IC_kwDOABII587LvaQY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3418203160",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-18T10:41:07Z",
      "updated_at": "2025-10-18T10:41:07Z",
      "author_association": "MEMBER",
      "body": "And it was not syncing new blocks during `createNewBlock()`? That's the only thing it's expect to wait for, but only once at startup:\n\n```h\n   /**\n     * Construct a new block template.\n     *\n     * During node initialization, this will wait until the tip is connected.\n     *\n     * @param[in] options options for creating the block\n     * @retval BlockTemplate a block template.\n     * @retval std::nullptr if the node is shut down.\n     */\n    virtual std::unique_ptr<BlockTemplate> createNewBlock(const node::BlockCreateOptions& options = {}) = 0;\n```\n\ncc @ryanofsky ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33647#issuecomment-3418203160",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33647"
    },
    {
      "event": "mentioned",
      "id": 20358755646,
      "node_id": "MEE_lADOABII587SQUIqzwAAAAS9efU-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20358755646",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-18T10:41:09Z"
    },
    {
      "event": "subscribed",
      "id": 20358755650,
      "node_id": "SE_lADOABII587SQUIqzwAAAAS9efVC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20358755650",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-18T10:41:09Z"
    },
    {
      "event": "commented",
      "id": 3418442416,
      "node_id": "IC_kwDOABII587LwUqw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3418442416",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-18T13:39:55Z",
      "updated_at": "2025-10-18T13:39:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the clear steps to reproduce. I was able to see the rust client make the bitcoin node IPC hang very quickly (after around a minute) following them.\n\nIt seems like rust client is able to trigger a deadlock bug that was fixed in https://github.com/bitcoin-core/libmultiprocess/pull/201, and was backported in https://github.com/bitcoin/bitcoin/pull/33519 in the [30.x](https://github.com/bitcoin/bitcoin/commits/30.x) branch that was made after the [v30.0](https://github.com/bitcoin/bitcoin/commits/v30.0) tag.\n\nIf you build with the [30.x](https://github.com/bitcoin/bitcoin/commits/30.x) branch instead of the [v30.0](https://github.com/bitcoin/bitcoin/commits/v30.0) tag, I think it should fix this issue.\n\nI debugged the hang attaching with gdb (`sudo gdb build/bin/bitcoin-node <bitcoin-node pid>`) and running `thread apply all bt`. \n\nThe stack trace is below and shows the event loop thread (Thread 13) stuck trying to post an incoming request to worker thread (Thread 5), waiting to acquire the worker thread's `Waiter::m_mutex` mutex. It also shows the worker thread holding on to `Waiter::m_mutex` trying to run code on the event loop to destroy a `ProxyClient<Thread>` object.\n\nSo it's just a deadlock with two threads stuck waiting for each other, and it's the same deadlock that was fixed in https://github.com/bitcoin-core/libmultiprocess/pull/201.\n\n<details><summary>stack trace</summary>\n<p>\n\n```\nThread 13 (Thread 0x7f67fe9fe6c0 (LWP 3342614) \"b-capnp-loop\"):\n#0  0x00007f67ff69762f in __lll_lock_wait () from /nix/store/776irwlgfb65a782cxmyk61pck460fs9-glibc-2.40-66/lib/libc.so.6\n#1  0x00007f67ff69e1a1 in pthread_mutex_lock@@GLIBC_2.2.5 () from /nix/store/776irwlgfb65a782cxmyk61pck460fs9-glibc-2.40-66/lib/libc.so.6\n#2  0x000055977887f71c in __gthread_mutex_lock (__mutex=0x7f6774000e60) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/x86_64-unknown-linux-gnu/bits/gthr-default.h:762\n#3  0x00005597788a7306 in std::mutex::lock (this=0x7f6774000e60) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_mutex.h:113\n#4  0x00005597788c6b99 in std::unique_lock<std::mutex>::lock (this=0x7f67fe9faeb8) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/unique_lock.h:147\n#5  0x000055977907d519 in std::unique_lock<std::mutex>::unique_lock (this=0x7f67fe9faeb8, __m=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/unique_lock.h:73\n#6  0x0000559779207982 in post<(lambda at ./ipc/libmultiprocess/include/mp/type-context.h:67:19)> (this=0x7f6774000e60, fn=...) at ./ipc/libmultiprocess/include/mp/proxy-io.h:288\n\n   285      template <typename Fn>\n   286      void post(Fn&& fn)\n   287      {\n>  288          const std::unique_lock<std::mutex> lock(m_mutex);\n   289          assert(!m_fn);\n   290          m_fn = std::forward<Fn>(fn);\n   291          m_cv.notify_all();\n   292      }\n\n#7  0x0000559779207790 in operator() (this=0x7f67f0017950, perhaps=...) at ./ipc/libmultiprocess/include/mp/type-context.h:145\n\n   136      return server.m_context.connection->m_threads.getLocalServer(thread_client)\n   137          .then([&server, invoke = kj::mv(invoke), req](const kj::Maybe<Thread::Server&>& perhaps) mutable {\n   138              // Assuming the thread object is found, pass it a pointer to the\n   139              // `invoke` lambda above which will invoke the function on that\n   140              // thread.\n   141              KJ_IF_MAYBE (thread_server, perhaps) {\n   142                  const auto& thread = static_cast<ProxyServer<Thread>&>(*thread_server);\n   143                  server.m_context.loop->log()\n   144                      << \"IPC server post request  #\" << req << \" {\" << thread.m_thread_context.thread_name << \"}\";\n>  145                  thread.m_thread_context.waiter->post(std::move(invoke));\n   146              } else {\n   147                  server.m_context.loop->log()\n   148                      << \"IPC server error request #\" << req << \", missing thread to execute request\";\n   149                  throw std::runtime_error(\"invalid thread handle\");\n   150              }\n   151          })\n   152          // Wait for the invocation to finish before returning to the caller.\n   153          .then([invoke_wait = kj::mv(future.promise)]() mutable { return kj::mv(invoke_wait); });\n\n\n#8  0x000055977920c29e in apply<(lambda at ./ipc/libmultiprocess/include/mp/type-context.h:137:15)> (func=..., in=...) at /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/include/kj/async-prelude.h:179\n\n>  137          .then([&server, invoke = kj::mv(invoke), req](const kj::Maybe<Thread::Server&>& perhaps) mutable {\n\n#9  0x000055977920be8e in getImpl (this=0x7f67f0017930, output=...) at /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/include/kj/async-inl.h:739\n#10 0x00007f67fff18b4d in kj::_::TransformPromiseNodeBase::get(kj::_::ExceptionOrValue&) () from /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/lib/libkj-async.so.1.2.0\n#11 0x00007f67fff18f81 in kj::_::TransformPromiseNodeBase::getDepResult(kj::_::ExceptionOrValue&) () from /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/lib/libkj-async.so.1.2.0\n#12 0x000055977920ce0e in getImpl (this=0x7f67f0017900, output=...) at /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/include/kj/async-inl.h:733\n#13 0x00007f67fff18b4d in kj::_::TransformPromiseNodeBase::get(kj::_::ExceptionOrValue&) () from /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/lib/libkj-async.so.1.2.0\n#14 0x00007f67fff1a249 in kj::_::ChainPromiseNode::fire() () from /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/lib/libkj-async.so.1.2.0\n#15 0x00007f67fff1a9d2 in non-virtual thunk to kj::_::ChainPromiseNode::fire() () from /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/lib/libkj-async.so.1.2.0\n#16 0x00007f67fff1de8c in kj::_::waitImpl(kj::Own<kj::_::PromiseNode, kj::_::PromiseDisposer>&&, kj::_::ExceptionOrValue&, kj::WaitScope&, kj::SourceLocation)::$_2::operator()() const () from /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/lib/libkj-async.so.1.2.0\n#17 0x00007f67fff16dd8 in kj::_::waitImpl(kj::Own<kj::_::PromiseNode, kj::_::PromiseDisposer>&&, kj::_::ExceptionOrValue&, kj::WaitScope&, kj::SourceLocation) () from /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/lib/libkj-async.so.1.2.0\n#18 0x000055977963860c in kj::Promise<unsigned long>::wait (this=0x7f67fe9fd620, waitScope=..., location=...) at /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/include/kj/async-inl.h:1357\n#19 0x0000559779632555 in mp::EventLoop::loop (this=0x55979fb711b8) at ./ipc/libmultiprocess/src/mp/proxy.cpp:231\n\n   230      for (;;) {\n>  231          const size_t read_bytes = wait_stream->read(&buffer, 0, 1).wait(m_io_context.waitScope);\n   232          if (read_bytes != 1) throw std::logic_error(\"EventLoop wait_stream closed unexpectedly\");\n\n#20 0x000055977906e799 in ipc::capnp::(anonymous namespace)::CapnpProtocol::startLoop(char const*)::{lambda()#1}::operator()() const (this=0x55979fb7cf98) at ./ipc/capnp/protocol.cpp:96\n\n    91          m_loop_thread = std::thread([&] {\n    92              util::ThreadRename(\"capnp-loop\");\n    93              m_loop.emplace(exe_name, &IpcLogFn, &m_context);\n    94              m_loop_ref.emplace(*m_loop);\n    95              promise.set_value();\n>   96              m_loop->loop();\n    97              m_loop.reset();\n    98          });\n\n#21 0x000055977906e672 in std::__invoke_impl<void, ipc::capnp::(anonymous namespace)::CapnpProtocol::startLoop(char const*)::{lambda()#1}>(std::__invoke_other, ipc::capnp::(anonymous namespace)::CapnpProtocol::startLoop(char const*)::{lambda()#1}&&) (__f=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/invoke.h:61\n#22 0x000055977906e5d2 in std::__invoke<ipc::capnp::(anonymous namespace)::CapnpProtocol::startLoop(char const*)::{lambda()#1}>(ipc::capnp::(anonymous namespace)::CapnpProtocol::startLoop(char const*)::{lambda()#1}&&) (__fn=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/invoke.h:96\n#23 0x000055977906e58a in std::thread::_Invoker<std::tuple<ipc::capnp::(anonymous namespace)::CapnpProtocol::startLoop(char const*)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x55979fb7cf98) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_thread.h:301\n#24 0x000055977906e532 in std::thread::_Invoker<std::tuple<ipc::capnp::(anonymous namespace)::CapnpProtocol::startLoop(char const*)::{lambda()#1}> >::operator()() (this=0x55979fb7cf98) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_thread.h:308\n#25 0x000055977906e3da in std::thread::_State_impl<std::thread::_Invoker<std::tuple<ipc::capnp::(anonymous namespace)::CapnpProtocol::startLoop(char const*)::{lambda()#1}> > >::_M_run() (this=0x55979fb7cf90) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_thread.h:253\n#26 0x00007f67ffaed064 in execute_native_thread_routine () from /nix/store/41ym1jm1b7j3rhglk82gwg9jml26z1km-gcc-14.3.0-lib/lib/libstdc++.so.6\n#27 0x00007f67ff69a97a in start_thread () from /nix/store/776irwlgfb65a782cxmyk61pck460fs9-glibc-2.40-66/lib/libc.so.6\n#28 0x00007f67ff722d2c in __clone3 () from /nix/store/776irwlgfb65a782cxmyk61pck460fs9-glibc-2.40-66/lib/libc.so.6\n\nThread 5 (Thread 0x7f677a7fc6c0 (LWP 3343266) \"b-capnp-loop\"):\n#0  0x00007f67ff697389 in __futex_abstimed_wait_common () from /nix/store/776irwlgfb65a782cxmyk61pck460fs9-glibc-2.40-66/lib/libc.so.6\n#1  0x00007f67ff699e1e in pthread_cond_wait@@GLIBC_2.3.2 () from /nix/store/776irwlgfb65a782cxmyk61pck460fs9-glibc-2.40-66/lib/libc.so.6\n#2  0x0000559779632ecb in std::condition_variable::wait<mp::EventLoop::post(kj::Function<void ()>)::$_2>(std::unique_lock<std::mutex>&, mp::EventLoop::post(kj::Function<void ()>)::$_2) (this=0x55979fb71230, __lock=..., __p=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/condition_variable:105\n#3  0x0000559779632cb7 in mp::EventLoop::post (this=0x55979fb711b8, fn=...) at ./ipc/libmultiprocess/src/mp/proxy.cpp:273\n\n   258  void EventLoop::post(kj::Function<void()> fn)\n   259  {\n   260      if (std::this_thread::get_id() == m_thread_id) {\n   261          fn();\n   262          return;\n   263      }\n   264      Lock lock(m_mutex);\n   265      EventLoopRef ref(*this, &lock);\n   266      m_cv.wait(lock.m_lock, [this]() MP_REQUIRES(m_mutex) { return m_post_fn == nullptr; });\n   267      m_post_fn = &fn;\n   268      int post_fd{m_post_fd};\n   269      Unlock(lock, [&] {\n   270          char buffer = 0;\n   271          KJ_SYSCALL(write(post_fd, &buffer, 1));\n   272      });\n>  273      m_cv.wait(lock.m_lock, [this, &fn]() MP_REQUIRES(m_mutex) { return m_post_fn != &fn; });\n   274  }\n\n#4  0x0000559779641ea7 in mp::EventLoop::sync<mp::ProxyClientBase<mp::Thread, capnp::Void>::ProxyClientBase(mp::Thread::Client, mp::Connection*, bool)::{lambda()#2}::operator()() const::{lambda()#1}>(mp::ProxyClientBase<mp::Thread, capnp::Void>::ProxyClientBase(mp::Thread::Client, mp::Connection*, bool)::{lambda()#2}::operator()() const::{lambda()#1}&&) (this=0x55979fb711b8, callable=...) at ./ipc/libmultiprocess/include/mp/proxy-io.h:192\n\n   186      //! Wrapper around EventLoop::post that takes advantage of the\n   187      //! fact that callable will not go out of scope to avoid requirement that it\n   188      //! be copyable.\n   189      template <typename Callable>\n   190      void sync(Callable&& callable)\n   191      {\n>  192          post(std::forward<Callable>(callable));\n   193      }\n\n#5  0x0000559779641df9 in mp::ProxyClientBase<mp::Thread, capnp::Void>::ProxyClientBase(mp::Thread::Client, mp::Connection*, bool)::{lambda()#2}::operator()() const (this=0x7f675c004110) at ./ipc/libmultiprocess/include/mp/proxy-io.h:444\n\n   435      m_context.cleanup_fns.emplace_front([this, destroy_connection, disconnect_cb]{\n   436      {\n   437          // If the capnp interface defines a destroy method, call it to destroy\n   438          // the remote object, waiting for it to be deleted server side. If the\n   439          // capnp interface does not define a destroy method, this will just call\n   440          // an empty stub defined in the ProxyClientBase class and do nothing.\n   441          Sub::destroy(*this);\n   442\n   443          // FIXME: Could just invoke removed addCleanup fn here instead of duplicating code\n>  444          m_context.loop->sync([&]() {\n\n#6  0x0000559779641d66 in std::__invoke_impl<void, mp::ProxyClientBase<mp::Thread, capnp::Void>::ProxyClientBase(mp::Thread::Client, mp::Connection*, bool)::{lambda()#2}&>(std::__invoke_other, mp::ProxyClientBase<mp::Thread, capnp::Void>::ProxyClientBase(mp::Thread::Client, mp::Connection*, bool)::{lambda()#2}&) (__f=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/invoke.h:61\n#7  0x0000559779641cb6 in std::__invoke_r<void, mp::ProxyClientBase<mp::Thread, capnp::Void>::ProxyClientBase(mp::Thread::Client, mp::Connection*, bool)::{lambda()#2}&>(mp::ProxyClientBase<mp::Thread, capnp::Void>::ProxyClientBase(mp::Thread::Client, mp::Connection*, bool)::{lambda()#2}&) (__fn=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/invoke.h:111\n#8  0x0000559779641ade in std::_Function_handler<void (), mp::ProxyClientBase<mp::Thread, capnp::Void>::ProxyClientBase(mp::Thread::Client, mp::Connection*, bool)::{lambda()#2}>::_M_invoke(std::_Any_data const&) (__functor=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_function.h:290\n#9  0x0000559778b04a31 in std::function<void()>::operator() (this=0x7f677a7faec8) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_function.h:591\n#10 0x000055977907f2e9 in mp::CleanupRun (fns=empty std::__cxx11::list) at ./ipc/libmultiprocess/include/mp/proxy.h:43\n\n    39  inline void CleanupRun(CleanupList& fns) {\n    40      while (!fns.empty()) {\n    41          auto fn = std::move(fns.front());\n    42          fns.pop_front();\n>   43          fn();\n    44      }\n    45  }\n\n#11 0x0000559779638e3e in mp::ProxyClientBase<mp::Thread, capnp::Void>::~ProxyClientBase (this=0x7f6774000fb8) at ./ipc/libmultiprocess/include/mp/proxy-io.h:470\n\n   467  template <typename Interface, typename Impl>\n   468  ProxyClientBase<Interface, Impl>::~ProxyClientBase() noexcept\n   469  {\n>  470      CleanupRun(m_context.cleanup_fns);\n   471  }\n\n#12 0x00005597796335ba in mp::ProxyClient<mp::Thread>::~ProxyClient (this=0x7f6774000fb8) at ./ipc/libmultiprocess/src/mp/proxy.cpp:341\n\n   333  ProxyClient<Thread>::~ProxyClient()\n   334  {\n   335      // If thread is being destroyed before connection is destroyed, remove the\n   336      // cleanup callback that was registered to handle the connection being\n   337      // destroyed before the thread being destroyed.\n   338      if (m_disconnect_cb) {\n   339          m_context.connection->removeSyncCleanup(*m_disconnect_cb);\n   340      }\n>  341  }\n\n#13 0x00005597790dfd9a in std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> >::~pair (this=0x7f6774000fb0) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_iterator.h:3013\n#14 0x00005597790dfd46 in std::destroy_at<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > (__location=0x7f6774000fb0) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_construct.h:88\n#15 0x00005597790dfbe6 in std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > > >::destroy<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > (__a=..., __p=0x7f6774000fb0) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/alloc_traits.h:599\n#16 std::_Rb_tree<mp::Connection*, std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> >, std::_Select1st<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > >, std::less<mp::Connection*>, std::allocator<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > >::_M_destroy_node (this=0x7f677a7fc5f8, __p=0x7f6774000f90) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_tree.h:621\n#17 0x00005597790dfb52 in std::_Rb_tree<mp::Connection*, std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> >, std::_Select1st<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > >, std::less<mp::Connection*>, std::allocator<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > >::_M_drop_node (this=0x7f677a7fc5f8, __p=0x7f6774000f90) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_tree.h:629\n#18 0x00005597790dfaef in std::_Rb_tree<mp::Connection*, std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> >, std::_Select1st<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > >, std::less<mp::Connection*>, std::allocator<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > >::_M_erase (this=0x7f677a7fc5f8, __x=0x7f6774000f90) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_tree.h:1934\n#19 0x00005597790df956 in std::_Rb_tree<mp::Connection*, std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> >, std::_Select1st<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > >, std::less<mp::Connection*>, std::allocator<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > >::clear (this=0x7f677a7fc5f8) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_tree.h:1251\n#20 0x00005597790df13a in std::_Rb_tree<mp::Connection*, std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> >, std::_Select1st<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > >, std::less<mp::Connection*>, std::allocator<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > >::_M_erase_aux (this=0x7f677a7fc5f8, __first={...}, __last={...}) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_tree.h:2505\n#21 0x00005597790dee4a in std::_Rb_tree<mp::Connection*, std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> >, std::_Select1st<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > >, std::less<mp::Connection*>, std::allocator<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > >::erase (this=0x7f677a7fc5f8, __x=@0x7f675c006e98: 0x7f67f0001dc0) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_tree.h:2519\n#22 0x00005597790ded9e in std::map<mp::Connection*, mp::ProxyClient<mp::Thread>, std::less<mp::Connection*>, std::allocator<std::pair<mp::Connection* const, mp::ProxyClient<mp::Thread> > > >::erase (this=0x7f677a7fc5f8, __x=@0x7f675c006e98: 0x7f67f0001dc0) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/stl_map.h:1118\n#23 0x0000559779209e1f in operator() (this=0x7f677a7fb248) at ./ipc/libmultiprocess/include/mp/type-context.h:103\n\n>  103                      KJ_DEFER(if (erase_thread) {\n   104                          std::unique_lock<std::mutex> lock(thread_context.waiter->m_mutex);\n   105                          // Call erase here with a Connection* argument instead\n   106                          // of an iterator argument, because the `request_thread`\n   107                          // iterator may be invalid if the connection is closed\n   108                          // during this function call. More specifically, the\n   109                          // iterator may be invalid because SetThread adds a\n   110                          // cleanup callback to the Connection destructor that\n   111                          // erases the thread from the map, and also because the\n   112                          // ProxyServer<Thread> destructor calls\n   113                          // request_threads.clear().\n   114                          request_threads.erase(server.m_context.connection);\n   115                      });\n   116                      fn.invoke(server_context, args...);\n   117                  }\n\n#24 0x0000559779209bad in run (this=0x7f677a7fb3b0) at /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/include/kj/common.h:2010\n#25 0x000055977920865a in ~Deferred (this=0x7f677a7fb3b0) at /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/include/kj/common.h:1999\n#26 0x0000559779208182 in operator() (this=0x7f6760001088) at ./ipc/libmultiprocess/include/mp/type-context.h:117\n\n   116                      fn.invoke(server_context, args...);\n>  117                  }\n\n#27 0x0000559779207f5a in operator() (this=0x7f6760001080) at /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/include/kj/function.h:142\n#28 0x0000559779097881 in kj::Function<void()>::operator() (this=0x7f677a7fb878) at /nix/store/6inpywqa7f4njlq1i0bmkznxn5y5x69g-capnproto-1.2.0/include/kj/function.h:119\n#29 0x0000559779097567 in mp::Unlock<std::unique_lock<std::mutex>, kj::Function<void()>&> (lock=..., callback=...) at ./ipc/libmultiprocess/include/mp/util.h:198\n#30 0x00005597796367c6 in mp::Waiter::wait<mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const::{lambda()#1}>(std::unique_lock<std::mutex>&, mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const::{lambda()#1})::{lambda()#1}::operator()() const (this=0x7f677a7fb8e0) at ./ipc/libmultiprocess/include/mp/proxy-io.h:306\n\n   294      template <class Predicate>\n   295      void wait(std::unique_lock<std::mutex>& lock, Predicate pred)\n   296      {\n   297          m_cv.wait(lock, [&] {\n   298              // Important for this to be \"while (m_fn)\", not \"if (m_fn)\" to avoid\n   299              // a lost-wakeup bug. A new m_fn and m_cv notification might be sent\n   300              // after the fn() call and before the lock.lock() call in this loop\n   301              // in the case where a capnp response is sent and a brand new\n   302              // request is immediately received.\n   303              while (m_fn) {\n   304                  auto fn = std::move(*m_fn);\n   305                  m_fn.reset();\n>  306                  Unlock(lock, fn);\n   307              }\n   308              const bool done = pred();\n   309              return done;\n   310          });\n   311      }\n\n#31 0x0000559779636706 in std::condition_variable::wait<mp::Waiter::wait<mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const::{lambda()#1}>(std::unique_lock<std::mutex>&, mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const::{lambda()#1})::{lambda()#1}>(std::unique_lock<std::mutex>&, mp::Waiter::wait<mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const::{lambda()#1}>(std::unique_lock<std::mutex>&, mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const::{lambda()#1})::{lambda()#1}) (this=0x7f6774000e88, __lock=..., __p=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/condition_variable:104\n#32 0x0000559779636637 in mp::Waiter::wait<mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const::{lambda()#1}>(std::unique_lock<std::mutex>&, mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const::{lambda()#1}) (this=0x7f6774000e60, lock=..., pred=...) at ./ipc/libmultiprocess/include/mp/proxy-io.h:297\n#33 0x00005597796364e9 in mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0::operator()() const (this=0x7f67f00188c8) at ./ipc/libmultiprocess/src/mp/proxy.cpp:404\n#34 0x0000559779636332 in std::__invoke_impl<void, mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0>(std::__invoke_other, mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0&&) (__f=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/invoke.h:61\n#35 0x0000559779636292 in std::__invoke<mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0>(mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0&&) (__fn=...) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/invoke.h:96\n#36 0x000055977963624a in std::thread::_Invoker<std::tuple<mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0> >::_M_invoke<0ul> (this=0x7f67f00188c8) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_thread.h:301\n#37 0x00005597796361f2 in std::thread::_Invoker<std::tuple<mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0> >::operator() (this=0x7f67f00188c8) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_thread.h:308\n#38 0x0000559779635efa in std::thread::_State_impl<std::thread::_Invoker<std::tuple<mp::ProxyServer<mp::ThreadMap>::makeThread(capnp::CallContext<mp::ThreadMap::MakeThreadParams, mp::ThreadMap::MakeThreadResults>)::$_0> > >::_M_run (this=0x7f67f00188c0) at /nix/store/82kmz7r96navanrc2fgckh2bamiqrgsw-gcc-14.3.0/include/c++/14.3.0/bits/std_thread.h:253\n#39 0x00007f67ffaed064 in execute_native_thread_routine () from /nix/store/41ym1jm1b7j3rhglk82gwg9jml26z1km-gcc-14.3.0-lib/lib/libstdc++.so.6\n#40 0x00007f67ff69a97a in start_thread () from /nix/store/776irwlgfb65a782cxmyk61pck460fs9-glibc-2.40-66/lib/libc.so.6\n#41 0x00007f67ff722d2c in __clone3 () from /nix/store/776irwlgfb65a782cxmyk61pck460fs9-glibc-2.40-66/lib/libc.so.6\n```\n\n</p>\n</details>\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33647#issuecomment-3418442416",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33647"
    }
  ]
}
{
  "type": "issue",
  "issue": {
    "id": 3542617139,
    "node_id": "I_kwDOABII587TKAwz",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33684",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33684/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33684/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33684/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/33684",
    "number": 33684,
    "state": "open",
    "state_reason": null,
    "title": "Async Payjoin",
    "body": "This issue is for the tracking and brainstorming of the implementation of [BIP 77 Async Payjoin](https://github.com/bitcoin/bips) into the wallet.\n\n***\n\n- [ ] HPKE #32617 \n- [ ] The rest :)\n\n***\n\nAsync Payjoin utilizes an external Directory server to allow the Sender and Receiver to communicate with each other without needing to operate any infrastructure. The servers are reached using [RFC 9458 Oblivious HTTP (OHTTP)](https://www.ietf.org/rfc/rfc9458.html) relays to avoid revealing the IPs of the Sender and Receiver to the Directory. All communication between the Sender or Recevier to the OHTTP Relay is encrypted, as described in the OHTTP RFC. Additionally, the payload data itself is encrypted with methodology similar to OHTTP to prevent the Directory from being able to read the transaction data.\n\nThe cryptography uses things that we already have in the project. Specifically, all keys used are EC keys on secp256k1, keys are exchanged using DH, and encryption is done with ChaCha20Poly1305. Pubkeys included directly in the payload (ephemeral keys used to do additional key exchanges for responses) are encoded with ElligatorSwift. All of these algorithms are already included in the project to support BIP 324, so it should not be difficult to reuse them for Async Payjoin.\n\nOHTTP itself is encrypted using the aforementioned cryptography. It uses plain HTTP, not HTTPS, so there is no need to include anything related to TLS.\n\n***\n\nThe general operation of Async Payjoin is:\n1. The Receiver produces a Bitcoin URI containing a parameter which includes the URL of a mailbox endpoint on a Directory server (i.e. some URL for the Sender to POST to). The URL additionally contains the public key of the Directory itself, and an ephemeral(ish)public key of the Receiver.\n2. The Receiver provides the URI to the Sender out of band.\n3. The Sender generates an ephemeral public key, performs a key exchange with the Receiver's ephemeral key to compute a shared secret. This shared secret is used with ChaCha20-Poly1305 to encrypt:\n   * A new ephemeral pubkey for the key exchange for the reply (Reply Key)\n   * The Original PSBT which pays the receiver\n4. The Sender connects to the specified Directory server via a OHTTP Relay, performing a DH key exchange with the Directory public key, and encrypting the ElligatorSwift encoding of their Reply Key and the encrypted payload produced in the previous step. The payload is POSTed to the specified mailbox endpoint.\n5. The Receiver polls the Directory server at the mailbox endpoint until it receives the Sender's payload.\n6. The Receiver performs DHKE with the Sender's ephemeral key, then decrypts the encrypted payload.\n7. The Receiver produces a Proposal PSBT which is the Sender's Original PSBT modified with the Receiver's inputs and outputs, as well as any necessary signatures and witnesses.\n8. The Receiver generates a new ephemeral key to perform DHKE with the Sender's Reply Key, and uses the shared secret to encrypt their Proposal PSBT\n9. The Receiver connects to the previously specified Directory via a OHTTP Relay, and provides an encapsulated payload of the ElligatorSwift encoding of their ephemeral key. The payload is POSTed to a new mailbox endpoint derived from the Sender's Reply Key.\n10. The Sender polls the Directory server at the mailbox endpoint derived from their Reply Key until it receives the Receiver's payload.\n11. The Sender performs DHKE with the Receiver's new ephemeral key, decrypts the Proposal PSBT, validates and signs it. The Sender broadcasts the final transaction.\n\nAdditionally, the original Bitcoin URI contains an expiration time. This is used by both the Sender and Receiver to have a timeout on polling the Directory. The Receiver can also broadcast the Original PSBT and the Sender should stop polling if it sees that be broadcast.\n\n***\n\nThere are a few questions that need to be answered for implementing Async Payjoin\n\n* If we are the Receiver, how do we get the pubkey of the Directory. Some suggestions are:\n  * The user gets it out of band somehow\n  * OHTTP specifies a way to do key discovery by querying the server directly without OHTTP. But this both requires TLS, and reveals our IP unless some other IP hiding method is used.\n  * A set of keys are hard coded into the software. (ew)\n* How do we choose which OHTTP relay to use?\n* What is the polling interval?\n* What shows in the GUI when we are waiting for and polling the Directory, for both Receivers and Senders?\n* We should not be automatically signing transactions for our users:\n  * How will Senders using the GUI be notified and prompted when a reply is received so that the PSBT can be signed?\n  * How will Senders using the CLI know when a reply was received and that a PSBT needs to be signed?",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 1,
    "created_at": "2025-10-22T23:06:58Z",
    "updated_at": "2025-10-24T12:49:13Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 3434583092,
      "node_id": "IC_kwDOABII587Mt5Q0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3434583092",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-22T23:51:23Z",
      "updated_at": "2025-10-22T23:51:23Z",
      "author_association": "NONE",
      "body": "There are a few questions that need to be answered for implementing Async Payjoin\n\n> - If we are the Receiver, how do we get the pubkey of the Directory. Some suggestions are:\n>   -  The user gets it out of band somehow\n\nI think getting the keys from another receiver's URI was the simple out of band bootstrap mechanism @nothingmuch and I had in mind. The Payjoin URI shared by a receiver contains the OHTTP Key Config (\"pubkey of the directory.\") Cache that key and allow receiving to that directory from then on until the expiration. Before expiration, attempt to fetch updated keys close to the expiration period using OHTTP requests to the `.well-known/ohttp-gateway` endpoint after that first fetch.\n\n> - How do we choose which OHTTP relay to use?\n\nProbably hard code some options like is done for DNS seeds, and then allow configuration. You can see how this is done as of today in our reference implementation's [`RelayManager`](https://github.com/payjoin/rust-payjoin/commit/48712bd15f6cb42794435f0706de7966174a318c).\n\n> - What is the polling interval?\n\nThe reference uses long polling, so the directory won't return a result for the timeout and polling does not wait at all. The default is 30 seconds (https://github.com/payjoin/rust-payjoin/blob/3e30f4ed37d91daa2add446bf8b7eaeadbb71d3f/payjoin-directory/src/config.rs#L83). I can make an edit to BIP 77 to include this recommendation since a typical forced timeout for http requests with many clients is 1 minute.\n\n> -  What shows in the GUI when we are waiting for and polling the Directory, for both Receivers and Senders?\n\n\"Pending\" + The expiration time +  the ability to unilaterally broadcast the fallback.  our reference [payjoin-cli `history`](https://github.com/payjoin/rust-payjoin/blob/3e30f4ed37d91daa2add446bf8b7eaeadbb71d3f/payjoin-cli/src/app/v2/mod.rs#L329) subcommand shows these as well as historic error states.\n\n> - We should not be automatically signing transactions for our users:\n\nMy thinking here is that authorization for a given transaction within a timeframe with fee rate is what's done on the first signing for a sender, and another prompt is not strictly necessary as long as appropriate checks pass, but otherwise perhaps a prompt to action does need to be shown.\n\n>   - How will Senders using the GUI be notified and prompted when a reply is received so that the PSBT can be signed?\n\nTBD\n\n>   - How will Senders using the CLI know when a reply was received and that a PSBT needs to be signed?\n\nOther than looking at [payjoin-cli `history`](https://github.com/payjoin/rust-payjoin/blob/3e30f4ed37d91daa2add446bf8b7eaeadbb71d3f/payjoin-cli/src/app/v2/mod.rs#L329) for inspiration TBD. Perhaps then a `resume` command could be issued from the CLI.\n\n\n",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33684#issuecomment-3434583092",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33684"
    },
    {
      "event": "mentioned",
      "id": 20442267777,
      "node_id": "MEE_lADOABII587TKAwzzwAAAATCdECB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20442267777",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-22T23:51:24Z"
    },
    {
      "event": "subscribed",
      "id": 20442267784,
      "node_id": "SE_lADOABII587TKAwzzwAAAATCdECI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20442267784",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-22T23:51:24Z"
    },
    {
      "event": "unsubscribed",
      "id": 20442314758,
      "node_id": "UE_lADOABII587TKAwzzwAAAATCdPgG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20442314758",
      "actor": {
        "login": "raulsntos",
        "id": 3903059,
        "node_id": "MDQ6VXNlcjM5MDMwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3903059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/raulsntos",
        "html_url": "https://github.com/raulsntos",
        "followers_url": "https://api.github.com/users/raulsntos/followers",
        "following_url": "https://api.github.com/users/raulsntos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/raulsntos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/raulsntos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/raulsntos/subscriptions",
        "organizations_url": "https://api.github.com/users/raulsntos/orgs",
        "repos_url": "https://api.github.com/users/raulsntos/repos",
        "events_url": "https://api.github.com/users/raulsntos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/raulsntos/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-22T23:57:26Z"
    },
    {
      "event": "subscribed",
      "id": 20442314803,
      "node_id": "SE_lADOABII587TKAwzzwAAAATCdPgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20442314803",
      "actor": {
        "login": "raulsntos",
        "id": 3903059,
        "node_id": "MDQ6VXNlcjM5MDMwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3903059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/raulsntos",
        "html_url": "https://github.com/raulsntos",
        "followers_url": "https://api.github.com/users/raulsntos/followers",
        "following_url": "https://api.github.com/users/raulsntos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/raulsntos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/raulsntos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/raulsntos/subscriptions",
        "organizations_url": "https://api.github.com/users/raulsntos/orgs",
        "repos_url": "https://api.github.com/users/raulsntos/repos",
        "events_url": "https://api.github.com/users/raulsntos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/raulsntos/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-22T23:57:26Z"
    },
    {
      "event": "subscribed",
      "id": 20447992541,
      "node_id": "SE_lADOABII587TKAwzzwAAAATCy5rd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20447992541",
      "actor": {
        "login": "nervana21",
        "id": 205626986,
        "node_id": "U_kgDODEGeag",
        "avatar_url": "https://avatars.githubusercontent.com/u/205626986?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nervana21",
        "html_url": "https://github.com/nervana21",
        "followers_url": "https://api.github.com/users/nervana21/followers",
        "following_url": "https://api.github.com/users/nervana21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nervana21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nervana21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nervana21/subscriptions",
        "organizations_url": "https://api.github.com/users/nervana21/orgs",
        "repos_url": "https://api.github.com/users/nervana21/repos",
        "events_url": "https://api.github.com/users/nervana21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nervana21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-23T08:11:20Z"
    },
    {
      "event": "comment_deleted",
      "id": 20483060923,
      "node_id": "CDE_lADOABII587TKAwzzwAAAATE4rS7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20483060923",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T12:49:12Z"
    }
  ]
}
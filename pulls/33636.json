{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636",
    "id": 2918962844,
    "node_id": "PR_kwDOABII586t-9ac",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33636",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33636.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33636.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33636",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33636/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/73a5d9315340942f030e6586c640b9240498f8ac",
    "number": 33636,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "wallet: Expand MuSig test coverage and follow-ups",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a follow-up to #29675 and primarily adds test coverage for some of the most prominent failure cases in the first commit. \r\n\r\nThe following commits address a few left-over nit comments that didn't make it in before merge.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/74",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/74",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/74/labels",
      "id": 12610874,
      "node_id": "MI_kwDOABII584AwG06",
      "number": 74,
      "state": "open",
      "title": "31.0",
      "creator": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 8,
      "closed_issues": 1,
      "created_at": "2025-03-25T18:44:16Z",
      "updated_at": "2025-10-16T16:14:16Z"
    },
    "created_at": "2025-10-16T00:02:51Z",
    "updated_at": "2025-10-17T14:33:47Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "1780f8dd52aff266d48090c1ea7120196836b81c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "fjahr:202510-musig-test",
      "ref": "202510-musig-test",
      "sha": "73a5d9315340942f030e6586c640b9240498f8ac",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 196253948,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTYyNTM5NDg=",
        "name": "bitcoin",
        "full_name": "fjahr/bitcoin",
        "owner": {
          "login": "fjahr",
          "id": 1322187,
          "node_id": "MDQ6VXNlcjEzMjIxODc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fjahr",
          "html_url": "https://github.com/fjahr",
          "followers_url": "https://api.github.com/users/fjahr/followers",
          "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
          "organizations_url": "https://api.github.com/users/fjahr/orgs",
          "repos_url": "https://api.github.com/users/fjahr/repos",
          "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/fjahr/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/fjahr/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/fjahr/bitcoin",
        "archive_url": "https://api.github.com/repos/fjahr/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/fjahr/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/fjahr/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/fjahr/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/fjahr/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/fjahr/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/fjahr/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/fjahr/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/fjahr/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/fjahr/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/fjahr/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/fjahr/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/fjahr/bitcoin/events",
        "forks_url": "https://api.github.com/repos/fjahr/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/fjahr/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/fjahr/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/fjahr/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/fjahr/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/fjahr/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/fjahr/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/fjahr/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/fjahr/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/fjahr/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/fjahr/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/fjahr/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/fjahr/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/fjahr/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/fjahr/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/fjahr/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:fjahr/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/fjahr/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/fjahr/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/fjahr/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/fjahr/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/fjahr/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/fjahr/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/fjahr/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/fjahr/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/fjahr/bitcoin/hooks",
        "svn_url": "https://github.com/fjahr/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 279719,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-15T23:58:54Z",
        "created_at": "2019-07-10T18:11:06Z",
        "updated_at": "2024-07-23T22:14:45Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e14451ac87339ed61b8c872f027184a978dd96eb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38040,
        "stargazers_count": 86244,
        "watchers_count": 86244,
        "size": 295040,
        "default_branch": "master",
        "open_issues_count": 817,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-17T14:16:11Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-17T14:16:20Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 189,
    "deletions": 16,
    "changed_files": 5,
    "commits": 5,
    "review_comments": 5,
    "comments": 1
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM3YzlkYzJkODYzNGJjNzllNzY3ODNiZTExM2Y4ZDQyY2VlNjNjNmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
      "tree": {
        "sha": "0e9428ce0564ca7dbc737464464a5b929c700640",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e9428ce0564ca7dbc737464464a5b929c700640"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0e9428ce0564ca7dbc737464464a5b929c700640\nparent 40e7d4cd0d7f1d922b92b0c640d3d89eef059411\nauthor Fabian Jahr <fjahr@protonmail.com> 1759346602 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1760527294 +0200\n\ntest: Add musig failure scenarios\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmjvg74VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNe6UP/1Gb53296NzoGtrQCn+/J1wCXIay\nHrhYWibeqZzHSVTQjuZYRy32+ptyubv/UbhMSriXF1r4R+QTzmjjP9rSVreZG/UP\n2VWbiDkxHQE+JOdjACEkVJ6nbhYflxZgSoNPwchPjFY/BkL1wqfEr7WconSC5G1w\nBCWfOGkhQzdk6iabUFQuZqRaraSQR+3aww2NUoLK81b4Vln3S1ubiI4H55uJV1en\nQlgC8Se7xkQw2Fei2CzoXWWCTIOaVMgRXNijZwxi698VnhM6bZROFBa1GKQWXF1J\nsFPer7JnvWmLcLnrhfdDdYTAse8ikc5iJJw5MmUZIEy1qv/xPhwSvGvKXZaKvOmi\nabbZJacxQyuCNivPCpFvA0sk2tNWpANfBsZhEsHQOEjwq7mwC+CIDAylFlZOzSXi\nDI/uTYdK9V1rdR9sfGyfk/P9s5kNu21sPZO0IHCZzLwjfWYNzJFQ/hAYV7pk6TcA\nakrKs0zQM8Sekp0UU+aULRrkrWf3pTDHICwSOLj+AF0bdhoJzJlzViQwQU4bf5hr\nmWghKwgP/Zp9P7Zm/rJErA/r3M+DLdbIEnGZ8L0ICmv5/QLxwTuX5H1/WofPY2V+\nIk3jFC7w2Mpc0h9+DSi44TqbfZ3S/5Hps8J7WDK8GZ6sz0IgpAfONxaeOqMQdn9U\ntB5rYIKOiv/mK5YI\n=CGoT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40e7d4cd0d7f1d922b92b0c640d3d89eef059411",
          "sha": "40e7d4cd0d7f1d922b92b0c640d3d89eef059411",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/40e7d4cd0d7f1d922b92b0c640d3d89eef059411"
        }
      ],
      "message": "test: Add musig failure scenarios",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T11:21:34Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-01T19:23:22Z"
      },
      "sha": "c7c9dc2d8634bc79e76783be113f8d42cee63c6e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjNTdhYWJkMWU0YjI4ZTlkNTE4NTM1NjgxNTE5OWEwMDJmZmI0ZTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c57aabd1e4b28e9d5185356815199a002ffb4e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1c57aabd1e4b28e9d5185356815199a002ffb4e1",
      "tree": {
        "sha": "64456174c9a8da03f2409203ebab942b8386c458",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64456174c9a8da03f2409203ebab942b8386c458"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 64456174c9a8da03f2409203ebab942b8386c458\nparent c7c9dc2d8634bc79e76783be113f8d42cee63c6e\nauthor Fabian Jahr <fjahr@protonmail.com> 1760567696 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1760572715 +0200\n\ntest: Change non-constant variable to lower case\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmjwNS0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNYKQP/03xTGUynqEJiOM0P7+P8Mrry0vH\n8EhUE9PuQCqo2n5CwLpkvvsnQ0JNDFcRkT3Hkjq8r4ezFgjfpyB0dlwusgBWwe/s\n//0U5JbD/UZtWmlLx8bHRGhfaQDnnj7vlXYhHKVjzY28R4w2ANo7yRpzJMACYlD2\ny74EgS+V6XNWiWPGpBXXTyWVIeB3pzSzzj1TZ+qALhi+fzk0GVztSebcdi3bcCQz\nLiIjuzn1gHoBHuPSDzgH01g/9s7AMz43w3K2eL+EvA63GB1SHEKPtdRPcmahwBSf\nbsaGsOtRgHwQP+P1YmAR4lqZ2fIrwswBPYdGIsGplgq67Cn8wz172dWstDSTwLi4\n6esd4NcbelgffUFforKPDDF6e55aV9y9KihMupVe89mDYMbGAT4t+zP0f3S7iD/Q\nGMoPHtuJvAkd1b0VbZ1Pgqet4yntMKQ0MmAh5H2HfmezzbeqUT45BiBPfxfz8ZXR\nP5Owie/BlBWzvvne9mcytSfeX1ALatJF5hPSU4wKLKaom2FkXF9N0+mf0esmUsJo\nsb5EUyTk0Yxy3XcIP0R8+0nDy+dwv2/aT/XqCDKZDmhkZNfxg2F20fGb52y/sOLV\n4jWZZbXQAkpPEU90h8USpjUa5qZyliCmyQuFKY1xGqveOgNKJtOIkdoklZWSiOgm\nyJWU3H2XOBDiiYJq\n=TvyO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
          "sha": "c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c7c9dc2d8634bc79e76783be113f8d42cee63c6e"
        }
      ],
      "message": "test: Change non-constant variable to lower case",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T23:58:35Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T22:34:56Z"
      },
      "sha": "1c57aabd1e4b28e9d5185356815199a002ffb4e1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMyYmI0ZGExOWNhZGVlZjZjOTU5Y2ZhMjRkNmU5NDAwODAwN2JjYzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2bb4da19cadeef6c959cfa24d6e94008007bcc9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c2bb4da19cadeef6c959cfa24d6e94008007bcc9",
      "tree": {
        "sha": "0f65ce7df83d86519a43ab9d4c730b6954ab2bb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f65ce7df83d86519a43ab9d4c730b6954ab2bb8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0f65ce7df83d86519a43ab9d4c730b6954ab2bb8\nparent 1c57aabd1e4b28e9d5185356815199a002ffb4e1\nauthor Fabian Jahr <fjahr@protonmail.com> 1760567842 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1760572717 +0200\n\nmusig: Move MUSIG_CHAINCODE to musig.cpp\n\nThis is the only place where it is used.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmjwNS0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNH9IP/1u4Rj9EclGVKIyVW+bJzTJ9gV9w\nPCKcB0sDnRQHrKxvE2IiXKM6SDJAAafAtjDvHN9gdAuZVDiq/qxOpR2y02dKgzZI\nRCy9hkPvic99ZkasUMcSCB8/XFy0EJkDro9k3Ak3YmripsHwiGMJuN9pIwhpjRwo\nuBuK/kJ9M+badOPfROZMNwu9gLt5VxE/MHhceuGhe9CYjMhmWUmPKSJ3rYmZxipe\n8LtfU2OjIZJgggi3dTguA5yZZ/nwNCxQBH4MQjPqO1N3NUQHFSRfCJiyUS/lA4S2\nC6eji2xnDNkvDkeUmlwXvfSpJf/8uBvCXUD+Mycwxq/ADzp5IBCHvtvuU72vIsSw\nPAmW6hRTDjBcpkRghZop85E3Fgpu+elmBYpKoazCjAG8iQe8f34HWOl3sRu8PKNR\nyp9rj8ccyxtohPrYGUpkHA0z8EJ5dOiojqHd3i00eOO519XzwZcGN8f1iNBU5rM+\n/rno0rGvTasGTZOCnYPFyjJXj3v+C1wkQWOxwTIoHQeA1LGBElwjPgAjvNZD5bMm\n9MAQ4inuMMucgUhHyrc0spksYBsIEVY5SEPV3RM4OwVZcnVGOy2AFYfAEyx+4qJK\n/2KJEwEn849kXwYePmWwtavGYmjrnQ0/taQH8lgAwHtPHWBVlvzWiCyutIrwRLgc\nYKQBt3Ey3n25RJga\n=vxgg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c57aabd1e4b28e9d5185356815199a002ffb4e1",
          "sha": "1c57aabd1e4b28e9d5185356815199a002ffb4e1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1c57aabd1e4b28e9d5185356815199a002ffb4e1"
        }
      ],
      "message": "musig: Move MUSIG_CHAINCODE to musig.cpp\n\nThis is the only place where it is used.",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T23:58:37Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T22:37:22Z"
      },
      "sha": "c2bb4da19cadeef6c959cfa24d6e94008007bcc9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIyZTQyZGE4ZTY5YjEyMmFjYmNhZTdhNzI4ZjBmYzk3MzA1MWJmNGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22e42da8e69b122acbcae7a728f0fc973051bf4c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/22e42da8e69b122acbcae7a728f0fc973051bf4c",
      "tree": {
        "sha": "3c1c89517d830fc402a8acb98faa66b6919ac769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c1c89517d830fc402a8acb98faa66b6919ac769"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3c1c89517d830fc402a8acb98faa66b6919ac769\nparent c2bb4da19cadeef6c959cfa24d6e94008007bcc9\nauthor Fabian Jahr <fjahr@protonmail.com> 1760568530 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1760572717 +0200\n\nsign: Remove duplicate sigversion check\n\nAlso improves documentation in the SignMuSig2 function.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmjwNS0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNItQQAKJWEaFGqTvr3394FtTxalEmZLXR\nyJOel++IhiMGvOWpIUSoyilWiyp/Qm8niNbfIyqcj0sc8J3cxUeGsrQisp5KkY/v\nXlJiMZRPwcrrL/ySRovLARCdrP1FPcM7W5svUo4PVL5g6eK0hUIqgg0WHr5dwxeg\nuBSKENNr99E/gCRNMkTB6uJnbQRrcPboy3CTvkcKIov7Nw+t2Yf4IcvVJGW3Dnpx\nW7eATieVWBXmpJ0HSLwRI72qQyZA/aLMj4TKMUBhotVLXaJAUo0SHg1P+8stpdXt\na5f1yoGskA44zZl1nZ5nUiYq16KrosMNANY7KMphslBmYpypxxeSoOU5tcjIkXvG\nIIBbtdLDnvVZncEBAdH06betX6BqAZHWmbk6tXzoZcbJh7fkf4Pj3pn9nVj9DqBH\ny1NMUXUWJ9yd7xZl3FkNwosFpOOY45v9vS3nE+I29X7s9xgHT6xNBkLjt1ChDfZY\nqWf9HvhahOR/u242OocF0yuMtE0lwSyX9VK3wAmsu0d5kSdQJ6L1FecRMh0nU/Wo\nUjVZfgcDmWXBHUPivwyoXlpFHIdGE0U/IpdP0beo+w0hm06onfgG6NgAissceEh5\nMjdI5o8qifZwpFLYOyfD2UnPvkYktIlnQb1Svdx5IqYLzo4fiEMZLrCn+Yw0hOPH\ncZGo5QBmgjeogduE\n=i5ld\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2bb4da19cadeef6c959cfa24d6e94008007bcc9",
          "sha": "c2bb4da19cadeef6c959cfa24d6e94008007bcc9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c2bb4da19cadeef6c959cfa24d6e94008007bcc9"
        }
      ],
      "message": "sign: Remove duplicate sigversion check\n\nAlso improves documentation in the SignMuSig2 function.",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T23:58:37Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T22:48:50Z"
      },
      "sha": "22e42da8e69b122acbcae7a728f0fc973051bf4c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDczYTVkOTMxNTM0MDk0MmYwMzBlNjU4NmM2NDBiOTI0MDQ5OGY4YWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73a5d9315340942f030e6586c640b9240498f8ac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/73a5d9315340942f030e6586c640b9240498f8ac",
      "tree": {
        "sha": "d2ebd15f0cdd9b96b077ebfc8871c242946b342e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2ebd15f0cdd9b96b077ebfc8871c242946b342e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d2ebd15f0cdd9b96b077ebfc8871c242946b342e\nparent 22e42da8e69b122acbcae7a728f0fc973051bf4c\nauthor Fabian Jahr <fjahr@protonmail.com> 1760572431 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1760572717 +0200\n\nmusig: Check session id reuse\n\nPrevent saving another secnonce to the same session id since this might make nonce reuse possible.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmjwNS0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN6YEQAKU3ie3Kt6us3FRgm54np3v/U6PW\nOybr6cMHk/nhoNGlkDNDq856ma/Sn+iy+WrrbQfimatoQ4cJmcjZNbCtavFi3KNm\nUBlNU9tBwMl9KVUF4rWtdoAv3TLf8uBSGkbY0YyFocKT08wrGHSFVX92Uw3wtz1r\ndI5WO7iPoRhXn8YeMCXCfFlgFmKpM7x/hHhZdii2g0EqzXdV7jVSX1EYroiP3knP\niXARN9J8eZLImjxSE68ZPNLFPO8zafc4y6Ol6lbTUzhX32k+RLfAGbJJbgiaJL2w\nYEJ8ICfIni+yIhboHuKm60ucSBF8Qd/eWzlRiqIxNZdlr+S4kAg8VcwniqPWw1Wg\nxaVmFVTTFn+MmsktV1AT1LugqwlHtuHRfLSV+277mjZpZFVb+pCR+hdXqL2v7ClO\nyjoXKFAwK1lpFZmTywzF9kV+2AzHnbZLZw0dPTUNBHB0xfKj9N4VoWtxItlfatAQ\nqamTFq/gWNG0k1cLcTqssGacB+sImIu7jJso09A9aUA1ayV4S51PKRxaoCErtTwf\nnVmbA/0QyjO19obAupNlLbpqieYvRLDHUGoeikWATVSJ4+DI0CAYTz5J0cCvRr7u\nqASXIDHi6d1P70ULOQf5Twhrb8DsbkCG+v8ah/mHxh8/v6ZCfP4eUwr0cuIL5K8/\nxm7WhNL1OFuFpgLy\n=xkwo\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22e42da8e69b122acbcae7a728f0fc973051bf4c",
          "sha": "22e42da8e69b122acbcae7a728f0fc973051bf4c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/22e42da8e69b122acbcae7a728f0fc973051bf4c"
        }
      ],
      "message": "musig: Check session id reuse\n\nPrevent saving another secnonce to the same session id since this might make nonce reuse possible.",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T23:58:37Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2025-10-15T23:53:51Z"
      },
      "sha": "73a5d9315340942f030e6586c640b9240498f8ac"
    },
    {
      "event": "labeled",
      "id": 20307299378,
      "node_id": "LE_lADOABII587RzUV_zwAAAAS6aMwy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20307299378",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-16T00:02:55Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 3408680288,
      "node_id": "IC_kwDOABII587LLFVg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3408680288",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-16T00:02:57Z",
      "updated_at": "2025-10-17T14:33:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33636.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [rkrux](https://github.com/bitcoin/bitcoin/pull/33636#pullrequestreview-3350082420) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33636#issuecomment-3408680288",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33636"
    },
    {
      "event": "milestoned",
      "id": 20323176344,
      "node_id": "MIE_lADOABII587RzUV_zwAAAAS7Ww-Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20323176344",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-16T16:14:16Z",
      "milestone": {
        "title": "31.0"
      }
    },
    {
      "event": "reviewed",
      "id": 3350082420,
      "node_id": "PRR_kwDOABII587HrjN0",
      "url": null,
      "actor": null,
      "commit_id": "73a5d9315340942f030e6586c640b9240498f8ac",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-17T14:33:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK 73a5d9315340942f030e6586c640b9240498f8ac\r\n\r\nAdds more functional tests that are preferred.\r\nI also like the last commit 73a5d9315340942f030e6586c640b9240498f8ac quite a lot, thanks for adding it.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33636#pullrequestreview-3350082420",
      "submitted_at": "2025-10-17T14:33:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2439794359",
      "pull_request_review_id": 3350082420,
      "id": 2439794359,
      "node_id": "PRRC_kwDOABII586RbE63",
      "diff_hunk": "@@ -28,6 +28,178 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def setup_musig_scenario(self, num_wallets=3):\n+        # Miniscript pattern based on number of wallets",
      "path": "test/functional/wallet_musig.py",
      "position": 13,
      "original_position": 5,
      "commit_id": "73a5d9315340942f030e6586c640b9240498f8ac",
      "original_commit_id": "c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c7c9dc2d8634bc79e76783be113f8d42cee63c6e \"test: Add musig failure scenarios\"\r\n\r\n`Miniscript` pattern or `Multipath` pattern?",
      "created_at": "2025-10-17T12:32:49Z",
      "updated_at": "2025-10-17T14:33:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33636#discussion_r2439794359",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2439794359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2439990998",
      "pull_request_review_id": 3350082420,
      "id": 2439990998,
      "node_id": "PRRC_kwDOABII586Rb07W",
      "diff_hunk": "@@ -28,6 +28,178 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def setup_musig_scenario(self, num_wallets=3):\n+        # Miniscript pattern based on number of wallets\n+        placeholders = \",\".join(f\"${i}/<{i};{i+1}>/*\" for i in range(num_wallets))\n+        pattern = f\"rawtr(musig({placeholders}))\"\n+\n+        wallets = []\n+        keys = []\n+\n+        # Create wallets and extract keys\n+        for i in range(num_wallets):\n+            wallet_name = f\"musig_{self.WALLET_NUM}\"\n+            self.WALLET_NUM += 1\n+            self.nodes[0].createwallet(wallet_name)\n+            wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+            wallets.append(wallet)\n+\n+            for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                desc = priv_desc[\"desc\"]\n+                if not desc.startswith(\"tr(\"):\n+                    continue\n+                privkey = PRIVKEY_RE.search(desc).group(1)\n+                break\n+            for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                desc = pub_desc[\"desc\"]\n+                if not desc.startswith(\"tr(\"):\n+                    continue\n+                pubkey = PUBKEY_RE.search(desc).group(1)\n+                privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                break\n+            keys.append((privkey, pubkey))\n+\n+        # Construct and import descriptors\n+        for i, wallet in enumerate(wallets):\n+            desc = pattern\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${j}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs = [{\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            }]\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Fund address\n+        addr = wallets[0].getnewaddress(address_type=\"bech32m\")\n+        for wallet in wallets[1:]:\n+            assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Create PSBT\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].walletcreatefundedpsbt(\n+            outputs=[{self.def_wallet.getnewaddress(): 5}],\n+            inputs=[utxo],\n+            change_type=\"bech32m\",\n+            changePosition=1\n+        )[\"psbt\"]\n+\n+        return wallets, psbt\n+\n+    def test_musig_failure_modes(self):\n+        \"\"\"Test various MuSig2 failure scenarios\"\"\"\n+\n+        self.log.info(\"Testing missing participant nonce\")\n+        wallets, psbt = self.setup_musig_scenario(num_wallets=3)\n+\n+        # Only 2 out of 3 participants provide nonces\n+        nonce_psbts = []\n+        for i in range(2):\n+            proc = wallets[i].walletprocesspsbt(psbt=psbt)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        # Attempt to create partial sigs. This should not complete due to the\n+        # missing nonce.\n+        for wallet in wallets[:2]:\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt)\n+            assert_equal(proc[\"complete\"], False)\n+            # No partial sigs are created\n+            dec = self.nodes[0].decodepsbt(proc[\"psbt\"])\n+            # There are still only two nonces\n+            assert_equal(len(dec[\"inputs\"][0].get(\"musig2_pubnonces\", [])), 2)\n+\n+        self.log.info(\"Testing insufficient partial signatures\")\n+        wallets, psbt = self.setup_musig_scenario(num_wallets=3)\n+        nonce_psbts = [w.walletprocesspsbt(psbt=psbt)[\"psbt\"] for w in wallets]\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        # Only 2 out of 3 provide partial sigs\n+        psig_psbts = []\n+        for i in range(2):\n+            proc = wallets[i].walletprocesspsbt(psbt=comb_nonce_psbt)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        # Finalization fails due to missing partial sig\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)\n+        assert_equal(finalized[\"complete\"], False)\n+\n+        # Still only two partial sigs in combined PSBT\n+        dec = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec[\"inputs\"][0][\"musig2_partial_sigs\"]), 2)\n+\n+        self.log.info(\"Testing mismatched key order\")\n+        wallets = []\n+        keys = []\n+        for i in range(2):\n+            wallet_name = f\"musig_{self.WALLET_NUM}\"\n+            self.WALLET_NUM += 1\n+            self.nodes[0].createwallet(wallet_name)\n+            wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+            wallets.append(wallet)\n+\n+            for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                desc = priv_desc[\"desc\"]\n+                if not desc.startswith(\"tr(\"):\n+                    continue\n+                privkey = PRIVKEY_RE.search(desc).group(1)\n+                break\n+            for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                desc = pub_desc[\"desc\"]\n+                if not desc.startswith(\"tr(\"):\n+                    continue\n+                pubkey = PUBKEY_RE.search(desc).group(1)\n+                privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                break\n+            keys.append((privkey, pubkey))\n+\n+        desc0 = f\"rawtr(musig({keys[0][0]},{keys[1][1]}))\"\n+        wallets[0].importdescriptors([{\n+            \"desc\": descsum_create(desc0),\n+            \"active\": True,\n+            \"timestamp\": \"now\",\n+        }])\n+\n+        # Reverse order to desc0\n+        desc1 = f\"rawtr(musig({keys[1][0]},{keys[0][1]}))\"\n+        wallets[1].importdescriptors([{\n+            \"desc\": descsum_create(desc1),\n+            \"active\": True,\n+            \"timestamp\": \"now\",\n+        }])\n+\n+        # Addresses should be different due to different key ordering\n+        addr0 = wallets[0].getnewaddress(address_type=\"bech32m\")\n+        addr1 = wallets[1].getnewaddress(address_type=\"bech32m\")\n+        assert addr0 != addr1\n+\n+        self.log.info(\"Testing finalize without partial sigs\")\n+        wallets, psbt = self.setup_musig_scenario(num_wallets=2)\n+        nonce_psbts = [w.walletprocesspsbt(psbt=psbt)[\"psbt\"] for w in wallets]\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        finalized = self.nodes[0].finalizepsbt(comb_nonce_psbt)\n+        assert_equal(finalized[\"complete\"], False)\n+\n+        dec = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert \"musig2_pubnonces\" in dec[\"inputs\"][0]\n+        assert \"musig2_partial_sigs\" not in dec[\"inputs\"][0]\n+\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 183,
      "original_position": 175,
      "commit_id": "73a5d9315340942f030e6586c640b9240498f8ac",
      "original_commit_id": "c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c7c9dc2d8634bc79e76783be113f8d42cee63c6e \"test: Add musig failure scenarios\"\r\n\r\nNit: extra blank line",
      "created_at": "2025-10-17T13:12:41Z",
      "updated_at": "2025-10-17T14:33:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33636#discussion_r2439990998",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2439990998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440002764",
      "pull_request_review_id": 3350082420,
      "id": 2440002764,
      "node_id": "PRRC_kwDOABII586Rb3zM",
      "diff_hunk": "@@ -28,6 +28,178 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def setup_musig_scenario(self, num_wallets=3):\n+        # Miniscript pattern based on number of wallets\n+        placeholders = \",\".join(f\"${i}/<{i};{i+1}>/*\" for i in range(num_wallets))\n+        pattern = f\"rawtr(musig({placeholders}))\"\n+\n+        wallets = []\n+        keys = []\n+\n+        # Create wallets and extract keys\n+        for i in range(num_wallets):\n+            wallet_name = f\"musig_{self.WALLET_NUM}\"\n+            self.WALLET_NUM += 1\n+            self.nodes[0].createwallet(wallet_name)\n+            wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+            wallets.append(wallet)\n+\n+            for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                desc = priv_desc[\"desc\"]\n+                if not desc.startswith(\"tr(\"):\n+                    continue\n+                privkey = PRIVKEY_RE.search(desc).group(1)\n+                break\n+            for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                desc = pub_desc[\"desc\"]\n+                if not desc.startswith(\"tr(\"):\n+                    continue\n+                pubkey = PUBKEY_RE.search(desc).group(1)\n+                privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                break\n+            keys.append((privkey, pubkey))\n+\n+        # Construct and import descriptors\n+        for i, wallet in enumerate(wallets):\n+            desc = pattern\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${j}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs = [{\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            }]\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Fund address\n+        addr = wallets[0].getnewaddress(address_type=\"bech32m\")\n+        for wallet in wallets[1:]:\n+            assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Create PSBT\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].walletcreatefundedpsbt(\n+            outputs=[{self.def_wallet.getnewaddress(): 5}],\n+            inputs=[utxo],\n+            change_type=\"bech32m\",\n+            changePosition=1\n+        )[\"psbt\"]\n+\n+        return wallets, psbt\n+\n+    def test_musig_failure_modes(self):\n+        \"\"\"Test various MuSig2 failure scenarios\"\"\"\n+\n+        self.log.info(\"Testing missing participant nonce\")\n+        wallets, psbt = self.setup_musig_scenario(num_wallets=3)\n+\n+        # Only 2 out of 3 participants provide nonces\n+        nonce_psbts = []\n+        for i in range(2):\n+            proc = wallets[i].walletprocesspsbt(psbt=psbt)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        # Attempt to create partial sigs. This should not complete due to the\n+        # missing nonce.\n+        for wallet in wallets[:2]:\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt)\n+            assert_equal(proc[\"complete\"], False)\n+            # No partial sigs are created\n+            dec = self.nodes[0].decodepsbt(proc[\"psbt\"])\n+            # There are still only two nonces\n+            assert_equal(len(dec[\"inputs\"][0].get(\"musig2_pubnonces\", [])), 2)\n+\n+        self.log.info(\"Testing insufficient partial signatures\")\n+        wallets, psbt = self.setup_musig_scenario(num_wallets=3)\n+        nonce_psbts = [w.walletprocesspsbt(psbt=psbt)[\"psbt\"] for w in wallets]\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        # Only 2 out of 3 provide partial sigs\n+        psig_psbts = []\n+        for i in range(2):\n+            proc = wallets[i].walletprocesspsbt(psbt=comb_nonce_psbt)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        # Finalization fails due to missing partial sig\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)\n+        assert_equal(finalized[\"complete\"], False)\n+\n+        # Still only two partial sigs in combined PSBT\n+        dec = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec[\"inputs\"][0][\"musig2_partial_sigs\"]), 2)\n+\n+        self.log.info(\"Testing mismatched key order\")\n+        wallets = []\n+        keys = []\n+        for i in range(2):\n+            wallet_name = f\"musig_{self.WALLET_NUM}\"\n+            self.WALLET_NUM += 1\n+            self.nodes[0].createwallet(wallet_name)\n+            wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+            wallets.append(wallet)\n+\n+            for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                desc = priv_desc[\"desc\"]\n+                if not desc.startswith(\"tr(\"):\n+                    continue\n+                privkey = PRIVKEY_RE.search(desc).group(1)\n+                break\n+            for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                desc = pub_desc[\"desc\"]\n+                if not desc.startswith(\"tr(\"):\n+                    continue\n+                pubkey = PUBKEY_RE.search(desc).group(1)\n+                privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                break\n+            keys.append((privkey, pubkey))\n+\n+        desc0 = f\"rawtr(musig({keys[0][0]},{keys[1][1]}))\"\n+        wallets[0].importdescriptors([{\n+            \"desc\": descsum_create(desc0),\n+            \"active\": True,\n+            \"timestamp\": \"now\",\n+        }])\n+\n+        # Reverse order to desc0\n+        desc1 = f\"rawtr(musig({keys[1][0]},{keys[0][1]}))\"\n+        wallets[1].importdescriptors([{\n+            \"desc\": descsum_create(desc1),\n+            \"active\": True,\n+            \"timestamp\": \"now\",\n+        }])\n+\n+        # Addresses should be different due to different key ordering\n+        addr0 = wallets[0].getnewaddress(address_type=\"bech32m\")\n+        addr1 = wallets[1].getnewaddress(address_type=\"bech32m\")\n+        assert addr0 != addr1\n+\n+        self.log.info(\"Testing finalize without partial sigs\")\n+        wallets, psbt = self.setup_musig_scenario(num_wallets=2)\n+        nonce_psbts = [w.walletprocesspsbt(psbt=psbt)[\"psbt\"] for w in wallets]\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        finalized = self.nodes[0].finalizepsbt(comb_nonce_psbt)\n+        assert_equal(finalized[\"complete\"], False)\n+\n+        dec = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert \"musig2_pubnonces\" in dec[\"inputs\"][0]\n+        assert \"musig2_partial_sigs\" not in dec[\"inputs\"][0]\n+\n+\n     def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):",
      "path": "test/functional/wallet_musig.py",
      "position": 184,
      "original_position": 176,
      "commit_id": "73a5d9315340942f030e6586c640b9240498f8ac",
      "original_commit_id": "c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/c7c9dc2d8634bc79e76783be113f8d42cee63c6e \"test: Add musig failure scenarios\"\r\n\r\nNit: can rename this function to `test_success_case` now.",
      "created_at": "2025-10-17T13:16:46Z",
      "updated_at": "2025-10-17T14:33:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33636#discussion_r2440002764",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440002764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 203,
      "original_line": 203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440229322",
      "pull_request_review_id": 3350082420,
      "id": 2440229322,
      "node_id": "PRRC_kwDOABII586RcvHK",
      "diff_hunk": "",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "73a5d9315340942f030e6586c640b9240498f8ac",
      "original_commit_id": "c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/c7c9dc2d8634bc79e76783be113f8d42cee63c6e \"test: Add musig failure scenarios\"\r\n\r\nI noticed some duplication in both the success and failure cases and I tried to refactor this file based on the following points. Please find full diff below and consider extracting out commonalities.\r\n\r\n1. Separated the loop in the `do_test` func so that wallet creation and expectation calculations are not together.\r\n2. Because of the above separation, extracted `create_wallets_and_keys_from_pattern` func to be used in both success and failure cases.\r\n3. Extracted `construct_and_import_musig_descriptor_in_wallets` func to be used in both success and failure cases.\r\n4. Split the `test_musig_failure_modes` func into 4 funcs that have a similar func signature like the `do_test` func that takes in a comment and pattern to work with. Sort of a nit but I like all the test cases to have a similar format - easier on the eyes of the reader.\r\n\r\n<details open>\r\n<summary>Full diff that works on my system</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/wallet_musig.py b/test/functional/wallet_musig.py\r\nindex 55129b1676..64e1e40259 100755\r\n--- a/test/functional/wallet_musig.py\r\n+++ b/test/functional/wallet_musig.py\r\n@@ -28,43 +28,52 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n     def skip_test_if_missing_module(self):\r\n         self.skip_if_no_wallet()\r\n \r\n-    def setup_musig_scenario(self, num_wallets=3):\r\n-        # Miniscript pattern based on number of wallets\r\n-        placeholders = \",\".join(f\"${i}/<{i};{i+1}>/*\" for i in range(num_wallets))\r\n-        pattern = f\"rawtr(musig({placeholders}))\"\r\n-\r\n+    # Create wallets and extract keys\r\n+    def create_wallets_and_keys_from_pattern(self, pat):\r\n         wallets = []\r\n         keys = []\r\n \r\n-        # Create wallets and extract keys\r\n-        for i in range(num_wallets):\r\n-            wallet_name = f\"musig_{self.wallet_num}\"\r\n-            self.wallet_num += 1\r\n-            self.nodes[0].createwallet(wallet_name)\r\n-            wallet = self.nodes[0].get_wallet_rpc(wallet_name)\r\n-            wallets.append(wallet)\r\n-\r\n-            for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\r\n-                desc = priv_desc[\"desc\"]\r\n-                if not desc.startswith(\"tr(\"):\r\n-                    continue\r\n-                privkey = PRIVKEY_RE.search(desc).group(1)\r\n-                break\r\n-            for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\r\n-                desc = pub_desc[\"desc\"]\r\n-                if not desc.startswith(\"tr(\"):\r\n+        for musig in MUSIG_RE.findall(pat):\r\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\r\n+                wallet_index = int(placeholder[1:])\r\n+                if wallet_index < len(wallets):\r\n                     continue\r\n-                pubkey = PUBKEY_RE.search(desc).group(1)\r\n-                privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\r\n-                break\r\n-            keys.append((privkey, pubkey))\r\n \r\n-        # Construct and import descriptors\r\n+                wallet_name = f\"musig_{self.wallet_num}\"\r\n+                self.wallet_num += 1\r\n+                self.nodes[0].createwallet(wallet_name)\r\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\r\n+                wallets.append(wallet)\r\n+\r\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\r\n+                    desc = priv_desc[\"desc\"]\r\n+                    if not desc.startswith(\"tr(\"):\r\n+                        continue\r\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\r\n+                    break\r\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\r\n+                    desc = pub_desc[\"desc\"]\r\n+                    if not desc.startswith(\"tr(\"):\r\n+                        continue\r\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\r\n+                    # Since the pubkey is derived from the private key that we have, we need\r\n+                    # to extract and insert the origin path from the pubkey as well.\r\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\r\n+                    break\r\n+                keys.append((privkey, pubkey))\r\n+\r\n+        return wallets, keys\r\n+\r\n+    # Construct and import each wallet's musig descriptor that\r\n+    # contains the private key from that wallet and pubkeys of the others\r\n+    def construct_and_import_musig_descriptor_in_wallets(self, pat, wallets, keys, only_one_musig_wallet=False):\r\n         for i, wallet in enumerate(wallets):\r\n-            desc = pattern\r\n+            if only_one_musig_wallet and i > 0:\r\n+                continue\r\n+            desc = pat\r\n             for j, (priv, pub) in enumerate(keys):\r\n                 if j == i:\r\n-                    desc = desc.replace(f\"${j}\", priv)\r\n+                    desc = desc.replace(f\"${i}\", priv)\r\n                 else:\r\n                     desc = desc.replace(f\"${j}\", pub)\r\n \r\n@@ -78,6 +87,10 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n             for r in res:\r\n                 assert_equal(r[\"success\"], True)\r\n \r\n+    def setup_musig_scenario(self, pat):\r\n+        wallets, keys = self.create_wallets_and_keys_from_pattern(pat)\r\n+        self.construct_and_import_musig_descriptor_in_wallets(pat, wallets, keys, only_one_musig_wallet=False)\r\n+\r\n         # Fund address\r\n         addr = wallets[0].getnewaddress(address_type=\"bech32m\")\r\n         for wallet in wallets[1:]:\r\n@@ -97,11 +110,9 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n \r\n         return wallets, psbt\r\n \r\n-    def test_musig_failure_modes(self):\r\n-        \"\"\"Test various MuSig2 failure scenarios\"\"\"\r\n-\r\n-        self.log.info(\"Testing missing participant nonce\")\r\n-        wallets, psbt = self.setup_musig_scenario(num_wallets=3)\r\n+    def test_failure_case_1(self, comment, pat):\r\n+        self.log.info(f\"Testing {comment}\")\r\n+        wallets, psbt = self.setup_musig_scenario(pat)\r\n \r\n         # Only 2 out of 3 participants provide nonces\r\n         nonce_psbts = []\r\n@@ -121,8 +132,9 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n             # There are still only two nonces\r\n             assert_equal(len(dec[\"inputs\"][0].get(\"musig2_pubnonces\", [])), 2)\r\n \r\n-        self.log.info(\"Testing insufficient partial signatures\")\r\n-        wallets, psbt = self.setup_musig_scenario(num_wallets=3)\r\n+    def test_failure_case_2(self, comment, pat):\r\n+        self.log.info(f\"Testing {comment}\")\r\n+        wallets, psbt = self.setup_musig_scenario(pat)\r\n         nonce_psbts = [w.walletprocesspsbt(psbt=psbt)[\"psbt\"] for w in wallets]\r\n         comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\r\n \r\n@@ -142,30 +154,9 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         dec = self.nodes[0].decodepsbt(comb_psig_psbt)\r\n         assert_equal(len(dec[\"inputs\"][0][\"musig2_partial_sigs\"]), 2)\r\n \r\n-        self.log.info(\"Testing mismatched key order\")\r\n-        wallets = []\r\n-        keys = []\r\n-        for i in range(2):\r\n-            wallet_name = f\"musig_{self.wallet_num}\"\r\n-            self.wallet_num += 1\r\n-            self.nodes[0].createwallet(wallet_name)\r\n-            wallet = self.nodes[0].get_wallet_rpc(wallet_name)\r\n-            wallets.append(wallet)\r\n-\r\n-            for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\r\n-                desc = priv_desc[\"desc\"]\r\n-                if not desc.startswith(\"tr(\"):\r\n-                    continue\r\n-                privkey = PRIVKEY_RE.search(desc).group(1)\r\n-                break\r\n-            for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\r\n-                desc = pub_desc[\"desc\"]\r\n-                if not desc.startswith(\"tr(\"):\r\n-                    continue\r\n-                pubkey = PUBKEY_RE.search(desc).group(1)\r\n-                privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\r\n-                break\r\n-            keys.append((privkey, pubkey))\r\n+    def test_failure_case_3(self, comment, pat):\r\n+        self.log.info(f\"Testing {comment}\")\r\n+        wallets, keys = self.create_wallets_and_keys_from_pattern(pat)\r\n \r\n         desc0 = f\"rawtr(musig({keys[0][0]},{keys[1][1]}))\"\r\n         wallets[0].importdescriptors([{\r\n@@ -187,8 +178,9 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         addr1 = wallets[1].getnewaddress(address_type=\"bech32m\")\r\n         assert addr0 != addr1\r\n \r\n-        self.log.info(\"Testing finalize without partial sigs\")\r\n-        wallets, psbt = self.setup_musig_scenario(num_wallets=2)\r\n+    def test_failure_case_4(self, comment, pat):\r\n+        self.log.info(f\"Testing {comment}\")\r\n+        wallets, psbt = self.setup_musig_scenario(pat)\r\n         nonce_psbts = [w.walletprocesspsbt(psbt=psbt)[\"psbt\"] for w in wallets]\r\n         comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\r\n \r\n@@ -199,17 +191,14 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         assert \"musig2_pubnonces\" in dec[\"inputs\"][0]\r\n         assert \"musig2_partial_sigs\" not in dec[\"inputs\"][0]\r\n \r\n-\r\n     def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\r\n         self.log.info(f\"Testing {comment}\")\r\n         has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\r\n \r\n-        wallets = []\r\n-        keys = []\r\n-\r\n         pat = pattern.replace(\"$H\", H_POINT)\r\n+        wallets, keys = self.create_wallets_and_keys_from_pattern(pat)\r\n+        self.construct_and_import_musig_descriptor_in_wallets(pat, wallets, keys, only_one_musig_wallet)\r\n \r\n-        # Figure out how many wallets are needed and create them\r\n         expected_pubnonces = 0\r\n         expected_partial_sigs = 0\r\n         for musig in MUSIG_RE.findall(pat):\r\n@@ -224,54 +213,9 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n                     musig_partial_sigs += 1\r\n                 if wallet_index < len(wallets):\r\n                     continue\r\n-                wallet_name = f\"musig_{self.wallet_num}\"\r\n-                self.wallet_num += 1\r\n-                self.nodes[0].createwallet(wallet_name)\r\n-                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\r\n-                wallets.append(wallet)\r\n-\r\n-                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\r\n-                    desc = priv_desc[\"desc\"]\r\n-                    if not desc.startswith(\"tr(\"):\r\n-                        continue\r\n-                    privkey = PRIVKEY_RE.search(desc).group(1)\r\n-                    break\r\n-                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\r\n-                    desc = pub_desc[\"desc\"]\r\n-                    if not desc.startswith(\"tr(\"):\r\n-                        continue\r\n-                    pubkey = PUBKEY_RE.search(desc).group(1)\r\n-                    # Since the pubkey is derived from the private key that we have, we need\r\n-                    # to extract and insert the origin path from the pubkey as well.\r\n-                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\r\n-                    break\r\n-                keys.append((privkey, pubkey))\r\n             if musig_partial_sigs is not None:\r\n                 expected_partial_sigs += musig_partial_sigs\r\n \r\n-        # Construct and import each wallet's musig descriptor that\r\n-        # contains the private key from that wallet and pubkeys of the others\r\n-        for i, wallet in enumerate(wallets):\r\n-            if only_one_musig_wallet and i > 0:\r\n-                continue\r\n-            desc = pat\r\n-            import_descs = []\r\n-            for j, (priv, pub) in enumerate(keys):\r\n-                if j == i:\r\n-                    desc = desc.replace(f\"${i}\", priv)\r\n-                else:\r\n-                    desc = desc.replace(f\"${j}\", pub)\r\n-\r\n-            import_descs.append({\r\n-                \"desc\": descsum_create(desc),\r\n-                \"active\": True,\r\n-                \"timestamp\": \"now\",\r\n-            })\r\n-\r\n-            res = wallet.importdescriptors(import_descs)\r\n-            for r in res:\r\n-                assert_equal(r[\"success\"], True)\r\n-\r\n         # Check that the wallets agree on the same musig address\r\n         addr = None\r\n         change_addr = None\r\n@@ -393,6 +337,11 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n     def run_test(self):\r\n         self.def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\r\n \r\n+        self.test_failure_case_1(\"missing participant nonce\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n+        self.test_failure_case_2(\"insufficient partial signatures\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n+        self.test_failure_case_3(\"mismatched key order\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*))\")\r\n+        self.test_failure_case_4(\"finalize without partial sigs\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*))\")\r\n+\r\n         self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n         self.do_test(\"rawtr(musig(keys/*)) with ALL|ANYONECANPAY\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", \"ALL|ANYONECANPAY\")\r\n         self.do_test(\"tr(musig(keys/*)) no multipath\", \"tr(musig($0/0/*,$1/1/*,$2/2/*))\")\r\n@@ -410,8 +359,10 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})} script-path\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\", scriptpath=True, nosign_wallets=[0])\r\n \r\n         # Run failure mode tests after happy path tests to avoid wallet name conflicts\r\n-        self.test_musig_failure_modes()\r\n-\r\n+        # self.test_failure_case_1(\"missing participant nonce\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n+        # self.test_failure_case_2(\"insufficient partial signatures\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n+        # self.test_failure_case_3(\"mismatched key order\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*))\")\r\n+        # self.test_failure_case_4(\"finalize without partial sigs\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*))\")\r\n \r\n if __name__ == '__main__':\r\n     WalletMuSigTest(__file__).main()\r\n\r\n```\r\n</details>",
      "created_at": "2025-10-17T14:30:31Z",
      "updated_at": "2025-10-17T14:36:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33636#discussion_r2440229322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440229322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440231846",
      "pull_request_review_id": 3350082420,
      "id": 2440231846,
      "node_id": "PRRC_kwDOABII586Rcvum",
      "diff_hunk": "@@ -237,6 +409,9 @@ def run_test(self):\n         self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\")\n         self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})} script-path\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\", scriptpath=True, nosign_wallets=[0])\n \n+        # Run failure mode tests after happy path tests to avoid wallet name conflicts",
      "path": "test/functional/wallet_musig.py",
      "position": 202,
      "original_position": 183,
      "commit_id": "73a5d9315340942f030e6586c640b9240498f8ac",
      "original_commit_id": "c7c9dc2d8634bc79e76783be113f8d42cee63c6e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/c7c9dc2d8634bc79e76783be113f8d42cee63c6e \"test: Add musig failure scenarios\"\r\n\r\nI don't think this comment is necessary(?) because the tests pass even if the failure cases run first",
      "created_at": "2025-10-17T14:31:23Z",
      "updated_at": "2025-10-17T14:34:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33636#discussion_r2440231846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2440231846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33636"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 412,
      "original_line": 412,
      "side": "RIGHT"
    }
  ]
}
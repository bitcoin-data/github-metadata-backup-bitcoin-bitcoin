{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080",
    "id": 2396781348,
    "node_id": "PR_kwDOABII586O2_sk",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32080",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32080.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32080.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
    "number": 32080,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "OP_CHECKCONTRACTVERIFY",
    "user": {
      "login": "bigspider",
      "id": 6681844,
      "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bigspider",
      "html_url": "https://github.com/bigspider",
      "followers_url": "https://api.github.com/users/bigspider/followers",
      "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
      "organizations_url": "https://api.github.com/users/bigspider/orgs",
      "repos_url": "https://api.github.com/users/bigspider/repos",
      "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/bigspider/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a first draft implementation of the `OP_CHECKCONTRACTVERIFY` (`CCV`) opcode.\r\n\r\n`CCV` enables to build Script-based state machines that span across multiple transactions, by providing an ergonomic tool to commit to - and introspect - the Script and possibly some _data_ that is committed inside inputs or outputs.\r\n\r\nRelated to this PR:\r\n- [BIP-433](https://github.com/bitcoin/bips/blob/master/bip-0443.mediawiki) ([PR discussion](https://github.com/bitcoin/bips/pull/1793)).\r\n- [Post on delving bitcoin](https://delvingbitcoin.org/t/op-checkcontractverify-and-its-amount-semantic/1527) focusing on the amount logic of the opcode.\r\n\r\n`CCV` is a general purpose opcode to build state machines based on UTXO; therefore it is not strictly tied to any specific application.\r\n\r\nHowever, as vaults are probably the simplest application of such state machines, the PR also includes a functional test for a very simple (but practical) vault construction, only using `CCV`. More feature-complete vaults are achievable in combinations with other opcodes.\r\n\r\nThis PR does not contain activation logic, and can't be merged as-is, since it would make the opcode immediately active.\r\n\r\nI'd like encourage limiting discussions to the implementation, while specs can be discussed in the BIP draft PR and external places like Delving Bitcoin.\r\n\r\n## Challenges with the cross-input amount logic\r\n\r\nA challenge in implementing `CCV` is the cross-input amount semantic: the opcode adds restrictions on the output amounts that are inherently transaction-wide.\r\n\r\nThis difficulty seems to be common to other possible changes in the working of the Script interpreter (including without new soft forks):\r\n- adding batch validation for Schnorr signatures seems to require a similar shared state, like the `BatchSchnorrVerifier` class using a mutex in this [experimental PR](https://github.com/bitcoin/bitcoin/pull/29491). Cross-Input Signature Aggregation would also have the same nature.\r\n- [OP_TXHASH](https://github.com/bitcoin-inquisition/bitcoin/pull/51) used a transaction-wide `TxHashCache`, guarded by a mutex.\r\n- [OP_VAULT](https://github.com/bitcoin/bitcoin/pull/26857) also has some _deferred checks_ based on information that accumulated during the inputs' Script evaluation.\r\n\r\nIn this implementation, I added a general purpose `TransactionExecutionData` struct to contain persisting data that is accessible during Script evaluation. This allows the interpreter to cause a failure if either:\r\n- an output's amount is insufficient as per the `CCV` checks across inputs;\r\n- an output is used as a target of two `CCV` checks with incompatible amount semantic.\r\n\r\nBy the monotonic nature of these checks, it is impossible that a transaction validity is affected by the order of evaluation of the input Scripts. This is an important property for any usage of the struct in the Script interpreter.\r\n\r\nAs the operations done while the mutex is locked in `CCV` are trivial, it should have a negligible impact on validation. This should, however, be validated with the appropriate benchmarks.\r\n\r\nAlternative approaches to the implementation could be:\r\n- a _deferred checks framework_ like in the OP_VAULT implementation. This is functionally equivalent, but I found the approach slightly harder to implement, and requiring more boilerplate code overall.\r\n- making the Script validation sequential for the inputs of the same transaction (that is, distributing transactions to different worker threads instead of individual inputs). This would make any present and future tx-wide semantic easier and avoid mutexes. However, this refactoring might require bigger changes to the interpreter, and should carefully be benchmarked as well.\r\n\r\nFinally, there is a possibility that changing the semantic of `CCV` somehow might make it possible to implement semantically (or practically) equivalent checks, without requiring explicit sinchronization during input execution. Here's a [gist from darosior](https://gist.github.com/darosior/ae2108ac0bedd3b68ae047af171b2d44) with some early ideas about using the taproot annex for this purpose. At this time, I'm not convinced that this direction is possible without significant tradeoffs - but I have no proof of this, and look forward to your ideas.\r\n\r\n# Related links\r\n\r\n- https://merkle.fun - entry point for the resources under the umbrella of MATT (Merkleize All The Things).\r\n- https://github.com/Merkleize/pymatt - Python framework to explore constructions using `OP_CHECKCONTRACTVERIFY` (with or without other opcodes).\r\n",
    "labels": [
      {
        "id": 192202000,
        "node_id": "MDU6TGFiZWwxOTIyMDIwMDA=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus",
        "name": "Consensus",
        "color": "009800",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2025-03-17T06:00:37Z",
    "updated_at": "2025-10-24T10:02:38Z",
    "closed_at": "2025-10-22T15:15:25Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "Merkleize:ccv-core",
      "ref": "ccv-core",
      "sha": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "user": {
        "login": "Merkleize",
        "id": 116372855,
        "node_id": "O_kgDOBu-1dw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116372855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Merkleize",
        "html_url": "https://github.com/Merkleize",
        "followers_url": "https://api.github.com/users/Merkleize/followers",
        "following_url": "https://api.github.com/users/Merkleize/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Merkleize/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Merkleize/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Merkleize/subscriptions",
        "organizations_url": "https://api.github.com/users/Merkleize/orgs",
        "repos_url": "https://api.github.com/users/Merkleize/repos",
        "events_url": "https://api.github.com/users/Merkleize/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Merkleize/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 672659606,
        "node_id": "R_kgDOKBf4lg",
        "name": "bitcoin",
        "full_name": "Merkleize/bitcoin",
        "owner": {
          "login": "Merkleize",
          "id": 116372855,
          "node_id": "O_kgDOBu-1dw",
          "avatar_url": "https://avatars.githubusercontent.com/u/116372855?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Merkleize",
          "html_url": "https://github.com/Merkleize",
          "followers_url": "https://api.github.com/users/Merkleize/followers",
          "following_url": "https://api.github.com/users/Merkleize/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Merkleize/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Merkleize/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Merkleize/subscriptions",
          "organizations_url": "https://api.github.com/users/Merkleize/orgs",
          "repos_url": "https://api.github.com/users/Merkleize/repos",
          "events_url": "https://api.github.com/users/Merkleize/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Merkleize/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Merkleize/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Merkleize/bitcoin",
        "archive_url": "https://api.github.com/repos/Merkleize/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Merkleize/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Merkleize/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Merkleize/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Merkleize/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Merkleize/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Merkleize/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Merkleize/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Merkleize/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Merkleize/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Merkleize/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Merkleize/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Merkleize/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Merkleize/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Merkleize/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Merkleize/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Merkleize/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Merkleize/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Merkleize/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Merkleize/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Merkleize/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Merkleize/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Merkleize/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Merkleize/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Merkleize/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Merkleize/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Merkleize/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Merkleize/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Merkleize/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Merkleize/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Merkleize/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Merkleize/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Merkleize/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Merkleize/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Merkleize/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Merkleize/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Merkleize/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Merkleize/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Merkleize/bitcoin/hooks",
        "svn_url": "https://github.com/Merkleize/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 241772,
        "default_branch": "matt",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-30T14:14:42Z",
        "created_at": "2023-07-30T20:35:46Z",
        "updated_at": "2025-07-29T20:16:55Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4c1906a500cacab385b09e780b54271b0addaf4b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38073,
        "stargazers_count": 86385,
        "watchers_count": 86385,
        "size": 295169,
        "default_branch": "master",
        "open_issues_count": 744,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-24T08:05:39Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-24T10:31:37Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 1651,
    "deletions": 44,
    "changed_files": 21,
    "commits": 5,
    "review_comments": 13,
    "comments": 9
  },
  "events": [
    {
      "event": "commented",
      "id": 2728256948,
      "node_id": "IC_kwDOABII586ineW0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2728256948",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T06:00:42Z",
      "updated_at": "2025-05-21T11:22:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32080.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32575](https://github.com/bitcoin/bitcoin/pull/32575) (refactor: Split multithreaded case out of CheckInputScripts by fjahr)\n* [#32467](https://github.com/bitcoin/bitcoin/pull/32467) (checkqueue: make the queue non-optional for CCheckQueueControl and drop legacy locking macro usage by theuni)\n* [#32453](https://github.com/bitcoin/bitcoin/pull/32453) ([Policy] Discourage Unsigned Annexes by JeremyRubin)\n* [#32379](https://github.com/bitcoin/bitcoin/pull/32379) (p2p: stop special-casing witness-stripped error for unconfirmed transactions by darosior)\n* [#32332](https://github.com/bitcoin/bitcoin/pull/32332) (refactor: Update `XOnlyPubKey::GetKeyIDs()` to return a pair of pubkeys by w0xlt)\n* [#32317](https://github.com/bitcoin/bitcoin/pull/32317) (kernel: Separate UTXO set access from validation functions by TheCharlatan)\n* [#32247](https://github.com/bitcoin/bitcoin/pull/32247) (BIP-348 (OP_CHECKSIGFROMSTACK) (regtest only) by jamesob)\n* [#31989](https://github.com/bitcoin/bitcoin/pull/31989) (BIP-119 (OP_CHECKTEMPLATEVERIFY) (regtest only) by jamesob)\n* [#31974](https://github.com/bitcoin/bitcoin/pull/31974) (Drop testnet3 by Sjors)\n* [#31576](https://github.com/bitcoin/bitcoin/pull/31576) (test: Move `script_assets_tests` into its own suite by hebasto)\n* [#29247](https://github.com/bitcoin/bitcoin/pull/29247) (CAT in Tapscript (BIP-347) by 0xBEEFCAF3)\n* [#26201](https://github.com/bitcoin/bitcoin/pull/26201) (Remove Taproot activation height by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2728256948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "labeled",
      "id": 16795184201,
      "node_id": "LE_lADOABII586uRkpVzwAAAAPpEixJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16795184201",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T06:13:30Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2728280248,
      "node_id": "IC_kwDOABII586inkC4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2728280248",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T06:13:31Z",
      "updated_at": "2025-03-17T06:13:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/38866989648</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2728280248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "commented",
      "id": 2728360432,
      "node_id": "IC_kwDOABII586in3nw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2728360432",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T06:40:32Z",
      "updated_at": "2025-03-17T10:24:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "I will look into the CI asap.\r\nUPDATE: fixed the obvious ones; `script_tests` fails as only functional tests have currently been updated, so that remains to be done.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2728360432",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16796125002,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAPpIIdK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16796125002",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3c269f93aedcc58f4d4176a820d5a486ab057af1",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/3c269f93aedcc58f4d4176a820d5a486ab057af1",
      "created_at": "2025-03-17T07:33:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16797498320,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAPpNXvQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16797498320",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6efdd41c1d6001e19dadaeebc45b604dadf4a934",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/6efdd41c1d6001e19dadaeebc45b604dadf4a934",
      "created_at": "2025-03-17T09:03:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16798060855,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAPpPhE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16798060855",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d7cc49050011ac7cc7118f85ef215411cc79bc4d",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/d7cc49050011ac7cc7118f85ef215411cc79bc4d",
      "created_at": "2025-03-17T09:30:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16798766301,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAPpSNTd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16798766301",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/0a1d149112af2835166e3d6e62a925df2e416e4e",
      "created_at": "2025-03-17T09:56:24Z"
    },
    {
      "event": "reviewed",
      "id": 2695670538,
      "node_id": "PRR_kwDOABII586grKsK",
      "url": null,
      "actor": null,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-03-18T17:55:33Z",
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#pullrequestreview-2695670538",
      "submitted_at": "2025-03-18T17:55:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
    },
    {
      "event": "labeled",
      "id": 16899579220,
      "node_id": "LE_lADOABII586uRkpVzwAAAAPvSx1U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16899579220",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:09:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2710092012,
      "node_id": "PRR_kwDOABII586hiLjs",
      "url": null,
      "actor": null,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-03-24T12:07:16Z",
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#pullrequestreview-2710092012",
      "submitted_at": "2025-03-24T12:07:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17044620348,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAP38EQ8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17044620348",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a4da2cf00439f74e390c59169e3768d9caf7f773",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/a4da2cf00439f74e390c59169e3768d9caf7f773",
      "created_at": "2025-03-29T16:50:44Z"
    },
    {
      "event": "unlabeled",
      "id": 17044764821,
      "node_id": "UNLE_lADOABII586uRkpVzwAAAAP38niV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17044764821",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-29T17:04:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2763808758,
      "node_id": "IC_kwDOABII586kvF_2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2763808758",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-29T17:18:03Z",
      "updated_at": "2025-03-29T17:18:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Renamed the `flags` parameter to `mode`, matching the analogous change in the BIP draft.\r\nRebased to the latest master.\r\n\r\nStill trying to locally reproduce the unit test failures.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2763808758",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY2MTUzY2NhNzhjZmFkYjkwY2ZiMWE1MTJlMjlhYTcyNTE4OGQ0YzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66153cca78cfadb90cfb1a512e29aa725188d4c2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/66153cca78cfadb90cfb1a512e29aa725188d4c2",
      "tree": {
        "sha": "8a8a36e51cb6b79a22e2c0594a833ac48d791a50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a8a36e51cb6b79a22e2c0594a833ac48d791a50"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8a8a36e51cb6b79a22e2c0594a833ac48d791a50\nparent 4c1906a500cacab385b09e780b54271b0addaf4b\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1743288363 +0100\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1743342947 +0200\n\nchainparams: add versionbits deployment for OP_CHECKCONTRACTVERIFY\n\nOnly active on regtest.\nThis is only for PR hygiene: CCV is not proposed as a soft-fork on\nits own, but having minimal deployment code in the PR helps to keep\nthings clean.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfpTWMACgkQdAYP+Bsz\n5Phz8wwAmdUnOdbBLV4O17G4ydfU1cpyYE3laa6V9T+i7fNw1FnYFcdSyNkdst0j\nCm+U+5IM9fzJ/GcElUZoe3ClqHGKH3l/jNp6HM5z5gICWTjqYx5L8mV+XiNCEJJS\nRHc3IINk7AlgZjEeRCnlW3QpWg5XyX3bQ2ONxMRK3OUmXbDW7THLfDvhhz79yxsx\nDFkivlFA6mPjgLtbtdGEWonvuaa1vH8x4GiF5WyakU1YTrT5hwB245Qe58imY0+I\njoJi+hL40xqFT34/gq0lcY7oKDaoI/NezDcfVzCa1DFFxnDATFTGuo0Bx1kYaFqz\n3dYIBF/wF8VyCcmi5y3LBhJKVsFPDFfMhXXhDbFvizPt4F5g3F37/f5t/eT4N+gy\n2lhbKugNPw/h2mWsGrRcBGZrgk5Gdd0i23mlri1g8JJKviULXnSMG7CfkCWQj+mv\nC11SioNUhgCJo/zzM6T0js7TnA8NjZwfcQ+G3/lPIy9GyCL1+C8J1LlN86kRYn7y\niFjVb0HW\n=DsEQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c1906a500cacab385b09e780b54271b0addaf4b",
          "sha": "4c1906a500cacab385b09e780b54271b0addaf4b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4c1906a500cacab385b09e780b54271b0addaf4b"
        }
      ],
      "message": "chainparams: add versionbits deployment for OP_CHECKCONTRACTVERIFY\n\nOnly active on regtest.\nThis is only for PR hygiene: CCV is not proposed as a soft-fork on\nits own, but having minimal deployment code in the PR helps to keep\nthings clean.",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-30T13:55:47Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-29T22:46:03Z"
      },
      "sha": "66153cca78cfadb90cfb1a512e29aa725188d4c2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJjMWRlZWZlZGMxNmU1OWUwMDhlMWQ1NmU4ZDFlZjQ1M2E3OWRhMDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c1deefedc16e59e008e1d56e8d1ef453a79da02",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2c1deefedc16e59e008e1d56e8d1ef453a79da02",
      "tree": {
        "sha": "1c7673b1416645e1cd2cece39bac4e314dc9a118",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c7673b1416645e1cd2cece39bac4e314dc9a118"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1c7673b1416645e1cd2cece39bac4e314dc9a118\nparent 66153cca78cfadb90cfb1a512e29aa725188d4c2\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1740952220 +0100\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1743343781 +0200\n\nconsensus: Cross-input script validation framework\n\nAdds a framework for validation checks that persist an individual\ninput's script validation, allowing to persist state across the\nevaluations of multiple inputs of a transaction.\n\nThis will be used for the amount logic of OP_CHECKCONTRACTVERIFY,\nthat performs amount checks that are aggregate across multiple inputs.\n\nIt could also be used for other applications, like batch validation\nand cross-input Schnorr signature aggregation.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfpUL4ACgkQdAYP+Bsz\n5PgdMQwAg/vVtFcsKcyaHXWImMYN60cb8y/kgjYeUr1kftUc3ofaxIAnBGjxAGru\n4GxZElI/wTsFME/4sOlshddQXEylyzZ4C+WsqsiVcT1V0/+4go0XGgxDPnwy4TFC\np7CRvjLKsGATi0nAjQzx5lnUJpcv0qAUWqu3InxKXyd0MmOUusv4flIVHkxCcN5D\nv3T0dfOcSl4iQofoFfVzzhD/T/USnDsMnffgPePUy/td09PmMNGSX/Ybi4GA5FOB\n2ZQvhtZLKF3HMPOBa9tytN/MAfKoRtr96gpbbptMO+P9Qba4rRdyrALJkPjK7a8k\nPetXFvBGPhcXFjSJx4DkAbMFZPuIyTn/milRa2Y6RKJ3Aaubphabbd3htVFQyoxR\n+mgGbOe1aWt5PsXzWdVculdViQ76MkYdQiYlJlelfH6Zfc1YilKDidVZpi6oOyj1\nNFVKvvkU7xkvbYXDFX3lWpUREXpEHkDWkMpVTcX4pHdrVZRncGILOjJngkjq1CzU\nMz9l2xa6\n=lbvU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66153cca78cfadb90cfb1a512e29aa725188d4c2",
          "sha": "66153cca78cfadb90cfb1a512e29aa725188d4c2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/66153cca78cfadb90cfb1a512e29aa725188d4c2"
        }
      ],
      "message": "consensus: Cross-input script validation framework\n\nAdds a framework for validation checks that persist an individual\ninput's script validation, allowing to persist state across the\nevaluations of multiple inputs of a transaction.\n\nThis will be used for the amount logic of OP_CHECKCONTRACTVERIFY,\nthat performs amount checks that are aggregate across multiple inputs.\n\nIt could also be used for other applications, like batch validation\nand cross-input Schnorr signature aggregation.",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-30T14:09:41Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-02T21:50:20Z"
      },
      "sha": "2c1deefedc16e59e008e1d56e8d1ef453a79da02"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc3YzhjOWViYjgwODJlODI4NWQwYzVkM2IzMDJjMzE5ZmU2NTlhZTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77c8c9ebb8082e8285d0c5d3b302c319fe659ae5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/77c8c9ebb8082e8285d0c5d3b302c319fe659ae5",
      "tree": {
        "sha": "7d0277fc07c9c3ad7a7f9c6122205b9e3e672aad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d0277fc07c9c3ad7a7f9c6122205b9e3e672aad"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7d0277fc07c9c3ad7a7f9c6122205b9e3e672aad\nparent 2c1deefedc16e59e008e1d56e8d1ef453a79da02\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1740962789 +0100\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1743344057 +0200\n\nconsensus: Add OP_CHECKCONTRACTVERIFY\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfpUbkACgkQdAYP+Bsz\n5PivWwv9FGFkRBBcLH7sicZ84mog0DY0plRw/9vcp7n/1qaykf0EmjSdsJUBNzwG\nIIA7USbe9FxvNZ+S9Q5ybYQqXlp8vmXL532FDg/3GjE+4u6spaklh/Bh7uL9s3MZ\nXloHL8rH8PKR6urXJzxosp4OFuXdxDiKM7IBJXDDGD1wFWa78HOOn7akhOn/hk3c\n+XYSCr6qT/NOKK3t05Gyz4M7d2HNgnFLUil0bDso9hrjs+Li4520yE9muGNXxTKS\n4IBZQt722BucilXh6U9pachBUHaZapI5p9ZegBdBituAvdHTxy1VYvh+8CQ2YKgK\nh/MplrRhslUkP3+bRLoI10lgqquM15NYZ6aQERZaFBas6BwnPvRT9wAcp9ugXO2c\n1p6mMS+USY1FQaYXuoSDtnlfrafiJePy0GdxeZSBczksKSvsVLe19wmls1+h6Lf8\nA8tL0kcjsT/eAaUR6qM8chnfvbCESkGpCW425nePoHaEUlATec3iolq7fclwE49v\nOEd+gNs3\n=DyJ5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c1deefedc16e59e008e1d56e8d1ef453a79da02",
          "sha": "2c1deefedc16e59e008e1d56e8d1ef453a79da02",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2c1deefedc16e59e008e1d56e8d1ef453a79da02"
        }
      ],
      "message": "consensus: Add OP_CHECKCONTRACTVERIFY",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-30T14:14:17Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-03T00:46:29Z"
      },
      "sha": "77c8c9ebb8082e8285d0c5d3b302c319fe659ae5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMxYzJmZTU2NjMwODM2MGQyODQ0MDQ2Mjc5ZmYwZGRjM2JlMGY5NDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1c2fe566308360d2844046279ff0ddc3be0f941",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c2fe566308360d2844046279ff0ddc3be0f941",
      "tree": {
        "sha": "92a25c351cc02587cb470b51b8ed7d29c60dadad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92a25c351cc02587cb470b51b8ed7d29c60dadad"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 92a25c351cc02587cb470b51b8ed7d29c60dadad\nparent 77c8c9ebb8082e8285d0c5d3b302c319fe659ae5\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1688934919 +0200\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1743344057 +0200\n\ntest: Add functional tests for OP_CHECKCONTRACTVERIFY\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfpUbkACgkQdAYP+Bsz\n5Pg/6gv/ch70e4ZmounQ1kF3Iov6+kmtsGWw9uKNXVQFCQ9xQOM7GszGHs/0BcWr\ndEU5ARQdw8FU9VKvDc78Au9EcX8iIHIWRPuyldMJ7AVq/2R52VrF8VnTqcQ2excZ\nMBFch6ROUBAJckl4OXdywav8Y2UNoSQW8M5kngH96BlA4BzUYxRQaG36xjygsyid\n1xjDyxwnCTMnoy3Nobj0IMHOykk9PEuVY7Q04ydLnicALZAI8MsXrZLx70Ek2wAB\nTa+/j8lNw4xG23BH4RxjE40E1cObp689i+NhVllZHEmGU9+9KmkRgmyvptRpmUE+\nO3bTwegBkiiNoLEdmtYPUsQWr+jYOCilaU3kW9IzYG0niDJctKCZL7npozty5E9K\nmmAltwncnU/oGxw7bs5C8diSEazgn+98lIDdaPH/9PTcsBQUZZUNLNnq1yIJrxNI\n4pKpk+ZCOwusLcse/uUpMKY5Wh7j5tnVLUibaOPgZ2cl0ehoffbpTdpF0Dq6vu6z\n3G991G79\n=X1+n\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77c8c9ebb8082e8285d0c5d3b302c319fe659ae5",
          "sha": "77c8c9ebb8082e8285d0c5d3b302c319fe659ae5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/77c8c9ebb8082e8285d0c5d3b302c319fe659ae5"
        }
      ],
      "message": "test: Add functional tests for OP_CHECKCONTRACTVERIFY",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-30T14:14:17Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2023-07-09T20:35:19Z"
      },
      "sha": "c1c2fe566308360d2844046279ff0ddc3be0f941"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFmY2EyNjg5ODY2NzYxZWU0Y2Q2NjI5YzBmM2EwZGViMGZhYzcyYWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "tree": {
        "sha": "58b695004a7c166da3140d10a9b9aeec2137ace4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58b695004a7c166da3140d10a9b9aeec2137ace4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 58b695004a7c166da3140d10a9b9aeec2137ace4\nparent c1c2fe566308360d2844046279ff0ddc3be0f941\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1738797836 +0100\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1743344057 +0200\n\ntest: Add functional tests for a vault construction based on CHECKCONTRACTVERIFY\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfpUbkACgkQdAYP+Bsz\n5PimRQwAmk9RF7qlfZu/8F53PpARb0njG5uB92XqLb6RgeUaCOVIMJmdsFgvuqYi\nTtH+MWGKK3hhaBk5xNlSyYfkzWbQ1uxTkUT0QQ+mpomxc9W3uZAJI6ZOmyUTC0fF\nqDPiR1UIqV0QPQ/p2cjt/62vl4A0E7bNn8wqL5olnDcmGDn00c04/7Ber2LxAuuA\nHeemrhGhW9nqRtlJAj0XrdnNSodSTYkPf19IUeEw1n8cgefuJB1Vegg6r7yyqOg9\nu25lOcvS/h8/cMBfJFI4dhbNHd93FVDp0wALz7n/BkHlEYNdRwJ7oKcoCDzUBt17\njr8qvYAyLYjHbhalc6riPB8eYstD77BQn9GmSpbTTayVCg+TH1gIPQTRMcGcDz1F\nGuXUoEERMHWsHdYtzQQIrttaj1apeNovnuQd/50FrQKQG+CYt++shQLOP8R73CCv\nqUzClVs1O+QJWy9MnuAmPvVO1Kas2FyYWvU0uI8HDb5g8ACEkhxsNXzJyImKENXn\nV+vwPI8g\n=TXPL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1c2fe566308360d2844046279ff0ddc3be0f941",
          "sha": "c1c2fe566308360d2844046279ff0ddc3be0f941",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c2fe566308360d2844046279ff0ddc3be0f941"
        }
      ],
      "message": "test: Add functional tests for a vault construction based on CHECKCONTRACTVERIFY",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-30T14:14:17Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-02-05T23:23:56Z"
      },
      "sha": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17048074165,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAP4JPe1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17048074165",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "created_at": "2025-03-30T14:14:43Z"
    },
    {
      "event": "commented",
      "id": 2764601895,
      "node_id": "IC_kwDOABII586kyHon",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2764601895",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T15:03:00Z",
      "updated_at": "2025-03-30T15:03:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "I added a workaround to disable the two failing tests from the `script_assets_test`; those tests do indeed assume the `OP_SUCCESS` behaviour of the `0xBB` opcode.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2764601895",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "unlabeled",
      "id": 17048243378,
      "node_id": "UNLE_lADOABII586uRkpVzwAAAAP4J4yy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17048243378",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T15:28:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 17183089808,
      "node_id": "LE_lADOABII586uRkpVzwAAAAQAMSSQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17183089808",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-09T07:01:06Z",
      "label": {
        "name": "Consensus",
        "color": "009800"
      }
    },
    {
      "event": "commented",
      "id": 2902173215,
      "node_id": "IC_kwDOABII586s-6Yf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2902173215",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-22T18:21:51Z",
      "updated_at": "2025-05-22T18:21:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2902173215",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "labeled",
      "id": 17777614231,
      "node_id": "LE_lADOABII586uRkpVzwAAAAQjoN2X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17777614231",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-22T18:21:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2959250246,
      "node_id": "PRR_kwDOABII586wYpNG",
      "url": null,
      "actor": null,
      "commit_id": "2c1deefedc16e59e008e1d56e8d1ef453a79da02",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-25T18:38:10Z",
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#pullrequestreview-2959250246",
      "submitted_at": "2025-06-25T18:38:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
    },
    {
      "event": "commented",
      "id": 3316430777,
      "node_id": "IC_kwDOABII587FrLe5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3316430777",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-22T01:03:14Z",
      "updated_at": "2025-09-22T01:03:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--13523179cfe9479db18ec6c5d236f789-->\n⌛ There hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? ➡️ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? ➡️ Please close.\n* Did the author lose interest or time to work on this? ➡️ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-3316430777",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "commented",
      "id": 3432952954,
      "node_id": "IC_kwDOABII587MnrR6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3432952954",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-22T15:15:25Z",
      "updated_at": "2025-10-22T15:15:25Z",
      "author_association": "MEMBER",
      "body": "This seems like something for Bitcoin Inquisition, now that that has been rebased.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-3432952954",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "closed",
      "id": 20433852300,
      "node_id": "CE_lADOABII586uRkpVzwAAAATB89eM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20433852300",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-22T15:15:25Z"
    },
    {
      "event": "commented",
      "id": 3442292002,
      "node_id": "IC_kwDOABII587NLTUi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3442292002",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T10:02:38Z",
      "updated_at": "2025-10-24T10:02:38Z",
      "author_association": "MEMBER",
      "body": "@bigspider please leave a note here if and when you open a PR on Inquisition.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-3442292002",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "mentioned",
      "id": 20479232890,
      "node_id": "MEE_lADOABII586uRkpVzwAAAATEqEt6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20479232890",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T10:02:39Z"
    },
    {
      "event": "subscribed",
      "id": 20479232919,
      "node_id": "SE_lADOABII586uRkpVzwAAAATEqEuX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20479232919",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T10:02:39Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2001653317",
      "pull_request_review_id": 2695670538,
      "id": 2001653317,
      "node_id": "PRRC_kwDOABII5853Ts5F",
      "diff_hunk": "@@ -1781,11 +1833,121 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckContract(int flags, int index, const std::vector<unsigned char>& pubkey, const std::vector<unsigned char>& data, const std::vector<unsigned char>& taptree, ScriptExecutionData& ScriptExecutionData, ScriptError* serror, TransactionExecutionData* tx_exec_data) const\n+{\n+    assert(ScriptExecutionData.m_internal_key.has_value());\n+    assert(ScriptExecutionData.m_taproot_merkle_root.has_value());\n+    assert(tx_exec_data != nullptr);\n+\n+    if (!(txdata->m_bip341_taproot_ready && txdata->m_spent_outputs_ready)) {\n+        return HandleMissingData(m_mdb);\n+    }\n+\n+    bool use_current_taptree = taptree.size() == 1 && taptree.data()[0] == 0x81;\n+    bool use_current_pubkey = pubkey.size() == 1 && pubkey.data()[0] == 0x81;\n+\n+    uint256 merkle_tree;\n+    const uint256 *merkle_tree_ptr = nullptr;\n+    if (taptree.empty()) {\n+        // no taptweak, leave nullptr\n+    } else if (use_current_taptree) {\n+        merkle_tree_ptr = &ScriptExecutionData.m_taproot_merkle_root.value();\n+    } else if (taptree.size() == 32) {\n+        merkle_tree = uint256(taptree);\n+        merkle_tree_ptr = &merkle_tree;\n+    } else {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_WRONG_ARGS);\n+    }\n+\n+    XOnlyPubKey initialXOnlyKey;\n+    if (use_current_pubkey) {\n+        initialXOnlyKey = ScriptExecutionData.m_internal_key.value();\n+    } else if (pubkey.empty()) {\n+        initialXOnlyKey = XOnlyPubKey::NUMS_H;\n+    } else {\n+        initialXOnlyKey = XOnlyPubKey{Span<const unsigned char>{pubkey.data(), pubkey.data() + 32}};\n+    }\n+\n+    if (index == -1) {\n+        index = nIn;\n+    }\n+\n+    auto indexLimit = (flags == CCV_FLAG_CHECK_INPUT ? txTo->vin.size() : txTo->vout.size());\n+    if (index < 0 || index >= static_cast<int>(indexLimit)) {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_OUT_OF_BOUNDS);\n+    }\n+\n+    CScript scriptPubKey = (flags == CCV_FLAG_CHECK_INPUT) ? txdata->m_spent_outputs[index].scriptPubKey : txTo->vout.at(index).scriptPubKey;\n+\n+    if (scriptPubKey.size() != 1 + 1 + 32 || scriptPubKey[0] != OP_1 || scriptPubKey[1] != 32) {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_WRONG_ARGS);",
      "path": "src/script/interpreter.cpp",
      "position": 142,
      "original_position": 140,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How much resources can a (mempool) transaction waste by violating this rule in the last input / output after making the interpreter do a bunch of hashing work?\r\n\r\nAnd is that worse than existing taproot script allows? And would it be better with a restriction on the number of combinations, e.g. if inputs can't refer to other inputs? Or should these bounds checks be done earlier for the whole transaction? (that seems impossible because the index comes from the stack, which you can't predict through static analysis of the script and witness)",
      "created_at": "2025-03-18T17:55:33Z",
      "updated_at": "2025-03-18T17:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2001653317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2001653317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1886,
      "original_line": 1886,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2005048885",
      "pull_request_review_id": 2701678649,
      "id": 2005048885,
      "node_id": "PRRC_kwDOABII5853gp41",
      "diff_hunk": "@@ -1781,11 +1833,121 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckContract(int flags, int index, const std::vector<unsigned char>& pubkey, const std::vector<unsigned char>& data, const std::vector<unsigned char>& taptree, ScriptExecutionData& ScriptExecutionData, ScriptError* serror, TransactionExecutionData* tx_exec_data) const\n+{\n+    assert(ScriptExecutionData.m_internal_key.has_value());\n+    assert(ScriptExecutionData.m_taproot_merkle_root.has_value());\n+    assert(tx_exec_data != nullptr);\n+\n+    if (!(txdata->m_bip341_taproot_ready && txdata->m_spent_outputs_ready)) {\n+        return HandleMissingData(m_mdb);\n+    }\n+\n+    bool use_current_taptree = taptree.size() == 1 && taptree.data()[0] == 0x81;\n+    bool use_current_pubkey = pubkey.size() == 1 && pubkey.data()[0] == 0x81;\n+\n+    uint256 merkle_tree;\n+    const uint256 *merkle_tree_ptr = nullptr;\n+    if (taptree.empty()) {\n+        // no taptweak, leave nullptr\n+    } else if (use_current_taptree) {\n+        merkle_tree_ptr = &ScriptExecutionData.m_taproot_merkle_root.value();\n+    } else if (taptree.size() == 32) {\n+        merkle_tree = uint256(taptree);\n+        merkle_tree_ptr = &merkle_tree;\n+    } else {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_WRONG_ARGS);\n+    }\n+\n+    XOnlyPubKey initialXOnlyKey;\n+    if (use_current_pubkey) {\n+        initialXOnlyKey = ScriptExecutionData.m_internal_key.value();\n+    } else if (pubkey.empty()) {\n+        initialXOnlyKey = XOnlyPubKey::NUMS_H;\n+    } else {\n+        initialXOnlyKey = XOnlyPubKey{Span<const unsigned char>{pubkey.data(), pubkey.data() + 32}};\n+    }\n+\n+    if (index == -1) {\n+        index = nIn;\n+    }\n+\n+    auto indexLimit = (flags == CCV_FLAG_CHECK_INPUT ? txTo->vin.size() : txTo->vout.size());\n+    if (index < 0 || index >= static_cast<int>(indexLimit)) {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_OUT_OF_BOUNDS);\n+    }\n+\n+    CScript scriptPubKey = (flags == CCV_FLAG_CHECK_INPUT) ? txdata->m_spent_outputs[index].scriptPubKey : txTo->vout.at(index).scriptPubKey;\n+\n+    if (scriptPubKey.size() != 1 + 1 + 32 || scriptPubKey[0] != OP_1 || scriptPubKey[1] != 32) {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_WRONG_ARGS);",
      "path": "src/script/interpreter.cpp",
      "position": 142,
      "original_position": 140,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2001653317,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In terms of hashing, it is no different than opcodes like `OP_SHA256`, as it hashes a stack element (prefixed with an x-only key, so up to 552 bytes in total).\r\nSo restricting the opcode to just the current input shouldn't make any difference.\r\n\r\nThat should be significantly smaller than the the cost of the double tweak, which should instead be comparable (and priced appropriately in sigops) to signatures – hopefully a bit less than that, but this needs a proper benchmark.\r\n\r\nNote that no non-witness parts of the transaction is involved in the hashing (except the current input's internal key/taptree when the corresponding parameter is -1), so caching issues like the ones one might have for opcodes like `OP_CHECKSIG` or `OP_CHECKTEMPLATEVERIFY/TXHASH` shouldn't be a concern.",
      "created_at": "2025-03-20T08:29:32Z",
      "updated_at": "2025-03-20T08:36:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2005048885",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2005048885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1886,
      "original_line": 1886,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010016851",
      "pull_request_review_id": 2710092012,
      "id": 2010016851,
      "node_id": "PRRC_kwDOABII5853zmxT",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 0a1d149112af2835166e3d6e62a925df2e416e4e \"test: Add functional tests for a vault construction based on CHECKCONTRACTVERIFY\"\r\n\r\nCan `alternate_pk` and `recover_pk` just be the same? That way there's only two key sets needed for a vault: one hot, one cold. And you're avoiding the use of a NUMS point.\r\n\r\nBIP 345 (`OP_VAULT`) says:\r\n\r\n> the recovery key can include a number of spending conditions, e.g. a time-delayed fallback to an \"easier\" recovery method, in case the highly secure key winds up being too highly secure.\r\n\r\nIn your scheme you can have those recovery options in the main taptree. That allows for recovery without an initial trigger transaction / unvaulting, i.e. even if you lost the hot key (I think BIP 345 allows that too?).",
      "created_at": "2025-03-24T11:45:42Z",
      "updated_at": "2025-03-24T12:07:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010016851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010016851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010152687",
      "pull_request_review_id": 2710333325,
      "id": 2010152687,
      "node_id": "PRRC_kwDOABII58530H7v",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "<details>\r\n<summary>patch</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/feature_checkcontractverify_vaults.py b/test/functional/feature_checkcontractverify_vaults.py\r\nindex 37e0bbd39f..60871850c1 100755\r\n--- a/test/functional/feature_checkcontractverify_vaults.py\r\n+++ b/test/functional/feature_checkcontractverify_vaults.py\r\n@@ -47,19 +47,16 @@ class Vault(P2TR):\r\n     - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\r\n     - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\r\n       to an Unvaulting output, after providing a 'withdrawal_pk'\r\n-    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)\r\n     \"\"\"\r\n\r\n-    def __init__(self, alternate_pk: Optional[bytes], spend_delay: int, recover_pk: bytes, unvault_pk: bytes, *, has_partial_revault=True, has_early_recover=True):\r\n-        assert (alternate_pk is None or len(alternate_pk) == 32) and len(\r\n-            recover_pk) == 32 and len(unvault_pk) == 32\r\n+    def __init__(self, spend_delay: int, recover_pk: bytes, unvault_pk: bytes, *, has_partial_revault=True, has_early_recover=True):\r\n+        assert len(recover_pk) == 32 and len(unvault_pk) == 32\r\n\r\n-        self.alternate_pk = alternate_pk\r\n         self.spend_delay = spend_delay\r\n         self.recover_pk = recover_pk\r\n         self.unvault_pk = unvault_pk\r\n\r\n-        unvaulting = Unvaulting(alternate_pk, spend_delay, recover_pk)\r\n+        unvaulting = Unvaulting(spend_delay, recover_pk)\r\n\r\n         self.has_partial_revault = has_partial_revault\r\n         self.has_early_recover = has_early_recover\r\n@@ -68,7 +65,7 @@ class Vault(P2TR):\r\n         trigger = (\"trigger\",\r\n                    CScript([\r\n                        # data and index already on the stack\r\n-                       0 if alternate_pk is None else alternate_pk,  # pk\r\n+                       recover_pk,  # pk\r\n                        unvaulting.get_taptree(),  # taptree\r\n                        0,  # standard flags\r\n                        OP_CHECKCONTRACTVERIFY,\r\n@@ -89,7 +86,7 @@ class Vault(P2TR):\r\n                 OP_CHECKCONTRACTVERIFY,\r\n\r\n                 # data and index already on the stack\r\n-                0 if alternate_pk is None else alternate_pk,  # pk\r\n+                recover_pk,  # pk\r\n                 unvaulting.get_taptree(),  # taptree\r\n                 0,  # standard flags\r\n                 OP_CHECKCONTRACTVERIFY,\r\n@@ -113,7 +110,7 @@ class Vault(P2TR):\r\n             ])\r\n         )\r\n\r\n-        super().__init__(NUMS_KEY if alternate_pk is None else alternate_pk, [\r\n+        super().__init__(recover_pk, [\r\n             trigger, [trigger_and_revault, recover]])\r\n\r\n\r\n@@ -123,18 +120,15 @@ class Unvaulting(AugmentedP2TR):\r\n     - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\r\n     - with the \"withdraw\" clause, after a relative timelock of spend_delay blocks, sending the entire amount to a P2TR output that has\r\n       the taproot key 'withdrawal_pk'\r\n-    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)\r\n     \"\"\"\r\n\r\n-    def __init__(self, alternate_pk: Optional[bytes], spend_delay: int, recover_pk: bytes):\r\n-        assert (alternate_pk is None or len(alternate_pk)\r\n-                == 32) and len(recover_pk) == 32\r\n+    def __init__(self, spend_delay: int, recover_pk: bytes):\r\n+        assert len(recover_pk) == 32\r\n\r\n-        self.alternate_pk = alternate_pk\r\n         self.spend_delay = spend_delay\r\n         self.recover_pk = recover_pk\r\n\r\n-        super().__init__(NUMS_KEY if alternate_pk is None else alternate_pk)\r\n+        super().__init__(recover_pk)\r\n\r\n     def get_scripts(self) -> TapTree:\r\n         # witness: <withdrawal_pk>\r\n@@ -144,7 +138,7 @@ class Unvaulting(AugmentedP2TR):\r\n                 OP_DUP,\r\n\r\n                 -1,\r\n-                0 if self.alternate_pk is None else self.alternate_pk,\r\n+                self.recover_pk,\r\n                 -1,\r\n                 CCV_FLAG_CHECK_INPUT,\r\n                 OP_CHECKCONTRACTVERIFY,\r\n@@ -183,13 +177,11 @@ class Unvaulting(AugmentedP2TR):\r\n\r\n # We reuse these specs for all the tests\r\n vault_contract = Vault(\r\n-    alternate_pk=None,\r\n     spend_delay=10,\r\n     recover_pk=recover_pubkey_xonly,\r\n     unvault_pk=unvault_pubkey_xonly\r\n )\r\n unvault_contract = Unvaulting(\r\n-    alternate_pk=None,\r\n     spend_delay=10,\r\n     recover_pk=recover_pubkey_xonly\r\n )\r\n```\r\n\r\n</details>",
      "created_at": "2025-03-24T13:10:17Z",
      "updated_at": "2025-03-24T16:16:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010152687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010152687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010404646",
      "pull_request_review_id": 2710783049,
      "id": 2010404646,
      "node_id": "PRRC_kwDOABII58531Fcm",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Here's a branch with the above patch https://github.com/bitcoin/bitcoin/commit/f87381ae825b7c0263f0b30d2f93e2687c8fca6f, but also renaming:\r\n- `unvault_{privkey, pubkey_xonly}` to `hot_{privkey,pk,pubkey_xonly}`\r\n- `recover_{privkey, pubkey_xonly}` to `cold_{privkey,pk,pubkey_xonly}`\r\n\r\nWith that terminology I find it easier to follow: using their hot key the user unvaults into some arbitrary withdrawal address, which can be recovered _to_ their cold key (with no signature, just knowledge of the recover leaf).\r\n\r\n--- \r\n\r\nI missed a spot where the alternate key was used:\r\nhttps://github.com/bitcoin/bitcoin/compare/master...Sjors:bitcoin:2025/03/op_cvv_vault_test\r\n\r\nSo now the withdraw leaf is shorter.\r\n\r\nThough maybe I'm misunderstanding what the alternate_pk was good for. Maybe to provide an example of having two `OP_CHECKCONTRACTVERIFY` codes in a single leaf?  The `trigger_and_revault` leaf already does that.\r\n\r\nIt could still make sense to have an example of a more advanced vault, but it should be seperate. The simplest possible vault is a good way to learn how this opcode works.",
      "created_at": "2025-03-24T15:24:15Z",
      "updated_at": "2025-03-24T16:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010404646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010404646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010554425",
      "pull_request_review_id": 2711041374,
      "id": 2010554425,
      "node_id": "PRRC_kwDOABII58531qA5",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried to be smart and also use `-1` instead of `cold_pk` in `recover_leaf`, but that doesn't work. Not sure why.\r\n\r\nIIUC there's two recovery methods. If so it would be good to demonstrate both:\r\n1. Using the cold keys directly, using the key path of the trigger output\r\n2. Using the recovery condition\r\n\r\n(2) can be done without using the cold keys, which is nice if you're not sure yet how your hot key was compromised. ",
      "created_at": "2025-03-24T16:40:29Z",
      "updated_at": "2025-03-24T16:43:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010554425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010554425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010662585",
      "pull_request_review_id": 2711242138,
      "id": 2010662585,
      "node_id": "PRRC_kwDOABII58532Ea5",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Mmm, I think I'm still missing something. Pushed a commit 43e2d9792bae4894563625f8ae86c3e504d44004 that robs the vault by simply changing the destination address and witness at withdrawal time.\r\n\r\n---\r\n\r\nFixed in 4379b2545ff79592b0967193e830db4397f975f6, by more or less restoring the code I deleted in e937281acd9a0c5fb1573e13a90672114f55e4cb.",
      "created_at": "2025-03-24T17:45:15Z",
      "updated_at": "2025-03-24T18:07:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010662585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010662585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010999772",
      "pull_request_review_id": 2711800386,
      "id": 2010999772,
      "node_id": "PRRC_kwDOABII58533Wvc",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for checking out the demo!\r\nFor the naming, I tried to use names similar to BIP-345, except that I name the \"Vault\" and \"Unvaulting\" state of the FSM which seems more natural in CCV-lingo (where you define the multi-utxo contract as a finite-state-machine).\r\n\r\n> Can `alternate_pk` and `recover_pk` just be the same? That way there's only two key sets needed for a vault: one hot, one cold. And you're avoiding the use of a NUMS point.\r\n\r\nYou could, but I don't think that makes a lot of sense in practice, as the `alternate_pk` has no covenant restriction. I think in simple vaults it doesn't make sense to use the `alternate_pk`; you could only make sense to use it for deep cold storage (e.g. a musig of cold keys, that is: \"you can override the 2-step withdrawal process, but you have to go through the hassle of using multiple cold keys\").\r\nNote that using the alternate pubkey makes the default spending paths more expensive, since NUMS has the special encoding `0` in CCV - so one might still prefer to use a NUMS in the keypath and put a `pk(alternate_pk)` in a tapleaf.\r\n\r\nIn general, I don't think the `alternate_pk` is very interesting for a vault, but it comes natural to define it because of how taproot works.\r\n\r\nThe keypath is certainly more interesting in multi-party contracts, where the parties can cooperatively agree to sign the transaction with a musig taproot keypath, instead of putting the covenant on-chain.\r\n\r\n> In your scheme you can have those recovery options in the main taptree. That allows for recovery without an initial trigger transaction / unvaulting, i.e. even if you lost the hot key (I think BIP 345 allows that too?).\r\n\r\nYes, in the demo I made a simple recovery mechanism that sends to a predetermined address, but you can of course get arbitrarily more creative if you wish!\r\n\r\n\r\n> I tried to be smart and also use `-1` instead of `cold_pk` in `recover_leaf`, but that doesn't work. Not sure why.\r\n\r\nPutting `-1` means in the `pk` argument means that you reuse the taproot internal key for your output, which you probably only want to do in a recursive contract (but then like you probably also want to put `-1` for the taptree, like the first `CCV` in the `trigger_and_revault` leaf, that recycles both the internal key and the taptree in order to 'send back to yourself').",
      "created_at": "2025-03-24T22:19:19Z",
      "updated_at": "2025-03-24T22:19:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010999772",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010999772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2011662736",
      "pull_request_review_id": 2712988544,
      "id": 2011662736,
      "node_id": "PRRC_kwDOABII585354mQ",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I tried to use names similar to BIP-345\r\n\r\nThe terms `{vault,trigger,withdrawal,recovery} transaction` from that BIP are indeed useful. But I found it a bit easier to follow when calling the relevant keys \"hot\" and \"cold\" and not having a third one.\r\n\r\n> You could, but I don't think that makes a lot of sense in practice, as the alternate_pk has no covenant restriction. \r\n\r\nMaybe I'm still confused then. In my branch I renamed `recover_pk` to `cold_pk`. So the cold key can be used for keypath spending, ignoring the covenant. And it's where the coins are sent to in a recovery scenario.\r\n\r\n> In general, I don't think the alternate_pk is very interesting for a vault, but it comes natural to define it because of how taproot works.\r\n\r\nSo then it's better to leave it out of the example for improved readability?\r\n\r\n",
      "created_at": "2025-03-25T09:17:52Z",
      "updated_at": "2025-03-25T09:17:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2011662736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2011662736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2011796654",
      "pull_request_review_id": 2713217669,
      "id": 2011796654,
      "node_id": "PRRC_kwDOABII58536ZSu",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">> I tried to be smart and also use -1 instead of cold_pk in recover_leaf, but that doesn't work. Not sure why.\r\n\r\n>Putting -1 means in the pk argument means that you reuse the taproot internal key for your output\r\n\r\nI'm still not sure if I understand this. I assumed that the taproot internal key is unchanged by the trigger transaction, i.e. it's still the cold key (in my branch).",
      "created_at": "2025-03-25T10:32:56Z",
      "updated_at": "2025-03-25T10:32:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2011796654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2011796654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2013038501",
      "pull_request_review_id": 2715369314,
      "id": 2013038501,
      "node_id": "PRRC_kwDOABII5853_Iel",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The 'trigger' transaction moves from the Vault state to the Unvaulting state.\r\n- a Vault UTXO has no embedded data, so the internal key equals what I called the _naked key_ (which is the `alternate_pk` in this case).\r\n- an Unvaulting UTXO has some data embedded (the withdrawal_pk), so the internal key is something like `tweak(alternate_pk, SHA256(alternate_pk || data))`. So if you put `-1` to send to an output with the \"same public key as the input's internal key\", you'd have the tweaked key as the output. Which is still spendable if you control `alternate_pk`, but probably not what you wanted.\r\n\r\nIf you _really_ wanted to \"send to an output with the same naked key as the input you're spending, you could pass _naked key_, _data_ and _taptree_, then do a CCV check on the input (with `CCV_FLAG_CHECK_INPUT`) to check it matches what's on the stack, then do a CCV on the output (now that you have the naked key on the stack). But I think you don't want to do this.\r\n\r\nIn most cases, working with directed acyclic graphs (meaning, the construction always moves forward, and introspection on the input is only used to get the input's data on the stack), so far, seems to be enough to do anything interesting.\r\n\r\nRecursive contracts are the exception, where you send to _exactly_ the same `(naked_key, taptree)` pair as the input, either with no data (like in vaults), or after updating the data with some new data (this will be useful in shared UTXOs, sidechains, etc.).",
      "created_at": "2025-03-25T22:49:20Z",
      "updated_at": "2025-03-25T22:57:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2013038501",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2013038501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2013583565",
      "pull_request_review_id": 2716218589,
      "id": 2013583565,
      "node_id": "PRRC_kwDOABII5854BNjN",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, that makes sense. There's no concept of a global naked key that is preserved between steps of the program (except through the workaround you mention).",
      "created_at": "2025-03-26T08:07:41Z",
      "updated_at": "2025-03-26T08:07:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2013583565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2013583565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167367967",
      "pull_request_review_id": 2959250246,
      "id": 2167367967,
      "node_id": "PRRC_kwDOABII586BL2kf",
      "diff_hunk": "@@ -2698,7 +2712,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n             TxValidationState tx_state;\n-            if (fScriptChecks && !CheckInputScripts(tx, tx_state, view, flags, fCacheResults, fCacheResults, txsdata[i], m_chainman.m_validation_cache, parallel_script_checks ? &vChecks : nullptr)) {\n+            if (fScriptChecks && !CheckInputScripts(tx, tx_state, view, flags, fCacheResults, fCacheResults, txsdata[i], m_chainman.m_validation_cache, tx_exec_store, parallel_script_checks ? &vChecks : nullptr)) {",
      "path": "src/validation.cpp",
      "position": 98,
      "original_position": 102,
      "commit_id": "1fca2689866761ee4cd6629c0f3a0deb0fac72ae",
      "original_commit_id": "2c1deefedc16e59e008e1d56e8d1ef453a79da02",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@bigspider In commit 2c1deefedc16e, naively it looks like this diff would resolve the rebase for you.\r\n\r\n```diff\r\n             bool tx_ok;\r\n             TxValidationState tx_state;\r\n             // If CheckInputScripts is called with a pointer to a checks vector, the resulting checks are appended to it. In that case\r\n             // they need to be added to control which runs them asynchronously. Otherwise, CheckInputScripts runs the checks before returning.\r\n-            if (fScriptChecks && !CheckInputScripts(tx, tx_state, view, flags, fCacheResults, fCacheResults, txsdata[i], m_chainman.m_validation_cache, tx_exec_store, parallel_script_checks ? &vChecks : nullptr)) {\r\n             if (control) {\r\n                 std::vector<CScriptCheck> vChecks;\r\n-                tx_ok = CheckInputScripts(tx, tx_state, view, flags, fCacheResults, fCacheResults, txsdata[i], m_chainman.m_validation_cache, &vChecks);\r\n+                tx_ok = CheckInputScripts(tx, tx_state, view, flags, fCacheResults, fCacheResults, txsdata[i], m_chainman.m_validation_cache, tx_exec_store, &vChecks);\r\n                 if (tx_ok) control->Add(std::move(vChecks));\r\n             } else {\r\n-                tx_ok = CheckInputScripts(tx, tx_state, view, flags, fCacheResults, fCacheResults, txsdata[i], m_chainman.m_validation_cache);\r\n+                tx_ok = CheckInputScripts(tx, tx_state, view, flags, fCacheResults, fCacheResults, txsdata[i], m_chainman.m_validation_cache, tx_exec_store);\r\n             }\r\n             if (!tx_ok) {\r\n```\r\n",
      "created_at": "2025-06-25T18:38:10Z",
      "updated_at": "2025-06-25T18:38:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2167367967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167367967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2712,
      "original_line": 2715,
      "side": "RIGHT"
    }
  ]
}
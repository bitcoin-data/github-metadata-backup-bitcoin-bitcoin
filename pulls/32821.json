{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821",
    "id": 2624129771,
    "node_id": "PR_kwDOABII586caQrr",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32821",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32821.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32821.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f53dbbc5057b6f676db4be9bc720898149f293fc",
    "number": 32821,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "rpc: Handle -named argument parsing where '=' character is used",
    "user": {
      "login": "zaidmstrr",
      "id": 72139621,
      "node_id": "MDQ6VXNlcjcyMTM5NjIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zaidmstrr",
      "html_url": "https://github.com/zaidmstrr",
      "followers_url": "https://api.github.com/users/zaidmstrr/followers",
      "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
      "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
      "repos_url": "https://api.github.com/users/zaidmstrr/repos",
      "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Addresses [comment](https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2091886628) and [this](https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2092039999).\r\n\r\nThe [PR #31375](https://github.com/bitcoin/bitcoin/pull/31375) got merged and enables `-named` by default in the `bitcoin rpc` interface; `bitcoin rpc` corresponds to `bitcoin-cli -named` as it's just a wrapper.  Now, the problem arises when we try to parse the positional paramater which might contain \"=\" character.  This splits the parameter into two parts first, before the \"=\" character, which treats this as the parameter name, but the other half is mostly passed as an empty string. Here, the first part of the string is an unknown parameter name; thus, an error is thrown. These types of errors are only applicable to those RPCs which might contain the `=` character as a parameter. Some examples are `finalizepsbt`, `decodepsbt`, `verifymessage` etc.\r\n\r\nThis is the one example of the error in `finalizepsbt` RPC:\r\n```\r\n./bitcoin-cli -named -regtest finalizepsbt cHNidP8BAJoCAAAAAqvNEjSrzRI0q80SNKvNEjSrzRI0q80SNKvNEjSrzRI0AAAAAAD9////NBLNqzQSzas0Es2rNBLNqzQSzas0Es2rNBLNqzQSzasBAAAAAP3///8CoIYBAAAAAAAWABQVQBGVs/sqFAmC8HZ8O+g1htqivkANAwAAAAAAFgAUir7MzgyzDnRMjdkVa7d+Dwr07jsAAAAAAAAAAAA=\r\nerror code: -8\r\nerror message:\r\nUnknown named parameter cHNidP8BAJoCAAAAAqvNEjSrzRI0q80SNKvNEjSrzRI0q80SNKvNEjSrzRI0AAAAAAD9////NBLNqzQSzas0Es2rNBLNqzQSzas0Es2rNBLNqzQSzasBAAAAAP3///8CoIYBAAAAAAAWABQVQBGVs/sqFAmC8HZ8O+g1htqivkANAwAAAAAAFgAUir7MzgyzDnRMjdkVa7d+Dwr07jsAAAAAAAAAAAA\r\n```\r\nThis PR fixes this by updating the `vRPCConvertParams` table that identifies parameters that need special handling in `-named` parameter mode. The parser now recognises these parameters and handles strings with \"=\" char correctly, preventing them from being incorrectly split as parameter assignments.",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2025-06-27T11:43:16Z",
    "updated_at": "2025-10-17T06:27:55Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "cfa33a3d9c2dcdec7f862ae3d1e0b76451fe809e",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "zaidmstrr:rpc-args",
      "ref": "rpc-args",
      "sha": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1003725977,
        "node_id": "R_kgDOO9OkmQ",
        "name": "bitcoin",
        "full_name": "zaidmstrr/bitcoin",
        "owner": {
          "login": "zaidmstrr",
          "id": 72139621,
          "node_id": "MDQ6VXNlcjcyMTM5NjIx",
          "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/zaidmstrr",
          "html_url": "https://github.com/zaidmstrr",
          "followers_url": "https://api.github.com/users/zaidmstrr/followers",
          "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
          "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
          "repos_url": "https://api.github.com/users/zaidmstrr/repos",
          "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/zaidmstrr/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/zaidmstrr/bitcoin",
        "archive_url": "https://api.github.com/repos/zaidmstrr/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/zaidmstrr/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/zaidmstrr/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/zaidmstrr/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/zaidmstrr/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/zaidmstrr/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/zaidmstrr/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/zaidmstrr/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/zaidmstrr/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/zaidmstrr/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/zaidmstrr/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/zaidmstrr/bitcoin/events",
        "forks_url": "https://api.github.com/repos/zaidmstrr/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/zaidmstrr/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/zaidmstrr/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/zaidmstrr/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/zaidmstrr/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/zaidmstrr/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/zaidmstrr/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/zaidmstrr/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/zaidmstrr/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/zaidmstrr/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/zaidmstrr/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/zaidmstrr/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/zaidmstrr/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/zaidmstrr/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/zaidmstrr/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/zaidmstrr/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:zaidmstrr/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/zaidmstrr/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/zaidmstrr/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/zaidmstrr/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/zaidmstrr/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/zaidmstrr/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/zaidmstrr/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/zaidmstrr/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/zaidmstrr/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/zaidmstrr/bitcoin/hooks",
        "svn_url": "https://github.com/zaidmstrr/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 251275,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-01T16:53:20Z",
        "created_at": "2025-06-17T15:14:46Z",
        "updated_at": "2025-06-17T15:14:46Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "acc7f2a433b131597124ba0fbbe9952c4d36a872",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38041,
        "stargazers_count": 86234,
        "watchers_count": 86234,
        "size": 295040,
        "default_branch": "master",
        "open_issues_count": 818,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-16T19:10:38Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-17T04:38:52Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 279,
    "deletions": 63,
    "changed_files": 6,
    "commits": 2,
    "review_comments": 90,
    "comments": 25
  },
  "events": [
    {
      "event": "labeled",
      "id": 18355878558,
      "node_id": "LE_lADOABII5869sWalzwAAAARGGHqe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18355878558",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T11:43:19Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 3012718572,
      "node_id": "IC_kwDOABII586zkm_s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3012718572",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T11:43:21Z",
      "updated_at": "2025-10-17T06:27:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32821.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3343599681), [kannapoix](https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3348459569) |\n| Concept ACK | [yuvicc](https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3016746882) |\n| Stale ACK | [BrandonOdiwuor](https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-2969336275), [Prabhat1308](https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3286685012) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32966](https://github.com/bitcoin/bitcoin/pull/32966) (Silent Payments: Receiving by Eunovo)\n* [#32741](https://github.com/bitcoin/bitcoin/pull/32741) (rpc: add optional peer_ids param to filter getpeerinfo by waketraindev)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- parameter parameter -> parameter [duplicated word; remove the extra \"parameter\" for clarity]\n\n<sup>drahtbot_id_5_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3012718572",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "reviewed",
      "id": 2966254320,
      "node_id": "PRR_kwDOABII586wzXLw",
      "url": null,
      "actor": null,
      "commit_id": "14e2125ee0297f0cb046ca91b6ead20052f24678",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-27T11:58:24Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-2966254320",
      "submitted_at": "2025-06-27T11:58:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "commented",
      "id": 3012778370,
      "node_id": "IC_kwDOABII586zk1mC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3012778370",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T12:02:00Z",
      "updated_at": "2025-06-27T12:02:14Z",
      "author_association": "MEMBER",
      "body": "I ran into this issue in #32784 while editing the multisig tutorial. 14e2125ee0297f0cb046ca91b6ead20052f24678 fixes it.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3012778370",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3012839324,
      "node_id": "IC_kwDOABII586zlEec",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3012839324",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T12:20:24Z",
      "updated_at": "2025-06-27T12:20:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK 14e2125ee0297f0cb046ca91b6ead20052f24678. Thanks for the fix! \r\n\r\nIf possible it would be good to add python tests to check the new behavior and I also agree with [comment](https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2171811426) that this change doesn't need to be limited to base64 parameters and could probably be extended to other string parameters. But maybe the \"If parameter is unknown for a given known string method, then treat the whole string as positional\" behavior might have to be dropped in that case.\r\n\r\nI think this fix is little different from my suggestion in https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2092039999 because I was thinking of continuing to treat unknown parameters as named not positional, but maybe this approach is better. Would have to think about it. The implementation is also a little different than what I had in mind because I was thinking of extending the vRPCConvertParams table with type information instead of adding a separate table, but your approach might be simpler.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3012839324",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3013213139,
      "node_id": "IC_kwDOABII586zmfvT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3013213139",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T14:09:35Z",
      "updated_at": "2025-06-27T14:09:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "\r\n> If possible it would be good to add python tests to check the new behavior\r\n\r\nSure, I'm also thinking of adding a python test, but the main problem is, this issue is only reproducible when there exists `=` padding or in between, so while creating a PSBT, I need to look at how I can achieve this. Or maybe by calling RPCs with a label.\r\n\r\n> I also agree with https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2171811426 that this change doesn't need to be limited to base64 parameters and could probably be extended to other string parameters. But maybe the \"If parameter is unknown for a given known string method, then treat the whole string as positional\" behavior might have to be dropped in that case.\r\n\r\nTo extend this feature to any string parameters, we simply need to add an entry in the `vRPCStringParams` table. I tested with `getnewaddress` which requires a label (optionally) and it's working fine. Without adding the entry in `vRPCStringParams` it doesn't work if we provide a label that consists of the `=` char in it. \r\n\r\nAnd the line you mentioned to remove is problematic if we remove it, as it's only got invoked if the RPC method is correct and matches with our table. And if the parameter name is not known then it's invoked; otherwise not. This is safe to do because we already make sure that the calling method is present in the table. Otherwise, if the user passed the correct method name but an incorrect parameter, then the targeted RPC will fail with an error.\r\n",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3013213139",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3013274110,
      "node_id": "IC_kwDOABII586zmun-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3013274110",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T14:28:25Z",
      "updated_at": "2025-06-27T14:28:25Z",
      "author_association": "MEMBER",
      "body": "> > If possible it would be good to add python tests to check the new behavior\r\n> \r\n> Sure, I'm also thinking of adding a python test, but the main problem is, this issue is only reproducible when there exists `=` padding or in between, so while creating a PSBT, I need to look at how I can achieve this.\r\n\r\nYou could just manually generate a random PSBT on regtest, hardcode it into a test and call `analyzepsbt`. It doesn't matter if it's unspendable.\r\n\r\nOr you could even just call these methods with `abc=efg` since it doesn't even need to be a validly encoded psbt.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3013274110",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18369896406,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARG7l_W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18369896406",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "59fcefcd1f490f8ae276150421cbd895a10f3d4a",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/59fcefcd1f490f8ae276150421cbd895a10f3d4a",
      "created_at": "2025-06-28T16:19:32Z"
    },
    {
      "event": "commented",
      "id": 3015984834,
      "node_id": "IC_kwDOABII586zxEbC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3015984834",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-28T18:59:32Z",
      "updated_at": "2025-06-28T18:59:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "I generalised this change to any string parameter which might contain the `=` char in it. I also added the functional test for most of the RPCs I included in the new table. For any new RPC method which might need to be parsed this way with -named enabled, one can add the new entry of that RPC in the `vRPCStringParams` table.",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3015984834",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "renamed",
      "id": 18374419256,
      "node_id": "RTE_lADOABII5869sWalzwAAAARHM2M4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18374419256",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-29T14:18:16Z",
      "rename": {
        "from": "rpc: Handle -named argument parsing where Base64 encoding is used",
        "to": "rpc: Handle -named argument parsing where '=' character is used"
      }
    },
    {
      "event": "commented",
      "id": 3016746882,
      "node_id": "IC_kwDOABII586zz-eC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3016746882",
      "actor": {
        "login": "yuvicc",
        "id": 92994932,
        "node_id": "U_kgDOBYr9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92994932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yuvicc",
        "html_url": "https://github.com/yuvicc",
        "followers_url": "https://api.github.com/users/yuvicc/followers",
        "following_url": "https://api.github.com/users/yuvicc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yuvicc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yuvicc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yuvicc/subscriptions",
        "organizations_url": "https://api.github.com/users/yuvicc/orgs",
        "repos_url": "https://api.github.com/users/yuvicc/repos",
        "events_url": "https://api.github.com/users/yuvicc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yuvicc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-29T14:24:19Z",
      "updated_at": "2025-06-29T14:24:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK \r\n\r\n```\r\n./build/bin/bitcoin-cli -named  finalizepsbt cHNidP8BAJoCAAAAAqvNEjSrzRI0q80SNKvNEjSrzRI0q80SNKvNEjSrzRI0AAAAAAD9////NBLNqzQSzas0Es2rNBLNqzQSzas0Es2rNBLNqzQSzasBAAAAAP3///8CoIYBAAAAAAAWABQVQBGVs/sqFAmC8HZ8O=g1htqivkANAwAAAAAAFgAUir7MzgyzDnRMjdkVa7d+Dwr07jsAAAAAAAAAAAA=\r\n\r\nerror code: -8\r\nerror message:\r\nUnknown named parameter cHNidP8BAJoCAAAAAqvNEjSrzRI0q80SNKvNEjSrzRI0q80SNKvNEjSrzRI0AAAAAAD9////NBLNqzQSzas0Es2rNBLNqzQSzas0Es2rNBLNqzQSzasBAAAAAP3///8CoIYBAAAAAAAWABQVQBGVs/sqFAmC8HZ8O\r\n```\r\n\r\nCommit 59fcefcd1f490f8ae276150421cbd895a10f3d4a\r\n\r\n```\r\n./build/bin//bitcoin-cli -named  finalizepsbt cHNidP8BAJoCAAAAAqvNEjSrzRI0q80SNKvNEjSrzRI0q80SNKvNEjSrzRI0AAAAAAD9////NBLNqzQSzas0Es2rNBLNqzQSzas0Es2rNBLNqzQSzasBAAAAAP3///8CoIYBAAAAAAAWABQVQBGVs/sqFAmC8HZ8O+g1htqivkANAwAAAAAAFgAUir7MzgyzDnRMjdkVa7d+Dwr07jsAAAAAAAAAAAA=\r\n{\r\n  \"psbt\": \"cHNidP8BAJoCAAAAAqvNEjSrzRI0q80SNKvNEjSrzRI0q80SNKvNEjSrzRI0AAAAAAD9////NBLNqzQSzas0Es2rNBLNqzQSzas0Es2rNBLNqzQSzasBAAAAAP3///8CoIYBAAAAAAAWABQVQBGVs/sqFAmC8HZ8O+g1htqivkANAwAAAAAAFgAUir7MzgyzDnRMjdkVa7d+Dwr07jsAAAAAAAAAAAA=\",\r\n  \"complete\": false\r\n}\r\n```\r\nWill review the code soon!",
      "user": {
        "login": "yuvicc",
        "id": 92994932,
        "node_id": "U_kgDOBYr9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92994932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yuvicc",
        "html_url": "https://github.com/yuvicc",
        "followers_url": "https://api.github.com/users/yuvicc/followers",
        "following_url": "https://api.github.com/users/yuvicc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yuvicc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yuvicc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yuvicc/subscriptions",
        "organizations_url": "https://api.github.com/users/yuvicc/orgs",
        "repos_url": "https://api.github.com/users/yuvicc/repos",
        "events_url": "https://api.github.com/users/yuvicc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yuvicc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3016746882",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "review_requested",
      "id": 18374438983,
      "node_id": "RRE_lADOABII5869sWalzwAAAARHM7BH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18374438983",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-29T14:24:50Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2969336275,
      "node_id": "PRR_kwDOABII586w_HnT",
      "url": null,
      "actor": null,
      "commit_id": "e246741db1f2f056fac32d0f3967f55306e78b49",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-29T17:07:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK e246741db1f2f056fac32d0f3967f55306e78b49\r\n\r\nConfirmed that commit 59fcefcd1f490f8ae276150421cbd895a10f3d4a correctly handles named argument parsing for parameters containing = characters—an issue currently reproducible on master.\r\n\r\n<commit: 59fcefcd1f490f8ae276150421cbd895a10f3d4a>\r\n<img width=\"1512\" alt=\"Screenshot 2025-06-29 at 19 49 25\" src=\"https://github.com/user-attachments/assets/fc4e2230-453d-4691-9ff5-db980693bc85\" />\r\n\r\n\r\n<branch: master>\r\n<img width=\"1512\" alt=\"Screenshot 2025-06-29 at 19 50 42\" src=\"https://github.com/user-attachments/assets/af2ad642-86f9-4cca-9e4b-8a8e0ea39bf7\" />\r\n",
      "user": {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-2969336275",
      "submitted_at": "2025-06-29T17:07:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "review_requested",
      "id": 18374977134,
      "node_id": "RRE_lADOABII5869sWalzwAAAARHO-Zu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18374977134",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-29T17:07:48Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2970060627,
      "node_id": "PRR_kwDOABII586xB4dT",
      "url": null,
      "actor": null,
      "commit_id": "e246741db1f2f056fac32d0f3967f55306e78b49",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-30T06:34:51Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-2970060627",
      "submitted_at": "2025-06-30T06:34:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "labeled",
      "id": 18450547364,
      "node_id": "LE_lADOABII5869sWalzwAAAARLvQKk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18450547364",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-03T11:08:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18456531559,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARMGFJn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18456531559",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "293c0234fa7b602a9a59e4cf294b724a07d8af2e",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/293c0234fa7b602a9a59e4cf294b724a07d8af2e",
      "created_at": "2025-07-03T16:59:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18458527211,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARMNsXr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18458527211",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "537c12086189e9fc75baf6a853112d805436fa1c",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/537c12086189e9fc75baf6a853112d805436fa1c",
      "created_at": "2025-07-03T19:02:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18465230167,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARMnQ1X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18465230167",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "03c1f0d60456720509a4ff94af0672c7f1dfb748",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/03c1f0d60456720509a4ff94af0672c7f1dfb748",
      "created_at": "2025-07-04T06:17:02Z"
    },
    {
      "event": "commented",
      "id": 3034701850,
      "node_id": "IC_kwDOABII58604eAa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3034701850",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-04T06:35:34Z",
      "updated_at": "2025-07-04T06:35:34Z",
      "author_association": "MEMBER",
      "body": "From CI:\r\n\r\n```\r\nassert not \"non_witness_utxo\" in mining_node.decodepsbt(signed_psbt[\"psbt\"])[\"inputs\"][0]\r\n```\r\n\r\nI didn't check the code, but that's usually a cryptic way of saying that signing the psbt failed.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3034701850",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3035219100,
      "node_id": "IC_kwDOABII58606cSc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3035219100",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-04T09:38:38Z",
      "updated_at": "2025-07-04T09:38:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Signing the PSBT works fine while running locally, and removing non-witness UTXO from the PSBT.",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3035219100",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3035469911,
      "node_id": "IC_kwDOABII58607ZhX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3035469911",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-04T10:34:51Z",
      "updated_at": "2025-07-04T10:34:51Z",
      "author_association": "MEMBER",
      "body": "> Signing the PSBT works fine while running locally, and removing non-witness UTXO from the PSBT.\r\n\r\nWhat command did you use to run locally?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3035469911",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3035641377,
      "node_id": "IC_kwDOABII58608DYh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3035641377",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-04T11:07:26Z",
      "updated_at": "2025-07-04T11:07:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "\r\n> \r\n> What command did you use to run locally?\r\n\r\nI first checked by adding two log statements in `rpc_psbt.py`  the first log to check the psbt before signing and the second log after `walletprocesspsbt` where CI is reporting an error. And then manually parsing the result with the help of `decodepsbt` to check whether the PSBT after`walletprocesspsbt` contains non-witness UTXO, but it doesn't in my case, so the test passed successfully. \r\n\r\nI also ran all the functional test cases with `—extended` and all tests passed.",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3035641377",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3035710020,
      "node_id": "IC_kwDOABII58608UJE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3035710020",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-04T11:22:33Z",
      "updated_at": "2025-07-04T11:22:33Z",
      "author_association": "MEMBER",
      "body": "you'll have to use `--usecli` to run the tests, otherwise the cli is not used",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3035710020",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3045660856,
      "node_id": "IC_kwDOABII5861iRi4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3045660856",
      "actor": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T15:40:00Z",
      "updated_at": "2025-07-07T15:40:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Trying to debug the issue I see some irregularities in the how the test behaves in `rpc` mode and `cli` mode.\r\n\r\n<details>\r\n<summary>diff</summary>\r\n\r\n```diff\r\n\r\ndiff --git a/test/functional/rpc_psbt.py b/test/functional/rpc_psbt.py\r\nindex a241978b5f..f92e8d6e88 100755\r\n--- a/test/functional/rpc_psbt.py\r\n+++ b/test/functional/rpc_psbt.py\r\n@@ -135,8 +135,64 @@ class PSBTTest(BitcoinTestFramework):\r\n         assert \"non_witness_utxo\" in mining_node.decodepsbt(psbt_new.to_base64())[\"inputs\"][0]\r\n\r\n         # Have the offline node sign the PSBT (which will remove the non-witness UTXO)\r\n+\r\n+        decoded_before = mining_node.decodepsbt(psbt_new.to_base64())\r\n+\r\n+        self.log.info(f\"=== DEBUG: CLI Mode = {self.options.usecli} ===\")\r\n+\r\n+        # Log address and input details\r\n+        offline_addr_info = offline_node.getaddressinfo(offline_addr)\r\n+        self.log.info(f\"Offline address: {offline_addr}\")\r\n+        self.log.info(f\"Address type: {offline_addr_info.get('type', 'unknown')}\")\r\n+\r\n+        decoded_before = mining_node.decodepsbt(psbt_new.to_base64())\r\n+\r\n+        self.log.info(f\"=== DEBUG: CLI Mode = {self.options.usecli} ===\")\r\n+\r\n+        # Log address and input details\r\n+        offline_addr_info = offline_node.getaddressinfo(offline_addr)\r\n+        self.log.info(f\"Offline address: {offline_addr}\")\r\n+        self.log.info(f\"Address type: {offline_addr_info.get('type', 'unknown')}\")\r\n+        self.log.info(f\"Script type: {offline_addr_info.get('script', 'unknown')}\")\r\n+        self.log.info(f\"Is witness: {offline_addr_info.get('iswitness', False)}\")\r\n+        self.log.info(f\"Witness version: {offline_addr_info.get('witness_version', 'none')}\")\r\n+        self.log.info(f\"Witness program: {offline_addr_info.get('witness_program', 'none')}\")\r\n+\r\n+        # Log PSBT input details before signing\r\n+        self.log.info(f\"BEFORE signing - input[0] keys: {list(decoded_before['inputs'][0].keys())}\")\r\n+        self.log.info(f\"BEFORE signing - has non_witness_utxo: {'non_witness_utxo' in decoded_before['inputs'][0]}\")\r\n+        self.log.info(f\"BEFORE signing - has witness_utxo: {'witness_utxo' in decoded_before['inputs'][0]}\")\r\n+\r\n+        # Check witness_utxo script details\r\n+        if 'witness_utxo' in decoded_before['inputs'][0]:\r\n+            witness_utxo = decoded_before['inputs'][0]['witness_utxo']\r\n+            self.log.info(f\"BEFORE signing - witness_utxo script type: {witness_utxo['scriptPubKey'].get('type', 'unknown')}\")\r\n+            self.log.info(f\"BEFORE signing - witness_utxo hex: {witness_utxo['scriptPubKey'].get('hex', 'none')}\")\r\n+\r\n+        # Log the exact walletprocesspsbt call being made\r\n+        psbt_b64 = psbt_new.to_base64()\r\n+        self.log.info(f\"walletprocesspsbt call: offline_node.walletprocesspsbt('{psbt_b64[:50]}...', True, 'ALL', True, True)\")\r\n+\r\n         signed_psbt = offline_node.walletprocesspsbt(psbt_new.to_base64())\r\n-        assert not \"non_witness_utxo\" in mining_node.decodepsbt(signed_psbt[\"psbt\"])[\"inputs\"][0]\r\n+        decoded_after = mining_node.decodepsbt(signed_psbt[\"psbt\"])\r\n+\r\n+        # Log PSBT input details after signing\r\n+        self.log.info(f\"AFTER signing - input[0] keys: {list(decoded_after['inputs'][0].keys())}\")\r\n+        self.log.info(f\"AFTER signing - has non_witness_utxo: {'non_witness_utxo' in decoded_after['inputs'][0]}\")\r\n+        self.log.info(f\"AFTER signing - has witness_utxo: {'witness_utxo' in decoded_after['inputs'][0]}\")\r\n+        self.log.info(f\"walletprocesspsbt result complete: {signed_psbt.get('complete', 'not present')}\")\r\n+\r\n+        # Check for Taproot vs regular segwit indicators\r\n+        has_taproot_derivs = 'taproot_bip32_derivs' in decoded_before['inputs'][0] or 'taproot_bip32_derivs' in decoded_after['inputs'][0]\r\n+        has_taproot_key = 'taproot_internal_key' in decoded_before['inputs'][0] or 'taproot_internal_key' in decoded_after['inputs'][0]\r\n+        has_regular_derivs = 'bip32_derivs' in decoded_before['inputs'][0] or 'bip32_derivs' in decoded_after['inputs'][0]\r\n+\r\n+        self.log.info(f\"Input type detection - Taproot derivs: {has_taproot_derivs}, Taproot key: {has_taproot_key}, Regular derivs: {has_regular_derivs}\")\r\n+\r\n+        # Log the actual walletprocesspsbt call details for comparison\r\n+        if self.options.usecli:\r\n+            self.log.info(\"Using CLI mode - parameters passed as separate arguments\")\r\n+        else:\r\n+            self.log.info(\"Using RPC mode - parameters passed as JSON\")\r\n+\r\n+        # More detailed assertion with context\r\n+        if \"non_witness_utxo\" in decoded_after[\"inputs\"][0]:\r\n+            self.log.error(\"FAILURE: non_witness_utxo should be removed for segwit v1+ inputs!\")\r\n+            self.log.error(f\"This suggests the input is being treated as segwit v0 instead of v1+ in CLI mode\")\r\n+\r\n+\r\n\r\n```\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>with cli</summary>\r\n\r\n```sh\r\n2025-07-07T15:20:33.852283Z TestFramework (INFO): Check that non-witness UTXOs are removed for segwit v1+ inputs\r\n2025-07-07T15:20:34.004885Z TestFramework (INFO): === DEBUG: CLI Mode = True ===\r\n2025-07-07T15:20:34.008380Z TestFramework (INFO): Offline address: bcrt1q2skwujcxhaawtf0hlqawfmk3gclpdz24a84znw\r\n2025-07-07T15:20:34.008437Z TestFramework (INFO): Address type: unknown\r\n2025-07-07T15:20:34.008459Z TestFramework (INFO): Script type: unknown\r\n2025-07-07T15:20:34.008479Z TestFramework (INFO): Is witness: True\r\n2025-07-07T15:20:34.008497Z TestFramework (INFO): Witness version: 0\r\n2025-07-07T15:20:34.008513Z TestFramework (INFO): Witness program: 542cee4b06bf7ae5a5f7f83ae4eed1463e168955\r\n2025-07-07T15:20:34.008532Z TestFramework (INFO): BEFORE signing - input[0] keys: ['witness_utxo', 'non_witness_utxo', 'bip32_derivs']\r\n2025-07-07T15:20:34.008550Z TestFramework (INFO): BEFORE signing - has non_witness_utxo: True\r\n2025-07-07T15:20:34.008565Z TestFramework (INFO): BEFORE signing - has witness_utxo: True\r\n2025-07-07T15:20:34.008579Z TestFramework (INFO): BEFORE signing - witness_utxo script type: witness_v0_keyhash\r\n2025-07-07T15:20:34.008595Z TestFramework (INFO): BEFORE signing - witness_utxo hex: 0014542cee4b06bf7ae5a5f7f83ae4eed1463e168955\r\n2025-07-07T15:20:34.008688Z TestFramework (INFO): walletprocesspsbt call: offline_node.walletprocesspsbt('cHNidP8BAFICAAAAAQVChcz/DF+d62weFt4XJAYjd8cLM81FZV...', True, 'ALL', True, True)\r\n2025-07-07T15:20:34.016020Z TestFramework (INFO): AFTER signing - input[0] keys: ['witness_utxo', 'non_witness_utxo', 'final_scriptwitness']\r\n2025-07-07T15:20:34.016093Z TestFramework (INFO): AFTER signing - has non_witness_utxo: True\r\n2025-07-07T15:20:34.016117Z TestFramework (INFO): AFTER signing - has witness_utxo: True\r\n2025-07-07T15:20:34.016135Z TestFramework (INFO): walletprocesspsbt result complete: True\r\n2025-07-07T15:20:34.016155Z TestFramework (INFO): Input type detection - Taproot derivs: False, Taproot key: False, Regular derivs: True\r\n2025-07-07T15:20:34.016174Z TestFramework (INFO): Using CLI mode - parameters passed as separate arguments\r\n2025-07-07T15:20:34.016193Z TestFramework (ERROR): FAILURE: non_witness_utxo should be removed for segwit v1+ inputs!\r\n2025-07-07T15:20:34.016209Z TestFramework (ERROR): This suggests the input is being treated as segwit v0 instead of v1+ in CLI mode\r\n2025-07-07T15:20:34.016234Z TestFramework (ERROR): Assertion failed\r\n```\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>without cli</summary>\r\n\r\n```sh\r\n\r\n2025-07-07T15:19:10.430768Z TestFramework (INFO): === DEBUG: CLI Mode = False ===\r\n2025-07-07T15:19:10.431566Z TestFramework (INFO): Offline address: bcrt1pxmju835wnuw3z5thftuz84q8rt96vqd97jaxwdn2uqlxwwka923q8fcsp8\r\n2025-07-07T15:19:10.431613Z TestFramework (INFO): Address type: unknown\r\n2025-07-07T15:19:10.431645Z TestFramework (INFO): Script type: unknown\r\n2025-07-07T15:19:10.431672Z TestFramework (INFO): Is witness: True\r\n2025-07-07T15:19:10.431699Z TestFramework (INFO): Witness version: 1\r\n2025-07-07T15:19:10.431729Z TestFramework (INFO): Witness program: 36e5c3c68e9f1d1151774af823d4071acba601a5f4ba67366ae03e673add2aa2\r\n2025-07-07T15:19:10.431760Z TestFramework (INFO): BEFORE signing - input[0] keys: ['witness_utxo', 'non_witness_utxo', 'taproot_bip32_derivs', 'taproot_internal_key']\r\n2025-07-07T15:19:10.431789Z TestFramework (INFO): BEFORE signing - has non_witness_utxo: True\r\n2025-07-07T15:19:10.431831Z TestFramework (INFO): BEFORE signing - has witness_utxo: True\r\n2025-07-07T15:19:10.431857Z TestFramework (INFO): BEFORE signing - witness_utxo script type: witness_v1_taproot\r\n2025-07-07T15:19:10.431881Z TestFramework (INFO): BEFORE signing - witness_utxo hex: 512036e5c3c68e9f1d1151774af823d4071acba601a5f4ba67366ae03e673add2aa2\r\n2025-07-07T15:19:10.431929Z TestFramework (INFO): walletprocesspsbt call: offline_node.walletprocesspsbt('cHNidP8BAF4CAAAAAVteg2JVDVvQHLSH4zmmgu7l4bYJdyIoFq...', True, 'ALL', True, True)\r\n2025-07-07T15:19:10.433261Z TestFramework (INFO): AFTER signing - input[0] keys: ['witness_utxo', 'final_scriptwitness']\r\n2025-07-07T15:19:10.433305Z TestFramework (INFO): AFTER signing - has non_witness_utxo: False\r\n2025-07-07T15:19:10.433336Z TestFramework (INFO): AFTER signing - has witness_utxo: True\r\n2025-07-07T15:19:10.433364Z TestFramework (INFO): walletprocesspsbt result complete: True\r\n2025-07-07T15:19:10.433399Z TestFramework (INFO): Input type detection - Taproot derivs: True, Taproot key: True, Regular derivs: False\r\n2025-07-07T15:19:10.433426Z TestFramework (INFO): Using RPC mode - parameters passed as JSON\r\n```\r\n</details>\r\n\r\n\r\n\r\n1. inputs are being treated differently in the cli and non-cli mode\r\n2. even the address being generated in `rpc` mode is different (larger as compared to `cli` mode)\r\n3. non-witness utxo remains in `cli` mode.",
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3045660856",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18524071717,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARQHucl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18524071717",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2eaf3dd5803d0a3d212dd9be42528456a5e4d0e0",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/2eaf3dd5803d0a3d212dd9be42528456a5e4d0e0",
      "created_at": "2025-07-08T11:24:42Z"
    },
    {
      "event": "unlabeled",
      "id": 18526777297,
      "node_id": "UNLE_lADOABII5869sWalzwAAAARQSC_R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18526777297",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-08T13:35:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18549378579,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARRoQ4T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18549378579",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45818bebab9951f857a2e44bcf0b6e1ce4147adf",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/45818bebab9951f857a2e44bcf0b6e1ce4147adf",
      "created_at": "2025-07-09T16:02:25Z"
    },
    {
      "event": "reviewed",
      "id": 3003417391,
      "node_id": "PRR_kwDOABII586zBIMv",
      "url": null,
      "actor": null,
      "commit_id": "bc2241ab3d01a38f19588cb85134e5330b77e3f4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-09T23:49:20Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3003417391",
      "submitted_at": "2025-07-09T23:49:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18620513872,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARV3n5Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18620513872",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "56b1da77b5998c44b3bb799689a6c0449e9223fc",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/56b1da77b5998c44b3bb799689a6c0449e9223fc",
      "created_at": "2025-07-14T15:27:13Z"
    },
    {
      "event": "review_requested",
      "id": 18630173939,
      "node_id": "RRE_lADOABII5869sWalzwAAAARWceTz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18630173939",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T05:18:47Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18717974975,
      "node_id": "RRE_lADOABII5869sWalzwAAAARbraG_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18717974975",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-20T20:23:09Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3039323143,
      "node_id": "PRR_kwDOABII5861KGQH",
      "url": null,
      "actor": null,
      "commit_id": "56b1da77b5998c44b3bb799689a6c0449e9223fc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-21T19:44:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 56b1da77b5998c44b3bb799689a6c0449e9223fc. Thanks for the update! The fix here seems right and should be practically useful. And the new tests seem to cover different scenarios where positional string parameters contain '='.\r\n\r\nTwo comments:\r\n\r\n- I think it would good to add a test to cover cases where positional *non-string* parameters contain '=', i.e. the `bitcoin-cli -named echojson '[\"fail=yes\"]'` case which [previously failed](https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2196208483) (because it treated everything before the '=' character as a parameter name) and now succeeds.\r\n\r\n- I think the code change suggested in df4f39143d868fe4303ab7b3875757a26b7ac5a5 ([tag](https://github.com/ryanofsky/bitcoin/commits/review.32821.2-edit.1)) to combine `vRPCConvertParams` and `vRPCStringParams` tables into a single table, and document it better, and remove some layers of indirection could still be a good change to make. But it could be a followup and the current approach seems reasonable to me. Unless I missed something, the approach implemented there is the same approach implemented here currently, so this would just be a refactoring.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3039323143",
      "submitted_at": "2025-07-21T19:44:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "review_requested",
      "id": 18735795916,
      "node_id": "RRE_lADOABII5869sWalzwAAAARcvY7M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18735795916",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T19:44:39Z",
      "requested_reviewer": {
        "login": "BrandonOdiwuor",
        "id": 15610188,
        "node_id": "MDQ6VXNlcjE1NjEwMTg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/15610188?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BrandonOdiwuor",
        "html_url": "https://github.com/BrandonOdiwuor",
        "followers_url": "https://api.github.com/users/BrandonOdiwuor/followers",
        "following_url": "https://api.github.com/users/BrandonOdiwuor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BrandonOdiwuor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BrandonOdiwuor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BrandonOdiwuor/subscriptions",
        "organizations_url": "https://api.github.com/users/BrandonOdiwuor/orgs",
        "repos_url": "https://api.github.com/users/BrandonOdiwuor/repos",
        "events_url": "https://api.github.com/users/BrandonOdiwuor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BrandonOdiwuor/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3104499007,
      "node_id": "IC_kwDOABII5865CuU_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3104499007",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T19:15:21Z",
      "updated_at": "2025-07-22T19:15:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> * I think it would good to add a test to cover cases where positional _non-string_ parameters contain '=', i.e. the `bitcoin-cli -named echojson '[\"fail=yes\"]'` case which [previously failed](https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2196208483) (because it treated everything before the '=' character as a parameter name) and now succeeds.\r\n\r\nYou are right here, I will add a test for non-string params like `echojson`.\r\n\r\n> * I think the code change suggested in [df4f391](https://github.com/bitcoin/bitcoin/commit/df4f39143d868fe4303ab7b3875757a26b7ac5a5) ([tag](https://github.com/ryanofsky/bitcoin/commits/review.32821.2-edit.1)) to combine `vRPCConvertParams` and `vRPCStringParams` tables into a single table, and document it better, and remove some layers of indirection could still be a good change to make. \r\n\r\nI intentionally choose this approach to use both the `vRPCStringParams` and `vRPCConvertParams` tables because the string table has some additional cases, like adding all the string params for a given method in the table for consistency and valid lookups. So with all these things, separating the tables is a good and less complex way between both logics.\r\n\r\n",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3104499007",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18833867950,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARilgSu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18833867950",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8fa1a0e50544a5ad987955aec5443857a1711ca7",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/8fa1a0e50544a5ad987955aec5443857a1711ca7",
      "created_at": "2025-07-26T17:35:20Z"
    },
    {
      "event": "reviewed",
      "id": 3063259562,
      "node_id": "PRR_kwDOABII5862laGq",
      "url": null,
      "actor": null,
      "commit_id": "8fa1a0e50544a5ad987955aec5443857a1711ca7",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-28T15:06:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 8fa1a0e50544a5ad987955aec5443857a1711ca7. Thanks for the updates! Only change since last review was clarifying a comment and some variable names and adding new tests to cover cases where non-string positional parameters containing '=' are passed.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3063259562",
      "submitted_at": "2025-07-28T15:04:49Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "commented",
      "id": 3141017084,
      "node_id": "IC_kwDOABII5867OB38",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3141017084",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T18:53:19Z",
      "updated_at": "2025-07-31T18:53:19Z",
      "author_association": "MEMBER",
      "body": "I'm wondering if there's a different way we can go about this without adding another table of arguments that need special treatment. Perhaps we could move named argument handling and string to json conversion server side? That's a much more significant refactor, but the RPC server already knows every parameter type and name, so it could do the conversion and named argument check as well.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3141017084",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3141132363,
      "node_id": "IC_kwDOABII5867OeBL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3141132363",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T19:37:10Z",
      "updated_at": "2025-07-31T19:42:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I'm wondering if there's a different way we can go about this without adding another table of arguments that need special treatment.\r\n\r\nI'm also not a fan of separate tables and suggested the following change to unify them earlier: b998cc52d51b48db9271fdba0bd69e9aaccb7999 ([tag](https://github.com/ryanofsky/bitcoin/commits/review.32821.4-edit.1)). This change is just a refactoring and could be a followup.\r\n\r\n> Perhaps we could move named argument handling and string to json conversion server side?\r\n\r\nI think moving logic server side would avoid need for duplicate tables, but not actually make the code or logic simpler because the current syntax for distinguishing named parameters is inherently ambiguous. (It probably would have been better to require named parameters to begin with `-` to avoid ambiguity. It could also be better to try to parse *every* argument as JSON and just fall back to passing strings if they are not valid JSON to avoid the need for the conversion table.) I feel like current PR just makes some small tweaks to parsing to make the current syntax work a little better, and it adds good test coverage. If we follow up this PR with b998cc52d51b48db9271fdba0bd69e9aaccb7999 or incorporate those changes here, the client code should be better documented and more maintainable too.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3141132363",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3141265710,
      "node_id": "IC_kwDOABII5867O-ku",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3141265710",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T20:35:49Z",
      "updated_at": "2025-07-31T20:38:08Z",
      "author_association": "MEMBER",
      "body": "> because the current syntax for distinguishing named parameters is inherently ambiguous.\r\n\r\nBut since the server knows the names of all parameters, it can also check whether the incoming string starts with the name of a parameter.\r\n\r\nAlternatively, maybe we can make the rpc client aware of all of the rpcs so it can do that conversion? Although that would likely have the effect of reducing the utility of bitcoin-cli across versions.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3141265710",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3141318636,
      "node_id": "IC_kwDOABII5867PLfs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3141318636",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T20:59:31Z",
      "updated_at": "2025-07-31T20:59:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Alternatively, maybe we can make the rpc client aware of all of the rpcs so it can do that conversion?\r\n\r\nThat's basically what the PR does implicitly and what my refactoring of the PR does more explicitly with string/json formats in \r\n[rpc/client.cpp](https://github.com/bitcoin/bitcoin/blob/b998cc52d51b48db9271fdba0bd69e9aaccb7999/src/rpc/client.cpp#L16).\r\n\r\nI think if you look at that file you will see that the the parsing logic is not that complicated and can be well explained. The code there should actually be simpler than current client code in master because it gets rid of intermediate lookup tables and the overloaded overloaded `ArgToUniValue` method.\r\n\r\n> Although that would likely have the effect of reducing the utility of bitcoin-cli across versions.\r\n\r\nI think that's just the current reality. The fact that client needs to know about parameter names and types makes it more fragile, but shouldn't be made worse by the changes here, as far as I can tell.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3141318636",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3141369795,
      "node_id": "IC_kwDOABII5867PX_D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3141369795",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-31T21:20:31Z",
      "updated_at": "2025-07-31T21:23:30Z",
      "author_association": "MEMBER",
      "body": "> That's basically what the PR does implicitly and what my refactoring of the PR does more explicitly with string/json formats\r\n\r\nYes, but I meant more so in having access to `RPCHelpMan` which already has the names and types of all parameters.\r\n\r\nOr if we had a machine parseable schema thing (see #29912) that bitcon-cli refers to.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3141369795",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "labeled",
      "id": 19047432826,
      "node_id": "LE_lADOABII5869sWalzwAAAARvUMJ6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19047432826",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T04:51:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19066637411,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAARwdcxj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19066637411",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "780bec6f1824651341ee51b2dffefa4cfa1f5690",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/780bec6f1824651341ee51b2dffefa4cfa1f5690",
      "created_at": "2025-08-09T08:36:51Z"
    },
    {
      "event": "commented",
      "id": 3170501330,
      "node_id": "IC_kwDOABII5868-gLS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3170501330",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-09T08:45:36Z",
      "updated_at": "2025-08-09T08:45:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased on top latest [master](https://github.com/bitcoin/bitcoin/commit/daca51bf80e7168cefaf226262c5bcb3d9cc6148).",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3170501330",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "unlabeled",
      "id": 19066710154,
      "node_id": "UNLE_lADOABII5869sWalzwAAAARwduiK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19066710154",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-09T09:00:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3115940145,
      "node_id": "PRR_kwDOABII5865uXkx",
      "url": null,
      "actor": null,
      "commit_id": "780bec6f1824651341ee51b2dffefa4cfa1f5690",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T13:06:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 780bec6f1824651341ee51b2dffefa4cfa1f5690, just rebased since last review to avoid minor conflict with #31886\r\n\r\nI still think https://github.com/bitcoin/bitcoin/commit/b998cc52d51b48db9271fdba0bd69e9aaccb7999 (['rpc/client.cpp'](https://github.com/bitcoin/bitcoin/blob/b998cc52d51b48db9271fdba0bd69e9aaccb7999/src/rpc/client.cpp)) would be an nice simplification, but it's just a refactoring so it could be a followup.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3115940145",
      "submitted_at": "2025-08-13T13:06:29Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "commented",
      "id": 3184447868,
      "node_id": "IC_kwDOABII5869ztF8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3184447868",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T15:42:59Z",
      "updated_at": "2025-08-13T15:42:59Z",
      "author_association": "CONTRIBUTOR",
      "body": " > I still think [b998cc5](https://github.com/bitcoin/bitcoin/commit/b998cc52d51b48db9271fdba0bd69e9aaccb7999) (['rpc/client.cpp'](https://github.com/bitcoin/bitcoin/blob/b998cc52d51b48db9271fdba0bd69e9aaccb7999/src/rpc/client.cpp)) would be an nice simplification, but it's just a refactoring so it could be a followup.\r\n\r\nYes, that could be the next possible followup.\r\n",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3184447868",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "reviewed",
      "id": 3138389894,
      "node_id": "PRR_kwDOABII5867EAeG",
      "url": null,
      "actor": null,
      "commit_id": "780bec6f1824651341ee51b2dffefa4cfa1f5690",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-20T22:08:54Z",
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3138389894",
      "submitted_at": "2025-08-20T22:08:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19288758358,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAAR9sxhW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19288758358",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6de6c78c676abd1edb96597bfe8b40bd5fbe7122",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/6de6c78c676abd1edb96597bfe8b40bd5fbe7122",
      "created_at": "2025-08-22T14:36:29Z"
    },
    {
      "event": "reviewed",
      "id": 3153076088,
      "node_id": "PRR_kwDOABII58678B94",
      "url": null,
      "actor": null,
      "commit_id": "6de6c78c676abd1edb96597bfe8b40bd5fbe7122",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-25T21:34:54Z",
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3153076088",
      "submitted_at": "2025-08-25T21:34:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "commented",
      "id": 3225419035,
      "node_id": "IC_kwDOABII587AP_0b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3225419035",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T19:14:29Z",
      "updated_at": "2025-08-26T19:14:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 6de6c78c676abd1edb96597bfe8b40bd5fbe7122. Just style and naming changes since last review.\r\n\r\nJust to restate my opinion of this PR from [earlier](https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3039323143), I think it is not good to have separate tables for string and json parameters. I think it will make this code harder to maintain and it would be better in long run to have a single table with clearly spelled out rules for what parameters need to be included in the table, as implemented in my suggested code change df4f39143d868fe4303ab7b3875757a26b7ac5a5 ([tag](https://github.com/ryanofsky/bitcoin/commits/review.32821.2-edit.1)) . But I'd be happy to see this PR merged as is and cleanup done as a followup if both things can't be done in the same PR.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3225419035",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "commented",
      "id": 3225542636,
      "node_id": "IC_kwDOABII587AQd_s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3225542636",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T19:55:00Z",
      "updated_at": "2025-08-26T19:55:00Z",
      "author_association": "MEMBER",
      "body": "> I think it is not good to have separate tables for string and json parameters.\r\n\r\nI would also prefer that.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3225542636",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19684166477,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASVRItN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19684166477",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f11181b9e02ad2cabbd0d157c1b7682a2188e6c5",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/f11181b9e02ad2cabbd0d157c1b7682a2188e6c5",
      "created_at": "2025-09-14T08:59:31Z"
    },
    {
      "event": "commented",
      "id": 3289368227,
      "node_id": "IC_kwDOABII587ED8aj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3289368227",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T09:00:44Z",
      "updated_at": "2025-09-14T09:00:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Since most of the reviewers are in favour of using a single table instead of two tables for string and convert params. My recent commit does this; the implementation is motivated by the ryanofsky suggested commit [b998cc5](https://github.com/bitcoin/bitcoin/commit/b998cc52d51b48db9271fdba0bd69e9aaccb7999). ",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3289368227",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19684332148,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASVRxJ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19684332148",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eed6681133f9264a3c6e935bc7d89fd407b76d9e",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/eed6681133f9264a3c6e935bc7d89fd407b76d9e",
      "created_at": "2025-09-14T09:33:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19684567326,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASVSqke",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19684567326",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b5d7b7d5cbab5c10d56ad597fa0aaf819055384a",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/b5d7b7d5cbab5c10d56ad597fa0aaf819055384a",
      "created_at": "2025-09-14T10:24:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19685241593,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASVVPL5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19685241593",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a617ec160ba58a6a18e1c14518c1be7238d43988",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/a617ec160ba58a6a18e1c14518c1be7238d43988",
      "created_at": "2025-09-14T12:41:41Z"
    },
    {
      "event": "review_requested",
      "id": 19692697166,
      "node_id": "RRE_lADOABII5869sWalzwAAAASVxrZO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19692697166",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T05:54:42Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3236511121,
      "node_id": "PRR_kwDOABII587A6T2R",
      "url": null,
      "actor": null,
      "commit_id": "a617ec160ba58a6a18e1c14518c1be7238d43988",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-17T23:08:14Z",
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3236511121",
      "submitted_at": "2025-09-17T23:08:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19771523009,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASaeX_B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19771523009",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d1be44d3a672fc343eb3e64f4c0fea1a7e3030aa",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/d1be44d3a672fc343eb3e64f4c0fea1a7e3030aa",
      "created_at": "2025-09-18T10:27:18Z"
    },
    {
      "event": "reviewed",
      "id": 3241370035,
      "node_id": "PRR_kwDOABII587BM2Gz",
      "url": null,
      "actor": null,
      "commit_id": "d1be44d3a672fc343eb3e64f4c0fea1a7e3030aa",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-18T21:11:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK d1be44d3a672fc343eb3e64f4c0fea1a7e3030aa. Thanks for the update. I do feel like this is simpler with just one table. I left some suggestions below which are mostly about documentation and not important.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3241370035",
      "submitted_at": "2025-09-18T21:11:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19817497227,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASdNwKL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19817497227",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "created_at": "2025-09-20T18:36:29Z"
    },
    {
      "event": "reviewed",
      "id": 3254620368,
      "node_id": "PRR_kwDOABII587B_ZDQ",
      "url": null,
      "actor": null,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-22T19:18:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK ad6d740623f01bbe90cbf328590ccfae602c2a3f, just updating documentation and converting class into a namespace since last review. I like the new example in the RPCConvertNamedValues documentation.\r\n\r\nI left some comments below, but feel free to ignore them, they are just explaining previous suggestions not adding anything new.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3254620368",
      "submitted_at": "2025-09-22T19:16:48Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19893205701,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAAShujrF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19893205701",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6730abb137eed82073814bdb8dbd577e79520b59",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/6730abb137eed82073814bdb8dbd577e79520b59",
      "created_at": "2025-09-24T13:41:19Z"
    },
    {
      "event": "reviewed",
      "id": 3263312993,
      "node_id": "PRR_kwDOABII587CgjRh",
      "url": null,
      "actor": null,
      "commit_id": "6730abb137eed82073814bdb8dbd577e79520b59",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-24T15:11:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 6730abb137eed82073814bdb8dbd577e79520b59. Just some comments and indentation changed since last review. Thanks for considering all the suggestions",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3263312993",
      "submitted_at": "2025-09-24T15:11:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19915875591,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASjFCUH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19915875591",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7dd85d13e22f14940cce9ed9a5bbc2afc5c5c2f4",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/7dd85d13e22f14940cce9ed9a5bbc2afc5c5c2f4",
      "created_at": "2025-09-25T10:19:11Z"
    },
    {
      "event": "reviewed",
      "id": 3268185464,
      "node_id": "PRR_kwDOABII587CzI14",
      "url": null,
      "actor": null,
      "commit_id": "7dd85d13e22f14940cce9ed9a5bbc2afc5c5c2f4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-25T14:50:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 7dd85d13e22f14940cce9ed9a5bbc2afc5c5c2f4. Only change since last review is applying int->size_t and documentation tweaks. Thanks for the update!",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3268185464",
      "submitted_at": "2025-09-25T14:50:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "labeled",
      "id": 19929012661,
      "node_id": "LE_lADOABII5869sWalzwAAAASj3Jm1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19929012661",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-25T20:43:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19946839187,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASk7JyT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19946839187",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/24391ed7804a724a62034b21150c89e45ac9b625",
      "created_at": "2025-09-26T15:23:39Z"
    },
    {
      "event": "commented",
      "id": 3339174566,
      "node_id": "IC_kwDOABII587HB8Km",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3339174566",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-26T15:26:24Z",
      "updated_at": "2025-09-26T15:26:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased. And addressed the changes done in [PR #33230](https://github.com/bitcoin/bitcoin/pull/33230).",
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#issuecomment-3339174566",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32821"
    },
    {
      "event": "unlabeled",
      "id": 19948011145,
      "node_id": "UNLE_lADOABII5869sWalzwAAAASk_n6J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19948011145",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-26T16:28:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3280437895,
      "node_id": "PRR_kwDOABII587Dh4KH",
      "url": null,
      "actor": null,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-29T15:27:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 24391ed7804a724a62034b21150c89e45ac9b625. Just rebased after #33230",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3280437895",
      "submitted_at": "2025-09-29T15:27:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "reviewed",
      "id": 3284645023,
      "node_id": "PRR_kwDOABII587Dx7Sf",
      "url": null,
      "actor": null,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-30T13:04:00Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3284645023",
      "submitted_at": "2025-09-30T13:04:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "reviewed",
      "id": 3286685012,
      "node_id": "PRR_kwDOABII587D5tVU",
      "url": null,
      "actor": null,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-30T21:00:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code Review ACK [`24391ed`](https://github.com/bitcoin/bitcoin/pull/32821/commits/24391ed7804a724a62034b21150c89e45ac9b625)\r\n\r\nJust left a few non-blocking nits",
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3286685012",
      "submitted_at": "2025-09-30T21:00:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY5NGYwNGUyYmQzNGY5OTRkODFlMjdiNjhlNGQ3NDY2YTlhMzE5Zjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "tree": {
        "sha": "08f1deac48aed3f08b912d6058f741a4aa0186e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08f1deac48aed3f08b912d6058f741a4aa0186e2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 08f1deac48aed3f08b912d6058f741a4aa0186e2\nparent 65e909dfdd934f033727e5404b5616a29dc18209\nauthor zaidmstrr <zaidbrock122@gmail.com> 1751019598 +0530\ncommitter zaidmstrr <zaidbrock122@gmail.com> 1759326640 +0530\n\nrpc: Handle -named argument parsing where '=' character is used\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEjyxYSilhU9CJGyWcA+zjQtBg5aIFAmjdMbIACgkQA+zjQtBg\n5aLWpQ/+OInQGJMz3iTQASMi/UcZlaEXTbET3+OUZXqva/9vNCaw+zpze+RJQT2x\noT6ic6zcSWlfCVGL+Fl2G1vOf/9wJ58LkBbckFOfaGMwG5GzkJBopmGCEpResZK6\nAvcQP5RZzgb9L8waTphiIAyFCZb3WSY35fBnLQjJ6zme60/kX+sLfkwRSpFHJhoS\nSRuDZgIWS0J2tewGjPKD+VGUT2IFxgc1z1wJF58o+WpikpOl1Vjy0Xnmc3fyet9K\nVQ2I0L8Xe3Z8/KkbekGFDebnpx9eXNSz+JoYr9f1pH1qVJGdWwAEJY3+NKbKLG1A\nDGVjrkILnuWHC93zrQJv5nk6kUvrIFEGjaXXTpj0XM0iUPpjKO4by9jWUFGXqQez\nR5/HS87+v8sdIIGaHGOFlu1VzRAGsF/tjZOqbUooSWbOBxbfs+b/PjEXljmIUl1z\nCnYeCkeqTqhZTmcCP/8Zl8KYpmzbfrRfiAkKgSRf4HRRQ9aHl+9GA3O2OhvJoxBf\nOA2FmF3HTEK9ew5lbyOCJYBwpA/Zzem3daM3mU0Nnmh7hBqubyq8b10lNsn3Axjh\nDnXeGCGUhPg5ZQmfz/C/DICYeUgvrAcoFVJHcipfzeM0wQ9Wr5r1ty8K+Wyq9cYs\nMJwYudsxPLESgIDXIhUu61HGZV0kmUSKYA4j0GMWXA46M1yf3u8=\n=g4Ip\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65e909dfdd934f033727e5404b5616a29dc18209",
          "sha": "65e909dfdd934f033727e5404b5616a29dc18209",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/65e909dfdd934f033727e5404b5616a29dc18209"
        }
      ],
      "message": "rpc: Handle -named argument parsing where '=' character is used",
      "committer": {
        "name": "zaidmstrr",
        "email": "zaidbrock122@gmail.com",
        "date": "2025-10-01T13:50:40Z"
      },
      "author": {
        "name": "zaidmstrr",
        "email": "zaidbrock122@gmail.com",
        "date": "2025-06-27T10:19:58Z"
      },
      "sha": "694f04e2bd34f994d81e27b68e4d7466a9a319f8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20037919414,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASqWmK2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20037919414",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dba059ab176521b8dc7d2cb29348abc2df0269a9",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/dba059ab176521b8dc7d2cb29348abc2df0269a9",
      "created_at": "2025-10-01T15:40:24Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY1M2RiYmM1MDU3YjZmNjc2ZGI0YmU5YmM3MjA4OTgxNDlmMjkzZmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f53dbbc5057b6f676db4be9bc720898149f293fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f53dbbc5057b6f676db4be9bc720898149f293fc",
      "tree": {
        "sha": "037b827b5c12823ede1c9f47140a73c10ebbecd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/037b827b5c12823ede1c9f47140a73c10ebbecd0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 037b827b5c12823ede1c9f47140a73c10ebbecd0\nparent 694f04e2bd34f994d81e27b68e4d7466a9a319f8\nauthor zaidmstrr <zaidbrock122@gmail.com> 1751136562 +0530\ncommitter zaidmstrr <zaidbrock122@gmail.com> 1759337589 +0530\n\ntest: Add functional tests for named argument parsing\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEjyxYSilhU9CJGyWcA+zjQtBg5aIFAmjdXHUACgkQA+zjQtBg\n5aJJvhAAwU8CJIV7lWPwEp6IjQczc3zHXkpg9Mnjzi9kVvDkzzJD2myPlCazdbyt\nOx87xxYi+mArp68S51Ixad8N2li/Gai0a2kKRcfptFH/LIa+jnhh9lZDAQA0IK0H\n3RmI8diFrtUnyzBTeU1WQYtipCITS9hzEXEzwqjaySGLg3O2Nr/o1XmyWZ2nC4Z6\nRp4oLUmi38Ng9ECN1YSs7kzZ2C/MpDvuO+uTkoHa0wmAeZO9QUw4k4GqF8f5ydr/\nmztXp0jpNx+1CK5iIPx/G4g4uKf6b1nGpfy2FaGrekOXxlvkvCcSlSI2QYdE4RCB\n0aZmTMplbdzwG4g94TaHm0UyD3EMwn0TYQL66vrQxoajLYVl/wm2EqjPFeBbtnR2\n7KLr1D+JHHNMGZzQYSXXeb9XqzAHA4RPkB9YR5bSJihHa2izEnecWI1/0uwQ6gSM\n6D+NASlDia+T8mbIAjmD/m5WOer9XkD3e/W0X2PdWsvlHHbvq7xCFL+5m9v6jfbM\n0bkUymV0MOW6j9ZrozaNGqjyACRsdO/SIRt/NpRlVa18Ldabr6TWEhgwDGXtTrOV\n+e6SmQ/esvw7TZVGQtGOF4D0bR119+Wc1UxnkkXTHj3mXimiFduWq8uXWX9A8Q9b\nsSFLsewXADct/zgtjQQ0/4AAIkWCQkqNznVrfEWkiKXKtQyzQ4c=\n=b6k9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/694f04e2bd34f994d81e27b68e4d7466a9a319f8",
          "sha": "694f04e2bd34f994d81e27b68e4d7466a9a319f8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/694f04e2bd34f994d81e27b68e4d7466a9a319f8"
        }
      ],
      "message": "test: Add functional tests for named argument parsing",
      "committer": {
        "name": "zaidmstrr",
        "email": "zaidbrock122@gmail.com",
        "date": "2025-10-01T16:53:09Z"
      },
      "author": {
        "name": "zaidmstrr",
        "email": "zaidbrock122@gmail.com",
        "date": "2025-06-28T18:49:22Z"
      },
      "sha": "f53dbbc5057b6f676db4be9bc720898149f293fc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20039323993,
      "node_id": "HRFPE_lADOABII5869sWalzwAAAASqb9FZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20039323993",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "commit_url": "https://api.github.com/repos/zaidmstrr/bitcoin/commits/f53dbbc5057b6f676db4be9bc720898149f293fc",
      "created_at": "2025-10-01T16:53:21Z"
    },
    {
      "event": "review_requested",
      "id": 20248924852,
      "node_id": "RRE_lADOABII5869sWalzwAAAAS27hK0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20248924852",
      "actor": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-13T14:29:20Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3269874367,
      "node_id": "PRR_kwDOABII587C5lK_",
      "url": null,
      "actor": null,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-16T01:55:26Z",
      "author_association": "NONE",
      "user": {
        "login": "kannapoix",
        "id": 16045487,
        "node_id": "MDQ6VXNlcjE2MDQ1NDg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/16045487?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kannapoix",
        "html_url": "https://github.com/kannapoix",
        "followers_url": "https://api.github.com/users/kannapoix/followers",
        "following_url": "https://api.github.com/users/kannapoix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kannapoix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kannapoix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kannapoix/subscriptions",
        "organizations_url": "https://api.github.com/users/kannapoix/orgs",
        "repos_url": "https://api.github.com/users/kannapoix/repos",
        "events_url": "https://api.github.com/users/kannapoix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kannapoix/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3269874367",
      "submitted_at": "2025-10-16T01:55:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "reviewed",
      "id": 3343599681,
      "node_id": "PRR_kwDOABII587HS0hB",
      "url": null,
      "actor": null,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-16T09:09:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK f53dbbc5057b6f676db4be9bc720898149f293fc. Just applied comment & test suggestions since last review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3343599681",
      "submitted_at": "2025-10-16T09:09:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    },
    {
      "event": "review_requested",
      "id": 20313655667,
      "node_id": "RRE_lADOABII5869sWalzwAAAAS6yclz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20313655667",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-16T09:09:27Z",
      "requested_reviewer": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3348459569,
      "node_id": "PRR_kwDOABII587HlXAx",
      "url": null,
      "actor": null,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-17T06:27:48Z",
      "author_association": "NONE",
      "body": "Code review ACK: f53dbbc5057b6f676db4be9bc720898149f293fc",
      "user": {
        "login": "kannapoix",
        "id": 16045487,
        "node_id": "MDQ6VXNlcjE2MDQ1NDg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/16045487?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kannapoix",
        "html_url": "https://github.com/kannapoix",
        "followers_url": "https://api.github.com/users/kannapoix/followers",
        "following_url": "https://api.github.com/users/kannapoix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kannapoix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kannapoix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kannapoix/subscriptions",
        "organizations_url": "https://api.github.com/users/kannapoix/orgs",
        "repos_url": "https://api.github.com/users/kannapoix/repos",
        "events_url": "https://api.github.com/users/kannapoix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kannapoix/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#pullrequestreview-3348459569",
      "submitted_at": "2025-10-17T06:27:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171811426",
      "pull_request_review_id": 2966254320,
      "id": 2171811426,
      "node_id": "PRRC_kwDOABII586BczZi",
      "diff_hunk": "@@ -311,6 +311,26 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is primarily used for Base64-encoded parameters\n+ * that might contain '=' padding characters which could interfere with",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "14e2125ee0297f0cb046ca91b6ead20052f24678",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "not sure about limiting this to base64. There are many other args that can hold values with an `=` in them. For example, labels.\n\n",
      "created_at": "2025-06-27T11:58:23Z",
      "updated_at": "2025-06-27T11:58:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2171811426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171811426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171892100",
      "pull_request_review_id": 2966351452,
      "id": 2171892100,
      "node_id": "PRRC_kwDOABII586BdHGE",
      "diff_hunk": "@@ -311,6 +311,26 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is primarily used for Base64-encoded parameters\n+ * that might contain '=' padding characters which could interfere with",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "14e2125ee0297f0cb046ca91b6ead20052f24678",
      "in_reply_to_id": 2171811426,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think you are right; I will generalise it to any string args which might contain `=`",
      "created_at": "2025-06-27T12:18:26Z",
      "updated_at": "2025-06-27T12:18:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2171892100",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171892100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174327111",
      "pull_request_review_id": 2970060627,
      "id": 2174327111,
      "node_id": "PRRC_kwDOABII586BmZlH",
      "diff_hunk": "@@ -311,6 +311,27 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with\n+ * named parameter parsing.\n+ *\n+ * @note Parameter indexes start from 0.\n+ */\n+static const CRPCConvertParam vRPCStringParams[] =\n+{\n+    { \"finalizepsbt\", 0, \"psbt\"},\n+    { \"decodepsbt\", 0, \"psbt\"},\n+    { \"analyzepsbt\", 0, \"psbt\"},\n+    { \"walletprocesspsbt\", 0, \"psbt\"},\n+    { \"descriptorprocesspsbt\", 0, \"psbt\"},\n+    { \"utxoupdatepsbt\", 0, \"psbt\"},\n+    { \"verifymessage\", 1, \"signature\"},\n+    { \"getnewaddress\", 0, \"label\"},\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "e246741db1f2f056fac32d0f3967f55306e78b49",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this list is incomplete. Also, I wonder how this should be maintained. There needs to be an automated check that the list is up-to-date, like for the other list.",
      "created_at": "2025-06-30T06:34:51Z",
      "updated_at": "2025-06-30T06:34:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2174327111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174327111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174867410",
      "pull_request_review_id": 2970902202,
      "id": 2174867410,
      "node_id": "PRRC_kwDOABII586BodfS",
      "diff_hunk": "@@ -311,6 +311,27 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with\n+ * named parameter parsing.\n+ *\n+ * @note Parameter indexes start from 0.\n+ */\n+static const CRPCConvertParam vRPCStringParams[] =\n+{\n+    { \"finalizepsbt\", 0, \"psbt\"},\n+    { \"decodepsbt\", 0, \"psbt\"},\n+    { \"analyzepsbt\", 0, \"psbt\"},\n+    { \"walletprocesspsbt\", 0, \"psbt\"},\n+    { \"descriptorprocesspsbt\", 0, \"psbt\"},\n+    { \"utxoupdatepsbt\", 0, \"psbt\"},\n+    { \"verifymessage\", 1, \"signature\"},\n+    { \"getnewaddress\", 0, \"label\"},\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "e246741db1f2f056fac32d0f3967f55306e78b49",
      "in_reply_to_id": 2174327111,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you please tell me about the automated check you are referring to? I saw a test in `test/functional/rpc_help.py` which does similar things.",
      "created_at": "2025-06-30T11:37:33Z",
      "updated_at": "2025-06-30T11:37:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2174867410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174867410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175017840",
      "pull_request_review_id": 2971138104,
      "id": 2175017840,
      "node_id": "PRRC_kwDOABII586BpCNw",
      "diff_hunk": "@@ -311,6 +311,27 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with\n+ * named parameter parsing.\n+ *\n+ * @note Parameter indexes start from 0.\n+ */\n+static const CRPCConvertParam vRPCStringParams[] =\n+{\n+    { \"finalizepsbt\", 0, \"psbt\"},\n+    { \"decodepsbt\", 0, \"psbt\"},\n+    { \"analyzepsbt\", 0, \"psbt\"},\n+    { \"walletprocesspsbt\", 0, \"psbt\"},\n+    { \"descriptorprocesspsbt\", 0, \"psbt\"},\n+    { \"utxoupdatepsbt\", 0, \"psbt\"},\n+    { \"verifymessage\", 1, \"signature\"},\n+    { \"getnewaddress\", 0, \"label\"},\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "e246741db1f2f056fac32d0f3967f55306e78b49",
      "in_reply_to_id": 2174327111,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Can you please tell me about the automated check you are referring to? I saw a test in `test/functional/rpc_help.py` which does similar things.\r\n\r\nYes, that is the one I was referring to.",
      "created_at": "2025-06-30T12:59:37Z",
      "updated_at": "2025-06-30T12:59:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2175017840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175017840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182835137",
      "pull_request_review_id": 2983254875,
      "id": 2182835137,
      "node_id": "PRRC_kwDOABII586CG2vB",
      "diff_hunk": "@@ -311,6 +311,27 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with\n+ * named parameter parsing.\n+ *\n+ * @note Parameter indexes start from 0.\n+ */\n+static const CRPCConvertParam vRPCStringParams[] =\n+{\n+    { \"finalizepsbt\", 0, \"psbt\"},\n+    { \"decodepsbt\", 0, \"psbt\"},\n+    { \"analyzepsbt\", 0, \"psbt\"},\n+    { \"walletprocesspsbt\", 0, \"psbt\"},\n+    { \"descriptorprocesspsbt\", 0, \"psbt\"},\n+    { \"utxoupdatepsbt\", 0, \"psbt\"},\n+    { \"verifymessage\", 1, \"signature\"},\n+    { \"getnewaddress\", 0, \"label\"},\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "e246741db1f2f056fac32d0f3967f55306e78b49",
      "in_reply_to_id": 2174327111,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also, it doesn't seem to be working right now anyway, see the CI failure (needs rebase)",
      "created_at": "2025-07-03T13:43:06Z",
      "updated_at": "2025-07-03T13:43:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2182835137",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182835137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2183756175",
      "pull_request_review_id": 2984700355,
      "id": 2183756175,
      "node_id": "PRRC_kwDOABII586CKXmP",
      "diff_hunk": "@@ -311,6 +311,27 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with\n+ * named parameter parsing.\n+ *\n+ * @note Parameter indexes start from 0.\n+ */\n+static const CRPCConvertParam vRPCStringParams[] =\n+{\n+    { \"finalizepsbt\", 0, \"psbt\"},\n+    { \"decodepsbt\", 0, \"psbt\"},\n+    { \"analyzepsbt\", 0, \"psbt\"},\n+    { \"walletprocesspsbt\", 0, \"psbt\"},\n+    { \"descriptorprocesspsbt\", 0, \"psbt\"},\n+    { \"utxoupdatepsbt\", 0, \"psbt\"},\n+    { \"verifymessage\", 1, \"signature\"},\n+    { \"getnewaddress\", 0, \"label\"},\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "e246741db1f2f056fac32d0f3967f55306e78b49",
      "in_reply_to_id": 2174327111,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Rebased and fixed the previous CI error. But now CI is showing a different error I'm investigating for this one.",
      "created_at": "2025-07-03T21:08:07Z",
      "updated_at": "2025-07-04T06:33:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2183756175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2183756175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2196208483",
      "pull_request_review_id": 3003417391,
      "id": 2196208483,
      "node_id": "PRRC_kwDOABII586C53tj",
      "diff_hunk": "@@ -380,6 +491,34 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        // Handle RPC methods that have optional string parameters; for these, the parameter index and name mapping may not be fixed\n+        if (rpcCvtTable.IsOptionalStringParam(strMethod)) {\n+            // If the parameter name and index match an entry in vRPCStringParams, or the parameter is a known string parameter for this method, treat it as a named parameter\n+            if (rpcCvtTable.HasStringParamForMethodAndIndex(strMethod, name, positional_args.size()) || rpcCvtTable.IsStringParam(strMethod, name)) {\n+                params.pushKV(name, rpcCvtTable.ArgToUniValue(value, strMethod, name));\n+            }\n+            // If the parameter is a known conversion parameter described in the vRPCConvertParams table by name, treat it as a named parameter\n+            else if(rpcCvtTable.IsConvertParamByName(strMethod, name)) {\n+                params.pushKV(name, rpcCvtTable.ArgToUniValue(value, strMethod, name));\n+            }\n+            // If the parameter is not recognized as a named parameter, treat it as a positional\n+            else {\n+                positional_args.push_back(rpcCvtTable.ArgToUniValue(s, strMethod, name));\n+            }\n+            continue;\n+        }\n+\n+        if (rpcCvtTable.HasKnownStringParams(strMethod, positional_args.size())) {\n+            // If this method has known string parameters, check if this specific parameter is one of them\n+            if (rpcCvtTable.IsStringParam(strMethod, name)) {\n+                // Pass only the value as positional\n+                positional_args.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, positional_args.size()));",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 164,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "bc2241ab3d01a38f19588cb85134e5330b77e3f4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where Base64 encoding is used\" (bc2241ab3d01a38f19588cb85134e5330b77e3f4)\r\n\r\nThanks for the updates!\r\n\r\nLooking at more closely at this solution, some things don't make sense to me. This code from lines 513-515 is checking to see if a command line argument that parses as NAME=VALUE has a NAME that is listed in the table above as a known string parameter. But if it is instead of adding the parameter to `params` and passing the argument by name, it is discarding the name, adding the parameter to `positional_args` and passing the argument by position, which seems like the opposite of what it should be doing. This looks like a bug, but it might be easy to fix and the else condition below does look right.\r\n\r\nI'm also pretty confused by the IsOptionalStringParam code above. It seems complex and I don't actually understand what cases that is intended to handle.\r\n\r\nAlso when experimenting with this, I realized the original bug of `=` characters causing positional parameters to be mistakenly interpreted as named parameters is not just limited to string parameters, but can also happen with JSON parameters. This easy to see with following example:\r\n\r\n```\r\nbuild/bin/bitcoin-cli -regtest -named echojson '[\"ok\"]'\r\nbuild/bin/bitcoin-cli -regtest -named echojson '[\"fail=yes\"]'\r\n```\r\n\r\nwhich fails with `Unknown named parameter [\"fail`. Fixing this might be out of scope for this PR, but it should be easier to fix than the original problem because the JSON representation is not ambiguous. So it could be nice to fix here.\r\n\r\nTo understand the problem better, I implemented df4f39143d868fe4303ab7b3875757a26b7ac5a5 ([tag](https://github.com/ryanofsky/bitcoin/commits/review.32821.2-edit.1)) on top of your PR which I think takes a simpler and more general approach and should fix this problem more fully.\r\n\r\nIf it would be helpful, feel free to use any of that code in this PR. And if you think the current approach is better, that could also be the case. I mostly just don't understand the optional string aspect of bc2241ab3d01a38f19588cb85134e5330b77e3f4 and what cases it is handling.",
      "created_at": "2025-07-09T23:49:20Z",
      "updated_at": "2025-07-09T23:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2196208483",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2196208483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 513,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 515,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2203147913",
      "pull_request_review_id": 3013857457,
      "id": 2203147913,
      "node_id": "PRRC_kwDOABII586DUV6J",
      "diff_hunk": "@@ -380,6 +491,34 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        // Handle RPC methods that have optional string parameters; for these, the parameter index and name mapping may not be fixed\n+        if (rpcCvtTable.IsOptionalStringParam(strMethod)) {\n+            // If the parameter name and index match an entry in vRPCStringParams, or the parameter is a known string parameter for this method, treat it as a named parameter\n+            if (rpcCvtTable.HasStringParamForMethodAndIndex(strMethod, name, positional_args.size()) || rpcCvtTable.IsStringParam(strMethod, name)) {\n+                params.pushKV(name, rpcCvtTable.ArgToUniValue(value, strMethod, name));\n+            }\n+            // If the parameter is a known conversion parameter described in the vRPCConvertParams table by name, treat it as a named parameter\n+            else if(rpcCvtTable.IsConvertParamByName(strMethod, name)) {\n+                params.pushKV(name, rpcCvtTable.ArgToUniValue(value, strMethod, name));\n+            }\n+            // If the parameter is not recognized as a named parameter, treat it as a positional\n+            else {\n+                positional_args.push_back(rpcCvtTable.ArgToUniValue(s, strMethod, name));\n+            }\n+            continue;\n+        }\n+\n+        if (rpcCvtTable.HasKnownStringParams(strMethod, positional_args.size())) {\n+            // If this method has known string parameters, check if this specific parameter is one of them\n+            if (rpcCvtTable.IsStringParam(strMethod, name)) {\n+                // Pass only the value as positional\n+                positional_args.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, positional_args.size()));",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 164,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "bc2241ab3d01a38f19588cb85134e5330b77e3f4",
      "in_reply_to_id": 2196208483,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you for the detailed review!\r\n\r\nI think you're right, my current approach regarding named parameter handling is too verbose/complex, and I looked at your implementation, and I really liked the way you're handling named parameters in the `RPCConvertNamedValues` function. I will implement that approach in my next update commit. Besides that, I also looked at the json parsing issue you're mentioning, and it's easily reproducible. I experimented with both the approaches, the one you provided and the current one, and I'm trying to get the best things from both of them. I will try to fix the json parsing issue in this PR because it's closely related to the same issue.",
      "created_at": "2025-07-13T04:14:55Z",
      "updated_at": "2025-07-13T04:15:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2203147913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2203147913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 513,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 515,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220003117",
      "pull_request_review_id": 3039323143,
      "id": 2220003117,
      "node_id": "PRRC_kwDOABII586EUo8t",
      "diff_hunk": "@@ -380,6 +477,30 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        bool is_named_string_param = rpcCvtTable.IsStringParamByName(strMethod, name);\n+        bool is_named_convert_param = rpcCvtTable.IsConvertParamByName(strMethod, name);\n+\n+        if(!is_named_string_param && !is_named_convert_param) {\n+            /**\n+             * This handles two cases where a named parameter (param=value) is not recognized:\n+             *\n+             * 1. The RPC method was listed in the vRPCStringParams table with a given index but parameter is not a known string parameter\n+             *    in such cases we pass the whole parameter as positional.\n+             *\n+             * 2. The RPC method was listed in the vRPCConvertParams table with a given index but the parameter is not a known convert parameter\n+             *    in such cases we first parse the whole parameter as JSON and then treat as positional.\n+             */\n+            bool is_string_method = rpcCvtTable.IsStringParamByIndex(strMethod, positional_args.size());\n+            bool is_convert_method = rpcCvtTable.IsConvertParamByIndex(strMethod, positional_args.size());",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 143,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "e20cba675bfa5e17da1a0776dda0070e9c94aff1",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where Base64 encoding is used\" (e20cba675bfa5e17da1a0776dda0070e9c94aff1)\r\n\r\nNot sure the names `is_string_method` and `is_convert_method` are really accurate here. `is_string_method` is true if the method's next positional argument expects a string, and `is_convert_method` is true if it expects a non-string value. Could maybe consider calling them `next_positional_arg_is_string` or `next_positional_arg_is_json` or something like that. Code looks like it does the right thing though so feel free to ignore this suggestion.",
      "created_at": "2025-07-21T18:55:52Z",
      "updated_at": "2025-07-21T19:44:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2220003117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220003117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 493,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220009660",
      "pull_request_review_id": 3039323143,
      "id": 2220009660,
      "node_id": "PRRC_kwDOABII586EUqi8",
      "diff_hunk": "@@ -380,6 +491,34 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        // Handle RPC methods that have optional string parameters; for these, the parameter index and name mapping may not be fixed\n+        if (rpcCvtTable.IsOptionalStringParam(strMethod)) {\n+            // If the parameter name and index match an entry in vRPCStringParams, or the parameter is a known string parameter for this method, treat it as a named parameter\n+            if (rpcCvtTable.HasStringParamForMethodAndIndex(strMethod, name, positional_args.size()) || rpcCvtTable.IsStringParam(strMethod, name)) {\n+                params.pushKV(name, rpcCvtTable.ArgToUniValue(value, strMethod, name));\n+            }\n+            // If the parameter is a known conversion parameter described in the vRPCConvertParams table by name, treat it as a named parameter\n+            else if(rpcCvtTable.IsConvertParamByName(strMethod, name)) {\n+                params.pushKV(name, rpcCvtTable.ArgToUniValue(value, strMethod, name));\n+            }\n+            // If the parameter is not recognized as a named parameter, treat it as a positional\n+            else {\n+                positional_args.push_back(rpcCvtTable.ArgToUniValue(s, strMethod, name));\n+            }\n+            continue;\n+        }\n+\n+        if (rpcCvtTable.HasKnownStringParams(strMethod, positional_args.size())) {\n+            // If this method has known string parameters, check if this specific parameter is one of them\n+            if (rpcCvtTable.IsStringParam(strMethod, name)) {\n+                // Pass only the value as positional\n+                positional_args.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, positional_args.size()));",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 164,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "bc2241ab3d01a38f19588cb85134e5330b77e3f4",
      "in_reply_to_id": 2196208483,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2203147913\r\n\r\nThanks! it appears all issues are solved now with the latest push (56b1da77b5998c44b3bb799689a6c0449e9223fc)",
      "created_at": "2025-07-21T18:59:37Z",
      "updated_at": "2025-07-21T19:44:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2220009660",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220009660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 513,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 515,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220035865",
      "pull_request_review_id": 3039323143,
      "id": 2220035865,
      "node_id": "PRRC_kwDOABII586EUw8Z",
      "diff_hunk": "@@ -50,6 +50,27 @@ def invalid_label_name_test(self):\n         for rpc_call in rpc_calls:\n             assert_raises_rpc_error(-11, \"Invalid label name\", *rpc_call, label=\"*\")\n \n+    def test_label_named_parameter_handling(self):\n+        \"\"\"Test that getnewaddress with labels containing '=' characters is handled correctly in -named mode\"\"\"\n+        self.log.info(\"Test getnewaddress label parameter handling\")\n+        node = self.nodes[0]\n+\n+        # Test getnewaddress with explicit named parameter containing '='\n+        label_with_equals = \"wallet=wallet\"\n+        result = node.cli(\"-named\", \"getnewaddress\", f\"label={label_with_equals}\").send_cli()\n+        address = result.strip()\n+        addr_info = node.getaddressinfo(address)\n+        assert_equal(addr_info.get('labels', []), [label_with_equals])\n+\n+        # Test that unknown parameter with '=' gets treated as positional and works correctly",
      "path": "test/functional/wallet_labels.py",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "56b1da77b5998c44b3bb799689a6c0449e9223fc",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Add functional tests for named argument parsing\" (56b1da77b5998c44b3bb799689a6c0449e9223fc)\r\n\r\nNote: this comment is not exactly describing what is happening during this test. It's not true in general that unknown parameters with `=` are treated as positional. Unknown parameters with `=` are only treated as positional if the next positional parameter is known and either accepts a string (this case) or if it's known and accepts JSON and the argument actually parses as json. Otherwise it is still treated as a named parameter. Could consider clarifying the comment.",
      "created_at": "2025-07-21T19:14:18Z",
      "updated_at": "2025-07-21T19:44:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2220035865",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220035865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223488388",
      "pull_request_review_id": 3044359606,
      "id": 2223488388,
      "node_id": "PRRC_kwDOABII586Eh72E",
      "diff_hunk": "@@ -380,6 +477,30 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        bool is_named_string_param = rpcCvtTable.IsStringParamByName(strMethod, name);\n+        bool is_named_convert_param = rpcCvtTable.IsConvertParamByName(strMethod, name);\n+\n+        if(!is_named_string_param && !is_named_convert_param) {\n+            /**\n+             * This handles two cases where a named parameter (param=value) is not recognized:\n+             *\n+             * 1. The RPC method was listed in the vRPCStringParams table with a given index but parameter is not a known string parameter\n+             *    in such cases we pass the whole parameter as positional.\n+             *\n+             * 2. The RPC method was listed in the vRPCConvertParams table with a given index but the parameter is not a known convert parameter\n+             *    in such cases we first parse the whole parameter as JSON and then treat as positional.\n+             */\n+            bool is_string_method = rpcCvtTable.IsStringParamByIndex(strMethod, positional_args.size());\n+            bool is_convert_method = rpcCvtTable.IsConvertParamByIndex(strMethod, positional_args.size());",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 143,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "e20cba675bfa5e17da1a0776dda0070e9c94aff1",
      "in_reply_to_id": 2220003117,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think you're right. I will make those more descriptive.",
      "created_at": "2025-07-22T18:37:51Z",
      "updated_at": "2025-07-22T18:37:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2223488388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223488388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 493,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 494,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223489610",
      "pull_request_review_id": 3044361317,
      "id": 2223489610,
      "node_id": "PRRC_kwDOABII586Eh8JK",
      "diff_hunk": "@@ -50,6 +50,27 @@ def invalid_label_name_test(self):\n         for rpc_call in rpc_calls:\n             assert_raises_rpc_error(-11, \"Invalid label name\", *rpc_call, label=\"*\")\n \n+    def test_label_named_parameter_handling(self):\n+        \"\"\"Test that getnewaddress with labels containing '=' characters is handled correctly in -named mode\"\"\"\n+        self.log.info(\"Test getnewaddress label parameter handling\")\n+        node = self.nodes[0]\n+\n+        # Test getnewaddress with explicit named parameter containing '='\n+        label_with_equals = \"wallet=wallet\"\n+        result = node.cli(\"-named\", \"getnewaddress\", f\"label={label_with_equals}\").send_cli()\n+        address = result.strip()\n+        addr_info = node.getaddressinfo(address)\n+        assert_equal(addr_info.get('labels', []), [label_with_equals])\n+\n+        # Test that unknown parameter with '=' gets treated as positional and works correctly",
      "path": "test/functional/wallet_labels.py",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "56b1da77b5998c44b3bb799689a6c0449e9223fc",
      "in_reply_to_id": 2220035865,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for pointing this out. I will fix this.",
      "created_at": "2025-07-22T18:38:33Z",
      "updated_at": "2025-07-22T18:38:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2223489610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223489610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2289397520",
      "pull_request_review_id": 3138389894,
      "id": 2289397520,
      "node_id": "PRRC_kwDOABII586IdW8Q",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class CRPCStringParam {\n+public:\n+    std::string methodName; //!< method name this parameter belongs to\n+    int paramIdx;           //!< 0-based idx of param\n+    std::string paramName;  //!< parameter name",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "3f10fe8763bf4a1bdb6b347204987584761b9dbf",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3f10fe8763bf4a1bdb6b347204987584761b9dbf \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nPlease use the new class and variable naming style.",
      "created_at": "2025-08-20T21:59:14Z",
      "updated_at": "2025-08-20T22:08:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2289397520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2289397520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2289397926",
      "pull_request_review_id": 3138389894,
      "id": 2289397926,
      "node_id": "PRRC_kwDOABII586IdXCm",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class CRPCStringParam {\n+public:\n+    std::string methodName; //!< method name this parameter belongs to\n+    int paramIdx;           //!< 0-based idx of param\n+    std::string paramName;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.\n+ *\n+ * @note Parameter indexes start from 0.\n+ * @note If you include an RPC method then you need to include all other\n+ * string parameters that correspond to the same method for consistency\n+ * and valid lookup from the table.\n+ */\n+static const CRPCStringParam vRPCStringParams[] =",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "3f10fe8763bf4a1bdb6b347204987584761b9dbf",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3f10fe8763bf4a1bdb6b347204987584761b9dbf \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nPlease use the new variable naming style.",
      "created_at": "2025-08-20T21:59:28Z",
      "updated_at": "2025-08-20T22:08:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2289397926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2289397926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2289403854",
      "pull_request_review_id": 3138389894,
      "id": 2289403854,
      "node_id": "PRRC_kwDOABII586IdYfO",
      "diff_hunk": "@@ -340,6 +408,30 @@ class CRPCConvertTable\n     {\n         return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n     }\n+\n+    /** Return true if parameter is in the string parameters table (vRPCStringParams) */\n+    bool IsStringParamByName(const std::string& method, const std::string& param) const\n+    {\n+        return stringParams.count({method, param}) > 0;",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 90,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "3f10fe8763bf4a1bdb6b347204987584761b9dbf",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3f10fe8763bf4a1bdb6b347204987584761b9dbf \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nWe can use `contains` here rather than `count() > 0`",
      "created_at": "2025-08-20T22:03:25Z",
      "updated_at": "2025-08-20T22:08:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2289403854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2289403854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2293916342",
      "pull_request_review_id": 3144759060,
      "id": 2293916342,
      "node_id": "PRRC_kwDOABII586IumK2",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class CRPCStringParam {\n+public:\n+    std::string methodName; //!< method name this parameter belongs to\n+    int paramIdx;           //!< 0-based idx of param\n+    std::string paramName;  //!< parameter name",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "3f10fe8763bf4a1bdb6b347204987584761b9dbf",
      "in_reply_to_id": 2289397520,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for suggesting. Fixed",
      "created_at": "2025-08-22T14:38:23Z",
      "updated_at": "2025-08-22T14:38:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2293916342",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2293916342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2293916652",
      "pull_request_review_id": 3144759480,
      "id": 2293916652,
      "node_id": "PRRC_kwDOABII586IumPs",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class CRPCStringParam {\n+public:\n+    std::string methodName; //!< method name this parameter belongs to\n+    int paramIdx;           //!< 0-based idx of param\n+    std::string paramName;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.\n+ *\n+ * @note Parameter indexes start from 0.\n+ * @note If you include an RPC method then you need to include all other\n+ * string parameters that correspond to the same method for consistency\n+ * and valid lookup from the table.\n+ */\n+static const CRPCStringParam vRPCStringParams[] =",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "3f10fe8763bf4a1bdb6b347204987584761b9dbf",
      "in_reply_to_id": 2289397926,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed",
      "created_at": "2025-08-22T14:38:31Z",
      "updated_at": "2025-08-22T14:38:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2293916652",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2293916652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2293919832",
      "pull_request_review_id": 3144763080,
      "id": 2293919832,
      "node_id": "PRRC_kwDOABII586IunBY",
      "diff_hunk": "@@ -340,6 +408,30 @@ class CRPCConvertTable\n     {\n         return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n     }\n+\n+    /** Return true if parameter is in the string parameters table (vRPCStringParams) */\n+    bool IsStringParamByName(const std::string& method, const std::string& param) const\n+    {\n+        return stringParams.count({method, param}) > 0;",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 90,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "3f10fe8763bf4a1bdb6b347204987584761b9dbf",
      "in_reply_to_id": 2289403854,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, done.",
      "created_at": "2025-08-22T14:39:20Z",
      "updated_at": "2025-08-22T14:39:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2293919832",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2293919832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299170764",
      "pull_request_review_id": 3153076088,
      "id": 2299170764,
      "node_id": "PRRC_kwDOABII586JCo_M",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 10,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In a4f2144facb5d4dc2f749494ea65744fffcb628b \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nThis seems unnecessary, it's the same thing `CRPCConvertParam`.",
      "created_at": "2025-08-25T21:22:41Z",
      "updated_at": "2025-08-25T21:34:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299170764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299170764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299171197",
      "pull_request_review_id": 3153076088,
      "id": 2299171197,
      "node_id": "PRRC_kwDOABII586JCpF9",
      "diff_hunk": "@@ -325,6 +391,8 @@ class CRPCConvertTable\n private:\n     std::set<std::pair<std::string, int>> members;\n     std::set<std::pair<std::string, std::string>> membersByName;\n+    std::set<std::pair<std::string, std::string>> stringParams;\n+    std::set<std::pair<std::string, int>> stringParamsByIndex;",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 78,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In a4f2144facb5d4dc2f749494ea65744fffcb628b \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nnit: these should use the new naming style.",
      "created_at": "2025-08-25T21:22:58Z",
      "updated_at": "2025-08-25T21:34:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299171197",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299171197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 394,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299173151",
      "pull_request_review_id": 3153076088,
      "id": 2299173151,
      "node_id": "PRRC_kwDOABII586JCpkf",
      "diff_hunk": "@@ -379,6 +476,30 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        bool is_named_string_param = rpcCvtTable.IsStringParamByName(strMethod, name);\n+        bool is_named_convert_param = rpcCvtTable.IsConvertParamByName(strMethod, name);\n+\n+        if(!is_named_string_param && !is_named_convert_param) {\n+            /**\n+             * This handles two cases where a named parameter (param=value) is not recognized:\n+             *\n+             * 1. The RPC method was listed in the RPC_STRING_PARAMS table with a given index but parameter is not a known string parameter\n+             *    in such cases we pass the whole parameter as positional.\n+             *\n+             * 2. The RPC method was listed in the vRPCConvertParams table with a given index but the parameter is not a known convert parameter\n+             *    in such cases we first parse the whole parameter as JSON and then treat as positional.\n+             */\n+            bool next_positional_arg_is_string = rpcCvtTable.IsStringParamByIndex(strMethod, positional_args.size());\n+            bool next_positional_arg_is_json = rpcCvtTable.IsConvertParamByIndex(strMethod, positional_args.size());",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 143,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In a4f2144facb5d4dc2f749494ea65744fffcb628b \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nI find the name 'next_...` to be confusing since this is really referring to the position of the current argument, not the next argument.",
      "created_at": "2025-08-25T21:24:16Z",
      "updated_at": "2025-08-25T21:34:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299173151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299173151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 492,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 493,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299177873",
      "pull_request_review_id": 3153076088,
      "id": 2299177873,
      "node_id": "PRRC_kwDOABII586JCquR",
      "diff_hunk": "@@ -379,6 +476,30 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        bool is_named_string_param = rpcCvtTable.IsStringParamByName(strMethod, name);\n+        bool is_named_convert_param = rpcCvtTable.IsConvertParamByName(strMethod, name);\n+\n+        if(!is_named_string_param && !is_named_convert_param) {\n+            /**\n+             * This handles two cases where a named parameter (param=value) is not recognized:\n+             *\n+             * 1. The RPC method was listed in the RPC_STRING_PARAMS table with a given index but parameter is not a known string parameter\n+             *    in such cases we pass the whole parameter as positional.\n+             *\n+             * 2. The RPC method was listed in the vRPCConvertParams table with a given index but the parameter is not a known convert parameter\n+             *    in such cases we first parse the whole parameter as JSON and then treat as positional.\n+             */\n+            bool next_positional_arg_is_string = rpcCvtTable.IsStringParamByIndex(strMethod, positional_args.size());\n+            bool next_positional_arg_is_json = rpcCvtTable.IsConvertParamByIndex(strMethod, positional_args.size());\n+            UniValue value;\n+            if(next_positional_arg_is_json && value.read(s)){",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 145,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In a4f2144facb5d4dc2f749494ea65744fffcb628b \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nInstead of parsing the argument directly, we should be using either `Parse` or `ArgToUniValue`",
      "created_at": "2025-08-25T21:27:14Z",
      "updated_at": "2025-08-25T21:34:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299177873",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299177873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299186191",
      "pull_request_review_id": 3153076088,
      "id": 2299186191,
      "node_id": "PRRC_kwDOABII586JCswP",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In a4f2144facb5d4dc2f749494ea65744fffcb628b \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nWhat is the criteria for including a parameter in this table? This text says \"parameters that might contain '=' character\", but this includes things that should never have `=` in them, like sighashtype, estimate_mode, or blockhash. But if the inclusion criteria is basically any string a user can provide, then there are several string parameters that should be included, like all of the other blockhash parameters.",
      "created_at": "2025-08-25T21:32:40Z",
      "updated_at": "2025-08-25T21:34:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299186191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299186191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299384096",
      "pull_request_review_id": 3153361495,
      "id": 2299384096,
      "node_id": "PRRC_kwDOABII586JDdEg",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299186191\r\n\r\n> What is the criteria for including a parameter in this table?\r\n\r\nBasically if any string parameter for a method can contain `=`, all the other string parameters for the method should be listed too. My cleanup of this code in b998cc52d51b48db9271fdba0bd69e9aaccb7999 adds a comment explaining this:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b998cc52d51b48db9271fdba0bd69e9aaccb7999/src/rpc/client.cpp#L36-L42\r\n\r\n",
      "created_at": "2025-08-25T23:54:43Z",
      "updated_at": "2025-08-26T00:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299384096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299384096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299391976",
      "pull_request_review_id": 3153361495,
      "id": 2299391976,
      "node_id": "PRRC_kwDOABII586JDe_o",
      "diff_hunk": "@@ -379,6 +476,30 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        bool is_named_string_param = rpcCvtTable.IsStringParamByName(strMethod, name);\n+        bool is_named_convert_param = rpcCvtTable.IsConvertParamByName(strMethod, name);\n+\n+        if(!is_named_string_param && !is_named_convert_param) {\n+            /**\n+             * This handles two cases where a named parameter (param=value) is not recognized:\n+             *\n+             * 1. The RPC method was listed in the RPC_STRING_PARAMS table with a given index but parameter is not a known string parameter\n+             *    in such cases we pass the whole parameter as positional.\n+             *\n+             * 2. The RPC method was listed in the vRPCConvertParams table with a given index but the parameter is not a known convert parameter\n+             *    in such cases we first parse the whole parameter as JSON and then treat as positional.\n+             */\n+            bool next_positional_arg_is_string = rpcCvtTable.IsStringParamByIndex(strMethod, positional_args.size());\n+            bool next_positional_arg_is_json = rpcCvtTable.IsConvertParamByIndex(strMethod, positional_args.size());\n+            UniValue value;\n+            if(next_positional_arg_is_json && value.read(s)){",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 145,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299177873,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In [a4f2144](https://github.com/bitcoin/bitcoin/commit/a4f2144facb5d4dc2f749494ea65744fffcb628b) \"rpc: Handle -named argument parsing where '=' character is used\"\r\n> \r\n> Instead of parsing the argument directly, we should be using either `Parse` or `ArgToUniValue`\r\n\r\nI don't think you can use `Parse` or `ArgToUniValue` unless you catch the exception they throw. No strong opinion, but I think it is probably simpler to use read.",
      "created_at": "2025-08-26T00:00:15Z",
      "updated_at": "2025-08-26T00:19:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299391976",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299391976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299405303",
      "pull_request_review_id": 3153361495,
      "id": 2299405303,
      "node_id": "PRRC_kwDOABII586JDiP3",
      "diff_hunk": "@@ -379,6 +476,30 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        bool is_named_string_param = rpcCvtTable.IsStringParamByName(strMethod, name);\n+        bool is_named_convert_param = rpcCvtTable.IsConvertParamByName(strMethod, name);\n+\n+        if(!is_named_string_param && !is_named_convert_param) {\n+            /**\n+             * This handles two cases where a named parameter (param=value) is not recognized:\n+             *\n+             * 1. The RPC method was listed in the RPC_STRING_PARAMS table with a given index but parameter is not a known string parameter\n+             *    in such cases we pass the whole parameter as positional.\n+             *\n+             * 2. The RPC method was listed in the vRPCConvertParams table with a given index but the parameter is not a known convert parameter\n+             *    in such cases we first parse the whole parameter as JSON and then treat as positional.\n+             */\n+            bool next_positional_arg_is_string = rpcCvtTable.IsStringParamByIndex(strMethod, positional_args.size());\n+            bool next_positional_arg_is_json = rpcCvtTable.IsConvertParamByIndex(strMethod, positional_args.size());",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 143,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299173151,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299173151\r\n\r\n> I find the name 'next_...` to be confusing since this is really referring to the position of the current argument, not the next argument.\r\n\r\nTechnically these aren't really referring to the current argument `s`. At this point in the loop, all we know about `s` is that it contains an `=` sign and that the beginning part of `s` before `=` is not a known parameter name. At this point `s` _might_ be passed by-position if it is compatible with what we know about the next position in the `args` list (i.e. the `positional_args` vector). These variables are describing attributes of the next positional parameter. If `s` is compatible with them, it will be be passed by position, otherwise it will be passed by name.\r\n\r\nI can see how `next_positional_arg_*` might be confusing though and maybe one solution is to just drop these variables and use the expressions directly below. My rewrite of this code in b998cc52d51b48db9271fdba0bd69e9aaccb7999 does not include these variables and includes a fuller explanation of what this code is doing:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b998cc52d51b48db9271fdba0bd69e9aaccb7999/src/rpc/client.cpp#L422-L439\r\n",
      "created_at": "2025-08-26T00:10:32Z",
      "updated_at": "2025-08-26T00:23:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299405303",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299405303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 492,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 493,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299891671",
      "pull_request_review_id": 3154078099,
      "id": 2299891671,
      "node_id": "PRRC_kwDOABII586JFY_X",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 10,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299170764,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The definition might be the same, but the purpose is entirely different. This is specifically for string RPC methods.",
      "created_at": "2025-08-26T06:13:52Z",
      "updated_at": "2025-08-26T06:13:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299891671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299891671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299891945",
      "pull_request_review_id": 3154078490,
      "id": 2299891945,
      "node_id": "PRRC_kwDOABII586JFZDp",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There was a `@note` at around lines 328-330 explaining this behaviour. ",
      "created_at": "2025-08-26T06:14:03Z",
      "updated_at": "2025-08-26T06:14:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2299891945",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2299891945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301652903",
      "pull_request_review_id": 3156619856,
      "id": 2301652903,
      "node_id": "PRRC_kwDOABII586JMG-n",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My point was more that the criteria appears to be applied inconsistently.",
      "created_at": "2025-08-26T17:23:15Z",
      "updated_at": "2025-08-26T17:23:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301652903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301652903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301654129",
      "pull_request_review_id": 3156621535,
      "id": 2301654129,
      "node_id": "PRRC_kwDOABII586JMHRx",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 10,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299170764,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think the meaning is different enough to warrant a whole new class.",
      "created_at": "2025-08-26T17:23:55Z",
      "updated_at": "2025-08-26T17:23:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301654129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301654129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301702270",
      "pull_request_review_id": 3156688506,
      "id": 2301702270,
      "node_id": "PRRC_kwDOABII586JMTB-",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "According to my analysis, there is nothing more than specified criteria applied inconsistently in the codebase. Can you point out something?",
      "created_at": "2025-08-26T17:47:46Z",
      "updated_at": "2025-08-26T17:47:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301702270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301702270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301715335",
      "pull_request_review_id": 3156709982,
      "id": 2301715335,
      "node_id": "PRRC_kwDOABII586JMWOH",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 10,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299170764,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The meaning is totally different, and it's easier and much more maintainable right now. This class doesn't depend on any other class/object. It's an independent representation.",
      "created_at": "2025-08-26T17:53:55Z",
      "updated_at": "2025-08-26T17:53:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301715335",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301715335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301743800",
      "pull_request_review_id": 3156750628,
      "id": 2301743800,
      "node_id": "PRRC_kwDOABII586JMdK4",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "* `listsinceblock`'s `blockhash` is included in this list even though block hashes cannot include `=`. There are also a ton of other RPCs that take a block hash in the same way but are not included in this list.\r\n* `descriptorprocesspsbt`'s `sighashtype` is a parameter which has a list of fixed string values and none of them have an `=`. There are multiple RPCs that take a sighashtype but they are not included in this list.\r\n* `sendmany`'s `dummy` must be an empty string so it is reasonable to expect that no one will put an empty string argument there. There are other RPCs that take a dummy with similar restrictions but are not included in this list.\r\n* `sendtoaddress`'s `estimate_mode` is a parameter with a list of fixed string values and none of them have an `=`. There are multiple RPCs that have the same `estimate_mode` parameter but are not included in this list. \r\n\r\nSince these arguments are there, but not all RPCs that have these arguments, is why I ask about the criteria. Either we are including all string parameters because they may contain an `=`, or we are only including parameters that might reasonably contain a `=`. In the former, which I think is a reasonable position, the list is incomplete and significant expansion. In the latter, which is also reasonable, the list has too many things in it.",
      "created_at": "2025-08-26T18:06:37Z",
      "updated_at": "2025-08-26T18:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301743800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301743800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301786086",
      "pull_request_review_id": 3156813750,
      "id": 2301786086,
      "node_id": "PRRC_kwDOABII586JMnfm",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think now I got what you are trying to say. So the things like `blockhash`, `dummy`, `sighashtype` etc are included because we are not mainly targeting these params; instead, we are targeting methods which might contain a `=` character. For example, `listsinceblock` contains a param named `label` which might contain an `=` char but according to the rule for consistency, we need to include all other string params related to the same method `(listsinceblock)`. That's why I included `blockhash` here, but that doesn't mean we need to add all other methods which contain `blockhash`. That's only needed for this method's lookup correctness. Due to these rules, I made this table separate from the JSON one; this will make this logic and code more maintainable and readable.",
      "created_at": "2025-08-26T18:23:41Z",
      "updated_at": "2025-08-26T18:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301786086",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301786086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301826701",
      "pull_request_review_id": 3156869923,
      "id": 2301826701,
      "node_id": "PRRC_kwDOABII586JMxaN",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What do you mean by \"for consistency\"? It should work fine without specifying the other parameters. Requiring that all string parameters need to be added \"for consistency\" just makes it more annoying to add new RPCs and parameters.",
      "created_at": "2025-08-26T18:42:01Z",
      "updated_at": "2025-08-26T18:42:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301826701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301826701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301845877",
      "pull_request_review_id": 3156896425,
      "id": 2301845877,
      "node_id": "PRRC_kwDOABII586JM2F1",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Okay, so to verify my claim, please remove these params from the table and recompile the code, and then run the functional tests with CLI. You will see some errors because of inconsistent behaviour of the class. Meaning the code needs to know about all the string parameters for the given method for correctness. And that's only needed for RPCs which might contain an `=` character; the rest can be part of the JSON table without any further rules.",
      "created_at": "2025-08-26T18:49:57Z",
      "updated_at": "2025-08-26T18:49:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301845877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301845877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301848604",
      "pull_request_review_id": 3156900015,
      "id": 2301848604,
      "node_id": "PRRC_kwDOABII586JM2wc",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Since these arguments are there, but not all RPCs that have these arguments, is why I ask about the criteria. Either we are including all string parameters because they may contain an =, or we are only including parameters that might reasonably contain a =\r\n\r\nAny individual string that is allowed to contain an '=' should be to be listed in the string table so the new code in this PR can function and detect that these string arguments should be passed as positional parameters, not named parameters.\r\n\r\nBut this is not sufficient, because methods can accept multiple string parameters. If a method accepts two string parameters and one of them may contain `=` and the other is not allowed to contain `=`, both parameters need to be listed in the table so the code does not make the opposite mistake and treat a named parameter as a positional parameter.\r\n\r\nFor example, say there is a wallet RPC called with `==mylabel==` and `type=bech32` as arguments. These are both string parameters and the `label` parameter can contain `=` and the `type` parameter can't. Both parameters need to be listed in the table. The label one needs to be listed so `==mylabel==` is passed by position instead of by name, and the type one needs to be listed so `type=bech32` is passed by name instead of by position.\r\n\r\nEither *all* of a method's string parameters need to be listed in the table or *none* of them need to be listed for things to work properly.",
      "created_at": "2025-08-26T18:51:24Z",
      "updated_at": "2025-08-26T18:51:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301848604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301848604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301863072",
      "pull_request_review_id": 3156918321,
      "id": 2301863072,
      "node_id": "PRRC_kwDOABII586JM6Sg",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> You will see some errors\r\n\r\nThen that is not just \"for consistency\" and that shouldn't be listed as the reason for including the other parameters.\r\n\r\n> Either all of a method's string parameters need to be listed in the table or none of them need to be listed for things to work properly.\r\n\r\nI see. The comment does not explain this clearly.\r\n\r\nIt seems like this might also make it more difficult to use `bitcoin-cli` across versions. If `bitcoind` is a newer version with some RPC that has a new string parameter, it may not be possible to pass that new argument by name with a `bitcoin-cli` from an older version if the RPC has an entry in this table. (This is more likely to be an issue for developers, at least in my workflow, I typically always use the `bitcoin-cli` from master even when working on a branch.)",
      "created_at": "2025-08-26T18:55:35Z",
      "updated_at": "2025-08-26T19:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301863072",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301863072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301870735",
      "pull_request_review_id": 3156929340,
      "id": 2301870735,
      "node_id": "PRRC_kwDOABII586JM8KP",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I see. The comment does not explain this clearly.\r\n\r\nIf it helps, as mentioned earlier I wrote a comment which does try to explain this: https://github.com/bitcoin/bitcoin/blob/b998cc52d51b48db9271fdba0bd69e9aaccb7999/src/rpc/client.cpp#L36-L42\r\n\r\n\r\n",
      "created_at": "2025-08-26T18:58:59Z",
      "updated_at": "2025-08-26T18:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301870735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301870735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301950715",
      "pull_request_review_id": 3157045405,
      "id": 2301950715,
      "node_id": "PRRC_kwDOABII586JNPr7",
      "diff_hunk": "@@ -310,6 +310,72 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n };\n+\n+class RpcStringParam {\n+public:\n+    std::string method_name; //!< method name this parameter belongs to\n+    int param_idx;           //!< 0-based idx of param\n+    std::string param_name;  //!< parameter name\n+};\n+\n+/**\n+ * Specify a (method, idx, name) here if the argument is a string RPC\n+ * parameter that should be recognized as a known parameter name but NOT\n+ * converted from JSON. This is used for string parameters that might\n+ * contain '=' character which could interfere with named parameter parsing.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "a4f2144facb5d4dc2f749494ea65744fffcb628b",
      "in_reply_to_id": 2299186191,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It seems like this might also make it more difficult to use `bitcoin-cli` across versions. If `bitcoind` is a newer version with some RPC that has a new string parameter, it may not be possible to pass that new argument by name with a `bitcoin-cli` from an older version if the RPC has an entry in this table.\r\n\r\nThis is true, and we know a similar issue already happens if a new JSON parameter is added: old clients will incorrectly pass that parameter as a string instead of a JSON value. This PR is adding to the problem by not only using the table to determine whether arguments are JSON vs. string, but whether they are positional vs named. \r\n\r\nI still think this PR is an improvement though because the positional vs named table lookups only need to be used as a heuristic to disambiguate genuinely ambiguous bitcoin-cli calls. If you want to pass a string argument that contains `=` by name, you do that 100% reliably by using `-named` mode and specifying parameter names. If you want to pass the argument by position, you can reliably do that by using `-nonamed` mode and not specifying parameter names. However, when you make `-named` calls without specifying parameter names, those calls are genuinely ambiguous, so bitcoin-cli needs to use a heuristic to decide what to do with them. This PR just improves that heuristic.\r\n\r\nI do think we may want to think about supporting another syntax for passing named and positional parameters together that is not ambiguous. One syntax could be accepting --name=value arguments and accepting -- as a separator for specifying position arguments that begin with --. Another syntax which I always liked was jonasschnelli's python-like syntax from #20273",
      "created_at": "2025-08-26T19:33:49Z",
      "updated_at": "2025-08-26T19:33:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2301950715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2301950715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356963792",
      "pull_request_review_id": 3236511121,
      "id": 2356963792,
      "node_id": "PRRC_kwDOABII586MfGnQ",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n-// clang-format on",
      "path": "src/rpc/client.cpp",
      "position": 205,
      "original_position": 184,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "9aaf55397159bb0e839c19d3d4578dfa144a059b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 9aaf55397159bb0e839c19d3d4578dfa144a059b \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nThis shouldn't be deleted.",
      "created_at": "2025-09-17T23:00:50Z",
      "updated_at": "2025-09-17T23:08:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2356963792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356963792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356965832",
      "pull_request_review_id": 3236511121,
      "id": 2356965832,
      "node_id": "PRRC_kwDOABII586MfHHI",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n-// clang-format on\n-\n-/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw)\n-{\n-    UniValue parsed;\n-    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-    return parsed;\n-}\n \n-class CRPCConvertTable\n+class RPCConvertTable\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n public:\n-    CRPCConvertTable();\n+    RPCConvertTable() = default;\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos) const\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name) const\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n+",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 228,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "9aaf55397159bb0e839c19d3d4578dfa144a059b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 9aaf55397159bb0e839c19d3d4578dfa144a059b \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nExtraneous newline",
      "created_at": "2025-09-17T23:02:39Z",
      "updated_at": "2025-09-17T23:08:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2356965832",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356965832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356967273",
      "pull_request_review_id": 3236511121,
      "id": 2356967273,
      "node_id": "PRRC_kwDOABII586MfHdp",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n-// clang-format on\n-\n-/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw)\n-{\n-    UniValue parsed;\n-    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-    return parsed;\n-}\n \n-class CRPCConvertTable\n+class RPCConvertTable\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n public:\n-    CRPCConvertTable();\n+    RPCConvertTable() = default;\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos) const\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name) const\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n+\n };\n \n-CRPCConvertTable::CRPCConvertTable()\n+static const RPCConvertTable g_rpc_convert_table;\n+\n+static const CRPCConvertParam* ParamFromPosition(std::string_view method_name, size_t position)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n-        members.emplace(cp.methodName, cp.paramIdx);\n-        membersByName.emplace(cp.methodName, cp.paramName);\n-    }\n+    return g_rpc_convert_table.FromPosition(method_name, static_cast<int>(position));\n+}\n+\n+static const CRPCConvertParam* ParamFromName(std::string_view method_name, std::string_view param_name)\n+{\n+    return g_rpc_convert_table.FromName(method_name, param_name);\n+}\n+\n+/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n+static UniValue Parse(std::string_view raw)\n+{\n+    UniValue parsed;\n+    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n+    return parsed;\n+}\n+\n+static UniValue ParseParam(const CRPCConvertParam* param, std::string_view raw)\n+{\n+    // Only parse parameters which have the JSON format; otherwise, treat them as strings.\n+    return (param && param->format == ParamFormat::JSON) ? Parse(raw) : UniValue(std::string(raw));\n }\n \n-static CRPCConvertTable rpcCvtTable;\n \n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n \n-    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n-        std::string_view value{strParams[idx]};\n-        params.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, idx));\n+    for (std::string_view s: strParams) {",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 271,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "9aaf55397159bb0e839c19d3d4578dfa144a059b",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 9aaf55397159bb0e839c19d3d4578dfa144a059b \"rpc: Handle -named argument parsing where '=' character is used\"\r\n\r\nnit: space between `s` and `:`\r\n```suggestion\r\n    for (std::string_view s : strParams) {\r\n```",
      "created_at": "2025-09-17T23:03:58Z",
      "updated_at": "2025-09-17T23:08:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2356967273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356967273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358417517",
      "pull_request_review_id": 3238698344,
      "id": 2358417517,
      "node_id": "PRRC_kwDOABII586Mkpht",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n-// clang-format on",
      "path": "src/rpc/client.cpp",
      "position": 205,
      "original_position": 184,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "9aaf55397159bb0e839c19d3d4578dfa144a059b",
      "in_reply_to_id": 2356963792,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, fixed.",
      "created_at": "2025-09-18T10:27:46Z",
      "updated_at": "2025-09-18T10:27:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2358417517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358417517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358418317",
      "pull_request_review_id": 3238699245,
      "id": 2358418317,
      "node_id": "PRRC_kwDOABII586MkpuN",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n-// clang-format on\n-\n-/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw)\n-{\n-    UniValue parsed;\n-    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-    return parsed;\n-}\n \n-class CRPCConvertTable\n+class RPCConvertTable\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n public:\n-    CRPCConvertTable();\n+    RPCConvertTable() = default;\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos) const\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name) const\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n+",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 228,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "9aaf55397159bb0e839c19d3d4578dfa144a059b",
      "in_reply_to_id": 2356965832,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-09-18T10:27:53Z",
      "updated_at": "2025-09-18T10:27:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2358418317",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358418317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358419428",
      "pull_request_review_id": 3238700491,
      "id": 2358419428,
      "node_id": "PRRC_kwDOABII586Mkp_k",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n-// clang-format on\n-\n-/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw)\n-{\n-    UniValue parsed;\n-    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-    return parsed;\n-}\n \n-class CRPCConvertTable\n+class RPCConvertTable\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n public:\n-    CRPCConvertTable();\n+    RPCConvertTable() = default;\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos) const\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name) const\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n+\n };\n \n-CRPCConvertTable::CRPCConvertTable()\n+static const RPCConvertTable g_rpc_convert_table;\n+\n+static const CRPCConvertParam* ParamFromPosition(std::string_view method_name, size_t position)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n-        members.emplace(cp.methodName, cp.paramIdx);\n-        membersByName.emplace(cp.methodName, cp.paramName);\n-    }\n+    return g_rpc_convert_table.FromPosition(method_name, static_cast<int>(position));\n+}\n+\n+static const CRPCConvertParam* ParamFromName(std::string_view method_name, std::string_view param_name)\n+{\n+    return g_rpc_convert_table.FromName(method_name, param_name);\n+}\n+\n+/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n+static UniValue Parse(std::string_view raw)\n+{\n+    UniValue parsed;\n+    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n+    return parsed;\n+}\n+\n+static UniValue ParseParam(const CRPCConvertParam* param, std::string_view raw)\n+{\n+    // Only parse parameters which have the JSON format; otherwise, treat them as strings.\n+    return (param && param->format == ParamFormat::JSON) ? Parse(raw) : UniValue(std::string(raw));\n }\n \n-static CRPCConvertTable rpcCvtTable;\n \n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n \n-    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n-        std::string_view value{strParams[idx]};\n-        params.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, idx));\n+    for (std::string_view s: strParams) {",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 271,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "9aaf55397159bb0e839c19d3d4578dfa144a059b",
      "in_reply_to_id": 2356967273,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-09-18T10:28:04Z",
      "updated_at": "2025-09-18T10:28:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2358419428",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358419428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360610696",
      "pull_request_review_id": 3241370035,
      "id": 2360610696,
      "node_id": "PRRC_kwDOABII586MtA-I",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n-/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw)\n+class RPCConvertTable\n {\n-    UniValue parsed;\n-    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-    return parsed;\n-}",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 193,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (fbeacfabe802c24b427bee2cd82da1f12ef9899d)\r\n\r\nCould consider just leaving this function above the RPCConvertTable class instead of moving it below, since it is not changing. This would make the diff a little smaller.",
      "created_at": "2025-09-18T18:16:56Z",
      "updated_at": "2025-09-18T21:11:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2360610696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360610696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 321,
      "start_side": "LEFT",
      "line": null,
      "original_line": 326,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360621351",
      "pull_request_review_id": 3241370035,
      "id": 2360621351,
      "node_id": "PRRC_kwDOABII586MtDkn",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n-/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw)\n+class RPCConvertTable\n {\n-    UniValue parsed;\n-    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-    return parsed;\n-}\n-\n-class CRPCConvertTable\n-{\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n public:\n-    CRPCConvertTable();\n+    RPCConvertTable() = default;\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos) const\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name) const\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n };\n \n-CRPCConvertTable::CRPCConvertTable()\n+static const RPCConvertTable g_rpc_convert_table;",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 231,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (fbeacfabe802c24b427bee2cd82da1f12ef9899d)\r\n\r\nCould consider dropping the RPCConvertTable class and g_rpc_convert_table global variable. The RPCConvertTable class has no state and only has two standalone methods which could be plain functions.",
      "created_at": "2025-09-18T18:20:03Z",
      "updated_at": "2025-09-18T21:11:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2360621351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360621351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361185088",
      "pull_request_review_id": 3241370035,
      "id": 2361185088,
      "node_id": "PRRC_kwDOABII586MvNNA",
      "diff_hunk": "@@ -12,25 +12,47 @@\n #include <string>\n #include <string_view>\n \n+enum ParamFormat { JSON, STRING };\n+\n class CRPCConvertParam\n {\n public:\n     std::string methodName; //!< method whose params want conversion\n     int paramIdx;           //!< 0-based idx of param to convert\n     std::string paramName;  //!< parameter name\n+    ParamFormat format{ParamFormat::JSON}; //!< parameter format\n };\n \n // clang-format off\n /**\n- * Specify a (method, idx, name) here if the argument is a non-string RPC\n- * argument and needs to be converted from JSON.\n+ * Specify a (method, idx, name, format) here if the argument is a non-string RPC\n+ * argument and needs to be converted from JSON, or if it is a string argument\n+ * passed to a method that accepts '=' characters in string arguments.\n+ *\n+ * JSON parameters need to be listed here to make bitcoin-cli treat command line\n+ * arguments as JSON values instead of strings.\n+ *\n+ * String parameters need to be listed here for methods accepting string\n+ * arguments with '=' characters, to make bitcoin-cli treat these command line\n+ * arguments as positional parameters instead of named parameters when -named is\n+ * used. For example, passing \"key=store\" as a parameter for some method would split\n+ * \"key\" as a param name and \"store\" as a param value rather than passing \"key=store\"\n+ * as a whole positional parameter when -named is used. This is useful when we want to pass the\n+ * params as positional even if we are specifying -named. This special handling is not\n+ * needed for string parameters that are guaranteed not to contain an '=' character.\n+ *\n+ * IMPORTANT: If one string parameter is listed for a method, other string\n+ * parameters for that method need to be listed as well so bitcoin-cli does not\n+ * make the opposite mistake and pass other arguments by position instead of\n+ * name because it does not recognize their names.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (fbeacfabe802c24b427bee2cd82da1f12ef9899d)\r\n\r\nJust IMO, but I feel like the example is confusing because \"key=store\" looks like a case where \"key\" actually is a named parameter and = sign should be parsed, not a case where it shouldn't be parsed. Also the next two sentences seem to just be repeating what the first two sentences say without out adding anything new. And I'm not sure the \"IMPORTANT\" section is really so important. I think the comment starts with a good one-line summary, and after that things listed go from most to least important. The important requirement is to list JSON parameters, everything else just provides nicer behavior when ambiguous -named command lines are used.\r\n\r\nI suggested some documentation edits addressing this in da919fb63c519ac91c9704c58f1bbe522d7a8879 ([tag](https://github.com/ryanofsky/bitcoin/commits/review.32821.7-edit.3)) in case it might be useful.",
      "created_at": "2025-09-18T20:57:39Z",
      "updated_at": "2025-09-18T21:11:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2361185088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361185088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 38,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361189357",
      "pull_request_review_id": 3241370035,
      "id": 2361189357,
      "node_id": "PRRC_kwDOABII586MvOPt",
      "diff_hunk": "@@ -376,18 +452,40 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n \n     for (std::string_view s: strParams) {\n         size_t pos = s.find('=');\n-        if (pos == std::string::npos) {\n-            positional_args.push_back(rpcCvtTable.ArgToUniValue(s, strMethod, positional_args.size()));\n+        if (pos == std::string_view::npos) {\n+            positional_args.push_back(ParseParam(ParamFromPosition(strMethod, positional_args.size()), s));\n             continue;\n         }\n \n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        const CRPCConvertParam* named_param{ParamFromName(strMethod, name)};\n+        if (!named_param) {\n+              /**\n+             * This handles two cases where a named parameter (param=value) is not recognized:\n+             *\n+             * 1. The RPC method was listed in the vRPCConvertParams table with a given index, but the parameter is not a known parameter\n+             *    and has a param format STRING; in such cases we pass the whole parameter as positional.\n+             *\n+             * 2. The RPC method was listed in the vRPCConvertParams table with a given index, but the parameter is not a known parameter\n+             *    and has a param format JSON; in such cases we first parse the whole parameter as JSON and then treat as positional.\n+             */",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 299,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (fbeacfabe802c24b427bee2cd82da1f12ef9899d)\r\n\r\nMaybe consider deleting this comment. It seems like it is mostly just repeating what code is doing without explaining why it is doing these things. If you do think a comment would be helpful here, probably the most useful thing might be some examples of the things being parsed. I suggested some documentation with examples in da919fb63c519ac91c9704c58f1bbe522d7a8879 ([tag](https://github.com/ryanofsky/bitcoin/commits/review.32821.7-edit.3)) in case it might be useful.",
      "created_at": "2025-09-18T21:00:11Z",
      "updated_at": "2025-09-18T21:11:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2361189357",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361189357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 465,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361200492",
      "pull_request_review_id": 3241370035,
      "id": 2361200492,
      "node_id": "PRRC_kwDOABII586MvQ9s",
      "diff_hunk": "@@ -12,25 +12,47 @@\n #include <string>\n #include <string_view>\n \n+enum ParamFormat { JSON, STRING };",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "7dd85d13e22f14940cce9ed9a5bbc2afc5c5c2f4",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (fbeacfabe802c24b427bee2cd82da1f12ef9899d)\r\n\r\nNote: with #33230 this could have JSON_OR_STRING added as well",
      "created_at": "2025-09-18T21:06:50Z",
      "updated_at": "2025-09-18T21:11:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2361200492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361200492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365757547",
      "pull_request_review_id": 3249190005,
      "id": 2365757547,
      "node_id": "PRRC_kwDOABII586NAphr",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n-/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw)\n+class RPCConvertTable\n {\n-    UniValue parsed;\n-    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-    return parsed;\n-}\n-\n-class CRPCConvertTable\n-{\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n public:\n-    CRPCConvertTable();\n+    RPCConvertTable() = default;\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos) const\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name) const\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n };\n \n-CRPCConvertTable::CRPCConvertTable()\n+static const RPCConvertTable g_rpc_convert_table;",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 231,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": 2360621351,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Although using class has no performance issues, but I think the stateless point is valid, and using namespace here is a better choice to group related functions and for readability. This will also remove indirection function calls.",
      "created_at": "2025-09-20T18:37:36Z",
      "updated_at": "2025-09-20T18:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2365757547",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365757547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365757618",
      "pull_request_review_id": 3249190060,
      "id": 2365757618,
      "node_id": "PRRC_kwDOABII586NApiy",
      "diff_hunk": "@@ -314,56 +362,84 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n-/** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw)\n+class RPCConvertTable\n {\n-    UniValue parsed;\n-    if (!parsed.read(raw)) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-    return parsed;\n-}",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 193,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": 2360610696,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, fixed.",
      "created_at": "2025-09-20T18:37:51Z",
      "updated_at": "2025-09-20T18:37:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2365757618",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365757618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 321,
      "start_side": "LEFT",
      "line": null,
      "original_line": 326,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365757992",
      "pull_request_review_id": 3249190406,
      "id": 2365757992,
      "node_id": "PRRC_kwDOABII586NApoo",
      "diff_hunk": "@@ -12,25 +12,47 @@\n #include <string>\n #include <string_view>\n \n+enum ParamFormat { JSON, STRING };\n+\n class CRPCConvertParam\n {\n public:\n     std::string methodName; //!< method whose params want conversion\n     int paramIdx;           //!< 0-based idx of param to convert\n     std::string paramName;  //!< parameter name\n+    ParamFormat format{ParamFormat::JSON}; //!< parameter format\n };\n \n // clang-format off\n /**\n- * Specify a (method, idx, name) here if the argument is a non-string RPC\n- * argument and needs to be converted from JSON.\n+ * Specify a (method, idx, name, format) here if the argument is a non-string RPC\n+ * argument and needs to be converted from JSON, or if it is a string argument\n+ * passed to a method that accepts '=' characters in string arguments.\n+ *\n+ * JSON parameters need to be listed here to make bitcoin-cli treat command line\n+ * arguments as JSON values instead of strings.\n+ *\n+ * String parameters need to be listed here for methods accepting string\n+ * arguments with '=' characters, to make bitcoin-cli treat these command line\n+ * arguments as positional parameters instead of named parameters when -named is\n+ * used. For example, passing \"key=store\" as a parameter for some method would split\n+ * \"key\" as a param name and \"store\" as a param value rather than passing \"key=store\"\n+ * as a whole positional parameter when -named is used. This is useful when we want to pass the\n+ * params as positional even if we are specifying -named. This special handling is not\n+ * needed for string parameters that are guaranteed not to contain an '=' character.\n+ *\n+ * IMPORTANT: If one string parameter is listed for a method, other string\n+ * parameters for that method need to be listed as well so bitcoin-cli does not\n+ * make the opposite mistake and pass other arguments by position instead of\n+ * name because it does not recognize their names.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": 2361185088,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for suggesting. Fixed in the latest commit.",
      "created_at": "2025-09-20T18:39:30Z",
      "updated_at": "2025-09-20T18:39:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2365757992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365757992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 38,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365758773",
      "pull_request_review_id": 3249191619,
      "id": 2365758773,
      "node_id": "PRRC_kwDOABII586NAp01",
      "diff_hunk": "@@ -376,18 +452,40 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n \n     for (std::string_view s: strParams) {\n         size_t pos = s.find('=');\n-        if (pos == std::string::npos) {\n-            positional_args.push_back(rpcCvtTable.ArgToUniValue(s, strMethod, positional_args.size()));\n+        if (pos == std::string_view::npos) {\n+            positional_args.push_back(ParseParam(ParamFromPosition(strMethod, positional_args.size()), s));\n             continue;\n         }\n \n         std::string name{s.substr(0, pos)};\n         std::string_view value{s.substr(pos+1)};\n \n+        const CRPCConvertParam* named_param{ParamFromName(strMethod, name)};\n+        if (!named_param) {\n+              /**\n+             * This handles two cases where a named parameter (param=value) is not recognized:\n+             *\n+             * 1. The RPC method was listed in the vRPCConvertParams table with a given index, but the parameter is not a known parameter\n+             *    and has a param format STRING; in such cases we pass the whole parameter as positional.\n+             *\n+             * 2. The RPC method was listed in the vRPCConvertParams table with a given index, but the parameter is not a known parameter\n+             *    and has a param format JSON; in such cases we first parse the whole parameter as JSON and then treat as positional.\n+             */",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 299,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": 2361189357,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed. Now in the latest commit, I removed this and shifted it above the function with more descriptive info and an example command.",
      "created_at": "2025-09-20T18:41:03Z",
      "updated_at": "2025-09-20T18:41:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2365758773",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365758773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 465,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2369876273",
      "pull_request_review_id": 3254620368,
      "id": 2369876273,
      "node_id": "PRRC_kwDOABII586NQXEx",
      "diff_hunk": "@@ -325,69 +389,104 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n-public:\n-    CRPCConvertTable();\n-\n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos)",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 200,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f)\r\n\r\nNote: namespace contents is typically not indented: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c\r\n\r\nI also think entire namespace could be replaced with a `ParamFind` function \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/da919fb63c519ac91c9704c58f1bbe522d7a8879/src/rpc/client.cpp#L384-L389\r\n\r\nWhich would deduplicate and remove a level of indirection from this code. But feel free to keep current version if preferred.",
      "created_at": "2025-09-22T18:52:52Z",
      "updated_at": "2025-09-22T19:16:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2369876273",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2369876273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2369939396",
      "pull_request_review_id": 3254620368,
      "id": 2369939396,
      "node_id": "PRRC_kwDOABII586NQmfE",
      "diff_hunk": "@@ -325,69 +389,104 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n-public:\n-    CRPCConvertTable();\n-\n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos)\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name)\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n-};\n+} // namespace rpc_convert\n \n-CRPCConvertTable::CRPCConvertTable()\n+static UniValue ParseParam(const CRPCConvertParam* param, std::string_view raw)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n-        members.emplace(cp.methodName, cp.paramIdx);\n-        membersByName.emplace(cp.methodName, cp.paramName);\n-    }\n+    // Only parse parameters which have the JSON format; otherwise, treat them as strings.\n+    return (param && param->format == ParamFormat::JSON) ? Parse(raw) : UniValue(std::string(raw));\n }\n \n-static CRPCConvertTable rpcCvtTable;\n \n+/**\n+ * Convert command lines arguments to params object when -named is disabled.\n+ */\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n \n-    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n-        std::string_view value{strParams[idx]};\n-        params.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, idx));\n+    for (std::string_view s : strParams) {\n+        params.push_back(ParseParam(rpc_convert::FromPosition(strMethod, static_cast<int>(params.size())), s));\n     }\n \n     return params;\n }\n \n+/**\n+ * Convert command line arguments to params object when -named is enabled.\n+ *\n+ * This accepts arguments in the \"PARAM_NAME=PARAM_VALUE\" format. Arguments without '=' are\n+ * treated as positional. Arguments with '=' are treated as named, except for two special\n+ * cases to handle values that contain '=':\n+ *\n+ *   1. If the PARAM_NAME is not a known parameter name, the code checks if the next\n+ *      expected positional parameter is listed as ParamFormat::JSON. If so, and if the entire\n+ *      \"PARAM_NAME=PARAM_VALUE\" string parses as valid JSON, it's treated as positional.\n+ *\n+ *   2. If the PARAM_NAME is not a known parameter name and the next expected positional parameter\n+ *      is listed as a ParamFormat::STRING, the entire \"PARAM_NAME=PARAM_VALUE\" string is treated\n+ *      as a single positional string value.\n+ *\n+ * For example, the command `bitcoin-cli -named createwallet \"my=wallet\"`, the\n+ * parser initially sees \"my=wallet\" and attempts to process it as a named\n+ * parameter with PARAM_NAME=\"my\". When it finds that \"my\" is not a valid",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 271,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f)\r\n\r\nWoud suggest replacing `parameter with PARAM_NAME=\"my\".` with `parameter named \"my\"` so this is shorter and more understandable without the previous context.",
      "created_at": "2025-09-22T19:09:44Z",
      "updated_at": "2025-09-22T19:16:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2369939396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2369939396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 451,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2369951983",
      "pull_request_review_id": 3254620368,
      "id": 2369951983,
      "node_id": "PRRC_kwDOABII586NQpjv",
      "diff_hunk": "@@ -325,69 +389,104 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n-public:\n-    CRPCConvertTable();\n-\n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos)\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name)\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n-};\n+} // namespace rpc_convert\n \n-CRPCConvertTable::CRPCConvertTable()\n+static UniValue ParseParam(const CRPCConvertParam* param, std::string_view raw)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n-        members.emplace(cp.methodName, cp.paramIdx);\n-        membersByName.emplace(cp.methodName, cp.paramName);\n-    }\n+    // Only parse parameters which have the JSON format; otherwise, treat them as strings.\n+    return (param && param->format == ParamFormat::JSON) ? Parse(raw) : UniValue(std::string(raw));\n }\n \n-static CRPCConvertTable rpcCvtTable;\n \n+/**\n+ * Convert command lines arguments to params object when -named is disabled.\n+ */\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n \n-    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n-        std::string_view value{strParams[idx]};\n-        params.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, idx));\n+    for (std::string_view s : strParams) {\n+        params.push_back(ParseParam(rpc_convert::FromPosition(strMethod, static_cast<int>(params.size())), s));\n     }\n \n     return params;\n }\n \n+/**\n+ * Convert command line arguments to params object when -named is enabled.\n+ *\n+ * This accepts arguments in the \"PARAM_NAME=PARAM_VALUE\" format. Arguments without '=' are\n+ * treated as positional. Arguments with '=' are treated as named, except for two special\n+ * cases to handle values that contain '=':\n+ *\n+ *   1. If the PARAM_NAME is not a known parameter name, the code checks if the next\n+ *      expected positional parameter is listed as ParamFormat::JSON. If so, and if the entire\n+ *      \"PARAM_NAME=PARAM_VALUE\" string parses as valid JSON, it's treated as positional.\n+ *\n+ *   2. If the PARAM_NAME is not a known parameter name and the next expected positional parameter\n+ *      is listed as a ParamFormat::STRING, the entire \"PARAM_NAME=PARAM_VALUE\" string is treated\n+ *      as a single positional string value.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 267,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f)\r\n\r\nNew example below is nice, and feel free to ignore this feedback, but IMO lines 437-447 are not as good as the earlier suggestion for a few reasons:\r\n\r\n- They is saying what code is doing without reasons for doing those things.\r\n- They are not acknowledging the -named syntax is ambiguous, which seems an important and non-obvious fact.\r\n- The first two sentences seem to contradict each other\r\n- PARAM_NAME and PARAM_VALUE look and sound similar and seem to distinguish than NAME and VALUE\r\n- Examples are dropped from the two special cases and there is no indication of why they are present.\r\n\r\nFor reference, earlier suggestion was:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/da919fb63c519ac91c9704c58f1bbe522d7a8879/src/rpc/client.cpp#L432-L447",
      "created_at": "2025-09-22T19:12:28Z",
      "updated_at": "2025-09-22T19:16:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2369951983",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2369951983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 437,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375876150",
      "pull_request_review_id": 3263032943,
      "id": 2375876150,
      "node_id": "PRRC_kwDOABII586NnP42",
      "diff_hunk": "@@ -325,69 +389,104 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n-public:\n-    CRPCConvertTable();\n-\n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos)\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name)\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n-};\n+} // namespace rpc_convert\n \n-CRPCConvertTable::CRPCConvertTable()\n+static UniValue ParseParam(const CRPCConvertParam* param, std::string_view raw)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n-        members.emplace(cp.methodName, cp.paramIdx);\n-        membersByName.emplace(cp.methodName, cp.paramName);\n-    }\n+    // Only parse parameters which have the JSON format; otherwise, treat them as strings.\n+    return (param && param->format == ParamFormat::JSON) ? Parse(raw) : UniValue(std::string(raw));\n }\n \n-static CRPCConvertTable rpcCvtTable;\n \n+/**\n+ * Convert command lines arguments to params object when -named is disabled.\n+ */\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n \n-    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n-        std::string_view value{strParams[idx]};\n-        params.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, idx));\n+    for (std::string_view s : strParams) {\n+        params.push_back(ParseParam(rpc_convert::FromPosition(strMethod, static_cast<int>(params.size())), s));\n     }\n \n     return params;\n }\n \n+/**\n+ * Convert command line arguments to params object when -named is enabled.\n+ *\n+ * This accepts arguments in the \"PARAM_NAME=PARAM_VALUE\" format. Arguments without '=' are\n+ * treated as positional. Arguments with '=' are treated as named, except for two special\n+ * cases to handle values that contain '=':\n+ *\n+ *   1. If the PARAM_NAME is not a known parameter name, the code checks if the next\n+ *      expected positional parameter is listed as ParamFormat::JSON. If so, and if the entire\n+ *      \"PARAM_NAME=PARAM_VALUE\" string parses as valid JSON, it's treated as positional.\n+ *\n+ *   2. If the PARAM_NAME is not a known parameter name and the next expected positional parameter\n+ *      is listed as a ParamFormat::STRING, the entire \"PARAM_NAME=PARAM_VALUE\" string is treated\n+ *      as a single positional string value.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 267,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f",
      "in_reply_to_id": 2369951983,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, I implemented the suggested changes.",
      "created_at": "2025-09-24T13:49:41Z",
      "updated_at": "2025-09-24T13:49:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2375876150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375876150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 437,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375886327",
      "pull_request_review_id": 3263046924,
      "id": 2375886327,
      "node_id": "PRRC_kwDOABII586NnSX3",
      "diff_hunk": "@@ -325,69 +389,104 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n-public:\n-    CRPCConvertTable();\n-\n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos)\n     {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramIdx == pos;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n+    const CRPCConvertParam* FromName(std::string_view method, std::string_view name)\n     {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n+        auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+            return p.methodName == method && p.paramName == name;\n+        });\n+\n+        return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n     }\n-};\n+} // namespace rpc_convert\n \n-CRPCConvertTable::CRPCConvertTable()\n+static UniValue ParseParam(const CRPCConvertParam* param, std::string_view raw)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n-        members.emplace(cp.methodName, cp.paramIdx);\n-        membersByName.emplace(cp.methodName, cp.paramName);\n-    }\n+    // Only parse parameters which have the JSON format; otherwise, treat them as strings.\n+    return (param && param->format == ParamFormat::JSON) ? Parse(raw) : UniValue(std::string(raw));\n }\n \n-static CRPCConvertTable rpcCvtTable;\n \n+/**\n+ * Convert command lines arguments to params object when -named is disabled.\n+ */\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n \n-    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n-        std::string_view value{strParams[idx]};\n-        params.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, idx));\n+    for (std::string_view s : strParams) {\n+        params.push_back(ParseParam(rpc_convert::FromPosition(strMethod, static_cast<int>(params.size())), s));\n     }\n \n     return params;\n }\n \n+/**\n+ * Convert command line arguments to params object when -named is enabled.\n+ *\n+ * This accepts arguments in the \"PARAM_NAME=PARAM_VALUE\" format. Arguments without '=' are\n+ * treated as positional. Arguments with '=' are treated as named, except for two special\n+ * cases to handle values that contain '=':\n+ *\n+ *   1. If the PARAM_NAME is not a known parameter name, the code checks if the next\n+ *      expected positional parameter is listed as ParamFormat::JSON. If so, and if the entire\n+ *      \"PARAM_NAME=PARAM_VALUE\" string parses as valid JSON, it's treated as positional.\n+ *\n+ *   2. If the PARAM_NAME is not a known parameter name and the next expected positional parameter\n+ *      is listed as a ParamFormat::STRING, the entire \"PARAM_NAME=PARAM_VALUE\" string is treated\n+ *      as a single positional string value.\n+ *\n+ * For example, the command `bitcoin-cli -named createwallet \"my=wallet\"`, the\n+ * parser initially sees \"my=wallet\" and attempts to process it as a named\n+ * parameter with PARAM_NAME=\"my\". When it finds that \"my\" is not a valid",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 271,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f",
      "in_reply_to_id": 2369939396,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems reasonable.",
      "created_at": "2025-09-24T13:53:06Z",
      "updated_at": "2025-09-24T13:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2375886327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375886327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 451,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375898072",
      "pull_request_review_id": 3263063098,
      "id": 2375898072,
      "node_id": "PRRC_kwDOABII586NnVPY",
      "diff_hunk": "@@ -325,69 +389,104 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n-\n-public:\n-    CRPCConvertTable();\n-\n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n+    const CRPCConvertParam* FromPosition(std::string_view method, int pos)",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 200,
      "commit_id": "ad6d740623f01bbe90cbf328590ccfae602c2a3f",
      "original_commit_id": "8eafb1e9ee4fff3a9ab4a7dc899bd2d57c29d04f",
      "in_reply_to_id": 2369876273,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think using namespace is better here, as it provides clear intent of both the functions and how they are related. Also I find more readability using this approach.",
      "created_at": "2025-09-24T13:57:08Z",
      "updated_at": "2025-09-24T13:57:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2375898072",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375898072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376071372",
      "pull_request_review_id": 3263312993,
      "id": 2376071372,
      "node_id": "PRRC_kwDOABII586Nn_jM",
      "diff_hunk": "@@ -325,69 +389,109 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, int pos)",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 194,
      "commit_id": "6730abb137eed82073814bdb8dbd577e79520b59",
      "original_commit_id": "03068e67cd9a62aa9105ca6a4c971b6261a783c5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (03068e67cd9a62aa9105ca6a4c971b6261a783c5)\r\n\r\nEvery place this function is called, it called with a `size_t` value cast to an `int`. It would seem nice to make it take an a `size_t` value directly, since it is a new function. (Could also change the `CRPCConvertParam` struct to use `size_t` instead of `int` but would suggest not doing that to keep the changes minimal.)",
      "created_at": "2025-09-24T14:50:50Z",
      "updated_at": "2025-09-24T15:11:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2376071372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376071372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376104099",
      "pull_request_review_id": 3263312993,
      "id": 2376104099,
      "node_id": "PRRC_kwDOABII586NoHij",
      "diff_hunk": "@@ -12,25 +12,45 @@\n #include <string>\n #include <string_view>\n \n+//! Specify whether parameter should be parsed by bitcoin-cli as a JSON value,\n+//! or passed unchanged as a string.\n+enum ParamFormat { JSON, STRING };\n+\n class CRPCConvertParam\n {\n public:\n     std::string methodName; //!< method whose params want conversion\n     int paramIdx;           //!< 0-based idx of param to convert\n     std::string paramName;  //!< parameter name\n+    ParamFormat format{ParamFormat::JSON}; //!< parameter format\n };\n \n // clang-format off\n /**\n- * Specify a (method, idx, name) here if the argument is a non-string RPC\n- * argument and needs to be converted from JSON.\n+ * Specify a (method, idx, name, format) here if the argument is a non-string RPC\n+ * argument and needs to be converted from JSON, or if it is a string argument\n+ * passed to a method that accepts '=' characters in any string arguments.\n+ *\n+ * JSON parameters need to be listed here to make bitcoin-cli treat command line\n+ * arguments as JSON values instead of strings.\n+ *\n+ * String parameters that may contain an '=' character (e.g. base64 strings,\n+ * filenames, or labels) need to be listed here with format `ParamFormat::STRING`\n+ * to make bitcoin-cli treat them as positional parameters when `-named` is used.\n+ * This prevents `bitcoin-cli` from splitting strings like \"my=wallet\" into a named\n+ * argument \"my\" and value \"wallet\" when the whole string is intended to be a\n+ * single positional argument. And if one string parameter is listed for a method,\n+ * other string parameters for that method need to be listed as well so bitcoin-cli\n+ * does not make the opposite mistake and pass other arguments by position instead of\n+ * name because it does not recognize their names.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "6730abb137eed82073814bdb8dbd577e79520b59",
      "original_commit_id": "03068e67cd9a62aa9105ca6a4c971b6261a783c5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (03068e67cd9a62aa9105ca6a4c971b6261a783c5)\r\n\r\nMaybe add a sentence like \"See \\ref RPCConvertNamedValues for more information on how named and positional arguments are distinguished with -named.\" since this comment is only describing what entries need to be added to the table, not exactly how the entries are used.",
      "created_at": "2025-09-24T15:01:58Z",
      "updated_at": "2025-09-24T15:11:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2376104099",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376104099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376117984",
      "pull_request_review_id": 3263378909,
      "id": 2376117984,
      "node_id": "PRRC_kwDOABII586NoK7g",
      "diff_hunk": "@@ -12,25 +12,47 @@\n #include <string>\n #include <string_view>\n \n+enum ParamFormat { JSON, STRING };",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "7dd85d13e22f14940cce9ed9a5bbc2afc5c5c2f4",
      "original_commit_id": "fbeacfabe802c24b427bee2cd82da1f12ef9899d",
      "in_reply_to_id": 2361200492,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It makes sense to add JSON_OR_STRING and related parsing logic after this is merged.",
      "created_at": "2025-09-24T15:05:55Z",
      "updated_at": "2025-09-24T15:05:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2376117984",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376117984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376123734",
      "pull_request_review_id": 3263312993,
      "id": 2376123734,
      "node_id": "PRRC_kwDOABII586NoMVW",
      "diff_hunk": "@@ -325,69 +389,109 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, int pos)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramIdx == pos;\n+    });\n \n-public:\n-    CRPCConvertTable();\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n+}\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n-    {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n-    }\n+const CRPCConvertParam* FromName(std::string_view method, std::string_view name)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramName == name;\n+    });\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n-    {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n-    }\n-};\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n+}\n+} // namespace rpc_convert\n \n-CRPCConvertTable::CRPCConvertTable()\n+static UniValue ParseParam(const CRPCConvertParam* param, std::string_view raw)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n-        members.emplace(cp.methodName, cp.paramIdx);\n-        membersByName.emplace(cp.methodName, cp.paramName);\n-    }\n+    // Only parse parameters which have the JSON format; otherwise, treat them as strings.\n+    return (param && param->format == ParamFormat::JSON) ? Parse(raw) : UniValue(std::string(raw));\n }\n \n-static CRPCConvertTable rpcCvtTable;\n \n+/**\n+ * Convert command lines arguments to params object when -named is disabled.\n+ */\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n \n-    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n-        std::string_view value{strParams[idx]};\n-        params.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, idx));\n+    for (std::string_view s : strParams) {\n+        params.push_back(ParseParam(rpc_convert::FromPosition(strMethod, static_cast<int>(params.size())), s));\n     }\n \n     return params;\n }\n \n+/**\n+ * Convert command line arguments to params object when -named is enabled.\n+ *\n+ * The -named syntax accepts named arguments in NAME=VALUE format, as well as\n+ * positional arguments without names. The syntax is inherently ambiguous if\n+ * names are omitted and values contain '=', so a heuristic is used to\n+ * disambiguate:\n+ *\n+ * - Arguments that do not contain '=' are treated as positional parameters.\n+ *\n+ * - Arguments that do contain '=' are assumed to be named parameters in\n+ *   NAME=VALUE format except for two special cases:\n+ *\n+ *   1. The case where NAME is not a known parameter name, and the next\n+ *      positional parameter requires a JSON value, and the argument parses as\n+ *      JSON. E.g. [\"list\", \"with\", \"=\"].\n+ *\n+ *   2. The case where NAME is not a known parameter name and the next\n+ *      positional parameter requires a string value. E.g. \"==label==\".",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 274,
      "commit_id": "6730abb137eed82073814bdb8dbd577e79520b59",
      "original_commit_id": "03068e67cd9a62aa9105ca6a4c971b6261a783c5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (03068e67cd9a62aa9105ca6a4c971b6261a783c5)\r\n\r\nCould change \"==label==\" to \"my=wallet\" to be consistent with example below. The \"my=wallet\" example is probably clearer anyway since there is only one `=` and it's in the middle of the string, and wallet names are probably more familiar than labels.",
      "created_at": "2025-09-24T15:07:52Z",
      "updated_at": "2025-09-24T15:11:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2376123734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376123734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 452,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2378570634",
      "pull_request_review_id": 3266934278,
      "id": 2378570634,
      "node_id": "PRRC_kwDOABII586NxhuK",
      "diff_hunk": "@@ -12,25 +12,45 @@\n #include <string>\n #include <string_view>\n \n+//! Specify whether parameter should be parsed by bitcoin-cli as a JSON value,\n+//! or passed unchanged as a string.\n+enum ParamFormat { JSON, STRING };\n+\n class CRPCConvertParam\n {\n public:\n     std::string methodName; //!< method whose params want conversion\n     int paramIdx;           //!< 0-based idx of param to convert\n     std::string paramName;  //!< parameter name\n+    ParamFormat format{ParamFormat::JSON}; //!< parameter format\n };\n \n // clang-format off\n /**\n- * Specify a (method, idx, name) here if the argument is a non-string RPC\n- * argument and needs to be converted from JSON.\n+ * Specify a (method, idx, name, format) here if the argument is a non-string RPC\n+ * argument and needs to be converted from JSON, or if it is a string argument\n+ * passed to a method that accepts '=' characters in any string arguments.\n+ *\n+ * JSON parameters need to be listed here to make bitcoin-cli treat command line\n+ * arguments as JSON values instead of strings.\n+ *\n+ * String parameters that may contain an '=' character (e.g. base64 strings,\n+ * filenames, or labels) need to be listed here with format `ParamFormat::STRING`\n+ * to make bitcoin-cli treat them as positional parameters when `-named` is used.\n+ * This prevents `bitcoin-cli` from splitting strings like \"my=wallet\" into a named\n+ * argument \"my\" and value \"wallet\" when the whole string is intended to be a\n+ * single positional argument. And if one string parameter is listed for a method,\n+ * other string parameters for that method need to be listed as well so bitcoin-cli\n+ * does not make the opposite mistake and pass other arguments by position instead of\n+ * name because it does not recognize their names.",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "6730abb137eed82073814bdb8dbd577e79520b59",
      "original_commit_id": "03068e67cd9a62aa9105ca6a4c971b6261a783c5",
      "in_reply_to_id": 2376104099,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added in the latest commit.",
      "created_at": "2025-09-25T10:21:07Z",
      "updated_at": "2025-09-25T10:21:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2378570634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2378570634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2378570767",
      "pull_request_review_id": 3266934466,
      "id": 2378570767,
      "node_id": "PRRC_kwDOABII586NxhwP",
      "diff_hunk": "@@ -325,69 +389,109 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, int pos)",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 194,
      "commit_id": "6730abb137eed82073814bdb8dbd577e79520b59",
      "original_commit_id": "03068e67cd9a62aa9105ca6a4c971b6261a783c5",
      "in_reply_to_id": 2376071372,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems good. Fixed.",
      "created_at": "2025-09-25T10:21:11Z",
      "updated_at": "2025-09-25T10:21:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2378570767",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2378570767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2378570933",
      "pull_request_review_id": 3266934912,
      "id": 2378570933,
      "node_id": "PRRC_kwDOABII586Nxhy1",
      "diff_hunk": "@@ -325,69 +389,109 @@ static UniValue Parse(std::string_view raw)\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::set<std::pair<std::string, int>> members;\n-    std::set<std::pair<std::string, std::string>> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, int pos)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramIdx == pos;\n+    });\n \n-public:\n-    CRPCConvertTable();\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n+}\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n-    {\n-        return members.count({method, param_idx}) > 0 ? Parse(arg_value) : arg_value;\n-    }\n+const CRPCConvertParam* FromName(std::string_view method, std::string_view name)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramName == name;\n+    });\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n-    {\n-        return membersByName.count({method, param_name}) > 0 ? Parse(arg_value) : arg_value;\n-    }\n-};\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n+}\n+} // namespace rpc_convert\n \n-CRPCConvertTable::CRPCConvertTable()\n+static UniValue ParseParam(const CRPCConvertParam* param, std::string_view raw)\n {\n-    for (const auto& cp : vRPCConvertParams) {\n-        members.emplace(cp.methodName, cp.paramIdx);\n-        membersByName.emplace(cp.methodName, cp.paramName);\n-    }\n+    // Only parse parameters which have the JSON format; otherwise, treat them as strings.\n+    return (param && param->format == ParamFormat::JSON) ? Parse(raw) : UniValue(std::string(raw));\n }\n \n-static CRPCConvertTable rpcCvtTable;\n \n+/**\n+ * Convert command lines arguments to params object when -named is disabled.\n+ */\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n \n-    for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n-        std::string_view value{strParams[idx]};\n-        params.push_back(rpcCvtTable.ArgToUniValue(value, strMethod, idx));\n+    for (std::string_view s : strParams) {\n+        params.push_back(ParseParam(rpc_convert::FromPosition(strMethod, static_cast<int>(params.size())), s));\n     }\n \n     return params;\n }\n \n+/**\n+ * Convert command line arguments to params object when -named is enabled.\n+ *\n+ * The -named syntax accepts named arguments in NAME=VALUE format, as well as\n+ * positional arguments without names. The syntax is inherently ambiguous if\n+ * names are omitted and values contain '=', so a heuristic is used to\n+ * disambiguate:\n+ *\n+ * - Arguments that do not contain '=' are treated as positional parameters.\n+ *\n+ * - Arguments that do contain '=' are assumed to be named parameters in\n+ *   NAME=VALUE format except for two special cases:\n+ *\n+ *   1. The case where NAME is not a known parameter name, and the next\n+ *      positional parameter requires a JSON value, and the argument parses as\n+ *      JSON. E.g. [\"list\", \"with\", \"=\"].\n+ *\n+ *   2. The case where NAME is not a known parameter name and the next\n+ *      positional parameter requires a string value. E.g. \"==label==\".",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 274,
      "commit_id": "6730abb137eed82073814bdb8dbd577e79520b59",
      "original_commit_id": "03068e67cd9a62aa9105ca6a4c971b6261a783c5",
      "in_reply_to_id": 2376123734,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-25T10:21:15Z",
      "updated_at": "2025-09-25T10:21:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2378570933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2378570933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 452,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388373555",
      "pull_request_review_id": 3280437895,
      "id": 2388373555,
      "node_id": "PRRC_kwDOABII586OW7Az",
      "diff_hunk": "@@ -12,26 +12,54 @@\n #include <string>\n #include <string_view>\n \n+//! Specify whether parameter should be parsed by bitcoin-cli as a JSON value,\n+//! or passed unchanged as a string, or a combination of both.\n+enum ParamFormat { JSON, STRING, JSON_OR_STRING };\n+\n class CRPCConvertParam\n {\n public:\n     std::string methodName; //!< method whose params want conversion\n     int paramIdx;           //!< 0-based idx of param to convert\n     std::string paramName;  //!< parameter name\n-    bool also_string{false}; //!< The parameter is also a string\n+    ParamFormat format{ParamFormat::JSON}; //!< parameter format\n };\n \n // clang-format off\n /**\n- * Specify a (method, idx, name) here if the argument is a non-string RPC\n- * argument and needs to be converted from JSON.\n+ * Specify a (method, idx, name, format) here if the argument is a non-string RPC\n+ * argument and needs to be converted from JSON, or if it is a string argument\n+ * passed to a method that accepts '=' characters in any string arguments.\n+ *\n+ * JSON parameters need to be listed here to make bitcoin-cli treat command line\n+ * arguments as JSON values instead of strings.\n+ *\n+ * String parameters that may contain an '=' character (e.g. base64 strings,\n+ * filenames, or labels) need to be listed here with format `ParamFormat::STRING`\n+ * to make bitcoin-cli treat them as positional parameters when `-named` is used.\n+ * This prevents `bitcoin-cli` from splitting strings like \"my=wallet\" into a named\n+ * argument \"my\" and value \"wallet\" when the whole string is intended to be a\n+ * single positional argument. And if one string parameter is listed for a method,\n+ * other string parameters for that method need to be listed as well so bitcoin-cli\n+ * does not make the opposite mistake and pass other arguments by position instead of\n+ * name because it does not recognize their names. See \\ref RPCConvertNamedValues\n+ * for more information on how named and positional arguments are distinguished with\n+ * -named.\n+ *\n+ * Parameters that can be either a JSON value or a string should be listed\n+ * with format `ParamFormat::JSON_OR_STRING`. This makes bitcoin-cli first attempt\n+ * to parse the argument as JSON. If parsing fails, it falls back to treating the\n+ * argument as a raw string. This is useful for arguments like hash_or_height,\n+ * allowing invocations such as `bitcoin-cli getblockstats <hash>` without\n+ * needing to quote the hash string as JSON (`'\"<hash>\"'`).",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "original_commit_id": "04e78595410c557c970eb3994a40586231d5b38e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"rpc: Handle -named argument parsing where '=' character is used\" (04e78595410c557c970eb3994a40586231d5b38e)\r\n\r\nThis new paragraph is nice, but I think it would make sense to move it earlier in the description so JSON parameters (which are more important to list) are covered first, and STRING parameters (which are less important to list) are covered second). This should also be clearer than talking about JSON parameters, then string parameters, then JSON parameters again. Would suggest something like:\r\n\r\n<details><summary>diff</summary>\r\n<p>\r\n\r\n```diff\r\n--- a/src/rpc/client.cpp\r\n+++ b/src/rpc/client.cpp\r\n@@ -31,8 +31,14 @@ public:\r\n  * argument and needs to be converted from JSON, or if it is a string argument\r\n  * passed to a method that accepts '=' characters in any string arguments.\r\n  *\r\n- * JSON parameters need to be listed here to make bitcoin-cli treat command line\r\n- * arguments as JSON values instead of strings.\r\n+ * JSON parameters need to be listed here to make bitcoin-cli parse command line\r\n+ * arguments as JSON, instead of passing them as raw strings. `JSON` and\r\n+ * `JSON_OR_STRING` formats both make `bitcoin-cli` attempt to parse the\r\n+ * argument as JSON. But if parsing fails, the former triggers an error while\r\n+ * the latter falls back to passing the argument as a raw string. This is\r\n+ * useful for arguments like hash_or_height, allowing invocations such as\r\n+ * `bitcoin-cli getblockstats <hash>` without needing to quote the hash string\r\n+ * as JSON (`'\"<hash>\"'`).\r\n  *\r\n  * String parameters that may contain an '=' character (e.g. base64 strings,\r\n  * filenames, or labels) need to be listed here with format `ParamFormat::STRING`\r\n@@ -46,13 +52,6 @@ public:\r\n  * for more information on how named and positional arguments are distinguished with\r\n  * -named.\r\n  *\r\n- * Parameters that can be either a JSON value or a string should be listed\r\n- * with format `ParamFormat::JSON_OR_STRING`. This makes bitcoin-cli first attempt\r\n- * to parse the argument as JSON. If parsing fails, it falls back to treating the\r\n- * argument as a raw string. This is useful for arguments like hash_or_height,\r\n- * allowing invocations such as `bitcoin-cli getblockstats <hash>` without\r\n- * needing to quote the hash string as JSON (`'\"<hash>\"'`).\r\n- *\r\n  * @note Parameter indexes start from 0.\r\n  */\r\n static const CRPCConvertParam vRPCConvertParams[] =\r\n```\r\n</p>\r\n</details>",
      "created_at": "2025-09-29T15:21:17Z",
      "updated_at": "2025-09-29T15:27:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2388373555",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388373555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388389106",
      "pull_request_review_id": 3280437895,
      "id": 2388389106,
      "node_id": "PRRC_kwDOABII586OW-zy",
      "diff_hunk": "@@ -17,30 +17,49 @@ def parse_string(s):\n     assert s[-1] == '\"'\n     return s[1:-1]\n \n-\n def process_mapping(fname):\n     \"\"\"Find and parse conversion table in implementation file `fname`.\"\"\"\n     cmds = []\n+    string_params = []\n     in_rpcs = False\n     with open(fname, \"r\", encoding=\"utf8\") as f:\n         for line in f:\n             line = line.rstrip()\n             if not in_rpcs:\n-                if line == 'static const CRPCConvertParam vRPCConvertParams[] =':\n+                if re.match(r'static const CRPCConvertParam vRPCConvertParams\\[] =', line):\n                     in_rpcs = True\n             else:\n                 if line.startswith('};'):\n                     in_rpcs = False\n                 elif '{' in line and '\"' in line:\n-                    m = re.search(r'{ *(\"[^\"]*\"), *([0-9]+) *, *(\"[^\"]*\") *(, \\/\\*also_string=\\*\\/true *)?},', line)\n-                    assert m, 'No match to table expression: %s' % line\n-                    name = parse_string(m.group(1))\n-                    idx = int(m.group(2))\n-                    argname = parse_string(m.group(3))\n-                    cmds.append((name, idx, argname))\n-    assert not in_rpcs and cmds\n-    return cmds\n-\n+                    # Match lines with ParamFormat::STRING\n+                    m_string = re.search(r'{ *(\"[^\"]*\") *, *([0-9]+) *, *(\"[^\"]*\") *, *ParamFormat::STRING *},?', line)\n+                    if m_string:\n+                        name = parse_string(m_string.group(1))\n+                        idx = int(m_string.group(2))\n+                        argname = parse_string(m_string.group(3))\n+                        string_params.append((name, idx, argname))\n+                        continue\n+\n+                    # Match lines with ParamFormat::JSON_OR_STRING\n+                    m_json_or_string = re.search(r'{ *(\"[^\"]*\") *, *([0-9]+) *, *(\"[^\"]*\") *, *ParamFormat::JSON_OR_STRING *},?', line)\n+                    if m_json_or_string:\n+                        name = parse_string(m_json_or_string.group(1))\n+                        idx = int(m_json_or_string.group(2))\n+                        argname = parse_string(m_json_or_string.group(3))\n+                        cmds.append((name, idx, argname))\n+                        continue\n+\n+                    # Match lines with ParamFormat::JSON\n+                    m_json = re.search(r'{ *(\"[^\"]*\") *, *([0-9]+) *, *(\"[^\"]*\") *(?:, *ParamFormat::JSON *)? *}', line)\n+                    if m_json:\n+                        name = parse_string(m_json.group(1))\n+                        idx = int(m_json.group(2))\n+                        argname = parse_string(m_json.group(3))\n+                        cmds.append((name, idx, argname))",
      "path": "test/functional/rpc_help.py",
      "position": 1,
      "original_position": 54,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "original_commit_id": "04e78595410c557c970eb3994a40586231d5b38e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Add functional tests for named argument parsing\" (24391ed7804a724a62034b21150c89e45ac9b625)\r\n\r\nIt seems like this is getting pretty repetitive. Maybe just match once with a `(STRING|JSON_OR_STRING|JSON)` pattern?",
      "created_at": "2025-09-29T15:26:00Z",
      "updated_at": "2025-09-29T15:27:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2388389106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388389106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": 35,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2391362922",
      "pull_request_review_id": 3284645023,
      "id": 2391362922,
      "node_id": "PRRC_kwDOABII586OiU1q",
      "diff_hunk": "@@ -50,6 +50,28 @@ def invalid_label_name_test(self):\n         for rpc_call in rpc_calls:\n             assert_raises_rpc_error(-11, \"Invalid label name\", *rpc_call, label=\"*\")\n \n+    def test_label_named_parameter_handling(self):\n+        \"\"\"Test that getnewaddress with labels containing '=' characters is handled correctly in -named mode\"\"\"\n+        self.log.info(\"Test getnewaddress label parameter handling\")\n+        node = self.nodes[0]\n+\n+        # Test getnewaddress with explicit named parameter containing '='\n+        label_with_equals = \"wallet=wallet\"\n+        result = node.cli(\"-named\", \"getnewaddress\", f\"label={label_with_equals}\").send_cli()\n+        address = result.strip()\n+        addr_info = node.getaddressinfo(address)\n+        assert_equal(addr_info.get('labels', []), [label_with_equals])\n+\n+        # Test that unknown parameter with '=' gets treated as positional only if the next\n+        # positional parameter is known and accepts a string or valid JSON.",
      "path": "test/functional/wallet_labels.py",
      "position": 1,
      "original_position": 17,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "original_commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Add functional tests for named argument parsing\" (24391ed7804a724a62034b21150c89e45ac9b625)\r\n\r\nNot important, but I feel like \"only if\" in this comment is a little misleading, since the test is not confirming parameter is treated as positional only in these cases. Also it is not checking the \"valid JSON\" case at all. Could also be nice to replace comments in this function with log.info or log.debug calls. And it might be nice to make this example mirror the `my=wallet` example mentioned in client.cpp. Maybe consider updating this to something like:\r\n\r\n```python\r\nself.log.info(\"Test bitcoin-cli -named passes parameter containing '=' by position if it does not specify a known parameter name and is in a string position\")\r\nequals_label = \"my=label\"\r\nresult = node.cli(\"-named\", \"getnetaddress\", equals_label).send_cli()\r\n```",
      "created_at": "2025-09-30T13:02:14Z",
      "updated_at": "2025-09-30T13:04:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2391362922",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2391362922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392810900",
      "pull_request_review_id": 3286685012,
      "id": 2392810900,
      "node_id": "PRRC_kwDOABII586On2WU",
      "diff_hunk": "@@ -315,91 +369,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n /** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw, bool also_string)\n+static UniValue Parse(std::string_view raw, ParamFormat format = ParamFormat::JSON)\n {\n     UniValue parsed;\n     if (!parsed.read(raw)) {\n-        if (!also_string) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-        return raw;\n+        if (format != ParamFormat::JSON_OR_STRING) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n+        return UniValue(std::string(raw));\n     }\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::map<std::pair<std::string, int>, bool> members;\n-    std::map<std::pair<std::string, std::string>, bool> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, size_t pos)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramIdx == static_cast<int>(pos);",
      "path": "src/rpc/client.cpp",
      "position": 230,
      "original_position": 231,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "in_reply_to_id": null,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This feels a little wierd . can maybe change it to something like `p.methodName == rpcMethodName` or  `p.rpcMethod == method`  ",
      "created_at": "2025-09-30T20:53:40Z",
      "updated_at": "2025-09-30T21:00:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2392810900",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392810900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 408,
      "original_line": 408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392811188",
      "pull_request_review_id": 3286685012,
      "id": 2392811188,
      "node_id": "PRRC_kwDOABII586On2a0",
      "diff_hunk": "@@ -315,91 +369,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n /** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw, bool also_string)\n+static UniValue Parse(std::string_view raw, ParamFormat format = ParamFormat::JSON)\n {\n     UniValue parsed;\n     if (!parsed.read(raw)) {\n-        if (!also_string) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-        return raw;\n+        if (format != ParamFormat::JSON_OR_STRING) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n+        return UniValue(std::string(raw));\n     }\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::map<std::pair<std::string, int>, bool> members;\n-    std::map<std::pair<std::string, std::string>, bool> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, size_t pos)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramIdx == static_cast<int>(pos);\n+    });\n \n-public:\n-    CRPCConvertTable();\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n+}\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n-    {\n-        const auto& it = members.find({method, param_idx});\n-        if (it != members.end()) {\n-            return Parse(arg_value, it->second);\n-        }\n-        return arg_value;\n-    }\n+const CRPCConvertParam* FromName(std::string_view method, std::string_view name)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramName == name;",
      "path": "src/rpc/client.cpp",
      "position": 250,
      "original_position": 251,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "in_reply_to_id": null,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same here",
      "created_at": "2025-09-30T20:53:49Z",
      "updated_at": "2025-09-30T21:00:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2392811188",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392811188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 417,
      "original_line": 417,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392814895",
      "pull_request_review_id": 3286685012,
      "id": 2392814895,
      "node_id": "PRRC_kwDOABII586On3Uv",
      "diff_hunk": "@@ -315,91 +369,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n /** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw, bool also_string)\n+static UniValue Parse(std::string_view raw, ParamFormat format = ParamFormat::JSON)\n {\n     UniValue parsed;\n     if (!parsed.read(raw)) {\n-        if (!also_string) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-        return raw;\n+        if (format != ParamFormat::JSON_OR_STRING) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n+        return UniValue(std::string(raw));\n     }\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::map<std::pair<std::string, int>, bool> members;\n-    std::map<std::pair<std::string, std::string>, bool> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, size_t pos)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramIdx == static_cast<int>(pos);\n+    });\n \n-public:\n-    CRPCConvertTable();\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;",
      "path": "src/rpc/client.cpp",
      "position": 235,
      "original_position": 236,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "in_reply_to_id": null,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "maybe change here to `&(*it)` ? just looks a bit cleaner.",
      "created_at": "2025-09-30T20:55:36Z",
      "updated_at": "2025-09-30T21:00:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2392814895",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392814895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392816061",
      "pull_request_review_id": 3286685012,
      "id": 2392816061,
      "node_id": "PRRC_kwDOABII586On3m9",
      "diff_hunk": "@@ -315,91 +369,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n /** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw, bool also_string)\n+static UniValue Parse(std::string_view raw, ParamFormat format = ParamFormat::JSON)\n {\n     UniValue parsed;\n     if (!parsed.read(raw)) {\n-        if (!also_string) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-        return raw;\n+        if (format != ParamFormat::JSON_OR_STRING) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n+        return UniValue(std::string(raw));\n     }\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::map<std::pair<std::string, int>, bool> members;\n-    std::map<std::pair<std::string, std::string>, bool> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, size_t pos)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramIdx == static_cast<int>(pos);\n+    });\n \n-public:\n-    CRPCConvertTable();\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;\n+}\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, int param_idx)\n-    {\n-        const auto& it = members.find({method, param_idx});\n-        if (it != members.end()) {\n-            return Parse(arg_value, it->second);\n-        }\n-        return arg_value;\n-    }\n+const CRPCConvertParam* FromName(std::string_view method, std::string_view name)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramName == name;\n+    });\n \n-    /** Return arg_value as UniValue, and first parse it if it is a non-string parameter */\n-    UniValue ArgToUniValue(std::string_view arg_value, const std::string& method, const std::string& param_name)\n-    {\n-        const auto& it = membersByName.find({method, param_name});\n-        if (it != membersByName.end()) {\n-            return Parse(arg_value, it->second);\n-        }\n-        return arg_value;\n-    }\n-};\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;",
      "path": "src/rpc/client.cpp",
      "position": 263,
      "original_position": 264,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "in_reply_to_id": null,
      "user": {
        "login": "Prabhat1308",
        "id": 94048855,
        "node_id": "U_kgDOBZsSVw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94048855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Prabhat1308",
        "html_url": "https://github.com/Prabhat1308",
        "followers_url": "https://api.github.com/users/Prabhat1308/followers",
        "following_url": "https://api.github.com/users/Prabhat1308/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Prabhat1308/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Prabhat1308/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Prabhat1308/subscriptions",
        "organizations_url": "https://api.github.com/users/Prabhat1308/orgs",
        "repos_url": "https://api.github.com/users/Prabhat1308/repos",
        "events_url": "https://api.github.com/users/Prabhat1308/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Prabhat1308/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "similar change to `&(*it)` here",
      "created_at": "2025-09-30T20:56:04Z",
      "updated_at": "2025-09-30T21:00:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2392816061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392816061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 420,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395072031",
      "pull_request_review_id": 3289884319,
      "id": 2395072031,
      "node_id": "PRRC_kwDOABII586OweYf",
      "diff_hunk": "@@ -17,30 +17,49 @@ def parse_string(s):\n     assert s[-1] == '\"'\n     return s[1:-1]\n \n-\n def process_mapping(fname):\n     \"\"\"Find and parse conversion table in implementation file `fname`.\"\"\"\n     cmds = []\n+    string_params = []\n     in_rpcs = False\n     with open(fname, \"r\", encoding=\"utf8\") as f:\n         for line in f:\n             line = line.rstrip()\n             if not in_rpcs:\n-                if line == 'static const CRPCConvertParam vRPCConvertParams[] =':\n+                if re.match(r'static const CRPCConvertParam vRPCConvertParams\\[] =', line):\n                     in_rpcs = True\n             else:\n                 if line.startswith('};'):\n                     in_rpcs = False\n                 elif '{' in line and '\"' in line:\n-                    m = re.search(r'{ *(\"[^\"]*\"), *([0-9]+) *, *(\"[^\"]*\") *(, \\/\\*also_string=\\*\\/true *)?},', line)\n-                    assert m, 'No match to table expression: %s' % line\n-                    name = parse_string(m.group(1))\n-                    idx = int(m.group(2))\n-                    argname = parse_string(m.group(3))\n-                    cmds.append((name, idx, argname))\n-    assert not in_rpcs and cmds\n-    return cmds\n-\n+                    # Match lines with ParamFormat::STRING\n+                    m_string = re.search(r'{ *(\"[^\"]*\") *, *([0-9]+) *, *(\"[^\"]*\") *, *ParamFormat::STRING *},?', line)\n+                    if m_string:\n+                        name = parse_string(m_string.group(1))\n+                        idx = int(m_string.group(2))\n+                        argname = parse_string(m_string.group(3))\n+                        string_params.append((name, idx, argname))\n+                        continue\n+\n+                    # Match lines with ParamFormat::JSON_OR_STRING\n+                    m_json_or_string = re.search(r'{ *(\"[^\"]*\") *, *([0-9]+) *, *(\"[^\"]*\") *, *ParamFormat::JSON_OR_STRING *},?', line)\n+                    if m_json_or_string:\n+                        name = parse_string(m_json_or_string.group(1))\n+                        idx = int(m_json_or_string.group(2))\n+                        argname = parse_string(m_json_or_string.group(3))\n+                        cmds.append((name, idx, argname))\n+                        continue\n+\n+                    # Match lines with ParamFormat::JSON\n+                    m_json = re.search(r'{ *(\"[^\"]*\") *, *([0-9]+) *, *(\"[^\"]*\") *(?:, *ParamFormat::JSON *)? *}', line)\n+                    if m_json:\n+                        name = parse_string(m_json.group(1))\n+                        idx = int(m_json.group(2))\n+                        argname = parse_string(m_json.group(3))\n+                        cmds.append((name, idx, argname))",
      "path": "test/functional/rpc_help.py",
      "position": 1,
      "original_position": 54,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "original_commit_id": "04e78595410c557c970eb3994a40586231d5b38e",
      "in_reply_to_id": 2388389106,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We can match `JSON` and `JSON_OR_STRING` because both are added to `cmds` list and follow the same rule, and `STRING` is added to string_params list. Recent changes simplify this.",
      "created_at": "2025-10-01T15:44:48Z",
      "updated_at": "2025-10-01T15:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2395072031",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395072031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": 35,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395073330",
      "pull_request_review_id": 3289885986,
      "id": 2395073330,
      "node_id": "PRRC_kwDOABII586Owesy",
      "diff_hunk": "@@ -50,6 +50,28 @@ def invalid_label_name_test(self):\n         for rpc_call in rpc_calls:\n             assert_raises_rpc_error(-11, \"Invalid label name\", *rpc_call, label=\"*\")\n \n+    def test_label_named_parameter_handling(self):\n+        \"\"\"Test that getnewaddress with labels containing '=' characters is handled correctly in -named mode\"\"\"\n+        self.log.info(\"Test getnewaddress label parameter handling\")\n+        node = self.nodes[0]\n+\n+        # Test getnewaddress with explicit named parameter containing '='\n+        label_with_equals = \"wallet=wallet\"\n+        result = node.cli(\"-named\", \"getnewaddress\", f\"label={label_with_equals}\").send_cli()\n+        address = result.strip()\n+        addr_info = node.getaddressinfo(address)\n+        assert_equal(addr_info.get('labels', []), [label_with_equals])\n+\n+        # Test that unknown parameter with '=' gets treated as positional only if the next\n+        # positional parameter is known and accepts a string or valid JSON.",
      "path": "test/functional/wallet_labels.py",
      "position": 1,
      "original_position": 17,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "original_commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "in_reply_to_id": 2391362922,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed. Now fixed.",
      "created_at": "2025-10-01T15:45:16Z",
      "updated_at": "2025-10-01T15:45:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2395073330",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395073330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395075138",
      "pull_request_review_id": 3289888425,
      "id": 2395075138,
      "node_id": "PRRC_kwDOABII586OwfJC",
      "diff_hunk": "@@ -12,26 +12,54 @@\n #include <string>\n #include <string_view>\n \n+//! Specify whether parameter should be parsed by bitcoin-cli as a JSON value,\n+//! or passed unchanged as a string, or a combination of both.\n+enum ParamFormat { JSON, STRING, JSON_OR_STRING };\n+\n class CRPCConvertParam\n {\n public:\n     std::string methodName; //!< method whose params want conversion\n     int paramIdx;           //!< 0-based idx of param to convert\n     std::string paramName;  //!< parameter name\n-    bool also_string{false}; //!< The parameter is also a string\n+    ParamFormat format{ParamFormat::JSON}; //!< parameter format\n };\n \n // clang-format off\n /**\n- * Specify a (method, idx, name) here if the argument is a non-string RPC\n- * argument and needs to be converted from JSON.\n+ * Specify a (method, idx, name, format) here if the argument is a non-string RPC\n+ * argument and needs to be converted from JSON, or if it is a string argument\n+ * passed to a method that accepts '=' characters in any string arguments.\n+ *\n+ * JSON parameters need to be listed here to make bitcoin-cli treat command line\n+ * arguments as JSON values instead of strings.\n+ *\n+ * String parameters that may contain an '=' character (e.g. base64 strings,\n+ * filenames, or labels) need to be listed here with format `ParamFormat::STRING`\n+ * to make bitcoin-cli treat them as positional parameters when `-named` is used.\n+ * This prevents `bitcoin-cli` from splitting strings like \"my=wallet\" into a named\n+ * argument \"my\" and value \"wallet\" when the whole string is intended to be a\n+ * single positional argument. And if one string parameter is listed for a method,\n+ * other string parameters for that method need to be listed as well so bitcoin-cli\n+ * does not make the opposite mistake and pass other arguments by position instead of\n+ * name because it does not recognize their names. See \\ref RPCConvertNamedValues\n+ * for more information on how named and positional arguments are distinguished with\n+ * -named.\n+ *\n+ * Parameters that can be either a JSON value or a string should be listed\n+ * with format `ParamFormat::JSON_OR_STRING`. This makes bitcoin-cli first attempt\n+ * to parse the argument as JSON. If parsing fails, it falls back to treating the\n+ * argument as a raw string. This is useful for arguments like hash_or_height,\n+ * allowing invocations such as `bitcoin-cli getblockstats <hash>` without\n+ * needing to quote the hash string as JSON (`'\"<hash>\"'`).",
      "path": "src/rpc/client.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "original_commit_id": "04e78595410c557c970eb3994a40586231d5b38e",
      "in_reply_to_id": 2388373555,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks. Done.",
      "created_at": "2025-10-01T15:45:51Z",
      "updated_at": "2025-10-01T15:45:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2395075138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395075138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395078470",
      "pull_request_review_id": 3289893748,
      "id": 2395078470,
      "node_id": "PRRC_kwDOABII586Owf9G",
      "diff_hunk": "@@ -315,91 +369,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n /** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw, bool also_string)\n+static UniValue Parse(std::string_view raw, ParamFormat format = ParamFormat::JSON)\n {\n     UniValue parsed;\n     if (!parsed.read(raw)) {\n-        if (!also_string) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-        return raw;\n+        if (format != ParamFormat::JSON_OR_STRING) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n+        return UniValue(std::string(raw));\n     }\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::map<std::pair<std::string, int>, bool> members;\n-    std::map<std::pair<std::string, std::string>, bool> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, size_t pos)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramIdx == static_cast<int>(pos);",
      "path": "src/rpc/client.cpp",
      "position": 230,
      "original_position": 231,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "in_reply_to_id": 2392810900,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since the definition of both the `FromPosition` and `FromName` functions tells that they're returning the pointer to the CRPCConvertParam class, thus the parameter names here represent the true meaning in their names according to me. And here `p.rpcMethod == method` if we change `methodName` to `rpcMethod` we need to change the existing name of the member of the class.",
      "created_at": "2025-10-01T15:46:53Z",
      "updated_at": "2025-10-01T15:46:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2395078470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395078470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 408,
      "original_line": 408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395100057",
      "pull_request_review_id": 3289923149,
      "id": 2395100057,
      "node_id": "PRRC_kwDOABII586OwlOZ",
      "diff_hunk": "@@ -315,91 +369,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },\n };\n // clang-format on\n \n /** Parse string to UniValue or throw runtime_error if string contains invalid JSON */\n-static UniValue Parse(std::string_view raw, bool also_string)\n+static UniValue Parse(std::string_view raw, ParamFormat format = ParamFormat::JSON)\n {\n     UniValue parsed;\n     if (!parsed.read(raw)) {\n-        if (!also_string) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n-        return raw;\n+        if (format != ParamFormat::JSON_OR_STRING) throw std::runtime_error(tfm::format(\"Error parsing JSON: %s\", raw));\n+        return UniValue(std::string(raw));\n     }\n     return parsed;\n }\n \n-class CRPCConvertTable\n+namespace rpc_convert\n {\n-private:\n-    std::map<std::pair<std::string, int>, bool> members;\n-    std::map<std::pair<std::string, std::string>, bool> membersByName;\n+const CRPCConvertParam* FromPosition(std::string_view method, size_t pos)\n+{\n+    auto it = std::ranges::find_if(vRPCConvertParams, [&](const auto& p) {\n+        return p.methodName == method && p.paramIdx == static_cast<int>(pos);\n+    });\n \n-public:\n-    CRPCConvertTable();\n+    return it == std::end(vRPCConvertParams) ? nullptr : &*it;",
      "path": "src/rpc/client.cpp",
      "position": 235,
      "original_position": 236,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "24391ed7804a724a62034b21150c89e45ac9b625",
      "in_reply_to_id": 2392814895,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As we are not obtaining some value from the iterator the current implementation seems simpler.",
      "created_at": "2025-10-01T15:54:27Z",
      "updated_at": "2025-10-01T15:54:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2395100057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395100057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434287898",
      "pull_request_review_id": 3269874367,
      "id": 2434287898,
      "node_id": "PRRC_kwDOABII586RGEka",
      "diff_hunk": "@@ -315,91 +368,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },",
      "path": "src/rpc/client.cpp",
      "position": 191,
      "original_position": 191,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "in_reply_to_id": null,
      "user": {
        "login": "kannapoix",
        "id": 16045487,
        "node_id": "MDQ6VXNlcjE2MDQ1NDg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/16045487?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kannapoix",
        "html_url": "https://github.com/kannapoix",
        "followers_url": "https://api.github.com/users/kannapoix/followers",
        "following_url": "https://api.github.com/users/kannapoix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kannapoix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kannapoix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kannapoix/subscriptions",
        "organizations_url": "https://api.github.com/users/kannapoix/orgs",
        "repos_url": "https://api.github.com/users/kannapoix/repos",
        "events_url": "https://api.github.com/users/kannapoix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kannapoix/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should we add other RPCs that also accept the address_type argument to this list?\nPassing a parameter containing ‘=’ to getnewaddress currently returns:\n```\n$ build/bin/bitcoin-cli -regtest -named getnewaddress label_string include=equal\nerror code: -5\nerror message:\nUnknown address type 'include=equal'\n```\n\nWhile passing the same to getrawchangeaddress shows:\n```\n$ build/bin/bitcoin-cli -regtest -named getrawchangeaddress include=equal\nerror code: -8\nerror message:\nUnknown named parameter include\n```\n\nPersonally, I prefer consistent error behavior here.\n\n",
      "created_at": "2025-10-16T00:49:43Z",
      "updated_at": "2025-10-16T01:55:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434287898",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434287898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 376,
      "original_line": 376,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434307116",
      "pull_request_review_id": 3269874367,
      "id": 2434307116,
      "node_id": "PRRC_kwDOABII586RGJQs",
      "diff_hunk": "@@ -315,91 +368,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },",
      "path": "src/rpc/client.cpp",
      "position": 203,
      "original_position": 203,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "in_reply_to_id": null,
      "user": {
        "login": "kannapoix",
        "id": 16045487,
        "node_id": "MDQ6VXNlcjE2MDQ1NDg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/16045487?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kannapoix",
        "html_url": "https://github.com/kannapoix",
        "followers_url": "https://api.github.com/users/kannapoix/followers",
        "following_url": "https://api.github.com/users/kannapoix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kannapoix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kannapoix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kannapoix/subscriptions",
        "organizations_url": "https://api.github.com/users/kannapoix/orgs",
        "repos_url": "https://api.github.com/users/kannapoix/repos",
        "events_url": "https://api.github.com/users/kannapoix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kannapoix/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would it make sense to include listlabels and setwalletflag as well? I assume they were omitted because the parameters are strings but only accept predefined values.\n\nAdding them could help produce consistent errors. For example, with listlabels:\n```\n$ build/bin/bitcoin-cli -regtest -named listlabels invalid=purpose\nerror code: -8\nerror message:\nUnknown named parameter invalid\n```\nWithout -named:\n```\nbuild/bin/bitcoin-cli -regtest listlabels invalid=purpose\nerror code: -8\nerror message:\nInvalid 'purpose' argument, must be a known purpose string, typically 'send', or 'receive'.\n```\n\nIncluding listlabels in the table would align the behavior in both cases.",
      "created_at": "2025-10-16T01:09:10Z",
      "updated_at": "2025-10-16T01:55:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434307116",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434307116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 388,
      "original_line": 388,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434797504",
      "pull_request_review_id": 3343337737,
      "id": 2434797504,
      "node_id": "PRRC_kwDOABII586RIA_A",
      "diff_hunk": "@@ -315,91 +368,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },",
      "path": "src/rpc/client.cpp",
      "position": 191,
      "original_position": 191,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "in_reply_to_id": 2434287898,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Well, we need to include `address_type` here because the method `getnewaddress` contains `label` which might contain a `=` char, so to prevent treating arguments as positional while named is specified or vice versa, we need to mention that all the parameters' names correspond to the method. This gives the whole idea about what all the possible values a user can pass for the given method. More information about this behaviour is mentioned around lines 43-53 in `client.cpp`. \r\n\r\nThe second thing is the parameter `address_type` is guaranteed to contain values which do not contain an `=` char in them if passed correctly by the user. Thus, the error is shown if it passed any other way. Currently, the error is different due to the above fact, but the error is not entirely misleading; they both are pointing to the same cause, which is easy to debug or understand. But yes, we can make the error similar by including all the `address_type` in the table, but it makes the table more complicated and hard to understand, as there are only a few RPCs which accept `=` characters, so in most of them you will see the same kind of error. So, it's a tradeoff between making few error messages similar or making code less complicated and readable.",
      "created_at": "2025-10-16T07:03:22Z",
      "updated_at": "2025-10-16T07:03:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434797504",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434797504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 376,
      "original_line": 376,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434797827",
      "pull_request_review_id": 3343338197,
      "id": 2434797827,
      "node_id": "PRRC_kwDOABII586RIBED",
      "diff_hunk": "@@ -315,91 +368,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },",
      "path": "src/rpc/client.cpp",
      "position": 203,
      "original_position": 203,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "in_reply_to_id": 2434307116,
      "user": {
        "login": "zaidmstrr",
        "id": 72139621,
        "node_id": "MDQ6VXNlcjcyMTM5NjIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/72139621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zaidmstrr",
        "html_url": "https://github.com/zaidmstrr",
        "followers_url": "https://api.github.com/users/zaidmstrr/followers",
        "following_url": "https://api.github.com/users/zaidmstrr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zaidmstrr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zaidmstrr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zaidmstrr/subscriptions",
        "organizations_url": "https://api.github.com/users/zaidmstrr/orgs",
        "repos_url": "https://api.github.com/users/zaidmstrr/repos",
        "events_url": "https://api.github.com/users/zaidmstrr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zaidmstrr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The original idea about this PR is to handle cases where a user might pass some values which contain the `=` char in them, and those are valid and acceptable, e.g. wallet names, labels, file paths. Methods like `listlabels` and `setwalletflag` do not contain any string parameters which might contain any `=` char in them; that's why I think this is out of scope for this PR.",
      "created_at": "2025-10-16T07:03:32Z",
      "updated_at": "2025-10-16T07:03:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434797827",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434797827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 388,
      "original_line": 388,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434995447",
      "pull_request_review_id": 3343599681,
      "id": 2434995447,
      "node_id": "PRRC_kwDOABII586RIxT3",
      "diff_hunk": "@@ -315,91 +368,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },",
      "path": "src/rpc/client.cpp",
      "position": 191,
      "original_position": 191,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "in_reply_to_id": 2434287898,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434287898\r\n\r\n> While passing the same to getrawchangeaddress shows\r\n\r\nThanks for pointing this out, and see also other reply to https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434307116 about goal of having more consistent error messages.\r\n\r\nIt seems to me PR is improving behavior of the `getnewaddress` method while leaving behavior of the `getrawchangeaddress` method unchanged. Errors in both cases seem pretty helpful and descriptive even if they are not exactly the same messages any more. I do think it'd be reasonable to think about adding **all** string parameters to the `vRPCConvertParams` table in the future, instead of only adding string parameters for methods that accept `=` characters so methods like `getrawchangeaddress` could have better error messages as well. But since it would expand the PR and potentially create a bigger maintenance burden in the code, it would seem better to consider separately in a followup where costs and benefits of that change would be clearer. There could also be other ways of improving the current `getrawchangeaddress` \"Unknown named parameter\" error without expanding the table.",
      "created_at": "2025-10-16T08:14:02Z",
      "updated_at": "2025-10-16T09:09:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434995447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434995447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 376,
      "original_line": 376,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434995750",
      "pull_request_review_id": 3343599681,
      "id": 2434995750,
      "node_id": "PRRC_kwDOABII586RIxYm",
      "diff_hunk": "@@ -315,91 +368,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },\n+    { \"backupwallet\", 0, \"destination\", ParamFormat::STRING },\n+    { \"echoipc\", 0, \"arg\", ParamFormat::STRING },\n+    { \"encryptwallet\", 0, \"passphrase\", ParamFormat::STRING },\n+    { \"getaddressesbylabel\", 0, \"label\", ParamFormat::STRING },\n+    { \"loadtxoutset\", 0, \"path\", ParamFormat::STRING },\n+    { \"migratewallet\", 0, \"wallet_name\", ParamFormat::STRING },\n+    { \"migratewallet\", 1, \"passphrase\", ParamFormat::STRING },\n+    { \"setlabel\", 1, \"label\", ParamFormat::STRING },\n+    { \"signmessage\", 1, \"message\", ParamFormat::STRING },\n+    { \"signmessagewithprivkey\", 1, \"message\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 0, \"oldpassphrase\", ParamFormat::STRING },\n+    { \"walletpassphrasechange\", 1, \"newpassphrase\", ParamFormat::STRING },",
      "path": "src/rpc/client.cpp",
      "position": 203,
      "original_position": 203,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "in_reply_to_id": 2434307116,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434307116\r\n\r\n> Without -named [...]\r\n\r\nThanks for pointing out different error messages with and without `-named`. I do feel like it would be good to have more consistent error messages but I think requiring exact same messages in `-named` and `-nonamed` cases is probably setting bar a little too high, because the way arguments are interpreted in these modes is quite different. As long as the error messages clearly describe the problem and make it possible to diagnose and fix it, I think that should probably be enough for purposes of this PR, even if there are ways we can improve the messages and make them more helpful and more uniform in the future.\r\n\r\nI also think the behavior you are describing here is not actually changed by this PR, and happens even in current code.",
      "created_at": "2025-10-16T08:14:10Z",
      "updated_at": "2025-10-16T09:09:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2434995750",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2434995750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 388,
      "original_line": 388,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2438509207",
      "pull_request_review_id": 3348459569,
      "id": 2438509207,
      "node_id": "PRRC_kwDOABII586RWLKX",
      "diff_hunk": "@@ -315,91 +368,140 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0, \"wait\" },\n     { \"addnode\", 2, \"v2transport\" },\n     { \"addconnection\", 2, \"v2transport\" },\n+    { \"decodepsbt\", 0, \"psbt\", ParamFormat::STRING },\n+    { \"analyzepsbt\", 0, \"psbt\", ParamFormat::STRING},\n+    { \"verifymessage\", 1, \"signature\", ParamFormat::STRING },\n+    { \"verifymessage\", 2, \"message\", ParamFormat::STRING },\n+    { \"getnewaddress\", 0, \"label\", ParamFormat::STRING },\n+    { \"getnewaddress\", 1, \"address_type\", ParamFormat::STRING },",
      "path": "src/rpc/client.cpp",
      "position": 191,
      "original_position": 191,
      "commit_id": "f53dbbc5057b6f676db4be9bc720898149f293fc",
      "original_commit_id": "694f04e2bd34f994d81e27b68e4d7466a9a319f8",
      "in_reply_to_id": 2434287898,
      "user": {
        "login": "kannapoix",
        "id": 16045487,
        "node_id": "MDQ6VXNlcjE2MDQ1NDg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/16045487?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kannapoix",
        "html_url": "https://github.com/kannapoix",
        "followers_url": "https://api.github.com/users/kannapoix/followers",
        "following_url": "https://api.github.com/users/kannapoix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kannapoix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kannapoix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kannapoix/subscriptions",
        "organizations_url": "https://api.github.com/users/kannapoix/orgs",
        "repos_url": "https://api.github.com/users/kannapoix/repos",
        "events_url": "https://api.github.com/users/kannapoix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kannapoix/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">we need to mention that all the parameters' names correspond to the method.\r\n\r\nI missed that point even though I read the comment—thanks for the explanation.\r\nI agree the getrawchangeaddress error message is still reasonable, so I think the current implementation makes sense.",
      "created_at": "2025-10-17T06:16:38Z",
      "updated_at": "2025-10-17T06:28:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32821#discussion_r2438509207",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2438509207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32821"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 376,
      "original_line": 376,
      "side": "RIGHT"
    }
  ]
}
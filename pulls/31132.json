{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132",
    "id": 2138649533,
    "node_id": "PR_kwDOABII585_eTO9",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31132",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31132.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31132.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/64de91105312d36dadb5f71ec01fc6af9b14da69",
    "number": 31132,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "validation: fetch block inputs on parallel threads >10% faster IBD",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "When fetching inputs in ConnectBlock, each input is fetched from the cache in series. A cache miss means a round trip to the disk db to fetch the outpoint and insert it into the cache. Since the db is locked from being written during ConnectTip, we can fetch all block inputs missing from the cache in parallel on multiple threads before entering ConnectBlock. Using this strategy resulted in a 10% faster IBD.\r\n\r\nDoing IBD with 16 vcores from a local peer with default settings, stopping at height 850k:\r\n\r\n|  | Mean [s] | Min [s] | Max [s] | Relative |\r\n|:---|---:|---:|---:|---:|\r\n| branch | 17065.138 ± 117.439 | 16982.096 | 17148.181 | 1.00 |\r\n| master | 18731.509 ± 94.142 | 18731.509 | 18864.646 | 1.10 |\r\n\r\nFor later blocks this change makes block connection even faster. Doing an assumeutxo from block 840k to 850k with 15 worker threads, this change is 26% faster. With just a single worker thread, this same benchmark is 6% faster.\r\n[Benchmark and flame graph with 15 worker threads](https://bitcoin-dev-tools.github.io/benchcoin/results/pr-19/12150709351/index.html)\r\n[Benchmark and flame graph with 1 worker thread](https://bitcoin-dev-tools.github.io/benchcoin/results/pr-19/12151560582/index.html)\r\n\r\nI have fuzzed for over 500 million iterations with the provided fuzz harness with no issues.\r\n\r\nThis approach is heavily inspired by `CCheckQueue`, but we could not easily reuse it since it only checks for validity and doesn't allow us to store results. So, this PR creates a new `InputFetcher` that loops through all inputs of a block on the main thread and adds their outpoints to a shared vector. After writing, the main thread and worker threads assign ranges of outpoints from the vector and fetch them from the db, and then push the resulting coins onto a thread local vector. Once the threads have finished reading all inputs, the main thread loops through all thread local vectors and inserts the results into the cache.\r\n\r\nThis PR uses the `-par` value for the number of threads, which defaults to the number of vcores on the machine or 15 whichever is fewer. This is the same value used for `CCheckQueue`, so any users that specifically have the multi threaded validation disabled by using `-par=1` will also have this feature disabled. This also means the maximum number of input fetching threads is capped at 15.\r\n\r\nSince `InputFetcher::FetchInputs` is blocking, a follow-up can update this to share the thread pool between `CCheckQueue` and `InputFetcher`.",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "created_at": "2024-10-22T14:40:28Z",
    "updated_at": "2025-10-16T01:13:00Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "1b19fc796d240df66df9003d26e35c2bab0c200f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "andrewtoth:threaded-inputs",
      "ref": "threaded-inputs",
      "sha": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 156145027,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTYxNDUwMjc=",
        "name": "bitcoin",
        "full_name": "andrewtoth/bitcoin",
        "owner": {
          "login": "andrewtoth",
          "id": 237213,
          "node_id": "MDQ6VXNlcjIzNzIxMw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/andrewtoth",
          "html_url": "https://github.com/andrewtoth",
          "followers_url": "https://api.github.com/users/andrewtoth/followers",
          "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
          "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
          "repos_url": "https://api.github.com/users/andrewtoth/repos",
          "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/andrewtoth/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/andrewtoth/bitcoin",
        "archive_url": "https://api.github.com/repos/andrewtoth/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/andrewtoth/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/andrewtoth/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/andrewtoth/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/andrewtoth/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/andrewtoth/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/andrewtoth/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/andrewtoth/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/andrewtoth/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/andrewtoth/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/andrewtoth/bitcoin/events",
        "forks_url": "https://api.github.com/repos/andrewtoth/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/andrewtoth/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/andrewtoth/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/andrewtoth/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/andrewtoth/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/andrewtoth/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/andrewtoth/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/andrewtoth/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/andrewtoth/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/andrewtoth/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/andrewtoth/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:andrewtoth/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/andrewtoth/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/andrewtoth/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/andrewtoth/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/andrewtoth/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/andrewtoth/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/andrewtoth/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/andrewtoth/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/andrewtoth/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/andrewtoth/bitcoin/hooks",
        "svn_url": "https://github.com/andrewtoth/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 287594,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-16T00:41:45Z",
        "created_at": "2018-11-05T01:43:59Z",
        "updated_at": "2022-12-23T04:16:30Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e14451ac87339ed61b8c872f027184a978dd96eb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38036,
        "stargazers_count": 86206,
        "watchers_count": 86206,
        "size": 294954,
        "default_branch": "master",
        "open_issues_count": 826,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-15T14:01:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-16T00:26:10Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 608,
    "deletions": 1,
    "changed_files": 10,
    "commits": 6,
    "review_comments": 123,
    "comments": 29
  },
  "events": [
    {
      "event": "commented",
      "id": 2429478185,
      "node_id": "IC_kwDOABII586QzuUp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2429478185",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:40:31Z",
      "updated_at": "2025-10-16T00:31:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31132.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2388117544), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2462618817), [Raimo33](https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3356601737) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#33512](https://github.com/bitcoin/bitcoin/pull/33512) (coins: use number of dirty cache entries in flush warnings/logs by l0rinc)\n* [#32313](https://github.com/bitcoin/bitcoin/pull/32313) (coins: fix `cachedCoinsUsage` accounting in `CCoinsViewCache` by l0rinc)\n* [#30342](https://github.com/bitcoin/bitcoin/pull/30342) (kernel, logging: Pass Logger instances to kernel objects by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2429478185",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 14786916578,
      "node_id": "LE_lADOABII586bT0I_zwAAAANxXnDi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14786916578",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:40:34Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14787017217,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAANxX_oB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787017217",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9fcd08ea0e440c89c1a34aec9e31aaab53f559c4",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/9fcd08ea0e440c89c1a34aec9e31aaab53f559c4",
      "created_at": "2024-10-22T14:45:41Z"
    },
    {
      "event": "commented",
      "id": 2429491813,
      "node_id": "IC_kwDOABII586Qzxpl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2429491813",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:45:47Z",
      "updated_at": "2024-10-22T14:45:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/31894441286</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2429491813",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 14787019013,
      "node_id": "LE_lADOABII586bT0I_zwAAAANxYAEF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787019013",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:45:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 14787094471,
      "node_id": "RTE_lADOABII586bT0I_zwAAAANxYSfH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787094471",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T14:49:35Z",
      "rename": {
        "from": "validation: fetch block inputs parallel threads ~17% faster IBD",
        "to": "validation: fetch block inputs on parallel threads ~17% faster IBD"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14787303983,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAANxZFov",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14787303983",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fe0fe597cd0e510ae104fbce5823bc13e04bec82",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/fe0fe597cd0e510ae104fbce5823bc13e04bec82",
      "created_at": "2024-10-22T14:59:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14788613835,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAANxeFbL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14788613835",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e2feb0cc7c62338c2f06c1da638818594f68ad32",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/e2feb0cc7c62338c2f06c1da638818594f68ad32",
      "created_at": "2024-10-22T16:12:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14790893735,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAANxmyCn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14790893735",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "created_at": "2024-10-22T18:46:51Z"
    },
    {
      "event": "unlabeled",
      "id": 14792905981,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAANxudT9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14792905981",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-22T21:09:47Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2388117544,
      "node_id": "PRR_kwDOABII586OV8go",
      "url": null,
      "actor": null,
      "commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-23T13:15:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nI'm still missing tests and benchmarks here and I think we need to find better default values for SSD and HDD parallelism, and I'd be interested in how coroutines would perform here instead of trying to find the best batching size manually.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2388117544",
      "submitted_at": "2024-10-23T12:44:26Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "reviewed",
      "id": 2388943653,
      "node_id": "PRR_kwDOABII586OZGMl",
      "url": null,
      "actor": null,
      "commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-23T14:27:10Z",
      "author_association": "MEMBER",
      "body": "Cool idea.\r\n\r\nSince the inputs fetcher call is blocking, instead of creating a new set of worker threads, what do you think about re-using the existing script validation ones (or any other unused worker threads) by implementing a general-purpose thread pool shared among the validation checks? \r\nThe script validation checks and the inputs fetching mechanism are never done concurrently because you need the inputs in order to verify the scripts. So, they could share workers.\r\n\r\nThis should be benchmarked because it might add some overhead but, #26966 introduces such structure inside 401f21bfd72f32a28147677af542887518a4dbff, which we could pull off and use for validation.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2388943653",
      "submitted_at": "2024-10-23T14:25:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "commented",
      "id": 2432481201,
      "node_id": "IC_kwDOABII586Q_Lex",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2432481201",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-23T14:48:28Z",
      "updated_at": "2024-10-23T14:48:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "> implementing a general-purpose thread pool shared among the validation checks?\r\n\r\nNice, yes that would be great! That would simplify this PR a lot if it could just schedule tasks on worker threads and receive the responses, instead of implementing all the sync code itself.\r\n\r\n> https://github.com/bitcoin/bitcoin/pull/26966 introduces such structure inside https://github.com/bitcoin/bitcoin/commit/401f21bfd72f32a28147677af542887518a4dbff, which we could pull off and use for validation.\r\n\r\nConcept ACK!",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2432481201",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 2436046062,
      "node_id": "IC_kwDOABII586RMxzu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2436046062",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T18:12:38Z",
      "updated_at": "2024-10-26T15:04:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Finished benching on a HDD until 860k on Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz, CPU = 8:\r\n\r\n```bash\r\nSummary\r\n'COMMIT=f278ca4ec3f0a90c285e640f1a270869ca594d20 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=0' ran\r\n 1.02 times faster than 'COMMIT=e9e23b59f8eedb8dfae75aa660328299fba92b50 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=\r\n0'\r\n```\r\n\r\n> f278ca4ec3 coins: allow emplacing non-dirty coins internally (39993.343777768874 seconds = 11.1 hours)\r\n> e9e23b59f8 validation: fetch block inputs in parallel (40929.84310861388 seconds = 11.3 hours)\r\n\r\n-----\r\n\r\n~So likely on HDD we shouldn't use so many threads, apparently it slows down IBD.~\r\nMaybe we could add a new config option (`iothreads` or `iothreadmultiplier` or something).\r\nThe defaults should likely depend on whether it's an SSD or HDD.\r\n\r\n-----\r\n\r\nEdit:\r\n\r\n<details>\r\n<summary>Previous results</summary>\r\n\r\n```bash\r\n\"command\": \"COMMIT=f278ca4ec3f0a90c285e640f1a270869ca594d20 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=0\",\r\n\"times\": [39993.343777768874],\r\n\r\n\"command\": \"COMMIT=e9e23b59f8eedb8dfae75aa660328299fba92b50 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=0\",\r\n\"times\": [40929.84310861388],\r\n```\r\n\r\n</details>\r\n\r\nI have retried the same with half the parallelism (rebased, but no other change in the end, otherwise the results would be hard to interpret):\r\n```bash\r\n\"command\": \"COMMIT=8207d372b2fac24af0f8999b30e71e88d40b3a13 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=10000 -printtoconsole=0\",\r\n\"times\": [40579.00445769842],\r\n``` \r\n\r\nSo it's a tiny bit faster than before (surprisingly stable for an actual IBD with real peers), but still slower-than/same-as before, so not sure why it's not faster.\r\n\r\n----\r\n\r\nEdit:\r\n\r\nRunning it on a HDD with a low dbcache value reproduces the original result:\r\n\r\n<details>\r\n<summary>benchmark</summary>\r\n\r\n```bash\r\nhyperfine --runs 1 --show-output --export-json /mnt/my_storage/ibd_full-threaded-inputs-3.json --parameter-list COMMIT 92fc718592be55812b2c73a3bf57599fc81425fa,8207d372b2fac24af0f8999b30e71e88d40b3a13 --prepare 'rm -rf /mnt/my_storage/BitcoinData/* && git checkout {COMMIT} && git clean -fxd && git reset --hard && cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_UTIL=OFF -DBUILD_TX=OFF -DBUILD_TESTS=OFF -DENABLE_WALLET=OFF -DINSTALL_MAN=OFF && cmake --build build -j$(nproc)' 'COMMIT={COMMIT} ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=1000 -printtoconsole=0'\r\n```\r\n\r\n</details>\r\n\r\n```bash\r\n8207d372b2 validation: fetch block inputs in parallel\r\n92fc718592 coins: allow emplacing non-dirty coins internally\r\nSummary\r\n  'COMMIT=8207d372b2fac24af0f8999b30e71e88d40b3a13 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=1000 -printtoconsole=0' ran\r\n    1.16 times faster than 'COMMIT=92fc718592be55812b2c73a3bf57599fc81425fa ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=860000 -dbcache=1000 -printtoconsole=0'\r\n```",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2436046062",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 2436080216,
      "node_id": "IC_kwDOABII586RM6JY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2436080216",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T18:31:14Z",
      "updated_at": "2024-10-24T18:31:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "> So likely on HDD we shouldn't use so many threads, apparently it slows down IBD.\r\n\r\nI'm not sure we can conclude that from your benchmark. It used a very high dbcache setting, which makes the effect of this change less important. It also is syncing from untrusted network peers, so there is some variance which could also account for the 2% difference.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2436080216",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14856978808,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN1i4F4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14856978808",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "942f3006fcc85be70fb174c99b73e7b9022cfcdb",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/942f3006fcc85be70fb174c99b73e7b9022cfcdb",
      "created_at": "2024-10-24T18:40:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14857622714,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN1lVS6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14857622714",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8207d372b2fac24af0f8999b30e71e88d40b3a13",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/8207d372b2fac24af0f8999b30e71e88d40b3a13",
      "created_at": "2024-10-24T19:25:33Z"
    },
    {
      "event": "commented",
      "id": 2436178257,
      "node_id": "IC_kwDOABII586RNSFR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2436178257",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T19:25:38Z",
      "updated_at": "2024-10-24T19:25:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32027275494</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2436178257",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 14857623683,
      "node_id": "LE_lADOABII586bT0I_zwAAAAN1lViD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14857623683",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T19:25:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14869493997,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAN2Snjt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14869493997",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-25T09:58:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14910229658,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN4uAya",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14910229658",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a0f6902ad1b965a42d5362329910eb6c1c9adfa1",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/a0f6902ad1b965a42d5362329910eb6c1c9adfa1",
      "created_at": "2024-10-26T18:47:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14910333712,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN4uaMQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14910333712",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a00dbc56fa29bc2c138b97e478517260cda99f7f",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/a00dbc56fa29bc2c138b97e478517260cda99f7f",
      "created_at": "2024-10-26T18:51:56Z"
    },
    {
      "event": "labeled",
      "id": 14910335810,
      "node_id": "LE_lADOABII586bT0I_zwAAAAN4uatC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14910335810",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T18:52:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2439692907,
      "node_id": "IC_kwDOABII586RasJr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2439692907",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-26T18:52:01Z",
      "updated_at": "2024-10-26T18:52:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32107893176</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2439692907",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14911794047,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN4z-t_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14911794047",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "54b3b484af9775c8bcd3ca47f50ae23b2fc18955",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/54b3b484af9775c8bcd3ca47f50ae23b2fc18955",
      "created_at": "2024-10-26T20:01:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14914596074,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN4-qzq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14914596074",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d5b9484f623133d7f5396fb84b36450c3dcdc689",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/d5b9484f623133d7f5396fb84b36450c3dcdc689",
      "created_at": "2024-10-26T22:14:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14914980894,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5AIwe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14914980894",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7115abe5140c7cba2c1f31f531ff8ac48ebe5d11",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/7115abe5140c7cba2c1f31f531ff8ac48ebe5d11",
      "created_at": "2024-10-26T22:31:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14915740952,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5DCUY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14915740952",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f7ab210e5437674193ac21274fa6dbee77acc6cf",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/f7ab210e5437674193ac21274fa6dbee77acc6cf",
      "created_at": "2024-10-26T23:07:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14917256589,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5I0WN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14917256589",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "893c0b9c8f7d37caa69b409cc43a261bf3c04988",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/893c0b9c8f7d37caa69b409cc43a261bf3c04988",
      "created_at": "2024-10-27T00:11:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14920099117,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5TqUt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14920099117",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3f58a51e0881c511f4ce1550581e0b7eb2bd7396",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/3f58a51e0881c511f4ce1550581e0b7eb2bd7396",
      "created_at": "2024-10-27T04:45:57Z"
    },
    {
      "event": "convert_to_draft",
      "id": 14925130762,
      "node_id": "CTDE_lADOABII586bT0I_zwAAAAN5m2wK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14925130762",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-27T13:28:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14925301705,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5ngfJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14925301705",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5a79235454ada6e08ada95a07bbd01c42689ee29",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/5a79235454ada6e08ada95a07bbd01c42689ee29",
      "created_at": "2024-10-27T13:40:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14926730470,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5s9Tm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14926730470",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ab6fbdf698e595758d6d43c512bc3dc6754e4803",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/ab6fbdf698e595758d6d43c512bc3dc6754e4803",
      "created_at": "2024-10-27T15:15:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14926840604,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5tYMc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14926840604",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4ae00c48add4f6e74dccf2339f41968a57ecd5c1",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/4ae00c48add4f6e74dccf2339f41968a57ecd5c1",
      "created_at": "2024-10-27T15:21:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14927991893,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5xxRV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14927991893",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ee5b899ef80b1e78741aed54d583ba40d8402cc9",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/ee5b899ef80b1e78741aed54d583ba40d8402cc9",
      "created_at": "2024-10-27T16:37:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14928181449,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN5yfjJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14928181449",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2eb2872524cc8e4156179180e8f770092b762b31",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/2eb2872524cc8e4156179180e8f770092b762b31",
      "created_at": "2024-10-27T16:51:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14928621817,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN50LD5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14928621817",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7e7e4092551ebaface97b945cd70c46448915245",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/7e7e4092551ebaface97b945cd70c46448915245",
      "created_at": "2024-10-27T17:19:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14931091175,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAN59l7n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14931091175",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0d1c6375579985dc214bfc00b4eff67b87782ede",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/0d1c6375579985dc214bfc00b4eff67b87782ede",
      "created_at": "2024-10-27T19:55:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15163921481,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOH1xRJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15163921481",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ccbde0f075ad9ab259b2225b9b56d98593b73f60",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/ccbde0f075ad9ab259b2225b9b56d98593b73f60",
      "created_at": "2024-11-07T00:54:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15164034996,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOH2M-0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15164034996",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "89b1a1d830bff178ac1ee35ff39ed6b55bb5aa1a",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/89b1a1d830bff178ac1ee35ff39ed6b55bb5aa1a",
      "created_at": "2024-11-07T00:59:53Z"
    },
    {
      "event": "unlabeled",
      "id": 15165724918,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOH8pj2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15165724918",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T02:25:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15169496211,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOILCST",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15169496211",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1a4ad617529fa0d1833c0c260b0429a948e0374e",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/1a4ad617529fa0d1833c0c260b0429a948e0374e",
      "created_at": "2024-11-07T05:22:21Z"
    },
    {
      "event": "ready_for_review",
      "id": 15183787339,
      "node_id": "RFRE_lADOABII586bT0I_zwAAAAOJBjVL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15183787339",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T15:01:24Z"
    },
    {
      "event": "commented",
      "id": 2462468543,
      "node_id": "IC_kwDOABII586Sxkm_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462468543",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T15:05:31Z",
      "updated_at": "2024-11-07T15:05:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "@furszy I tried to switch to using a shared threadpool, but it is much slower that way. We need a way to have shared state between threads for this, instead of just scheduling tasks. I suppose the generic threadpool is great for scheduling independent tasks like indexing an individual block, but for quickly pulling outpoints off a shared vector it is not optimized well.\r\n\r\nFrom https://github.com/bitcoin/bitcoin/issues/29386:\r\n> I just [noticed the comment in the code](https://github.com/bitcoin/bitcoin/blob/9eeee7caa3f95ee17a645e12d330261f8e3c2dbf/doc/reduce-memory.md?plain=1#L37C1-L39C15):\r\n>>    For each thread a thread stack needs to be allocated. By default on Linux,\r\n    threads take up 8MiB for the thread stack on a 64-bit system, and 4MiB in a\r\n    32-bit system.\r\n\r\n> Only 8MiB of Virtual Memory is allocated, which doesn't really mean anything. Due to CoW mechanism, only the parts of stack that are being used will be allocated as Physical Memory which is the one that actually matters.\r\n\r\nSo, I don't think it matters much to have an extra threadpool owned by the input fetcher.\r\n\r\nI think this is ready for more review. I also added tests and a benchmark.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2462468543",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "mentioned",
      "id": 15183942257,
      "node_id": "MEE_lADOABII586bT0I_zwAAAAOJCJJx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15183942257",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T15:05:32Z"
    },
    {
      "event": "subscribed",
      "id": 15183942283,
      "node_id": "SE_lADOABII586bT0I_zwAAAAOJCJKL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15183942283",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T15:05:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15189550538,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOJXiXK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15189550538",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "910bf42e0065d205b50c2e1960c63e5f9b867d3a",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/910bf42e0065d205b50c2e1960c63e5f9b867d3a",
      "created_at": "2024-11-07T18:38:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15239155612,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOMUw-c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15239155612",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "66bbde0ec074c68ddc4145e2d3c33e877a8a132c",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/66bbde0ec074c68ddc4145e2d3c33e877a8a132c",
      "created_at": "2024-11-09T18:21:42Z"
    },
    {
      "event": "commented",
      "id": 2473948407,
      "node_id": "IC_kwDOABII586TdXT3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2473948407",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T15:28:15Z",
      "updated_at": "2024-11-13T15:28:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "For later blocks where cache misses are much more common, this change has an even bigger impact.\r\nThis benchmark report shows a 40% speedup measuring from blocks 840k to 850k. Also, compare flamegraphs of master and this branch, where the latter has 15 worker threads fetching coins from disk.\r\nhttps://bitcoin-dev-tools.github.io/benchcoin/results/pr-19/11798124132/index.html",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2473948407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 2480372333,
      "node_id": "IC_kwDOABII586T13pt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2480372333",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-16T03:35:49Z",
      "updated_at": "2024-11-16T03:35:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Even with just 2 worker threads, there is significant (~30%) speed improvement for syncing recent blocks.\r\nhttps://bitcoin-dev-tools.github.io/benchcoin/results/pr-19/11865650166/index.html",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2480372333",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15320436676,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORK0_E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15320436676",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "97e90b5ac5a5a83a9305b8c9573760996b069419",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/97e90b5ac5a5a83a9305b8c9573760996b069419",
      "created_at": "2024-11-16T03:40:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15320841157,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORMXvF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15320841157",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c38cf8f92fff1df5c40b3c10e699726adc68b535",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/c38cf8f92fff1df5c40b3c10e699726adc68b535",
      "created_at": "2024-11-16T07:52:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15322202672,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORRkIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322202672",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "faf19f18031ead55b1d441444a1b30b8de8bbfab",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/faf19f18031ead55b1d441444a1b30b8de8bbfab",
      "created_at": "2024-11-16T19:35:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15322230462,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORRq6-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322230462",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ea8e67ca7d8a76c87f9df3617ea287f339b3f44b",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/ea8e67ca7d8a76c87f9df3617ea287f339b3f44b",
      "created_at": "2024-11-16T19:45:00Z"
    },
    {
      "event": "commented",
      "id": 2480756343,
      "node_id": "IC_kwDOABII586T3VZ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2480756343",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-16T19:45:10Z",
      "updated_at": "2024-11-16T19:45:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33086747731</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2480756343",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 15322230898,
      "node_id": "LE_lADOABII586bT0I_zwAAAAORRrBy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322230898",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-16T19:45:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15322459653,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORSi4F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322459653",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "887ab0c0a12a12e5ebc91a98c6b3972a6bc29af4",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/887ab0c0a12a12e5ebc91a98c6b3972a6bc29af4",
      "created_at": "2024-11-16T20:56:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15322466773,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORSknV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322466773",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7ff688350de239d752a42d216b44fad75ec698a6",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/7ff688350de239d752a42d216b44fad75ec698a6",
      "created_at": "2024-11-16T20:58:46Z"
    },
    {
      "event": "unlabeled",
      "id": 15322621035,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAORTKRr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15322621035",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-16T21:38:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15323161161,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAORVOJJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15323161161",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "created_at": "2024-11-17T00:02:59Z"
    },
    {
      "event": "reviewed",
      "id": 2442755733,
      "node_id": "PRR_kwDOABII586RmX6V",
      "url": null,
      "actor": null,
      "commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-18T14:22:14Z",
      "author_association": "MEMBER",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2442755733",
      "submitted_at": "2024-11-18T14:22:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15335691084,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSFBNM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15335691084",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1fe34824cf75628e6b180e9ed5e6eb1b9ba98709",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/1fe34824cf75628e6b180e9ed5e6eb1b9ba98709",
      "created_at": "2024-11-18T14:54:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15336267654,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSHN-G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15336267654",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8b813495d132ff2390e039ac6cb321b82b51efd6",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/8b813495d132ff2390e039ac6cb321b82b51efd6",
      "created_at": "2024-11-18T15:33:59Z"
    },
    {
      "event": "commented",
      "id": 2483393645,
      "node_id": "IC_kwDOABII586UBZRt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2483393645",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T15:34:04Z",
      "updated_at": "2024-11-18T15:34:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33143571653</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2483393645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 15336268823,
      "node_id": "LE_lADOABII586bT0I_zwAAAAOSHOQX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15336268823",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T15:34:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15337346046,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSLVP-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15337346046",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "992c76f3bb1a2d091f7604208a09f94ceff75509",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/992c76f3bb1a2d091f7604208a09f94ceff75509",
      "created_at": "2024-11-18T16:49:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15338125165,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSOTdt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15338125165",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5e05539ee48d3d4786f573d05a6ba9e89a8e74f6",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/5e05539ee48d3d4786f573d05a6ba9e89a8e74f6",
      "created_at": "2024-11-18T17:54:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15338487303,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSPr4H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15338487303",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0875e93322ae53b2ac7d9418501f002da73b258b",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/0875e93322ae53b2ac7d9418501f002da73b258b",
      "created_at": "2024-11-18T18:25:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15338614667,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSQK-L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15338614667",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "28e739e557de92b287546b211f763bd890d00c2d",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/28e739e557de92b287546b211f763bd890d00c2d",
      "created_at": "2024-11-18T18:37:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15339145882,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSSMqa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15339145882",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "04b3f4529e804cfcdc79135a1929535b578860cd",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/04b3f4529e804cfcdc79135a1929535b578860cd",
      "created_at": "2024-11-18T19:26:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15339688166,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSURDm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15339688166",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7317d2056714047ff0a09c6f3bb62dccd6b56802",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/7317d2056714047ff0a09c6f3bb62dccd6b56802",
      "created_at": "2024-11-18T20:08:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15340495444,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOSXWJU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15340495444",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3a9553dbd55836c1a17583b4421f4dd9c8bd65cf",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/3a9553dbd55836c1a17583b4421f4dd9c8bd65cf",
      "created_at": "2024-11-18T21:24:26Z"
    },
    {
      "event": "unlabeled",
      "id": 15340858532,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOSYuyk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15340858532",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T22:03:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15349486168,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOS5pJY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15349486168",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02ae43e470ed16943ef8783dbc59784ac7e6bbb1",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/02ae43e470ed16943ef8783dbc59784ac7e6bbb1",
      "created_at": "2024-11-19T13:22:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15350958942,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOS_Qte",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15350958942",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d35740b5c63ceb2157518c572e76063f1d2968f2",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/d35740b5c63ceb2157518c572e76063f1d2968f2",
      "created_at": "2024-11-19T15:02:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15371196417,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOUMdgB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15371196417",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "24a523084d061020a94fc13709cb0c99862e6687",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/24a523084d061020a94fc13709cb0c99862e6687",
      "created_at": "2024-11-20T18:19:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15371454684,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOUNcjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15371454684",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "created_at": "2024-11-20T18:46:12Z"
    },
    {
      "event": "labeled",
      "id": 15371455548,
      "node_id": "LE_lADOABII586bT0I_zwAAAAOUNcw8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15371455548",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T18:46:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2489311955,
      "node_id": "IC_kwDOABII586UX-LT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2489311955",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T18:46:18Z",
      "updated_at": "2024-11-20T18:46:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33279820062</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2489311955",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "reviewed",
      "id": 2445676953,
      "node_id": "PRR_kwDOABII586RxhGZ",
      "url": null,
      "actor": null,
      "commit_id": "95e6b0d189b770af2d29fbdae93c5b34290848a7",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-20T18:48:56Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2445676953",
      "submitted_at": "2024-11-20T18:48:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15373145284,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOUT5TE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15373145284",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "530d615acaf2db1adcb5ec58e23dc4967ed5a028",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/530d615acaf2db1adcb5ec58e23dc4967ed5a028",
      "created_at": "2024-11-20T21:45:00Z"
    },
    {
      "event": "unlabeled",
      "id": 15373675774,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOUV6z-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15373675774",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T22:49:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15385044720,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOVBSbw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15385044720",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "934094ef5701e5d6d576a93cf511d9db0038e982",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/934094ef5701e5d6d576a93cf511d9db0038e982",
      "created_at": "2024-11-21T16:33:51Z"
    },
    {
      "event": "commented",
      "id": 2491818543,
      "node_id": "IC_kwDOABII586UhiIv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2491818543",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T17:12:26Z",
      "updated_at": "2024-11-21T17:12:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33335042693</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2491818543",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 15385588395,
      "node_id": "LE_lADOABII586bT0I_zwAAAAOVDXKr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15385588395",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T17:12:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15385659114,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOVDobq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15385659114",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0d79c3688597d98d28f1d5db1ecf5645e3cfbd49",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/0d79c3688597d98d28f1d5db1ecf5645e3cfbd49",
      "created_at": "2024-11-21T17:18:02Z"
    },
    {
      "event": "unsubscribed",
      "id": 15386015162,
      "node_id": "UE_lADOABII586bT0I_zwAAAAOVE_W6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15386015162",
      "actor": {
        "login": "jixi1991",
        "id": 5715530,
        "node_id": "MDQ6VXNlcjU3MTU1MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5715530?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jixi1991",
        "html_url": "https://github.com/jixi1991",
        "followers_url": "https://api.github.com/users/jixi1991/followers",
        "following_url": "https://api.github.com/users/jixi1991/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jixi1991/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jixi1991/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jixi1991/subscriptions",
        "organizations_url": "https://api.github.com/users/jixi1991/orgs",
        "repos_url": "https://api.github.com/users/jixi1991/repos",
        "events_url": "https://api.github.com/users/jixi1991/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jixi1991/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T17:48:23Z"
    },
    {
      "event": "unlabeled",
      "id": 15386239028,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOVF2A0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15386239028",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T18:06:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15405352594,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOWOwaS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15405352594",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "895e94bb76e227aa0e6c4d2f2fc00b7ef5d17066",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/895e94bb76e227aa0e6c4d2f2fc00b7ef5d17066",
      "created_at": "2024-11-22T23:46:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15411272108,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOWlVms",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15411272108",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a236c9ec3858e892276bb528a9d29cb3aa72bfb3",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/a236c9ec3858e892276bb528a9d29cb3aa72bfb3",
      "created_at": "2024-11-24T19:10:17Z"
    },
    {
      "event": "reviewed",
      "id": 2462618817,
      "node_id": "PRR_kwDOABII586SyJTB",
      "url": null,
      "actor": null,
      "commit_id": "a236c9ec3858e892276bb528a9d29cb3aa72bfb3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-26T20:55:39Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\nThis is nice. Although I have not yet benchmarked this branch, I also like @furszy's idea of having a general-purpose thread pool.\r\n\r\nI just have one test improvement comment, question and a nit after first pass of the PR",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2462618817",
      "submitted_at": "2024-11-26T20:55:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "labeled",
      "id": 15517599072,
      "node_id": "LE_lADOABII586bT0I_zwAAAAOc68Vg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15517599072",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T00:20:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15517806626,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOc7vAi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15517806626",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c2e3f6e8f23836d1f49201f0ede64e3749838a50",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/c2e3f6e8f23836d1f49201f0ede64e3749838a50",
      "created_at": "2024-12-04T00:54:40Z"
    },
    {
      "event": "commented",
      "id": 2515910524,
      "node_id": "IC_kwDOABII586V9b98",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2515910524",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T01:02:47Z",
      "updated_at": "2024-12-04T17:21:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased. Since #30039 reading inputs is much faster, so the effect of this is somewhat less significant (17% -> 10%). It's still a significant speedup though so still worth it. Especially for worst case where the cache is completely empty, like on startup or right after it gets flushed due to size.\r\n\r\nIt is also refactored significantly. The main thread now writes everything before notifying threads, and then joins in working. This lets us do significantly less work in the critical section and parallelize more checks.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2515910524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "renamed",
      "id": 15517864077,
      "node_id": "RTE_lADOABII586bT0I_zwAAAAOc79CN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15517864077",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T01:04:10Z",
      "rename": {
        "from": "validation: fetch block inputs on parallel threads ~17% faster IBD",
        "to": "validation: fetch block inputs on parallel threads 10% faster IBD"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15518016570,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOc8iQ6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15518016570",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9d33a3a28b7bc9b2957bb528cf40476d8bc8c7ce",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/9d33a3a28b7bc9b2957bb528cf40476d8bc8c7ce",
      "created_at": "2024-12-04T01:29:45Z"
    },
    {
      "event": "commented",
      "id": 2515966098,
      "node_id": "IC_kwDOABII586V9piS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2515966098",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T01:29:50Z",
      "updated_at": "2024-12-04T01:29:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33884531020</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2515966098",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 15518016992,
      "node_id": "LE_lADOABII586bT0I_zwAAAAOc8iXg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15518016992",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T01:29:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15518169523,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOc9Hmz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15518169523",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a544477011c40ee98a0c0254dfb968d6233ef811",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/a544477011c40ee98a0c0254dfb968d6233ef811",
      "created_at": "2024-12-04T01:56:23Z"
    },
    {
      "event": "unlabeled",
      "id": 15518350100,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOc9zsU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15518350100",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T02:24:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 15518493046,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOc-Wl2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15518493046",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T02:49:11Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 15534194608,
      "node_id": "LE_lADOABII586bT0I_zwAAAAOd6P-w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15534194608",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-05T00:37:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15534228148,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAOd6YK0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15534228148",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b2da76444613229e0bf5539596903ac3c1db3053",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/b2da76444613229e0bf5539596903ac3c1db3053",
      "created_at": "2024-12-05T00:43:37Z"
    },
    {
      "event": "unlabeled",
      "id": 15534948844,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAOd9IHs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15534948844",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-05T02:50:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "subscribed",
      "id": 16651261972,
      "node_id": "SE_lADOABII586bT0I_zwAAAAPgfhgU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16651261972",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-10T09:38:36Z"
    },
    {
      "event": "labeled",
      "id": 17939209498,
      "node_id": "LE_lADOABII586bT0I_zwAAAAQtQp0a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17939209498",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T17:18:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2957908956,
      "node_id": "IC_kwDOABII586wThvc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2957908956",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-10T07:02:30Z",
      "updated_at": "2025-06-10T07:02:30Z",
      "author_association": "MEMBER",
      "body": "Looks like the CI started failing, due to too many threads being launched in the functional tests with that parallelism? As the threads may open files, this could be hitting the max open files limit? Or maybe it is a different limit hit?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-2957908956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 3009101750,
      "node_id": "IC_kwDOABII586zWz-2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3009101750",
      "actor": {
        "login": "HowHsu",
        "id": 38499194,
        "node_id": "MDQ6VXNlcjM4NDk5MTk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38499194?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HowHsu",
        "html_url": "https://github.com/HowHsu",
        "followers_url": "https://api.github.com/users/HowHsu/followers",
        "following_url": "https://api.github.com/users/HowHsu/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HowHsu/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HowHsu/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HowHsu/subscriptions",
        "organizations_url": "https://api.github.com/users/HowHsu/orgs",
        "repos_url": "https://api.github.com/users/HowHsu/repos",
        "events_url": "https://api.github.com/users/HowHsu/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HowHsu/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T16:42:59Z",
      "updated_at": "2025-06-26T16:42:59Z",
      "author_association": "NONE",
      "body": "Hi folks, this looks great, since if all the `prevout coins` of all transactions of a block are loaded in advance, then the optimization in #32791 makes sense.",
      "user": {
        "login": "HowHsu",
        "id": 38499194,
        "node_id": "MDQ6VXNlcjM4NDk5MTk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38499194?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HowHsu",
        "html_url": "https://github.com/HowHsu",
        "followers_url": "https://api.github.com/users/HowHsu/followers",
        "following_url": "https://api.github.com/users/HowHsu/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HowHsu/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HowHsu/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HowHsu/subscriptions",
        "organizations_url": "https://api.github.com/users/HowHsu/orgs",
        "repos_url": "https://api.github.com/users/HowHsu/repos",
        "events_url": "https://api.github.com/users/HowHsu/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HowHsu/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3009101750",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 3302056248,
      "node_id": "IC_kwDOABII587E0WE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3302056248",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-17T09:09:12Z",
      "updated_at": "2025-09-17T09:09:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "What's the status here?",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3302056248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19756832559,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASZmVcv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19756832559",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7317d2056714047ff0a09c6f3bb62dccd6b56802",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/7317d2056714047ff0a09c6f3bb62dccd6b56802",
      "created_at": "2025-09-17T18:18:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19756953150,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASZmy4-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19756953150",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "743d2da0f8871afc194c63a394e1ded4c8e17990",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/743d2da0f8871afc194c63a394e1ded4c8e17990",
      "created_at": "2025-09-17T18:25:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19757566915,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASZpIvD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19757566915",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/688c03597afb0b76077f1ffc4608eef19481056e",
      "created_at": "2025-09-17T18:56:46Z"
    },
    {
      "event": "commented",
      "id": 3304494917,
      "node_id": "IC_kwDOABII587E9pdF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3304494917",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-17T20:38:24Z",
      "updated_at": "2025-09-17T20:38:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Looks like the CI started failing, due to too many threads being launched in the functional tests with that parallelism? As the threads may open files, this could be hitting the max open files limit? Or maybe it is a different limit hit?\r\n\r\nThanks, I added `-par=1` to all nodes spawned in `features_proxy.py` in 6980852416040bdddf111df3cea3ec50639f010a. That test spawns lots of nodes and block validation is not relevant to it.\r\n\r\n> What's the status here?\r\n\r\nRebased to fix silent conflicts and added the fix for `features_proxy.py`.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3304494917",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "commented",
      "id": 3316319902,
      "node_id": "IC_kwDOABII587Fqwae",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3316319902",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-21T22:57:47Z",
      "updated_at": "2025-10-02T02:52:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "I benchmarked the latest branch with default dbcache up to 912683. Results are a speedup of 14% - 5:07 vs 5:49.\r\n\r\n| Command | Mean [s] | Min [s] | Max [s] | Relative |\r\n|:---|---:|---:|---:|---:|\r\n| `echo 688c03597afb0b76077f1ffc4608eef19481056e && /usr/bin/time ./build/bin/bitcoind -printtoconsole=0 -connect=192.168.2.171 -stopatheight=912683` | 18430.672 ± 19.856 | 18416.631 | 18444.712 | 1.00 |\r\n| `echo 1444ed855f438f1270104fca259ce61b99ed5cdb && /usr/bin/time ./build/bin/bitcoind -printtoconsole=0 -connect=192.168.2.171 -stopatheight=912683` | 20937.219 ± 62.635 | 20892.929 | 20981.508 | 1.14 ± 0.00 |\r\n",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3316319902",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "renamed",
      "id": 19825003493,
      "node_id": "RTE_lADOABII586bT0I_zwAAAASdqYvl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19825003493",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-21T22:58:28Z",
      "rename": {
        "from": "validation: fetch block inputs on parallel threads 10% faster IBD",
        "to": "validation: fetch block inputs on parallel threads >10% faster IBD"
      }
    },
    {
      "event": "unlabeled",
      "id": 19831185263,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAASeB99v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19831185263",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-22T08:13:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3324906640,
      "node_id": "IC_kwDOABII587GLgyQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3324906640",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-23T17:18:05Z",
      "updated_at": "2025-09-23T17:25:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Did the same benchmark with 5000 dbcache and there is a 6% speedup :rocket: - 4:27 vs 4:44. Even with far fewer cache misses this change is still a benefit, and will continue to improve block connection speed as the blockchain and utxo set get bigger.\r\n\r\n| Command | Mean [s] | Min [s] | Max [s] | Relative |\r\n|:---|---:|---:|---:|---:|\r\n| `echo 688c03597afb0b76077f1ffc4608eef19481056e && /usr/bin/time ./build/bin/bitcoind -printtoconsole=0 -connect=192.168.2.171 -stopatheight=912683 -dbcache=5000` | 16021.047 ± 5.892 | 16016.881 | 16025.213 | 1.00 |\r\n| `echo 1444ed855f438f1270104fca259ce61b99ed5cdb && /usr/bin/time ./build/bin/bitcoind -printtoconsole=0 -connect=192.168.2.171 -stopatheight=912683 -dbcache=5000` | 17057.947 ± 42.032 | 17028.226 | 17087.668 | 1.06 ± 0.00 |",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3324906640",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "reviewed",
      "id": 3264568566,
      "node_id": "PRR_kwDOABII587ClVz2",
      "url": null,
      "actor": null,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-24T20:16:40Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-3264568566",
      "submitted_at": "2025-09-24T20:16:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "reviewed",
      "id": 2831320761,
      "node_id": "PRR_kwDOABII586owoa5",
      "url": null,
      "actor": null,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-29T16:18:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have re-reviewed the changes again lightly and did quite a few benchmarks on different platforms.\r\nThere were a lot of surprises, see my measurements:\r\n\r\n<details>\r\n<summary>rpi5-16 IBD from local node or & reindex-chainstate seem is ~27% faster</summary>\r\n\r\n```\r\nCOMMITS=\"688c03597afb0b76077f1ffc4608eef19481056e af8a366bd6a08d9362e69a89b0b89b5c94eb63ca\"; \\\r\nSTOP=915961; DBCACHE=450; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\r\n(echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done; echo \"\") && \\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --export-json \"$BASE_DIR/rdx-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\" \\\r\n  --parameter-list COMMIT ${COMMITS// /,} \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=1000 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log\" \\\r\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0\"\r\n\r\n\r\n688c03597a validation: fetch block inputs in parallel\r\naf8a366bd6 coins: allow emplacing non-dirty coins internally\r\n\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (abs ≡):        29732.695 s               [User: 60441.083 s, System: 5856.247 s]\r\n\r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n  Time (abs ≡):        37896.082 s               [User: 60968.810 s, System: 7062.414 s]\r\n\r\nRelative speed comparison\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n        1.27          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n\r\n---\r\n\r\nRetested it separately with:\r\n```\r\n# cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && time ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -connect=rpi5-16-3.local\r\n\r\ncat ../BitcoinData/debug.log | egrep 'height=0|height=916000'\r\n2025-09-25T17:03:06Z UpdateTip: new best=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f height=0 version=0x00000001 log2_work=32.000022 tx=1 date='2009-01-03T18:15:05Z' progress=0.000000 cache=0.3MiB(0txo)\r\n2025-09-26T01:02:56Z UpdateTip: new best=000000000000000000003ca9748080f4c3d1230ba9fa4bed66be6ded05f9b6e6 height=916000 version=0x2000e000 log2_work=95.840381 tx=1246369867 date='2025-09-23T07:22:08Z' progress=0.998966 cache=367.7MiB(2821413txo)\r\n7h 59m 50s\r\n```\r\n\r\n</details>\r\n\r\nDoing the same on an Intel i9 with SSD shows similar results\r\n\r\n<details>\r\n<summary>i9 with SSD, IBD from real peers/reindex-chainstate seem is 24%/25% faster for default memory, done in 6h/3.5h</summary>\r\n\r\n```\r\nCOMMITS=\"688c03597afb0b76077f1ffc4608eef19481056e af8a366bd6a08d9362e69a89b0b89b5c94eb63ca\"; \\\r\nSTOP=915961; DBCACHE=450; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\r\n(echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done; echo \"\") && \\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --export-json \"$BASE_DIR/rdx-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\" \\\r\n  --parameter-list COMMIT ${COMMITS// /,} \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=1000 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log\" \\\r\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0\"\r\n\r\n688c03597a validation: fetch block inputs in parallel\r\naf8a366bd6 coins: allow emplacing non-dirty coins internally\r\n\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (abs ≡):        12698.166 s               [User: 33794.242 s, System: 3015.471 s]\r\n\r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n  Time (abs ≡):        15928.708 s               [User: 28382.232 s, System: 2308.299 s]\r\n\r\nRelative speed comparison\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n        1.25          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n```\r\n\r\nand\r\n\r\n```\r\nCOMMITS=\"688c03597afb0b76077f1ffc4608eef19481056e af8a366bd6a08d9362e69a89b0b89b5c94eb63ca\"; \\\r\nSTOP=916000; DBCACHE=450; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\r\n(echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done; echo \"\") && \\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 3 \\\r\n  --export-json \"$BASE_DIR/ibd-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\" \\\r\n  --parameter-list COMMIT ${COMMITS// /,} \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -rf $DATA_DIR/*; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=1 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log && \\\r\n             grep -q 'height=0' $DATA_DIR/debug.log && grep -q 'height=$STOP' $DATA_DIR/debug.log\" \\\r\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -blocksonly -printtoconsole=0\"\r\n\r\n688c03597a validation: fetch block inputs in parallel\r\naf8a366bd6 coins: allow emplacing non-dirty coins internally\r\n\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (mean ± σ):     21484.108 s ± 1187.956 s    [User: 42976.944 s, System: 4356.289 s]\r\n  Range (min … max):   20112.390 s … 22175.559 s    3 runs\r\n\r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n  Time (mean ± σ):     26589.393 s ± 1171.370 s    [User: 36011.245 s, System: 3193.496 s]\r\n  Range (min … max):   25607.731 s … 27886.055 s    3 runs\r\n\r\nRelative speed comparison\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n        1.24 ±  0.09  COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n```\r\n\r\n</details>\r\n\r\nIncreasing the memory decreases the difference:\r\n\r\n<details>\r\n<summary>i9 reindex-chainstate seem is ~9% faster for default memory, done in 3.3h</summary>\r\n\r\nCOMMITS=\"688c03597afb0b76077f1ffc4608eef19481056e af8a366bd6a08d9362e69a89b0b89b5c94eb63ca\"; STOP=915961; DBCACHE=4500; CC=gcc; CXX=g++; BASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; (echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done; echo \"\") && hyperfine   --sort command   --runs 1   --export-json \"$BASE_DIR/rdx-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\"   --parameter-list COMMIT ${COMMITS// /,}   --prepare \"killall bitcoind 2>/dev/null; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=1000 -printtoconsole=0; sleep 20\"   --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log\"   \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0\"\r\n\r\n688c03597a validation: fetch block inputs in parallel\r\naf8a366bd6 coins: allow emplacing non-dirty coins internally\r\n\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (abs ≡):        11801.704 s               [User: 20216.598 s, System: 1181.879 s]\r\n\r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n  Time (abs ≡):        12916.432 s               [User: 17150.579 s, System: 747.711 s]\r\n\r\nRelative speed comparison\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n        1.09          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=915961 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n```\r\n</details>\r\n\r\nNote that the difference between small and big dbcache is also shrunk from 23% to 7.5%!\r\n\r\nChecked the same on an i7 with hdd, it seems the speedup is best on non-rotating disks, maybe we could consider reducing the parallelism in those cases:\r\n\r\n<details>\r\n<summary>i7 with HDD, IBD/reindex-chainstate seem is ~16% faster for default memory</summary>\r\n\r\n```\r\nCOMMITS=\"688c03597afb0b76077f1ffc4608eef19481056e af8a366bd6a08d9362e69a89b0b89b5c94eb63ca\"; \\\r\nSTOP=916000; DBCACHE=450; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\r\n(echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done; echo \"\") && \\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --export-json \"$BASE_DIR/rdx-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\" \\\r\n  --parameter-list COMMIT ${COMMITS// /,} \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=1000 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log && \\\r\n             grep -q 'height=0' $DATA_DIR/debug.log && grep -q 'height=$STOP' $DATA_DIR/debug.log\" \\\r\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0\"\r\n\r\n688c03597a validation: fetch block inputs in parallel\r\naf8a366bd6 coins: allow emplacing non-dirty coins internally\r\n\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (abs ≡):        35766.853 s               [User: 39688.514 s, System: 2853.808 s]\r\n\r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n  Time (abs ≡):        41355.517 s               [User: 35667.321 s, System: 2872.506 s]\r\n\r\nRelative speed comparison\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -reindex-chainstate -blockso$ly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n        1.16          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n```\r\nand\r\n```\r\nCOMMITS=\"688c03597afb0b76077f1ffc4608eef19481056e af8a366bd6a08d9362e69a89b0b89b5c94eb63ca\"; \\\r\nSTOP=916000; DBCACHE=450; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\r\n(echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done; echo \"\") && \\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --export-json \"$BASE_DIR/rdx-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\" \\\r\n  --parameter-list COMMIT ${COMMITS// /,} \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=1000 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log && \\\r\n             grep -q 'height=0' $DATA_DIR/debug.log && grep -q 'height=$STOP' $DATA_DIR/debug.log\" \\\r\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0\"\r\n\r\n688c03597a validation: fetch block inputs in parallel\r\naf8a366bd6 coins: allow emplacing non-dirty coins internally\r\n\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (abs ≡):        35766.853 s               [User: 39688.514 s, System: 2853.808 s]\r\n\r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n  Time (abs ≡):        41355.517 s               [User: 35667.321 s, System: 2872.506 s]\r\n\r\nRelative speed comparison\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -reindex-chainstate -blockso$ly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n        1.16          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n```\r\n\r\n</details>\r\n\r\nChecking the same on my M4 max laptop was the most surprising:\r\n<details>\r\n<summary>M4 max with SSD, IBD/reindex-chainstate seem is 290% faster for default memory</summary>\r\n\r\n```\r\nSTOP=916000; DBCACHE=450; \\\r\nDATA_DIR=\"/Users/lorinc/Library/Application\\ Support/Bitcoin\"; \\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --parameter-list COMMIT 688c03597afb0b76077f1ffc4608eef19481056e \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=1000 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"grep -q 'height=0' $DATA_DIR/debug.log && grep -q 'height=$STOP' $DATA_DIR/debug.log\" \\\r\n  \"./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0\"\r\n\r\nBenchmark 1: ./build/bin/bitcoind -datadir=/Users/lorinc/Library/Application\\ Support/Bitcoin -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n  Time (abs ≡):        20658.825 s               [User: 19679.918 s, System: 4763.490 s]\r\nBenchmark 1b: ./build/bin/bitcoind -datadir=/Users/lorinc/Library/Application\\ Support/Bitcoin -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n  Time (abs ≡):        20186.312 s               [User: 19481.126 s, System: 4716.728 s]\r\n\r\nBenchmark 2: ./build/bin/bitcoind -datadir=/Users/lorinc/Library/Application\\ Support/Bitcoin -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (abs ≡):        7131.178 s               [User: 17244.133 s, System: 12850.427 s]\r\nBenchmark 2b: ./build/bin/bitcoind -datadir=/Users/lorinc/Library/Application\\ Support/Bitcoin -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (abs ≡):        7180.762 s               [User: 17430.360 s, System: 12949.731 s\r\n\r\nRelative speed comparison\r\n        2.90          ./build/bin/bitcoind -datadir=/Users/lorinc/Library/Application\\ Support/Bitcoin -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = af8a366bd6a08d9362e69a89b0b89b5c94eb63ca)\r\n        1.00          ./build/bin/bitcoind -datadir=/Users/lorinc/Library/Application\\ Support/Bitcoin -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n```\r\n\r\nIt was hard to believe this was true, so I re-ran it a few times, and it was consistent.\r\n\r\n</details>\r\n\r\nI have tried -par=32 on my laptop as well - exactly the same speed:\r\n<details>\r\n<summary>-par=32</summary>\r\n\r\n```\r\nSTOP=916000; DBCACHE=450; \\\r\nDATA_DIR=\"/Users/lorinc/Library/Application\\ Support/Bitcoin\"; \\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --parameter-list COMMIT 688c03597afb0b76077f1ffc4608eef19481056e \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=1000 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"grep -q 'height=0' $DATA_DIR/debug.log && grep -q 'height=$STOP' $DATA_DIR/debug.log\" \\\r\n  \"./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -par=32\"\r\n\r\nBenchmark 1: ./build/bin/bitcoind -datadir=/Users/lorinc/Library/Application\\ Support/Bitcoin -stopatheight=916000 -dbcache=450 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -par=32 (COMMIT = 688c03597afb0b76077f1ffc4608eef19481056e)\r\n  Time (abs ≡):        7109.626 s               [User: 17210.848 s, System: 12938.964 s]\r\n```\r\nnote, the commit had:\r\n```\r\n      m_input_fetcher{/*batch_size=*/128, std::clamp(options.worker_threads_num, 0, 10 * MAX_SCRIPTCHECK_THREADS)},\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-2831320761",
      "submitted_at": "2025-09-29T16:16:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "reviewed",
      "id": 3280693697,
      "node_id": "PRR_kwDOABII587Di2nB",
      "url": null,
      "actor": null,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-29T16:17:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "<duplicate>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-3280693697",
      "submitted_at": "2025-09-29T16:17:05Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "reviewed",
      "id": 3280976253,
      "node_id": "PRR_kwDOABII587Dj7l9",
      "url": null,
      "actor": null,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-29T17:45:27Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#pullrequestreview-3280976253",
      "submitted_at": "2025-09-29T17:45:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
    },
    {
      "event": "commented",
      "id": 3356601737,
      "node_id": "IC_kwDOABII587IEa2J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3356601737",
      "actor": {
        "login": "Raimo33",
        "id": 104778891,
        "node_id": "U_kgDOBj7Miw",
        "avatar_url": "https://avatars.githubusercontent.com/u/104778891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Raimo33",
        "html_url": "https://github.com/Raimo33",
        "followers_url": "https://api.github.com/users/Raimo33/followers",
        "following_url": "https://api.github.com/users/Raimo33/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Raimo33/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Raimo33/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Raimo33/subscriptions",
        "organizations_url": "https://api.github.com/users/Raimo33/orgs",
        "repos_url": "https://api.github.com/users/Raimo33/repos",
        "events_url": "https://api.github.com/users/Raimo33/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Raimo33/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-01T14:23:57Z",
      "updated_at": "2025-10-01T14:23:57Z",
      "author_association": "NONE",
      "body": "Concept ACK",
      "user": {
        "login": "Raimo33",
        "id": 104778891,
        "node_id": "U_kgDOBj7Miw",
        "avatar_url": "https://avatars.githubusercontent.com/u/104778891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Raimo33",
        "html_url": "https://github.com/Raimo33",
        "followers_url": "https://api.github.com/users/Raimo33/followers",
        "following_url": "https://api.github.com/users/Raimo33/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Raimo33/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Raimo33/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Raimo33/subscriptions",
        "organizations_url": "https://api.github.com/users/Raimo33/orgs",
        "repos_url": "https://api.github.com/users/Raimo33/repos",
        "events_url": "https://api.github.com/users/Raimo33/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Raimo33/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3356601737",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20058361971,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASrklBz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20058361971",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4331168bd08d63a73a6e45c84a7513d01541f19a",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/4331168bd08d63a73a6e45c84a7513d01541f19a",
      "created_at": "2025-10-02T12:16:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20058563528,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASrlWPI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20058563528",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "928847cdfd1d7fc5158362e5bade86f48bbd7c9a",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/928847cdfd1d7fc5158362e5bade86f48bbd7c9a",
      "created_at": "2025-10-02T12:26:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20058731082,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASrl_JK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20058731082",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fe77ce977b40c8f24f641d33a15cc6eb73b1c3bb",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/fe77ce977b40c8f24f641d33a15cc6eb73b1c3bb",
      "created_at": "2025-10-02T12:33:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20059744050,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASrp2cy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20059744050",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9cdbb25a79a090a631d5684818767895021d1220",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/9cdbb25a79a090a631d5684818767895021d1220",
      "created_at": "2025-10-02T13:20:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20060123208,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASrrTBI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20060123208",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "created_at": "2025-10-02T13:37:28Z"
    },
    {
      "event": "commented",
      "id": 3361944949,
      "node_id": "IC_kwDOABII587IYzV1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3361944949",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-02T15:47:28Z",
      "updated_at": "2025-10-02T15:47:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated the input fetcher significantly:\n- uses counting_semaphores to synchronize threads instead of mutex + condvar.\n- stores tx + vin indexes in global vector instead of copying the COutPoints. The COutPoints are read from a global CBlock pointer.\n- The fetch queue counter is an atomic int instead of a mutex guarded int.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3361944949",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20084838906,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAStJlH6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20084838906",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "86a9f72f89690fdd052532b3f908ea6a6e95aa2e",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/86a9f72f89690fdd052532b3f908ea6a6e95aa2e",
      "created_at": "2025-10-03T15:58:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20084930245,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAStJ7bF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20084930245",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "28b249c899ded88ee0765eac20b330e63b42cdfa",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/28b249c899ded88ee0765eac20b330e63b42cdfa",
      "created_at": "2025-10-03T16:04:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20085086442,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAStKhjq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20085086442",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c6e8499550632f87d6517472038f545e72c173b5",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/c6e8499550632f87d6517472038f545e72c173b5",
      "created_at": "2025-10-03T16:14:00Z"
    },
    {
      "event": "commented",
      "id": 3366595565,
      "node_id": "IC_kwDOABII587Iqivt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3366595565",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-03T17:33:05Z",
      "updated_at": "2025-10-03T17:33:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Removed `m_batch_size`. Each thread now increments the atomic counter by 1.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3366595565",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20092301267,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAStmC_T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20092301267",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a8f9a806751b5755bdec5b096186f70c0bfddcfa",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/a8f9a806751b5755bdec5b096186f70c0bfddcfa",
      "created_at": "2025-10-03T23:44:01Z"
    },
    {
      "event": "commented",
      "id": 3367707177,
      "node_id": "IC_kwDOABII587IuyIp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3367707177",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-04T00:53:28Z",
      "updated_at": "2025-10-04T00:53:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "The latest version seems very promising, I like that the algorithms is getting simpler.\r\nI noticed that for small dbcache it has a very noticeable effect, but for very high dbcache this seems to add an extra cost - since we already have everything in the cache, so it just does useless work.\r\nI wonder if we could enable this fetching only after the very first time we [Flush](https://github.com/bitcoin/bitcoin/blob/17372d788e6ca6f5a8452acf88d6b7db4221cb7e/src/coins.cpp#L251) and erase, since it cannot help in any way before that.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3367707177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20097324062,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAASt5NQe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20097324062",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cf209da104d483aa064aa3bec621f1adc9574749",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/cf209da104d483aa064aa3bec621f1adc9574749",
      "created_at": "2025-10-04T15:53:30Z"
    },
    {
      "event": "commented",
      "id": 3378291849,
      "node_id": "IC_kwDOABII587JXKSJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3378291849",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T18:52:32Z",
      "updated_at": "2025-10-07T18:52:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Compared it against master on a Raspberry Pi 5 synchronizing from real peers for realism, ran it twice for good measure until 917000 blocks with dbcache 450:\r\n\r\nThis isn't the [latest version](https://github.com/bitcoin/bitcoin/compare/a8f9a806751b5755bdec5b096186f70c0bfddcfa..cf209da104d483aa064aa3bec621f1adc9574749) of the PR, but should likely be representative anyway.\r\n\r\n<details>\r\n<summary>First run: 19% faster, finished IBD in 13h:11m | IBD | 917000 blocks | dbcache 450 | rpi5-16-2 | aarch64 | Cortex-A76 | 4 cores | 15Gi RAM | ext4 | SSD</summary>\r\n\r\n```\r\nCOMMITS=\"a8f9a806751b5755bdec5b096186f70c0bfddcfa f0dc19f16826f68ef482acfb7b24e8bb7168fc51\"; \\\r\nSTOP=917000; DBCACHE=450; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\r\n(echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done) && \\\r\n(echo \"\" && echo \"IBD | ${STOP} blocks | dbcache ${DBCACHE} | $(hostname) | $(uname -m) | $(lscpu | grep 'Model name' | head -1 | cut -d: -f2 | xargs) | $(nproc) cores | $(free -h | awk '/^Mem:/{print $2}') RAM | $(df -T $BASE_DIR | awk 'NR==2{print $2}') | $(lsblk -no ROTA $(df --output=source $BASE_DIR | tail -1) | grep -q 0 && echo SSD || echo HDD)\"; echo \"\") &&\\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --export-json \"$BASE_DIR/ibd-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\" \\\r\n  --parameter-list COMMIT ${COMMITS// /,} \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -rf $DATA_DIR/*; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=1 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log && \\\r\n             grep -q 'height=0' $DATA_DIR/debug.log && grep -q 'height=$STOP' $DATA_DIR/debug.log\" \\\r\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -blocksonly -printtoconsole=0\"\r\n\r\na8f9a80675 validation: fetch block inputs in parallel\r\nf0dc19f168 coins: allow emplacing non-dirty coins internally\r\n\r\nIBD | 917000 blocks | dbcache 450 | rpi5-16-2 | aarch64 | Cortex-A76 | 4 cores | 15Gi RAM | ext4 | SSD\r\n\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=917000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = a8f9a806751b5755bdec5b096186f70c0bfddcfa)\r\n  Time (abs ≡):        47485.682 s               [User: 79615.847 s, System: 9374.261 s]\r\n \r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=917000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = f0dc19f16826f68ef482acfb7b24e8bb7168fc51)\r\n  Time (abs ≡):        56374.354 s               [User: 78807.079 s, System: 10196.290 s]\r\n \r\nRelative speed comparison\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=917000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = a8f9a806751b5755bdec5b096186f70c0bfddcfa)\r\n        1.19          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=917000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = f0dc19f16826f68ef482acfb7b24e8bb7168fc51)\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Second run: 21% faster, finished IBD in 12h:45m | IBD | 917000 blocks | dbcache 450 | rpi5-16-2 | aarch64 | Cortex-A76 | 4 cores | 15Gi RAM | ext4 | SSD</summary>\r\n\r\n```\r\nCOMMITS=\"a8f9a806751b5755bdec5b096186f70c0bfddcfa f0dc19f16826f68ef482acfb7b24e8bb7168fc51\"; \\\r\nSTOP=917000; DBCACHE=450; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\r\n(echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done) && \\\r\n(echo \"\" && echo \"IBD | ${STOP} blocks | dbcache ${DBCACHE} | $(hostname) | $(uname -m) | $(lscpu | grep 'Model name' | head -1 | cut -d: -f2 | xargs) | $(nproc) cores | $(free -h | awk '/^Mem:/{print $2}') RAM | $(df -T $BASE_DIR | awk 'NR==2{print $2}') | $(lsblk -no ROTA $(df --output=source $BASE_DIR | tail -1) | grep -q 0 && echo SSD || echo HDD)\"; echo \"\") &&\\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --export-json \"$BASE_DIR/ibd-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\" \\\r\n  --parameter-list COMMIT ${COMMITS// /,} \\\r\n  --prepare \"killall bitcoind 2>/dev/null; rm -rf $DATA_DIR/*; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_IPC=OFF && ninja -C build bitcoind -j2 && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=1 -printtoconsole=0; sleep 20\" \\\r\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log && \\\r\n             grep -q 'height=0' $DATA_DIR/debug.log && grep -q 'height=$STOP' $DATA_DIR/debug.log\" \\\r\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -blocksonly -printtoconsole=0\"\r\n\r\na8f9a80675 validation: fetch block inputs in parallel\r\nf0dc19f168 coins: allow emplacing non-dirty coins internally\r\n\r\nIBD | 917000 blocks | dbcache 450 | rpi5-16-2 | aarch64 | Cortex-A76 | 4 cores | 15Gi RAM | ext4 | SSD\r\n\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=917000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = a8f9a806751b5755bdec5b096186f70c0bfddcfa)\r\n  Time (abs ≡):        45907.874 s               [User: 81006.258 s, System: 10039.919 s]\r\n \r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=917000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = f0dc19f16826f68ef482acfb7b24e8bb7168fc51)\r\n  Time (abs ≡):        55612.464 s               [User: 81830.349 s, System: 11913.754 s]\r\n \r\nRelative speed comparison\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=917000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = a8f9a806751b5755bdec5b096186f70c0bfddcfa)\r\n        1.21          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=917000 -dbcache=450 -blocksonly -printtoconsole=0 (COMMIT = f0dc19f16826f68ef482acfb7b24e8bb7168fc51)\r\n```\r\n\r\n</details>\r\n\r\nThe variance between the runs shows 1% for master and 3% difference for the PR indicating that we're likely nearing the network bandwidth limitations.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3378291849",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20226498884,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAS1l-FE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20226498884",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3335d8d45571247184c33136ba30a83c20be4701",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/3335d8d45571247184c33136ba30a83c20be4701",
      "created_at": "2025-10-11T18:03:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20226508890,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAS1mAha",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20226508890",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45c8f0c0deac0af6faecc85c1c26c9498e782409",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/45c8f0c0deac0af6faecc85c1c26c9498e782409",
      "created_at": "2025-10-11T18:05:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20270952405,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAS4Pi_V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20270952405",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "44f07f8957d03cf4aa8b3aea533ed6c5de9ba043",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/44f07f8957d03cf4aa8b3aea533ed6c5de9ba043",
      "created_at": "2025-10-14T14:02:56Z"
    },
    {
      "event": "commented",
      "id": 3403508763,
      "node_id": "IC_kwDOABII587K3Wwb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3403508763",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T20:28:47Z",
      "updated_at": "2025-10-14T20:28:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I noticed that for small dbcache it has a very noticeable effect, but for very high dbcache this seems to add an extra cost - since we already have everything in the cache, so it just does useless work.\r\nI wonder if we could enable this fetching only after the very first time we [Flush](https://github.com/bitcoin/bitcoin/blob/17372d788e6ca6f5a8452acf88d6b7db4221cb7e/src/coins.cpp#L251) and erase, since it cannot help in any way before that.\r\n\r\n@l0rinc There is already quite a lot to review here, and your benchmarks (and mine) show very promising results. So, I would prefer to keep this idea as a follow-up. We can do isolated benchmarks with your suggested change afterwards and propose an improvement accordingly.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3403508763",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "mentioned",
      "id": 20278946868,
      "node_id": "MEE_lADOABII586bT0I_zwAAAAS4uCw0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278946868",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T20:28:48Z"
    },
    {
      "event": "subscribed",
      "id": 20278946906,
      "node_id": "SE_lADOABII586bT0I_zwAAAAS4uCxa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278946906",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T20:28:48Z"
    },
    {
      "event": "commented",
      "id": 3403611574,
      "node_id": "IC_kwDOABII587K3v22",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3403611574",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T21:04:25Z",
      "updated_at": "2025-10-14T21:05:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm fine with doing that in a follow-up if you think it's too complicated (though it's likely quite simple, we can just track the very first cache miss and always prefetch after that - that heuristic would even survive node restarts. Maybe we need to skip the Bip30 values though, but it's just a heuristic anyway).\r\nBut I don't yet see this PR as close to being final yet - do you? I still want to review it thoroughly, I don't think we should ossify yet :)",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#issuecomment-3403611574",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31132"
    },
    {
      "event": "labeled",
      "id": 20300777456,
      "node_id": "LE_lADOABII586bT0I_zwAAAAS6BUfw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20300777456",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-15T16:40:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA2Mzk0NmQ2YmQ3ODAzNTI3NmQxMmUwNzBhMjA4ZDg0NDkyYWM1Y2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/063946d6bd78035276d12e070a208d84492ac5cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/063946d6bd78035276d12e070a208d84492ac5cd",
      "tree": {
        "sha": "79a1f234b9a7ca81ca2c7826819fe0c0194636d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79a1f234b9a7ca81ca2c7826819fe0c0194636d5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 79a1f234b9a7ca81ca2c7826819fe0c0194636d5\nparent e14451ac87339ed61b8c872f027184a978dd96eb\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940717 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1760574617 -0400\n\ncoins: add inputfetcher\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmjwPJkACgkQYAB6/Ik4\nsBjmVhAAsv5p4OfU2tRc3p7our6Wftwv4Vv+s/mkIcYuK7dSByEX8dY07hf71MKk\n0zFK2DuZRZ6vzAZf9PLe/NF4QiKsnaEOcJ6j5QXVFF5wrFo8+C3rqXya0kB8drBG\n8a7jPg7Z2yEgmI6hhzVhOlSkXayVhgKAaopMS55XocTOfdp4JLuIRGYuy4gyYXFx\nhVXA7Q1dTdWCQYwIox+aOM0DBLh/euffye/e3NHiL5gSgy/sN4/kHWRlc4GWwy+m\ndsi8NNQwE7UskMi796xW9B61s7HEW3px4xhgeL3Xkw7Uoxq5gyO3G66mlXV9z4vH\nwVZbn9isgXB4HJ4p16x56VRZUGf2L23XMVzzFFvyiYO2JoF0b33TG4E0Y3S61XQ0\n3JJKCV/ZBqsS8FSWf12n82ih+gPCvXQU2VmcWvuspMlcDn7CorV0sSeu+AHRaYSx\nqrBgvfE2ySVkLMAS8Ooj3CNzU2TBKGJLK/ABlQimZdy/+IygbR0/6m/EnCa6zOPZ\nKS+60k4PFJtlJ3s+dpyQ10XaxwzW0PHnMVslhE6rrcLqK9EydgSO2btG7zCvglr8\n1LOjYYjc9PEdU/Qjgkf18S73glII0exvalsDg0fhtyVEerHHNOxYRobwNslcS0vJ\n1sXUjz/Or9xlvpRtkrdpsh8/DQEQU2Qo5C/nF6nxz37xHF4MqZg=\n=yGT5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e14451ac87339ed61b8c872f027184a978dd96eb",
          "sha": "e14451ac87339ed61b8c872f027184a978dd96eb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e14451ac87339ed61b8c872f027184a978dd96eb"
        }
      ],
      "message": "coins: add inputfetcher",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-10-16T00:30:17Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:51:57Z"
      },
      "sha": "063946d6bd78035276d12e070a208d84492ac5cd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUxY2Q5OGJkYTdmYTExNDBmZTE0YzcyNmM1ZGZiMmI4N2FkMTExOWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51cd98bda7fa1140fe14c726c5dfb2b87ad1119a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/51cd98bda7fa1140fe14c726c5dfb2b87ad1119a",
      "tree": {
        "sha": "4c88fe7a320adc9b248a69dce86f13248ab3f084",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c88fe7a320adc9b248a69dce86f13248ab3f084"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4c88fe7a320adc9b248a69dce86f13248ab3f084\nparent 063946d6bd78035276d12e070a208d84492ac5cd\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940728 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1760574617 -0400\n\ntests: add inputfetcher tests\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmjwPJkACgkQYAB6/Ik4\nsBiTlg/+K4uo0DJTqZJTGqmipnyistxw46kR5iEJ7Yf6doS2nzFtJ1ZTtAGL7rU3\ngbrYg2DQb+d+p2JNPjLWYAAetJEImJGl+z95JbEHimYNJDys5WndCWhPqw4IwN9K\neLpOfSOxWA2P8+11Wy+9NNfmjgryd55tCQ3pDEIIy9wanqeFR0jJ9ifKq9h9X/Tm\nh02oo4E2/8zuoRPt3KuC+q5gLwKC2T3JcSgTP9VevicGddM330PtOJozO2k4lol3\nlOZqABqn4ciLcuEB0hiIjA2V7VKOa6UUshZChNhVqufDJTHKwXSQ1fCe6IJ73msh\n1SOey7qTgTeEP1mBCGaTri+lBDJOcLuRJg2b77ToRxjk78rvPCW8oVqcqR8+7Wa6\na7BZvoh1uVNcLrPJzvW3TZU8cUZynPO8cm76AzaKePEXVvCySUNvzfQo5qYcoFvn\nsilLtjm76hJQY2i3jC3X6Uo2xSrDrg9yzpk505Isx/3Do3mFP5J49M6Gi+68dHVn\nGpwulineYgj+f5HLr+iZ+9mZ5kygPxcR4WvuHYkJlZBQA4cM5bo/QnXssAYQpuKj\nhAgQsPa1201v71AmKrP18I6lAMhW5EgGER7irRhMzQ2HCagCznWhophQXK8YRJBm\nM6TQQ5UY57wSGDpAY0m5/QAMKKbanjDyAaOrR9p0oLk/GvFcRpw=\n=cGkk\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/063946d6bd78035276d12e070a208d84492ac5cd",
          "sha": "063946d6bd78035276d12e070a208d84492ac5cd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/063946d6bd78035276d12e070a208d84492ac5cd"
        }
      ],
      "message": "tests: add inputfetcher tests",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-10-16T00:30:17Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:52:08Z"
      },
      "sha": "51cd98bda7fa1140fe14c726c5dfb2b87ad1119a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdlNDQyYTU0OGVhM2Q4ODUyNTNhZTZjNjY4YjAyNjk5NTU5MmI2MmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e442a548ea3d885253ae6c668b026995592b62d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7e442a548ea3d885253ae6c668b026995592b62d",
      "tree": {
        "sha": "7b1040935624f389544603b1c90f307fc35ad992",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b1040935624f389544603b1c90f307fc35ad992"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7b1040935624f389544603b1c90f307fc35ad992\nparent 51cd98bda7fa1140fe14c726c5dfb2b87ad1119a\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940738 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1760574617 -0400\n\nbench: add inputfetcher bench\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmjwPJkACgkQYAB6/Ik4\nsBgwLA//WpZplBzVlO5+x30fO29kAgJ7Mou0c55aGUoXvllWjo2+NOOJbZIhgv+v\nHq4TgPdJu61/GSX81Jw7967mJAv3fUI5I4X9JaVBQcPL4ki091FFg/aB64GXRMVV\nnHau7THz4C4h7VM2Qrqvcid4D29/IAcZ5opEbqFLN7OVWZeYIgdJRZh0USCLQnFe\nSJMIweMSV0b+7bMGerLLVpfozE9cHpjeiCGnQgjZqhDp5zzYJy4uPyGO0Fh+NaUB\n5jqOCJkDz78MdEB+qS0vUqAQdVIsWG3a5ukiM4FpoWK7n2M3tun8g1LAdd/TAVD/\nzfD8akg+P5gNJjUxEyBu0hDfCfFP+/Xggi9GUw0bcTvAr3Uh5EnvCf44jmUwqNXI\n3Zg/WDi82jUvg/zCiihfsHP43pznfPGWAoUpWotXdqmIMmWmnfRKF0NfZorD8Rrx\ns2MBGtbqgqzSVDRkCtSeqTkr3KN1wPNh3GbY8GxNvlicHQVPfNX9f6GYb7RkIl0i\nquyEVuukR0w9bzALU8Fi/DER2PxgmkAy68CQzu488oXErvZ4irLMtoAGeeKI8OuK\nI7dsd1Wue8QbBM7qlqS2T7x6eVZZEjgnJQkKs01aBSzr8krdtOfkyez/08bldX5Q\noRw8oLSg7goqc2Nqg5/Gbmh4Iyv7OGHjl25AsZW8RLqHu70gzcA=\n=9ku/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51cd98bda7fa1140fe14c726c5dfb2b87ad1119a",
          "sha": "51cd98bda7fa1140fe14c726c5dfb2b87ad1119a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/51cd98bda7fa1140fe14c726c5dfb2b87ad1119a"
        }
      ],
      "message": "bench: add inputfetcher bench",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-10-16T00:30:17Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:52:18Z"
      },
      "sha": "7e442a548ea3d885253ae6c668b026995592b62d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20307527136,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAS6bEXg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20307527136",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ace7f2446f4fc8c7d0acc0021e2b3db4720cd790",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/ace7f2446f4fc8c7d0acc0021e2b3db4720cd790",
      "created_at": "2025-10-16T00:31:23Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDllNmE3ZTVlNjU3ZjgzNGRmM2M2YTliYTFiNWM1ZDVlZDQ3NzQwMDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e6a7e5e657f834df3c6a9ba1b5c5d5ed4774003",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9e6a7e5e657f834df3c6a9ba1b5c5d5ed4774003",
      "tree": {
        "sha": "c707336c01d942e56e4ed95d3d7ccbfeca1e2d61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c707336c01d942e56e4ed95d3d7ccbfeca1e2d61"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c707336c01d942e56e4ed95d3d7ccbfeca1e2d61\nparent 7e442a548ea3d885253ae6c668b026995592b62d\nauthor Andrew Toth <andrewstoth@gmail.com> 1731785610 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1760575302 -0400\n\nfuzz: add inputfetcher fuzz harness\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmjwP0YACgkQYAB6/Ik4\nsBhbJw/9EPnFPoG7/FbsxF1SNEBhmR/OL4sMsjfK20HTn4bXL0Lp6Mnq12ucjwYU\nphk+QdYKZYuTSVU3dc901/xYxvMX95YoaxvR7STBXk2iLQtoYlcTl6qTmTqZPQtW\nvD+nHsd5E/yNYuqMIkV5GT9NxhnLoWL0ZOqIyvAabQf58p13nHqVNOY1ZGWfwGm4\naKeVGpCBEGzOc38pvYFh2EjxK4zkWbvdYyA8bwtwkrjxHaus08IvWwRffuY6xYp7\nuCT//krUWXygGpAo8T32CZdQovwvko5xw73uVlbOKuZadz+75adkbVv+B3wtCsph\nf427PpLiwqlzU7qotI3I23+T4Ep2AttXZiWy+49Rewn1wgVW01OYEMGIdlDSV89M\nxAfQ5n2IpGhFNkqG/HBczg40P7xyJKtiveg6bqpC8oTeGQ1Q7wNUDlng9Iq4t2IP\nKv1uZ8jOzSDSezZJ41wXx3gvbEEhF+Ffg+N82ud/Gg0SrKQeoFq9ftplMzuVGSJx\nVYrEIcd4M0FLSo5M0+/bFsouZ1yKfsjj2L+fXOCs86kPRQjiWMnA9E/FXeM2RX6g\nijqyPb9o1aOqpiiiwxsGJ1OdS5ihylGOB8ZU3VV14rg9W/JNq6DTota76gQI0LcW\nrT1hHjtwXwjdKE+g7xRVz6SkpoS8MICVx1rp7S7Hih6is73wBwE=\n=cgLU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e442a548ea3d885253ae6c668b026995592b62d",
          "sha": "7e442a548ea3d885253ae6c668b026995592b62d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7e442a548ea3d885253ae6c668b026995592b62d"
        }
      ],
      "message": "fuzz: add inputfetcher fuzz harness",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-10-16T00:41:42Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-16T19:33:30Z"
      },
      "sha": "9e6a7e5e657f834df3c6a9ba1b5c5d5ed4774003"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlhZGQwYzQ3MGJhNGEwN2RmZDYzMmE4Njc5MGI1YWI2ZjlkYThjNjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9add0c470ba4a07dfd632a86790b5ab6f9da8c66",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9add0c470ba4a07dfd632a86790b5ab6f9da8c66",
      "tree": {
        "sha": "377fa9c967863333bb3d2471c43fbcc03537bb7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/377fa9c967863333bb3d2471c43fbcc03537bb7b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 377fa9c967863333bb3d2471c43fbcc03537bb7b\nparent 9e6a7e5e657f834df3c6a9ba1b5c5d5ed4774003\nauthor Andrew Toth <andrewstoth@gmail.com> 1730940754 -0500\ncommitter Andrew Toth <andrewstoth@gmail.com> 1760575302 -0400\n\nvalidation: fetch block inputs via InputFetcher before connecting\n\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmjwP0YACgkQYAB6/Ik4\nsBgIfhAArUQh+yxGN1HHVK9MlccaD5bymR8epwOC08LIzNxMBm+/oWGaxNW+8B4X\n95YqJ1i7STUv905rGaPYOhcSVzq6h7jG+ngn/1ZhS6F3KBqKyQH1D/vMbXLdrC7m\nhVBKr/Rmu/qMTMxkYZpnWbRJPBc0q7NrjwPqqq6yLJgNxRhD3ZC2nMckIls+e7Gl\nq4h7xQPOgAOK8e9rKYeXIt2kcvGqy/Nnc2TP2leG7kvLUmUUDaV+oXwtHY3AYJf9\ncYIv1O7gsBtgxwyY4Ox+irelPscEMDrac9YaHFPVtB7aKDA6J2/iUFXh7UUQyY7J\nuP8PaA81lJgIusf6iM3ZlFvNxOPngklynsaw+ArlVsTuwzN1BkYwfyjJ0CUhVEhc\nfiE0z/V3lemJRcs3XARbB2y+H8ixcG3Emebz4bZjpk2GEOOtFCBt5SwU4CrymFo8\nojKIgJBYOZosPCK2SnbIIXZveAWYzog/4v1PxR793NscxInz+g2N9jjJH8UXqwR0\nGCDujvOafqRRPH8uOvLEB5YdTiWEnKKE4VBd3IvctJpLkrc3sfhNkmOsRaUwUC/h\n3Qgv3eIBxcHgYPTOikGxN+zMaP7rEJrM6U2pywVsIIq9n8c0kNL7QsQuq53ArRUC\nmJOo4s+aGJlrmIovBIVo2dq11LARLSEs0Vti4ohzndXnHEaVbtY=\n=MauC\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e6a7e5e657f834df3c6a9ba1b5c5d5ed4774003",
          "sha": "9e6a7e5e657f834df3c6a9ba1b5c5d5ed4774003",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9e6a7e5e657f834df3c6a9ba1b5c5d5ed4774003"
        }
      ],
      "message": "validation: fetch block inputs via InputFetcher before connecting",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-10-16T00:41:42Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2024-11-07T00:52:34Z"
      },
      "sha": "9add0c470ba4a07dfd632a86790b5ab6f9da8c66"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY0ZGU5MTEwNTMxMmQzNmRhZGI1ZjcxZWMwMWZjNmFmOWIxNGRhNjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64de91105312d36dadb5f71ec01fc6af9b14da69",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/64de91105312d36dadb5f71ec01fc6af9b14da69",
      "tree": {
        "sha": "05c7b17b500d4fdf2babfd9989d96c2b3ed344ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05c7b17b500d4fdf2babfd9989d96c2b3ed344ed"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 05c7b17b500d4fdf2babfd9989d96c2b3ed344ed\nparent 9add0c470ba4a07dfd632a86790b5ab6f9da8c66\nauthor Andrew Toth <andrewstoth@gmail.com> 1759593088 -0400\ncommitter Andrew Toth <andrewstoth@gmail.com> 1760575302 -0400\n\ncoins: fetch coins on parallel threads\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEISytpz6vNK/yCogaYAB6/Ik4sBgFAmjwP0YACgkQYAB6/Ik4\nsBg7Cg/+PlgYQRvTOjABouLwhtBdqdM4WNR6lZCnReu3sKKPtS68m4CP8ay19JgF\n5ClBfvGpzc2PVzz01Q5V8IkTIzW0FA76/x+V/xA8qwPWGX5mnMPii2YtX1yspR7p\nkOTddyX52dWXTtjoU7MqXLmDx4StJBIgbWEfj/S7oEs7XVe+qogFU9O/TA4Uk3xq\nmnLePuJS1jSCVCFG+x7ucGkEWIfZkGZqEWAVmGeTEnXq2Mrk3UITZ7f2oMJxBZRk\n6X2n41P/7pCRGcLdOaQ7vxjSealazOMm9bEUbFuuawwIPuSqtxBpEG38pQqm4DTx\nybF2wG9ExIidxdkE0TpW3VhLMOUgkKWg4fZSFpgteuKKDq0inLLf8QzzxsXYeial\nj04NuqPqK9VrTvDdQQRi1gLXyEG9Y52wJYX0dFaEla3K4QjtVB58xPu9Kdy8Dpiz\n+mZa/0Lo+Bwel9XbxxdII0aSBuHNm+HKCxHL3ZoWJuBgD2DlRfjVBd5A1YDCUQWV\nY1xkBJUFTPoVSX+E8StY8JCFPGHzype/f333kG5Ev4VAKsxoMw3wX0eM6b1zeAbM\nNDcfWPb6es43jUfHoUl1d8kGFijebyVoPsTqnjcaGcxfqzcYWAnrx53UHzlhB3s4\ndqrKAFTvRo8KIQOdjyZAVxU7Klspc8vYxz1t9BX2gEkoggyip80=\n=RjeW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9add0c470ba4a07dfd632a86790b5ab6f9da8c66",
          "sha": "9add0c470ba4a07dfd632a86790b5ab6f9da8c66",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9add0c470ba4a07dfd632a86790b5ab6f9da8c66"
        }
      ],
      "message": "coins: fetch coins on parallel threads",
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-10-16T00:41:42Z"
      },
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2025-10-04T15:51:28Z"
      },
      "sha": "64de91105312d36dadb5f71ec01fc6af9b14da69"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20307609389,
      "node_id": "HRFPE_lADOABII586bT0I_zwAAAAS6bYct",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20307609389",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "commit_url": "https://api.github.com/repos/andrewtoth/bitcoin/commits/64de91105312d36dadb5f71ec01fc6af9b14da69",
      "created_at": "2025-10-16T00:41:47Z"
    },
    {
      "event": "unlabeled",
      "id": 20307845082,
      "node_id": "UNLE_lADOABII586bT0I_zwAAAAS6cR_a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20307845082",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-16T01:12:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812440117",
      "pull_request_review_id": 2388117544,
      "id": 1812440117,
      "node_id": "PRRC_kwDOABII585sB6Q1",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 151,
      "commit_id": "45c8f0c0deac0af6faecc85c1c26c9498e782409",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Q: Is this a leftover a hack for non-owning LevelDB threads, or is this really the best way to name threads in a cross-platform way?",
      "created_at": "2024-10-23T10:26:47Z",
      "updated_at": "2024-10-23T13:27:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812440117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812440117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812531761",
      "pull_request_review_id": 2388117544,
      "id": 1812531761,
      "node_id": "PRRC_kwDOABII585sCQox",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 189,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're mostly creating the buckets randomly here, so each thread will need access to basically all of the keys.\r\nSince we have an idea of how LevelDB works here (i.e. Sorted String Table), we could likely improve cache locality (would likely be most beneficial on HDDs) and minimize lock contention by splitting the reads by sorted transactions instead.",
      "created_at": "2024-10-23T11:29:06Z",
      "updated_at": "2024-10-23T12:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812531761",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812531761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812534028",
      "pull_request_review_id": 2388117544,
      "id": 1812534028,
      "node_id": "PRRC_kwDOABII585sCRMM",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm wondering if we really need to (b)lock here or whether we could we create a [read-only snapshot](https://github.com/google/leveldb/blob/main/doc/index.md#snapshots) instead and avoid stalling?",
      "created_at": "2024-10-23T11:30:32Z",
      "updated_at": "2024-10-23T12:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812534028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812534028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812548418",
      "pull_request_review_id": 2388117544,
      "id": 1812548418,
      "node_id": "PRRC_kwDOABII585sCUtC",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher",
      "path": "src/inputfetcher.h",
      "position": 36,
      "original_position": 29,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I know it's not trivial request, but can we add a test for this class which fetches everything in parallel and sequentially and assert that the result is equivalent?\r\nAnd preferably also a benchmark, like we have it for https://github.com/bitcoin/bitcoin/blob/master/src/bench/checkqueue.cpp.\r\nI would gladly help here, if needed.",
      "created_at": "2024-10-23T11:39:06Z",
      "updated_at": "2024-10-23T12:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812548418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812548418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812560601",
      "pull_request_review_id": 2388117544,
      "id": 1812560601,
      "node_id": "PRRC_kwDOABII585sCXrZ",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 145,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For consistency (see: `explicit CCheckQueue(unsigned int batch_size, int worker_threads_num)`) and simplicity (`m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)}`, and to follow modern C++ directions where sizes seem to be preferred as signed values, see: https://github.com/bitcoin/bitcoin/pull/30927#discussion_r1766881296), please consider making these int(s) instead.",
      "created_at": "2024-10-23T11:46:37Z",
      "updated_at": "2024-10-23T12:47:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812560601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812560601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812599960",
      "pull_request_review_id": 2388117544,
      "id": 1812599960,
      "node_id": "PRRC_kwDOABII585sChSY",
      "diff_hunk": "@@ -6243,6 +6248,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, options.worker_threads_num},\n+      m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)},",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unlike the script checks, these fetches aren't CPU bound, there is no reason to provide the number of CPUs as the number of parallels threads.\r\nI don't know if we care about HDD performance here or not, but we can likely find a multiplier that makes this better for both SSD and HDD.\r\n\r\nQuoting from https://pkolaczk.github.io/disk-parallelism:\r\n> It was surprising to me that even 64 threads, which are far more than the number of CPU cores (4 physical, 8 virtual), still improved the performance. I guess that with requests of such a small size to such a fast storage, you need to submit really many of them to keep the SSD busy.\r\n\r\nIf we can provide a benchmark for this usecase we can likely find an optimal multiplier here - I won't nack but this part is very important for me.",
      "created_at": "2024-10-23T12:07:45Z",
      "updated_at": "2024-10-23T12:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812599960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812599960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812604307",
      "pull_request_review_id": 2388117544,
      "id": 1812604307,
      "node_id": "PRRC_kwDOABII585sCiWT",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 188,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would it be possible to create the batch sizes dynamically?\r\nSince the number of missing values differs for every block (and every dbcache size), it may not make more sense to calculate the optimal split instead of using the random value of 128.\r\nCoroutines might alleviate this problem.",
      "created_at": "2024-10-23T12:10:35Z",
      "updated_at": "2024-10-23T13:37:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812604307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812604307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812606720",
      "pull_request_review_id": 2388117544,
      "id": 1812606720,
      "node_id": "PRRC_kwDOABII585sCi8A",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));\n+                    buffer.clear();\n+                    buffer.reserve(m_batch_size);\n+                }\n+            }\n+            txids.insert(tx->GetHash());\n+        }\n+\n+        Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 197,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we always have leftovers or will this process the last batch twice (or process an empty one) if the batch happens to be divisible by batch_size?",
      "created_at": "2024-10-23T12:11:58Z",
      "updated_at": "2024-10-23T13:37:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812606720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812606720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812659221",
      "pull_request_review_id": 2388117544,
      "id": 1812659221,
      "node_id": "PRRC_kwDOABII585sCvwV",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 65,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're basically mimicking RocksDB's `MultiGet` here - but prewarming the cache instead in separate get requests, since we can't really access LevelDB's internals.\r\n\r\nSince splitting into buckets isn't trivial and since `MultiGet` seems to rely on C++20 [coroutines](https://en.cppreference.com/w/cpp/language/coroutines) (which wasn't available in 2012 when `CCheckQueue` was written), I'm wondering how much simpler this fetching would be if we had lightweight suspendible threads instead: https://rocksdb.org/blog/2022/10/07/asynchronous-io-in-rocksdb.html#multiget",
      "created_at": "2024-10-23T12:35:29Z",
      "updated_at": "2024-10-23T13:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812659221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812659221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812779405",
      "pull_request_review_id": 2388734949,
      "id": 1812779405,
      "node_id": "PRRC_kwDOABII585sDNGN",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812534028,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is blocking so we can access the queue of shared outpoints that we need to fetch from. It is not blocking for LevelDB, we access the db once we are out of the critical section.",
      "created_at": "2024-10-23T13:34:07Z",
      "updated_at": "2024-10-23T13:34:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812779405",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812779405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812781136",
      "pull_request_review_id": 2388740849,
      "id": 1812781136,
      "node_id": "PRRC_kwDOABII585sDNhQ",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher",
      "path": "src/inputfetcher.h",
      "position": 36,
      "original_position": 29,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812548418,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I can add these but I am waiting for some more conceptual support.",
      "created_at": "2024-10-23T13:35:04Z",
      "updated_at": "2024-10-23T13:35:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812781136",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812781136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812785573",
      "pull_request_review_id": 2388754731,
      "id": 1812785573,
      "node_id": "PRRC_kwDOABII585sDOml",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));\n+                    buffer.clear();\n+                    buffer.reserve(m_batch_size);\n+                }\n+            }\n+            txids.insert(tx->GetHash());\n+        }\n+\n+        Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 197,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812606720,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It won't process twice, but it could pass in an empty vector, which is ignored if you look at `Add` implementation.",
      "created_at": "2024-10-23T13:37:19Z",
      "updated_at": "2024-10-23T13:37:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812785573",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812785573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812794214",
      "pull_request_review_id": 2388768186,
      "id": 1812794214,
      "node_id": "PRRC_kwDOABII585sDQtm",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 65,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it would be similar in complexity, we would still need all the locking mechanisms to prevent multithreaded access.\r\n\r\nWhat would really be great is if we had a similar construction to Rust's `std::sync::mpsc`.",
      "created_at": "2024-10-23T13:40:49Z",
      "updated_at": "2024-10-23T13:40:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812794214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812794214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812797796",
      "pull_request_review_id": 2388773991,
      "id": 1812797796,
      "node_id": "PRRC_kwDOABII585sDRlk",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 188,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812604307,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure it would warrant the complexity I think this batch size is \"good enough\" for now. In a follow up we could maybe add ways to set this with configs to experiment if there really is more optimal settings.",
      "created_at": "2024-10-23T13:42:02Z",
      "updated_at": "2024-10-23T13:42:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812797796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812797796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812800076",
      "pull_request_review_id": 2388778745,
      "id": 1812800076,
      "node_id": "PRRC_kwDOABII585sDSJM",
      "diff_hunk": "@@ -6243,6 +6248,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, options.worker_threads_num},\n+      m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)},",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812599960,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Adding more threads will require more memory, which is one reason to not use many more.\r\n\r\nI did a benchmark using 64 threads on the same 16 vcore machine, and it was slightly slower :/",
      "created_at": "2024-10-23T13:43:08Z",
      "updated_at": "2024-10-23T13:43:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812800076",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812800076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812807883",
      "pull_request_review_id": 2388792724,
      "id": 1812807883,
      "node_id": "PRRC_kwDOABII585sDUDL",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 189,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812531761,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think there is any lock contention here if we are doing multithreaded reading?\r\n\r\nI also think what you're suggesting would add a lot more complexity to this PR, when this is \"good enough\".",
      "created_at": "2024-10-23T13:46:50Z",
      "updated_at": "2024-10-23T13:46:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812807883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812807883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812815888",
      "pull_request_review_id": 2388804635,
      "id": 1812815888,
      "node_id": "PRRC_kwDOABII585sDWAQ",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 151,
      "commit_id": "45c8f0c0deac0af6faecc85c1c26c9498e782409",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812440117,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unsure, copied from `CScriptCheck`. If the state of the art of thread naming has advanced since that was written, please let me know!",
      "created_at": "2024-10-23T13:49:23Z",
      "updated_at": "2024-10-23T13:49:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812815888",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812815888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812826580",
      "pull_request_review_id": 2388824311,
      "id": 1812826580,
      "node_id": "PRRC_kwDOABII585sDYnU",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 151,
      "commit_id": "45c8f0c0deac0af6faecc85c1c26c9498e782409",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812440117,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The C++ standard library does as far as I know have no way of renaming threads at all. `src/util/threadnames.{h,cpp}` is our wrapper around the various platform-dependent ways of doing so on supported systems.",
      "created_at": "2024-10-23T13:54:03Z",
      "updated_at": "2024-10-23T13:54:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812826580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812826580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812838378",
      "pull_request_review_id": 2388842458,
      "id": 1812838378,
      "node_id": "PRRC_kwDOABII585sDbfq",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 65,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you tell me why we need to prevent multithreaded access exactly? We could collect the values to different vectors, each one accessed only by a single thread and merge them into the cache at the end on a single thread, right?\r\n \r\n How would `mpsc` solve this better? Do you think we need work stealing to make it perfectly parallel? Wouldn't coroutines already achieve the same?",
      "created_at": "2024-10-23T13:58:56Z",
      "updated_at": "2024-10-23T13:58:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812838378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812838378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812842053",
      "pull_request_review_id": 2388848761,
      "id": 1812842053,
      "node_id": "PRRC_kwDOABII585sDcZF",
      "diff_hunk": "@@ -6243,6 +6248,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, options.worker_threads_num},\n+      m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)},",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812599960,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "4x may be too much to begin with, but 1.5-2x sounds plausible, I'll help with benchmarking this once my current batches finish.",
      "created_at": "2024-10-23T14:00:53Z",
      "updated_at": "2024-10-23T14:00:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812842053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812842053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812845859",
      "pull_request_review_id": 2388855957,
      "id": 1812845859,
      "node_id": "PRRC_kwDOABII585sDdUj",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 189,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812531761,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This might be as simple as sorting by tx before we create the buckets.",
      "created_at": "2024-10-23T14:02:34Z",
      "updated_at": "2024-10-23T14:02:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812845859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812845859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812849403",
      "pull_request_review_id": 2388859978,
      "id": 1812849403,
      "node_id": "PRRC_kwDOABII585sDeL7",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 151,
      "commit_id": "45c8f0c0deac0af6faecc85c1c26c9498e782409",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812440117,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you, please resolve the comment.",
      "created_at": "2024-10-23T14:03:52Z",
      "updated_at": "2024-10-23T14:03:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812849403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812849403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812852143",
      "pull_request_review_id": 2388864249,
      "id": 1812852143,
      "node_id": "PRRC_kwDOABII585sDe2v",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812534028,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As mentioned before, why do we need shared outpoints here?",
      "created_at": "2024-10-23T14:04:56Z",
      "updated_at": "2024-10-23T14:04:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812852143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812852143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812858116",
      "pull_request_review_id": 2388874771,
      "id": 1812858116,
      "node_id": "PRRC_kwDOABII585sDgUE",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 65,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't yet experimented with them, but as far as I understand it, coroutines are just programming paradigm, not magic; they don't do anything of their own, besides making things that were already possible easier to write. In particular, you still need a thread pool or some mechanism for scheduling how to run them,",
      "created_at": "2024-10-23T14:07:08Z",
      "updated_at": "2024-10-23T14:07:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812858116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812858116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812862679",
      "pull_request_review_id": 2388882032,
      "id": 1812862679,
      "node_id": "PRRC_kwDOABII585sDhbX",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 65,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> We could collect the values to different vectors, each one accessed only by a single thread and merge them into the cache at the end on a single thread\r\n\r\nIf the vectors are thread local, then how can the main thread access them at the end to write them? We also want to be writing throughout while the workers are fetching, not just at the end.\r\n\r\n> How would mpsc solve this better?\r\n\r\nInstead of each worker thread having a local queue of results, which they then append to the global results queue, they could just push each result to the channel individually. The main thread could just pull results off the channel as they arrive, instead of waiting to be awoken by a worker thread that appended all its results to the global queue.\r\n\r\n> work stealing\r\n\r\nThat is a concept for async rust, or `std::async::mpsc`. We can do all this without introducing an async runtime. But, this is getting off topic.",
      "created_at": "2024-10-23T14:09:31Z",
      "updated_at": "2024-10-23T14:09:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812862679",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812862679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812869347",
      "pull_request_review_id": 2388892235,
      "id": 1812869347,
      "node_id": "PRRC_kwDOABII585sDjDj",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {\n+                    Add(std::move(buffer));",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 189,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812531761,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If a benchmark shows that it is better, then great!",
      "created_at": "2024-10-23T14:12:37Z",
      "updated_at": "2024-10-23T14:17:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812869347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812869347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812874933",
      "pull_request_review_id": 2388902089,
      "id": 1812874933,
      "node_id": "PRRC_kwDOABII585sDka1",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812534028,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The main thread adds all outpoints to a global vector, which all workers will fetch their work from.",
      "created_at": "2024-10-23T14:15:35Z",
      "updated_at": "2024-10-23T14:17:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1812874933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812874933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813017536",
      "pull_request_review_id": 2389159040,
      "id": 1813017536,
      "node_id": "PRRC_kwDOABII585sEHPA",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 65,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> coroutines are just programming paradigm, not magic\r\n\r\nThat's also what I was counting on! :D\r\n\r\nIn RocksDB they have [high and low priority work](https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#parallelism-options) (I assume that's just added to the front or the back of a background work deque) – this could align well with @furszy's suggestion for mixing different kinds of background work units.\r\n\r\nI haven't used the C++ variant of coroutines either, but my thinking was that since they can theoretically yield execution when waiting for IO (and resume later), this would allow threads to focus on other tasks in the meantime. Combined with an appropriate scheduling mechanism (such as a thread pool), we could maximize both CPU and IO usage, if I'm not mistaken.\r\nInstead of each thread handling just one task, it could suspend a coroutine while waiting on IO (e.g., a database fetch) and resume it later, effectively maximizing CPU and IO work without needing to know the exact details of the work.\r\n\r\n> If the vectors are thread local\r\n\r\nThe vector would still be global, but each thread would only access a single bucket (i.e. global vector of vectors, with each thread from the pool writing only to `vector[thread_id]`, which contains a vector of fetched coins).\r\nWhen all the work is finished, we'd iterate over the global vector and merge the results into the cache on a single thread.\r\nAs mentioned, sorting the outpoints before fetching could help improve data locality and reduce lock contention, and the coroutines above would help with work stealing, ensuring that all threads finish roughly at the same time.\r\n\r\nIs there anything prohibiting us from doing something like this to minimize synchronization and lock contention during the fetch phase? I understand some synchronization would still be needed during the merge, but this could help reduce global locks and unnecessary synchronization throughout the process.\r\n",
      "created_at": "2024-10-23T15:15:39Z",
      "updated_at": "2024-10-23T15:18:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1813017536",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813017536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813041419",
      "pull_request_review_id": 2389202333,
      "id": 1813041419,
      "node_id": "PRRC_kwDOABII585sENEL",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 65,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I haven't used the C++ variant of coroutines either, but my thinking was that since they can theoretically yield execution when waiting for IO (and resume later), this would allow threads to focus on other tasks in the meantime.\r\n\r\nThat needs async I/O, and is unrelated to coroutines, as far as I understand it. Coroutines just help with keeping track of what to do when the reads come back inside rocksdb.\r\n\r\nAs long as LevelDB (or whatever database engine we use) internally does not use async I/O, there will be one (waiting) thread per parallel outstanding read request from the database.",
      "created_at": "2024-10-23T15:28:19Z",
      "updated_at": "2024-10-23T15:28:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1813041419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1813041419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832842632",
      "pull_request_review_id": 2421253359,
      "id": 1832842632,
      "node_id": "PRRC_kwDOABII585tPvWI",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (size_t n = 0; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop();\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache, const CCoinsViewDB& db, const CBlock& block) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        m_db = &db;\n+\n+        std::vector<COutPoint> buffer{};\n+        buffer.reserve(m_batch_size);\n+        std::set<Txid> txids{};\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) continue;\n+            for (const auto& in : tx->vin) {\n+                const auto& outpoint = in.prevout;\n+                // If an input references an outpoint from earlier in the\n+                // block, it won't be in the cache yet but it also won't be\n+                // in the db either.\n+                if (txids.contains(outpoint.hash)) {\n+                    continue;\n+                }\n+                if (cache.HaveCoinInCache(outpoint)) {\n+                    continue;\n+                }\n+\n+                buffer.emplace_back(outpoint);\n+                if (buffer.size() == m_batch_size) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 188,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812604307,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I changed the batch size to be number of workers.",
      "created_at": "2024-11-07T15:05:53Z",
      "updated_at": "2024-11-07T15:05:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1832842632",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832842632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832843082",
      "pull_request_review_id": 2421254123,
      "id": 1832843082,
      "node_id": "PRRC_kwDOABII585tPvdK",
      "diff_hunk": "@@ -6243,6 +6248,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, options.worker_threads_num},\n+      m_input_fetcher{/*batch_size=*/128, static_cast<size_t>(options.worker_threads_num)},",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812599960,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a benchmark to experiment with these.",
      "created_at": "2024-11-07T15:06:09Z",
      "updated_at": "2024-11-07T15:06:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1832843082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832843082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832843202",
      "pull_request_review_id": 2421254376,
      "id": 1832843202,
      "node_id": "PRRC_kwDOABII585tPvfC",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n+                // in_flight_fetches_count will only be truthy after first run.\n+                if (in_flight_fetches_count) {\n+                    if (m_pairs.empty()) {\n+                        m_pairs = std::move(pairs);\n+                    } else {\n+                        m_pairs.reserve(m_pairs.size() + pairs.size());\n+                        m_pairs.insert(m_pairs.end(), std::make_move_iterator(pairs.begin()),\n+                                       std::make_move_iterator(pairs.end()));\n+                    }\n+                    m_in_flight_fetches_count -= in_flight_fetches_count;\n+                    m_main_cv.notify_one();\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_outpoints.empty() && !m_request_stop) {\n+                    m_worker_cv.wait(lock);\n+                }\n+                if (m_request_stop) {\n+                    return;\n+                }\n+\n+                const auto even_bucket{m_in_flight_fetches_count / m_worker_threads.size()};\n+                in_flight_fetches_count = std::max(static_cast<size_t>(1),\n+                                                   std::min(std::min(m_outpoints.size(), m_batch_size), even_bucket));\n+                auto start_it = m_outpoints.end() - in_flight_fetches_count;\n+                outpoints.assign(std::make_move_iterator(start_it), std::make_move_iterator(m_outpoints.end()));\n+                m_outpoints.erase(start_it, m_outpoints.end());\n+            }\n+\n+            pairs.clear();\n+            pairs.reserve(outpoints.size());\n+            for (COutPoint& outpoint : outpoints) {\n+                Coin coin;\n+                if (!m_db->GetCoin(outpoint, coin)) {\n+                    // Missing an input, just break. This block will fail validation, so no point in continuing.\n+                    break;\n+                }\n+                pairs.emplace_back(std::move(outpoint), std::move(coin));\n+            }\n+        } while (true);\n+    }\n+\n+    //! Add a batch of outpoints to the queue\n+    void Add(std::vector<COutPoint>&& outpoints) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (outpoints.empty()) {\n+            return;\n+        }\n+\n+        const auto size{outpoints.size()};\n+        {\n+            LOCK(m_mutex);\n+            m_in_flight_fetches_count += outpoints.size();\n+            if (m_outpoints.empty()) {\n+                m_outpoints = std::move(outpoints);\n+            } else {\n+                m_outpoints.insert(m_outpoints.end(), std::make_move_iterator(outpoints.begin()), std::make_move_iterator(outpoints.end()));\n+            }\n+        }\n+\n+        if (size == 1) {\n+            m_worker_cv.notify_one();\n+        } else {\n+            m_worker_cv.notify_all();\n+        }\n+    }\n+\n+\n+public:\n+    //! Create a new input fetcher\n+    explicit InputFetcher(size_t batch_size, size_t worker_thread_count) noexcept",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 145,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812560601,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-11-07T15:06:14Z",
      "updated_at": "2024-11-07T15:06:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1832843202",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832843202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832844237",
      "pull_request_review_id": 2421256210,
      "id": 1832844237,
      "node_id": "PRRC_kwDOABII585tPvvN",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher",
      "path": "src/inputfetcher.h",
      "position": 36,
      "original_position": 29,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812548418,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added tests and benchmark.\r\nThe test has random parameters, one of which would be end up having a single worker thread.",
      "created_at": "2024-11-07T15:06:54Z",
      "updated_at": "2024-11-07T15:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1832844237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1832844237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1845238389",
      "pull_request_review_id": 2440804044,
      "id": 1845238389,
      "node_id": "PRRC_kwDOABII585t_Bp1",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher",
      "path": "src/inputfetcher.h",
      "position": 36,
      "original_position": 29,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812548418,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also added fuzz harness",
      "created_at": "2024-11-16T20:59:12Z",
      "updated_at": "2024-11-16T20:59:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1845238389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1845238389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846665944",
      "pull_request_review_id": 2442755733,
      "id": 1846665944,
      "node_id": "PRRC_kwDOABII585uEeLY",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <inputfetcher.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/transaction_identifier.h>\n+\n+#include <cstdint>\n+\n+FUZZ_TARGET(inputfetcher)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto batch_size{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 1024)};\n+    const auto worker_threads{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 15)};\n+    InputFetcher fetcher{batch_size, worker_threads};\n+\n+    CCoinsView dummy;\n+    CCoinsViewCache db(&dummy);\n+    CCoinsViewCache cache(&db);\n+\n+    CBlock block;\n+    Txid prevhash{Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))};\n+\n+    const auto txs{fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1,\n+        std::numeric_limits<uint32_t>::max())};\n+    for (uint32_t i{0}; i < txs; ++i) {",
      "path": "src/test/fuzz/inputfetcher.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This will create very long running inputs (e.g. txs = std::numeric_limits<uint32_t>::max()).\r\n\r\n```suggestion\r\n    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), N) {\r\n```\r\n\r\nor\r\n\r\n```suggestion\r\n    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes(), N) {\r\n```",
      "created_at": "2024-11-18T14:16:51Z",
      "updated_at": "2024-11-18T14:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1846665944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846665944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846667260",
      "pull_request_review_id": 2442755733,
      "id": 1846667260,
      "node_id": "PRRC_kwDOABII585uEef8",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <inputfetcher.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/transaction_identifier.h>\n+\n+#include <cstdint>\n+\n+FUZZ_TARGET(inputfetcher)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto batch_size{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 1024)};\n+    const auto worker_threads{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 15)};\n+    InputFetcher fetcher{batch_size, worker_threads};\n+\n+    CCoinsView dummy;\n+    CCoinsViewCache db(&dummy);\n+    CCoinsViewCache cache(&db);\n+\n+    CBlock block;\n+    Txid prevhash{Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))};\n+\n+    const auto txs{fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1,\n+        std::numeric_limits<uint32_t>::max())};\n+    for (uint32_t i{0}; i < txs; ++i) {\n+        CMutableTransaction tx;\n+\n+        const auto inputs{fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+        for (uint32_t j{0}; j < inputs; ++j) {",
      "path": "src/test/fuzz/inputfetcher.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same as above, this will create long running inputs and maybe even run out of memory?",
      "created_at": "2024-11-18T14:17:42Z",
      "updated_at": "2024-11-18T14:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1846667260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846667260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846954861",
      "pull_request_review_id": 2443219199,
      "id": 1846954861,
      "node_id": "PRRC_kwDOABII585uFktt",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <inputfetcher.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/transaction_identifier.h>\n+\n+#include <cstdint>\n+\n+FUZZ_TARGET(inputfetcher)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto batch_size{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 1024)};\n+    const auto worker_threads{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 15)};\n+    InputFetcher fetcher{batch_size, worker_threads};\n+\n+    CCoinsView dummy;\n+    CCoinsViewCache db(&dummy);\n+    CCoinsViewCache cache(&db);\n+\n+    CBlock block;\n+    Txid prevhash{Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))};\n+\n+    const auto txs{fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1,\n+        std::numeric_limits<uint32_t>::max())};\n+    for (uint32_t i{0}; i < txs; ++i) {",
      "path": "src/test/fuzz/inputfetcher.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "2bd5f0f03b19d1b71953ac51a5809014c232a497",
      "in_reply_to_id": 1846665944,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, done!",
      "created_at": "2024-11-18T17:04:07Z",
      "updated_at": "2024-11-18T17:04:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1846954861",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846954861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848485522",
      "pull_request_review_id": 2445676953,
      "id": 1848485522,
      "node_id": "PRRC_kwDOABII585uLaaS",
      "diff_hunk": "@@ -416,13 +416,14 @@ class CCoinsViewCache : public CCoinsViewBacked\n     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n     /**\n-     * Emplace a coin into cacheCoins without performing any checks, marking\n-     * the emplaced coin as dirty.\n+     * Emplace a coin into cacheCoins without performing any checks, optionally\n+     * marking the emplaced coin as dirty.",
      "path": "src/coins.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "3a4af5507146b015cc754195c89c70e1ad8404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this rather say \"optionally marking the emplaced coin as not dirty\", since the default is always dirty?",
      "created_at": "2024-11-19T14:38:21Z",
      "updated_at": "2024-11-20T18:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1848485522",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1848485522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850828070",
      "pull_request_review_id": 2449452592,
      "id": 1850828070,
      "node_id": "PRRC_kwDOABII585uUWUm",
      "diff_hunk": "@@ -416,13 +416,14 @@ class CCoinsViewCache : public CCoinsViewBacked\n     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n     /**\n-     * Emplace a coin into cacheCoins without performing any checks, marking\n-     * the emplaced coin as dirty.\n+     * Emplace a coin into cacheCoins without performing any checks, optionally\n+     * marking the emplaced coin as dirty.",
      "path": "src/coins.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "3a4af5507146b015cc754195c89c70e1ad8404cd",
      "in_reply_to_id": 1848485522,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure that's the best though, since we do not mark a coin as not dirty. That is the default state.\r\n\r\nWhat about\r\n\"marking the coin as dirty unless `set_dirty` is set to false\"?",
      "created_at": "2024-11-20T18:53:20Z",
      "updated_at": "2024-11-20T18:53:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1850828070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850828070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850853460",
      "pull_request_review_id": 2449493581,
      "id": 1850853460,
      "node_id": "PRRC_kwDOABII585uUchU",
      "diff_hunk": "@@ -416,13 +416,14 @@ class CCoinsViewCache : public CCoinsViewBacked\n     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n     /**\n-     * Emplace a coin into cacheCoins without performing any checks, marking\n-     * the emplaced coin as dirty.\n+     * Emplace a coin into cacheCoins without performing any checks, optionally\n+     * marking the emplaced coin as dirty.",
      "path": "src/coins.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "3a4af5507146b015cc754195c89c70e1ad8404cd",
      "in_reply_to_id": 1848485522,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That sounds good to me :+1: ",
      "created_at": "2024-11-20T19:15:26Z",
      "updated_at": "2024-11-20T19:15:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1850853460",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1850853460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851032146",
      "pull_request_review_id": 2449778426,
      "id": 1851032146,
      "node_id": "PRRC_kwDOABII585uVIJS",
      "diff_hunk": "@@ -416,13 +416,14 @@ class CCoinsViewCache : public CCoinsViewBacked\n     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n     /**\n-     * Emplace a coin into cacheCoins without performing any checks, marking\n-     * the emplaced coin as dirty.\n+     * Emplace a coin into cacheCoins without performing any checks, optionally\n+     * marking the emplaced coin as dirty.",
      "path": "src/coins.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "3a4af5507146b015cc754195c89c70e1ad8404cd",
      "in_reply_to_id": 1848485522,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-11-20T21:56:03Z",
      "updated_at": "2024-11-20T21:56:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1851032146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1851032146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859189838",
      "pull_request_review_id": 2462618817,
      "id": 1859189838,
      "node_id": "PRRC_kwDOABII585u0PxO",
      "diff_hunk": "@@ -0,0 +1,200 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <string>\n+#include <unordered_set>\n+\n+BOOST_AUTO_TEST_SUITE(inputfetcher_tests)\n+\n+struct InputFetcherTest : BasicTestingSetup {\n+    CBlock CreateBlock(int32_t num_txs)\n+    {\n+        CBlock block;\n+        CMutableTransaction coinbase;\n+        coinbase.vin.emplace_back();\n+        block.vtx.push_back(MakeTransactionRef(coinbase));\n+\n+        Txid prevhash{Txid::FromUint256(uint256(1))};\n+\n+        for (auto i{1}; i < num_txs; ++i) {\n+            CMutableTransaction tx;\n+            const auto txid{m_rng.randbool() ? Txid::FromUint256(uint256(i)) : prevhash};\n+            tx.vin.emplace_back(COutPoint(txid, 0));\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        return block;\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_CASE(fetch_inputs, InputFetcherTest)\n+{\n+    SeedRandomForTest(SeedRand::ZEROS);\n+\n+    const auto cores{GetNumCores()};\n+    const auto num_txs{m_rng.randrange(cores * 10)};\n+    const auto block{CreateBlock(num_txs)};\n+    const auto batch_size{m_rng.randrange<int32_t>(block.vtx.size() * 2)};\n+    const auto worker_threads{m_rng.randrange(cores * 2)};\n+    InputFetcher fetcher{batch_size, worker_threads};",
      "path": "src/test/inputfetcher_tests.cpp",
      "position": 1,
      "original_position": 55,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "3c201bcffc1d7e382e8afa9a88750a4c261c1cf8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 3c201bcffc1d7e382e8afa9a88750a4c261c1cf8 \"tests: add inputfetcher tests\"\r\nYou can set this up in `InputFetcherTest` so that you don't have to repeat it in the rest of the tests.",
      "created_at": "2024-11-26T20:31:21Z",
      "updated_at": "2024-11-26T20:55:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1859189838",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859189838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859192217",
      "pull_request_review_id": 2462618817,
      "id": 1859192217,
      "node_id": "PRRC_kwDOABII585u0QWZ",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <bench/data/block413567.raw.h>\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util/time.h>\n+\n+static constexpr auto QUEUE_BATCH_SIZE{128};",
      "path": "src/bench/inputfetcher.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "2349ac7d6071746a80223358bce0d5e556b277d7",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 2349ac7d6071746a80223358bce0d5e556b277d7 \"bench: add inputfetcher bench\"\r\nHow did you select this batch size?",
      "created_at": "2024-11-26T20:33:51Z",
      "updated_at": "2024-11-26T20:55:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1859192217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859192217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859204841",
      "pull_request_review_id": 2462618817,
      "id": 1859204841,
      "node_id": "PRRC_kwDOABII585u0Tbp",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <bench/data/block413567.raw.h>\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util/time.h>\n+\n+static constexpr auto QUEUE_BATCH_SIZE{128};\n+static constexpr auto DELAY{2ms};\n+\n+//! Simulates a DB by adding a delay when calling GetCoin\n+class DelayedCoinsView : public CCoinsView",
      "path": "src/bench/inputfetcher.cpp",
      "position": 18,
      "original_position": 19,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "2349ac7d6071746a80223358bce0d5e556b277d7",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 2349ac7d6071746a80223358bce0d5e556b277d7 \"bench: add inputfetcher bench\"\r\nnit: will be nice if we have `block413567` input's data that we can read so that we dont have to simulate this.",
      "created_at": "2024-11-26T20:47:18Z",
      "updated_at": "2024-11-26T20:55:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1859204841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1859204841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868551853",
      "pull_request_review_id": 2477040586,
      "id": 1868551853,
      "node_id": "PRRC_kwDOABII585vX9at",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        size_t in_flight_fetches_count{0};\n+        std::vector<std::pair<COutPoint, Coin>> pairs{};\n+        do {\n+            std::vector<COutPoint> outpoints{};\n+            outpoints.reserve(m_batch_size);\n+            {\n+                WAIT_LOCK(m_mutex, lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812534028,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We no longer need to block on the shared outpoints vector. We write to it once in the main thread before notifying the other threads and then only read from it afterwards.",
      "created_at": "2024-12-04T00:56:57Z",
      "updated_at": "2024-12-04T00:56:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1868551853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868551853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868552609",
      "pull_request_review_id": 2477041647,
      "id": 1868552609,
      "node_id": "PRRC_kwDOABII585vX9mh",
      "diff_hunk": "@@ -0,0 +1,200 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+#include <util/transaction_identifier.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <string>\n+#include <unordered_set>\n+\n+BOOST_AUTO_TEST_SUITE(inputfetcher_tests)\n+\n+struct InputFetcherTest : BasicTestingSetup {\n+    CBlock CreateBlock(int32_t num_txs)\n+    {\n+        CBlock block;\n+        CMutableTransaction coinbase;\n+        coinbase.vin.emplace_back();\n+        block.vtx.push_back(MakeTransactionRef(coinbase));\n+\n+        Txid prevhash{Txid::FromUint256(uint256(1))};\n+\n+        for (auto i{1}; i < num_txs; ++i) {\n+            CMutableTransaction tx;\n+            const auto txid{m_rng.randbool() ? Txid::FromUint256(uint256(i)) : prevhash};\n+            tx.vin.emplace_back(COutPoint(txid, 0));\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        return block;\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_CASE(fetch_inputs, InputFetcherTest)\n+{\n+    SeedRandomForTest(SeedRand::ZEROS);\n+\n+    const auto cores{GetNumCores()};\n+    const auto num_txs{m_rng.randrange(cores * 10)};\n+    const auto block{CreateBlock(num_txs)};\n+    const auto batch_size{m_rng.randrange<int32_t>(block.vtx.size() * 2)};\n+    const auto worker_threads{m_rng.randrange(cores * 2)};\n+    InputFetcher fetcher{batch_size, worker_threads};",
      "path": "src/test/inputfetcher_tests.cpp",
      "position": 1,
      "original_position": 55,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "3c201bcffc1d7e382e8afa9a88750a4c261c1cf8",
      "in_reply_to_id": 1859189838,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-12-04T00:58:01Z",
      "updated_at": "2024-12-04T00:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1868552609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868552609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868552959",
      "pull_request_review_id": 2477042136,
      "id": 1868552959,
      "node_id": "PRRC_kwDOABII585vX9r_",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <bench/data/block413567.raw.h>\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util/time.h>\n+\n+static constexpr auto QUEUE_BATCH_SIZE{128};",
      "path": "src/bench/inputfetcher.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "2349ac7d6071746a80223358bce0d5e556b277d7",
      "in_reply_to_id": 1859192217,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is the hardcoded batch size used in CheckQueue. Not sure why that was selected, but I deferred to previous choices.",
      "created_at": "2024-12-04T00:58:35Z",
      "updated_at": "2024-12-04T00:58:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1868552959",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868552959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868553486",
      "pull_request_review_id": 2477042938,
      "id": 1868553486,
      "node_id": "PRRC_kwDOABII585vX90O",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <bench/data/block413567.raw.h>\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util/time.h>\n+\n+static constexpr auto QUEUE_BATCH_SIZE{128};\n+static constexpr auto DELAY{2ms};\n+\n+//! Simulates a DB by adding a delay when calling GetCoin\n+class DelayedCoinsView : public CCoinsView",
      "path": "src/bench/inputfetcher.cpp",
      "position": 18,
      "original_position": 19,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "2349ac7d6071746a80223358bce0d5e556b277d7",
      "in_reply_to_id": 1859204841,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're reading the previous outpoints of that block's inputs, which are in many other previous blocks. So, not sure this is feasible.",
      "created_at": "2024-12-04T00:59:31Z",
      "updated_at": "2024-12-04T00:59:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r1868553486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868553486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2083465171",
      "pull_request_review_id": 2831320761,
      "id": 2083465171,
      "node_id": "PRRC_kwDOABII5858LyfT",
      "diff_hunk": "@@ -3195,6 +3195,8 @@ bool Chainstate::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew,\n     LogDebug(BCLog::BENCH, \"  - Load block from disk: %.2fms\\n\",\n              Ticks<MillisecondsDouble>(time_2 - time_1));\n     {\n+        m_chainman.GetInputFetcher().FetchInputs(CoinsTip(), CoinsDB(), blockConnecting);",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "b2da76444613229e0bf5539596903ac3c1db3053",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we let the objects do the job instead of querying their internals and doing it ourselves (\"tell, don't ask\"):\r\n```suggestion\r\n        m_chainman.FetchInputs(CoinsTip(), CoinsDB(), blockConnecting);\r\n```",
      "created_at": "2025-05-11T09:26:33Z",
      "updated_at": "2025-09-29T17:13:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2083465171",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2083465171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2173389714",
      "pull_request_review_id": 2968760335,
      "id": 2173389714,
      "node_id": "PRRC_kwDOABII586Bi0uS",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/threadnames.h>\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread pushes batches of outpoints\n+ * onto the queue, where they are fetched by N worker threads. The resulting\n+ * coins are pushed onto another queue after they are read from disk. When\n+ * the main is done adding outpoints, it starts writing the results of the read\n+ * queue to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    //! The queue of outpoints to be fetched from disk.\n+    //! As the order of outpoints doesn't matter, it is used as a LIFO (stack)\n+    std::vector<COutPoint> m_outpoints GUARDED_BY(m_mutex){};\n+\n+    //! The queue of pairs to be written to the cache.\n+    std::vector<std::pair<COutPoint, Coin>> m_pairs GUARDED_BY(m_mutex){};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that are no longer queued, but still in the\n+     * worker's own batches.\n+     */\n+    size_t m_in_flight_fetches_count GUARDED_BY(m_mutex){0};\n+\n+    //! The maximum number of outpoints to be processed in one batch\n+    const size_t m_batch_size;\n+\n+    //! DB to fetch from.\n+    const CCoinsViewDB* m_db{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    /** Internal function that does the fetching from disk. */\n+    void Loop() noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 65,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "e9e23b59f8eedb8dfae75aa660328299fba92b50",
      "in_reply_to_id": 1812659221,
      "user": {
        "login": "HowHsu",
        "id": 38499194,
        "node_id": "MDQ6VXNlcjM4NDk5MTk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38499194?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HowHsu",
        "html_url": "https://github.com/HowHsu",
        "followers_url": "https://api.github.com/users/HowHsu/followers",
        "following_url": "https://api.github.com/users/HowHsu/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HowHsu/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HowHsu/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HowHsu/subscriptions",
        "organizations_url": "https://api.github.com/users/HowHsu/orgs",
        "repos_url": "https://api.github.com/users/HowHsu/repos",
        "events_url": "https://api.github.com/users/HowHsu/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HowHsu/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": " > Is there anything prohibiting us from doing something like this to minimize synchronization and lock contention during the fetch phase? I understand some synchronization would still be needed during the merge, but this could help reduce global locks and unnecessary synchronization throughout the process.\r\n \r\n As far as I know, the advantage of coroutines over threads is faster context switching, since it doesn’t go through the operating system kernel. This advantage only becomes apparent under extremely high concurrency, such as hundreds of thousands of concurrent tasks. Using coroutines does not eliminate the need for synchronization mechanisms where they are inherently required.\r\n\r\n\r\n",
      "created_at": "2025-06-28T16:06:38Z",
      "updated_at": "2025-06-28T16:06:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2173389714",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2173389714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376962309",
      "pull_request_review_id": 3264568566,
      "id": 2376962309,
      "node_id": "PRRC_kwDOABII586NrZEF",
      "diff_hunk": "@@ -136,6 +136,9 @@ def setup_nodes(self):\n         if self.have_unix_sockets:\n             args[5] = ['-listen', f'-proxy=unix:{socket_path}']\n             args[6] = ['-listen', f'-onion=unix:{socket_path}']\n+        # Keep validation threads low to avoid CI thread/pid limits.\n+        # Ensure even empty arg lists get '-par=1'.\n+        args = [a + ['-par=1'] if a else ['-par=1'] for a in args]",
      "path": "test/functional/feature_proxy.py",
      "position": 1,
      "original_position": 6,
      "commit_id": "c6e8499550632f87d6517472038f545e72c173b5",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "seems a bit odd to have the number of  nodes in a test influence whether or not the test has to be edited to remove or add `-par=1` everywhere. Would it not be easier to just globally set `-par=2` for all funtional tests?\r\n\r\n\r\n```diff\r\ndiff --git a/test/functional/test_framework/util.py b/test/functional/test_framework/util.py\r\nindex e5a5938f07..42bb213dd3 100644\r\n--- a/test/functional/test_framework/util.py\r\n+++ b/test/functional/test_framework/util.py\r\n@@ -459,6 +459,7 @@ def write_config(config_path, *, n, chain, extra_config=\"\", disable_autoconnect=\r\n         f.write(\"printtoconsole=0\\n\")\r\n         f.write(\"natpmp=0\\n\")\r\n         f.write(\"shrinkdebugfile=0\\n\")\r\n+        f.write(\"par=2\\n\")\r\n         # To improve SQLite wallet performance so that the tests don't timeout, use -unsafesqlitesync\r\n         f.write(\"unsafesqlitesync=1\\n\")\r\n         if disable_autoconnect:\r\n",
      "created_at": "2025-09-24T20:16:40Z",
      "updated_at": "2025-09-24T20:16:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2376962309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376962309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2377071137",
      "pull_request_review_id": 3264725425,
      "id": 2377071137,
      "node_id": "PRRC_kwDOABII586Nrzoh",
      "diff_hunk": "@@ -136,6 +136,9 @@ def setup_nodes(self):\n         if self.have_unix_sockets:\n             args[5] = ['-listen', f'-proxy=unix:{socket_path}']\n             args[6] = ['-listen', f'-onion=unix:{socket_path}']\n+        # Keep validation threads low to avoid CI thread/pid limits.\n+        # Ensure even empty arg lists get '-par=1'.\n+        args = [a + ['-par=1'] if a else ['-par=1'] for a in args]",
      "path": "test/functional/feature_proxy.py",
      "position": 1,
      "original_position": 6,
      "commit_id": "c6e8499550632f87d6517472038f545e72c173b5",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2376962309,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I wondered if that would be more invasive to other tests though.",
      "created_at": "2025-09-24T21:01:37Z",
      "updated_at": "2025-09-24T21:01:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2377071137",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2377071137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2378064596",
      "pull_request_review_id": 3266228181,
      "id": 2378064596,
      "node_id": "PRRC_kwDOABII586NvmLU",
      "diff_hunk": "@@ -136,6 +136,9 @@ def setup_nodes(self):\n         if self.have_unix_sockets:\n             args[5] = ['-listen', f'-proxy=unix:{socket_path}']\n             args[6] = ['-listen', f'-onion=unix:{socket_path}']\n+        # Keep validation threads low to avoid CI thread/pid limits.\n+        # Ensure even empty arg lists get '-par=1'.\n+        args = [a + ['-par=1'] if a else ['-par=1'] for a in args]",
      "path": "test/functional/feature_proxy.py",
      "position": 1,
      "original_position": 6,
      "commit_id": "c6e8499550632f87d6517472038f545e72c173b5",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2376962309,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It disables the auto-detection for all functional tests by default, which I can't really find a downside to. Also, it removes idle \"spam\" threads while debugging (gdb and other tools will display less script check threads), which also seems beneficial to have?",
      "created_at": "2025-09-25T07:42:08Z",
      "updated_at": "2025-09-25T07:42:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2378064596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2378064596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2384229679",
      "pull_request_review_id": 3275004800,
      "id": 2384229679,
      "node_id": "PRRC_kwDOABII586OHHUv",
      "diff_hunk": "@@ -136,6 +136,9 @@ def setup_nodes(self):\n         if self.have_unix_sockets:\n             args[5] = ['-listen', f'-proxy=unix:{socket_path}']\n             args[6] = ['-listen', f'-onion=unix:{socket_path}']\n+        # Keep validation threads low to avoid CI thread/pid limits.\n+        # Ensure even empty arg lists get '-par=1'.\n+        args = [a + ['-par=1'] if a else ['-par=1'] for a in args]",
      "path": "test/functional/feature_proxy.py",
      "position": 1,
      "original_position": 6,
      "commit_id": "c6e8499550632f87d6517472038f545e72c173b5",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2376962309,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Makes sense. Done here https://github.com/bitcoin/bitcoin/pull/33485.",
      "created_at": "2025-09-27T16:09:48Z",
      "updated_at": "2025-09-27T16:09:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2384229679",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2384229679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388213294",
      "pull_request_review_id": 2831320761,
      "id": 2388213294,
      "node_id": "PRRC_kwDOABII586OWT4u",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 145,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: is there anything in the error that we may want to log?",
      "created_at": "2025-09-29T14:31:49Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388213294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388213294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388218975",
      "pull_request_review_id": 2831320761,
      "id": 2388218975,
      "node_id": "PRRC_kwDOABII586OWVRf",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 107,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't reviewed it in detail but was wondering why we need locking here, it should be possible to do most of this lock free (especially if we sort the keys first so that threads are more likely to access different regions). I have started reviewing and testing it in detail, but to have some progress I'm sharing my observations as I go along",
      "created_at": "2025-09-29T14:33:42Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388218975",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388218975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388224454",
      "pull_request_review_id": 2831320761,
      "id": 2388224454,
      "node_id": "PRRC_kwDOABII586OWWnG",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "instead of the comment, can we express this in the method name?",
      "created_at": "2025-09-29T14:35:05Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388224454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388224454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388236852",
      "pull_request_review_id": 2831320761,
      "id": 2388236852,
      "node_id": "PRRC_kwDOABII586OWZo0",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;",
      "path": "src/inputfetcher.h",
      "position": 75,
      "original_position": 79,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have tried `std::jthread` in [l0rinc/bitcoin@`6afe2e8` (#40)](https://github.com/l0rinc/bitcoin/pull/40/commits/6afe2e878046703cd71b166a3cf0e53ccd12e478#diff-b1e19192258d83199d8adaa5ac31f067af98f63554bfdd679bd8e8073815e69dR1363) but it seems the CI's libc++ doesn’t provide it\r\n\r\nQ: it's just the second commit and we're already doing the fetching on multiple threads. Can we add a single-threaded input fetcher first and add multithreading only as the very last step?",
      "created_at": "2025-09-29T14:38:56Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388236852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388236852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388250227",
      "pull_request_review_id": 2831320761,
      "id": 2388250227,
      "node_id": "PRRC_kwDOABII586OWc5z",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "what if instead of locking we just iterate every `n`th element (where `n` is the thread index), implicitly dividing the input into `n` buckets without locking. Each thread would work on a distinct set of values - we can pre-filter for existing values on a single thread before forking off. This won't have work stealing, but we can likely assume uniform distribution and the solution would be trivial and lock free.",
      "created_at": "2025-09-29T14:42:49Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388250227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388250227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388256954",
      "pull_request_review_id": 2831320761,
      "id": 2388256954,
      "node_id": "PRRC_kwDOABII586OWei6",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};",
      "path": "src/inputfetcher.h",
      "position": 71,
      "original_position": 77,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could we pre-filter on a single tread and send the results to the fetcher instead? That way we can also decide not to do multi-threaded access for small sets (we can experiment with the values, but we can probably start with set size < nproc should be done on a single thread).",
      "created_at": "2025-09-29T14:44:35Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388256954",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388256954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388258759",
      "pull_request_review_id": 2831320761,
      "id": 2388258759,
      "node_id": "PRRC_kwDOABII586OWe_H",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "4331168bd08d63a73a6e45c84a7513d01541f19a",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: the curse of long review queues\n```suggestion\n// Copyright (c) 2025-present The Bitcoin Core developers\n```",
      "created_at": "2025-09-29T14:45:09Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388258759",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388258759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388269800",
      "pull_request_review_id": 2831320761,
      "id": 2388269800,
      "node_id": "PRRC_kwDOABII586OWhro",
      "diff_hunk": "@@ -423,12 +423,13 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     /**\n      * Emplace a coin into cacheCoins without performing any checks, marking\n-     * the emplaced coin as dirty.\n+     * the emplaced coin as dirty unless `set_dirty` is `false`.\n      *\n-     * NOT FOR GENERAL USE. Used only when loading coins from a UTXO snapshot.\n+     * NOT FOR GENERAL USE. Used when loading coins from a UTXO snapshot, and\n+     * in the InputFetcher.\n      * @sa ChainstateManager::PopulateAndValidateSnapshot()\n      */\n-    void EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin);\n+    void EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin, bool set_dirty = true);",
      "path": "src/coins.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "44f07f8957d03cf4aa8b3aea533ed6c5de9ba043",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "to peel away the preparatory commits, it would simplify review to extract these into tiny, focused PRs - to have some progress, since this PR is in review for some time, but it's a very good change that I'd like to have some progress on.\r\n\r\nnit: I understand the default param is meant to make the diff smaller, but it doesn't help with understanding the effect of the change, to see where this is used and what we're changing",
      "created_at": "2025-09-29T14:48:50Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388269800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388269800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388273122",
      "pull_request_review_id": 2831320761,
      "id": 2388273122,
      "node_id": "PRRC_kwDOABII586OWifi",
      "diff_hunk": "@@ -110,10 +110,15 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n            (bool)it->second.coin.IsCoinBase());\n }\n \n-void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin) {\n-    cachedCoinsUsage += coin.DynamicMemoryUsage();\n+void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin, bool set_dirty) {\n+    const auto mem_usage{coin.DynamicMemoryUsage()};",
      "path": "src/coins.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "44f07f8957d03cf4aa8b3aea533ed6c5de9ba043",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "af8a366bd6a08d9362e69a89b0b89b5c94eb63ca\r\nI had something similar in https://github.com/bitcoin/bitcoin/pull/32313/files#diff-f0ed73d62dae6ca28ebd3045e5fc0d5d02eaaacadb4c2a292985a3fbd7e1c77cR254\r\n\r\nCan you please explain in the commit message why this change is necessary?",
      "created_at": "2025-09-29T14:49:52Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388273122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388273122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 114,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388275122",
      "pull_request_review_id": 2831320761,
      "id": 2388275122,
      "node_id": "PRRC_kwDOABII586OWi-y",
      "diff_hunk": "@@ -6266,6 +6268,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, std::clamp(options.worker_threads_num, 0, MAX_SCRIPTCHECK_THREADS)},\n+      m_input_fetcher{/*batch_size=*/128, std::clamp(options.worker_threads_num, 0, MAX_SCRIPTCHECK_THREADS)},",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have tested this with different `par` values and surprisingly it barely had any effect. Is it because of the locking?\n\n",
      "created_at": "2025-09-29T14:50:31Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388275122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388275122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388297125",
      "pull_request_review_id": 2831320761,
      "id": 2388297125,
      "node_id": "PRRC_kwDOABII586OWoWl",
      "diff_hunk": "@@ -110,10 +110,15 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n            (bool)it->second.coin.IsCoinBase());\n }\n \n-void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin) {\n-    cachedCoinsUsage += coin.DynamicMemoryUsage();\n+void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin, bool set_dirty) {\n+    const auto mem_usage{coin.DynamicMemoryUsage()};\n     auto [it, inserted] = cacheCoins.try_emplace(std::move(outpoint), std::move(coin));\n-    if (inserted) CCoinsCacheEntry::SetDirty(*it, m_sentinel);\n+    if (inserted) {\n+        cachedCoinsUsage += mem_usage;",
      "path": "src/coins.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "44f07f8957d03cf4aa8b3aea533ed6c5de9ba043",
      "original_commit_id": "af8a366bd6a08d9362e69a89b0b89b5c94eb63ca",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this seems like a change in behavior, but it assumed that the coin was never in the cache - though `if (inserted)` didn't help with understanding this, so it likely isn't.\r\n\r\nIs that still something that we can assume - hence the \"danger\", right?\r\nAnd if it's always inserted, does the insertion guard still make sense? It's a bit even more confusing now :/",
      "created_at": "2025-09-29T14:57:23Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388297125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388297125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 118,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388303800",
      "pull_request_review_id": 2831320761,
      "id": 2388303800,
      "node_id": "PRRC_kwDOABII586OWp-4",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * Helper for fetching inputs from the CoinsDB and inserting into the CoinsTip.\r\n```",
      "created_at": "2025-09-29T14:59:38Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388303800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388303800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388307927",
      "pull_request_review_id": 2831320761,
      "id": 2388307927,
      "node_id": "PRRC_kwDOABII586OWq_X",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we need to write to a global vector or can we safely iterate the prevouts directly from each thread?",
      "created_at": "2025-09-29T15:00:53Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388307927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388307927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388318316",
      "pull_request_review_id": 2831320761,
      "id": 2388318316,
      "node_id": "PRRC_kwDOABII586OWths",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 83,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Q: do we really need the main thread to be part of this? I expect this to be disk bound and not CPU restricted, we should be able to go beyond `nproc`, so it should be safe to leave the main thread out of this as far as I can tell...",
      "created_at": "2025-09-29T15:04:17Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388318316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388318316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388399879",
      "pull_request_review_id": 2831320761,
      "id": 2388399879,
      "node_id": "PRRC_kwDOABII586OXBcH",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 130,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "as mentioned before I think it should be safe to pre-filter on a single thread instead",
      "created_at": "2025-09-29T15:28:53Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388399879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388399879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388409573",
      "pull_request_review_id": 2831320761,
      "id": 2388409573,
      "node_id": "PRRC_kwDOABII586OXDzl",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 127,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "what if this ends up on different threads, i.e. a spend from an earlier outpoint processed on a different thread? Wouldn't we take care of those automatically? We can likely skip all values that are not found, since we will revalidate everything after this cache warming call - we just have to document that it's theoretically possible that some values won't be in the cache after this call (though the internal spends should be added, just in a different thread, right?).",
      "created_at": "2025-09-29T15:31:41Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388409573",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388409573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388412343",
      "pull_request_review_id": 2831320761,
      "id": 2388412343,
      "node_id": "PRRC_kwDOABII586OXEe3",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 136,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we really care about this, it's not our job here to validate, just fetch whatever we can, the validation will happen after this pre-warming.",
      "created_at": "2025-09-29T15:32:29Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388412343",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388412343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388419154",
      "pull_request_review_id": 2831320761,
      "id": 2388419154,
      "node_id": "PRRC_kwDOABII586OXGJS",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {\n+                // Database error. This will be handled later in validation.\n+                // Skip remaining outpoints and continue so main thread\n+                // can proceed.\n+                LOCK(m_mutex);\n+                m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                m_last_outpoint_index = 0;\n+            }\n+        } while (true);\n+    }\n+\n+public:\n+\n+    //! Create a new input fetcher\n+    explicit InputFetcher(int32_t batch_size, int32_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        if (worker_thread_count < 1) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 162,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "what's the reason for allowing negative `worker_thread_count`? In other cases I think it was used to signal how many CPUs to reserve, but that doesn't seem to be the case here, and since we're claming to min of 0, consider:\r\n```suggestion\r\n        if (worker_thread_count == 0) {\r\n```",
      "created_at": "2025-09-29T15:34:56Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388419154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388419154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388427056",
      "pull_request_review_id": 2831320761,
      "id": 2388427056,
      "node_id": "PRRC_kwDOABII586OXIEw",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {\n+                // Database error. This will be handled later in validation.\n+                // Skip remaining outpoints and continue so main thread\n+                // can proceed.\n+                LOCK(m_mutex);\n+                m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                m_last_outpoint_index = 0;\n+            }\n+        } while (true);\n+    }\n+\n+public:\n+\n+    //! Create a new input fetcher\n+    explicit InputFetcher(int32_t batch_size, int32_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        if (worker_thread_count < 1) {\n+            // Don't do anything if there are no worker threads.\n+            return;\n+        }\n+        m_pairs.reserve(worker_thread_count + 1);\n+        for (auto n{0}; n < worker_thread_count + 1; ++n) {\n+            m_pairs.emplace_back();\n+        }\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (auto n{0}; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop(n);\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache,\n+                     const CCoinsView& db,\n+                     const CBlock& block) noexcept\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (m_worker_threads.empty() || block.vtx.size() <= 1) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 192,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we maybe do something like this instead?\r\n```suggestion\r\n        if (block.vtx.size() < m_worker_threads.size()) {\r\n```",
      "created_at": "2025-09-29T15:37:35Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388427056",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388427056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388430113",
      "pull_request_review_id": 2831320761,
      "id": 2388430113,
      "node_id": "PRRC_kwDOABII586OXI0h",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {\n+                // Database error. This will be handled later in validation.\n+                // Skip remaining outpoints and continue so main thread\n+                // can proceed.\n+                LOCK(m_mutex);\n+                m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                m_last_outpoint_index = 0;\n+            }\n+        } while (true);\n+    }\n+\n+public:\n+\n+    //! Create a new input fetcher\n+    explicit InputFetcher(int32_t batch_size, int32_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        if (worker_thread_count < 1) {\n+            // Don't do anything if there are no worker threads.\n+            return;\n+        }\n+        m_pairs.reserve(worker_thread_count + 1);\n+        for (auto n{0}; n < worker_thread_count + 1; ++n) {\n+            m_pairs.emplace_back();\n+        }\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (auto n{0}; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop(n);\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache,\n+                     const CCoinsView& db,\n+                     const CBlock& block) noexcept\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (m_worker_threads.empty() || block.vtx.size() <= 1) {\n+            return;\n+        }\n+\n+        // Set the db and cache to use for this block.\n+        m_db = &db;\n+        m_cache = &cache;",
      "path": "src/inputfetcher.h",
      "position": 152,
      "original_position": 198,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we avoid mutating the state in a multithreaded class for safety? It's easier to follow along knowing that the class is immutable and the state is passed along...",
      "created_at": "2025-09-29T15:38:31Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388430113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388430113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": 151,
      "original_start_line": 197,
      "start_side": "RIGHT",
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388436958",
      "pull_request_review_id": 2831320761,
      "id": 2388436958,
      "node_id": "PRRC_kwDOABII586OXKfe",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <primitives/transaction_identifier.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <unordered_set>\n+\n+BOOST_AUTO_TEST_SUITE(inputfetcher_tests)\n+\n+struct InputFetcherTest : BasicTestingSetup {\n+private:\n+    std::unique_ptr<InputFetcher> m_fetcher{nullptr};\n+    std::unique_ptr<CBlock> m_block{nullptr};\n+\n+    CBlock CreateBlock(int32_t num_txs)\n+    {\n+        CBlock block;\n+        CMutableTransaction coinbase;\n+        coinbase.vin.emplace_back();\n+        block.vtx.push_back(MakeTransactionRef(coinbase));\n+\n+        Txid prevhash{Txid::FromUint256(uint256(1))};\n+\n+        for (auto i{1}; i < num_txs; ++i) {\n+            CMutableTransaction tx;\n+            const auto txid{m_rng.randbool() ? Txid::FromUint256(uint256(i)) : prevhash};\n+            tx.vin.emplace_back(COutPoint(txid, 0));\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        return block;\n+    }\n+\n+public:\n+    explicit InputFetcherTest(const ChainType chainType = ChainType::MAIN,",
      "path": "src/test/inputfetcher_tests.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "c705c6f1f1b2b11c9f292d4bb60e197c6bd42603",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we add these tests before the multithreading change - having a single-threaded InputFetcher first, adding tests and benchmarks after and doing the actual multithreading as a very last step. That would construct the whole scenario in smaller steps, proving that every change is safe",
      "created_at": "2025-09-29T15:40:35Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388436958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388436958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388439344",
      "pull_request_review_id": 2831320761,
      "id": 2388439344,
      "node_id": "PRRC_kwDOABII586OXLEw",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <primitives/transaction_identifier.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <unordered_set>\n+\n+BOOST_AUTO_TEST_SUITE(inputfetcher_tests)\n+\n+struct InputFetcherTest : BasicTestingSetup {\n+private:\n+    std::unique_ptr<InputFetcher> m_fetcher{nullptr};\n+    std::unique_ptr<CBlock> m_block{nullptr};\n+\n+    CBlock CreateBlock(int32_t num_txs)\n+    {\n+        CBlock block;\n+        CMutableTransaction coinbase;\n+        coinbase.vin.emplace_back();\n+        block.vtx.push_back(MakeTransactionRef(coinbase));\n+\n+        Txid prevhash{Txid::FromUint256(uint256(1))};\n+\n+        for (auto i{1}; i < num_txs; ++i) {\n+            CMutableTransaction tx;\n+            const auto txid{m_rng.randbool() ? Txid::FromUint256(uint256(i)) : prevhash};\n+            tx.vin.emplace_back(COutPoint(txid, 0));\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        return block;\n+    }\n+\n+public:\n+    explicit InputFetcherTest(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts}\n+    {\n+        SeedRandomForTest(SeedRand::ZEROS);",
      "path": "src/test/inputfetcher_tests.cpp",
      "position": 1,
      "original_position": 55,
      "commit_id": "cf209da104d483aa064aa3bec621f1adc9574749",
      "original_commit_id": "c705c6f1f1b2b11c9f292d4bb60e197c6bd42603",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand why benchmarks need predictability, but wouldn't we want variance for tests?",
      "created_at": "2025-09-29T15:41:15Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388439344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388439344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388449458",
      "pull_request_review_id": 2831320761,
      "id": 2388449458,
      "node_id": "PRRC_kwDOABII586OXNiy",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <primitives/transaction_identifier.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <unordered_set>\n+\n+BOOST_AUTO_TEST_SUITE(inputfetcher_tests)\n+\n+struct InputFetcherTest : BasicTestingSetup {\n+private:\n+    std::unique_ptr<InputFetcher> m_fetcher{nullptr};\n+    std::unique_ptr<CBlock> m_block{nullptr};\n+\n+    CBlock CreateBlock(int32_t num_txs)\n+    {\n+        CBlock block;\n+        CMutableTransaction coinbase;\n+        coinbase.vin.emplace_back();\n+        block.vtx.push_back(MakeTransactionRef(coinbase));\n+\n+        Txid prevhash{Txid::FromUint256(uint256(1))};\n+\n+        for (auto i{1}; i < num_txs; ++i) {\n+            CMutableTransaction tx;\n+            const auto txid{m_rng.randbool() ? Txid::FromUint256(uint256(i)) : prevhash};\n+            tx.vin.emplace_back(COutPoint(txid, 0));\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        return block;\n+    }\n+\n+public:\n+    explicit InputFetcherTest(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts}\n+    {\n+        SeedRandomForTest(SeedRand::ZEROS);\n+\n+        const auto cores{GetNumCores()};\n+        const auto num_txs{m_rng.randrange(cores * 10)};\n+        m_block = std::make_unique<CBlock>(CreateBlock(num_txs));\n+        const auto batch_size{m_rng.randrange<int32_t>(m_block->vtx.size() * 2)};\n+        const auto worker_threads{m_rng.randrange(cores * 2) + 1};\n+        m_fetcher = std::make_unique<InputFetcher>(batch_size, worker_threads);\n+    }\n+\n+    InputFetcher& getFetcher() { return *m_fetcher; }\n+    const CBlock& getBlock() { return *m_block; }\n+};\n+\n+BOOST_FIXTURE_TEST_CASE(fetch_inputs, InputFetcherTest)\n+{\n+    const auto& block{getBlock()};\n+    for (auto i{0}; i < 3; ++i) {\n+        CCoinsView dummy;\n+        CCoinsViewCache db(&dummy);\n+\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                auto outpoint{in.prevout};\n+                Coin coin{};\n+                coin.out.nValue = 1;\n+                db.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+            }\n+        }\n+\n+        CCoinsViewCache cache(&db);\n+        getFetcher().FetchInputs(cache, db, block);\n+\n+        std::unordered_set<Txid, SaltedTxidHasher> txids{};\n+        txids.reserve(block.vtx.size() - 1);\n+\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) {\n+                BOOST_CHECK(!cache.HaveCoinInCache(tx->vin[0].prevout));\n+            } else {\n+                for (const auto& in : tx->vin) {\n+                    const auto& outpoint{in.prevout};\n+                    const auto have{cache.HaveCoinInCache(outpoint)};\n+                    const auto should_have{!txids.contains(outpoint.hash)};\n+                    BOOST_CHECK(should_have ? have : !have);\n+                }\n+                txids.emplace(tx->GetHash());\n+            }\n+        }\n+    }\n+}\n+\n+// Test for the case where a block spends coins that are spent in the cache, but\n+// the spentness has not been flushed to the db. So the input fetcher will fetch\n+// the coin from the db since HaveCoinInCache will return false for an existing\n+// but spent coin. However, the fetched coin will fail to be inserted into the\n+// cache because the emplace call in EmplaceCoinInternalDANGER will not insert\n+// the unspent coin due to the collision with the already spent coin in the map.\n+BOOST_FIXTURE_TEST_CASE(fetch_no_double_spend, InputFetcherTest)\n+{\n+    const auto& block{getBlock()};\n+    for (auto i{0}; i < 3; ++i) {\n+        CCoinsView dummy;\n+        CCoinsViewCache db(&dummy);\n+\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                auto outpoint{in.prevout};\n+                Coin coin{};\n+                coin.out.nValue = 1;\n+                db.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+            }\n+        }\n+\n+        CCoinsViewCache cache(&db);\n+\n+        // Add all inputs as spent already in cache\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                auto outpoint{in.prevout};\n+                Coin coin{};\n+                cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+            }\n+        }\n+\n+        getFetcher().FetchInputs(cache, db, block);\n+\n+        // Coins are still spent, even though they exist unspent in the parent db\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                BOOST_CHECK(!cache.HaveCoinInCache(in.prevout));\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(fetch_no_inputs, InputFetcherTest)\n+{\n+    const auto& block{getBlock()};\n+    for (auto i{0}; i < 3; ++i) {\n+        CCoinsView db;\n+        CCoinsViewCache cache(&db);\n+        getFetcher().FetchInputs(cache, db, block);\n+\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                BOOST_CHECK(!cache.HaveCoinInCache(in.prevout));\n+            }\n+        }\n+    }\n+}\n+\n+class ThrowCoinsView : public CCoinsView\n+{\n+    std::optional<Coin> GetCoin(const COutPoint& outpoint) const override\n+    {\n+        throw std::runtime_error(\"database error\");",
      "path": "src/test/inputfetcher_tests.cpp",
      "position": 170,
      "original_position": 171,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "c705c6f1f1b2b11c9f292d4bb60e197c6bd42603",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "consider `std::terminate`",
      "created_at": "2025-09-29T15:44:14Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388449458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388449458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388454027",
      "pull_request_review_id": 2831320761,
      "id": 2388454027,
      "node_id": "PRRC_kwDOABII586OXOqL",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <bench/data/block413567.raw.h>\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util/time.h>\n+\n+static constexpr auto QUEUE_BATCH_SIZE{128};",
      "path": "src/bench/inputfetcher.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "2349ac7d6071746a80223358bce0d5e556b277d7",
      "in_reply_to_id": 1859192217,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I would prefer retesting those assumptions (I don't even think we need a batch here)",
      "created_at": "2025-09-29T15:45:38Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388454027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388454027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388459245",
      "pull_request_review_id": 2831320761,
      "id": 2388459245,
      "node_id": "PRRC_kwDOABII586OXP7t",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/amount.h>\n+#include <inputfetcher.h>\n+#include <primitives/transaction_identifier.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/random.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <optional>\n+#include <stdexcept>\n+#include <utility>\n+\n+using DbMap = std::map<const COutPoint, std::pair<std::optional<const Coin>, bool>>;\n+\n+class DbCoinsView : public CCoinsView\n+{\n+private:\n+    DbMap& m_map;\n+\n+public:\n+    DbCoinsView(DbMap& map) : m_map(map) {}\n+\n+    std::optional<Coin> GetCoin(const COutPoint& outpoint) const override\n+    {\n+        const auto it{m_map.find(outpoint)};\n+        assert(it != m_map.end());\n+        const auto [coin, err] = it->second;\n+        if (err) {\n+            throw std::runtime_error(\"database error\");\n+        }\n+        return coin;\n+    }\n+};\n+\n+class NoAccessCoinsView : public CCoinsView\n+{\n+public:\n+    std::optional<Coin> GetCoin(const COutPoint& outpoint) const override\n+    {\n+        abort();\n+    }\n+};\n+\n+FUZZ_TARGET(inputfetcher)\n+{\n+    SeedRandomStateForTest(SeedRand::ZEROS);\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto batch_size{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 1024)};\n+    const auto worker_threads{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(2, 4)};\n+    InputFetcher fetcher{batch_size, worker_threads};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000) {\n+        CBlock block;\n+        Txid prevhash{Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))};\n+\n+        DbMap db_map{};\n+        std::map<const COutPoint, const Coin> cache_map{};\n+\n+        DbCoinsView db(db_map);\n+\n+        NoAccessCoinsView back;\n+        CCoinsViewCache cache(&back);\n+\n+        LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), static_cast<uint32_t>(batch_size * worker_threads * 2)) {\n+            CMutableTransaction tx;\n+\n+            LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10) {\n+                const auto txid{fuzzed_data_provider.ConsumeBool()\n+                    ? Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))\n+                    : prevhash};\n+                const auto index{fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+                const COutPoint outpoint(txid, index);\n+\n+                tx.vin.emplace_back(outpoint);\n+\n+                std::optional<Coin> maybe_coin;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    Coin coin{};\n+                    coin.fCoinBase = fuzzed_data_provider.ConsumeBool();\n+                    coin.nHeight =\n+                        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(\n+                            0, std::numeric_limits<int32_t>::max());\n+                    coin.out.nValue = ConsumeMoney(fuzzed_data_provider);\n+                    maybe_coin = coin;\n+                } else {\n+                    maybe_coin = std::nullopt;\n+                }\n+                db_map.try_emplace(outpoint, std::make_pair(\n+                    maybe_coin,\n+                    fuzzed_data_provider.ConsumeBool()));\n+\n+                // Add the coin to the cache\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    Coin coin{};\n+                    coin.fCoinBase = fuzzed_data_provider.ConsumeBool();\n+                    coin.nHeight =\n+                        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(\n+                            0, std::numeric_limits<int32_t>::max());\n+                    coin.out.nValue =\n+                        fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(\n+                            -1, MAX_MONEY);\n+                    cache_map.try_emplace(outpoint, coin);\n+                    cache.EmplaceCoinInternalDANGER(\n+                        COutPoint(outpoint),\n+                        std::move(coin),\n+                        /*set_dirty=*/fuzzed_data_provider.ConsumeBool());\n+                }\n+            }\n+\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        fetcher.FetchInputs(cache, db, block);\n+\n+        for (const auto& [outpoint, pair] : db_map) {\n+            // Check pre-existing coins in the cache have not been updated\n+            const auto it{cache_map.find(outpoint)};\n+            if (it != cache_map.end()) {\n+                const auto& cache_coin{it->second};\n+                const auto& coin{cache.AccessCoin(outpoint)};\n+                assert(coin.IsSpent() == cache_coin.IsSpent());\n+                assert(coin.fCoinBase == cache_coin.fCoinBase);\n+                assert(coin.nHeight == cache_coin.nHeight);\n+                assert(coin.out == cache_coin.out);\n+                continue;\n+            }\n+\n+            if (!cache.HaveCoinInCache(outpoint)) {\n+                continue;\n+            }\n+\n+            const auto& [maybe_coin, err] = pair;\n+            assert(maybe_coin && !err);\n+\n+            // Check any newly added coins in the cache are the same as the db\n+            const auto& coin{cache.AccessCoin(outpoint)};\n+            assert(!coin.IsSpent());\n+            assert(coin.fCoinBase == (*maybe_coin).fCoinBase);\n+            assert(coin.nHeight == (*maybe_coin).nHeight);\n+            assert(coin.out == (*maybe_coin).out);",
      "path": "src/test/fuzz/inputfetcher.cpp",
      "position": 1,
      "original_position": 150,
      "commit_id": "cf209da104d483aa064aa3bec621f1adc9574749",
      "original_commit_id": "1faf0595a59ee0da61aabb195c9939575f2536eb",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n            assert(coin.fCoinBase == maybe_coin->fCoinBase);\r\n            assert(coin.nHeight == maybe_coin->nHeight);\r\n            assert(coin.out == maybe_coin->out);\r\n```",
      "created_at": "2025-09-29T15:47:05Z",
      "updated_at": "2025-09-29T16:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388459245",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388459245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388733196",
      "pull_request_review_id": 3280976253,
      "id": 2388733196,
      "node_id": "PRRC_kwDOABII586OYS0M",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 86,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think we should add exact types here to make sure calculations like `end_index - local_batch_size` can't underflow",
      "created_at": "2025-09-29T17:41:02Z",
      "updated_at": "2025-09-29T17:45:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388733196",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388733196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 85,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388743389",
      "pull_request_review_id": 3280976253,
      "id": 2388743389,
      "node_id": "PRRC_kwDOABII586OYVTd",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <bench/data/block413567.raw.h>\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util/time.h>\n+\n+static constexpr auto QUEUE_BATCH_SIZE{128};\n+static constexpr auto DELAY{2ms};\n+\n+//! Simulates a DB by adding a delay when calling GetCoin\n+class DelayedCoinsView : public CCoinsView\n+{\n+private:\n+    std::chrono::milliseconds m_delay;\n+\n+public:\n+    DelayedCoinsView(std::chrono::milliseconds delay) : m_delay(delay) {}\n+\n+    std::optional<Coin> GetCoin(const COutPoint& outpoint) const override\n+    {\n+        UninterruptibleSleep(m_delay);\n+        return Coin{};\n+    }\n+\n+    bool BatchWrite(CoinsViewCacheCursor& cursor, const uint256 &hashBlock) override { return true; }\n+};\n+\n+static void InputFetcherBenchmark(benchmark::Bench& bench)\n+{\n+    DataStream stream{benchmark::data::block413567};\n+    CBlock block;\n+    stream >> TX_WITH_WITNESS(block);\n+\n+    DelayedCoinsView db(DELAY);\n+    CCoinsViewCache cache(&db);\n+\n+    // The main thread should be counted to prevent thread oversubscription, and\n+    // to decrease the variance of benchmark results.\n+    const auto worker_threads_num{GetNumCores() - 1};",
      "path": "src/bench/inputfetcher.cpp",
      "position": 46,
      "original_position": 47,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm a bit conflicted here: this way we're all measuring something slightly different - which is especially problematic since the work here isn't even CPU bound. What if we did a min of npcu and 4?",
      "created_at": "2025-09-29T17:44:49Z",
      "updated_at": "2025-09-29T17:45:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2388743389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388743389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399012085",
      "pull_request_review_id": 3294897463,
      "id": 2399012085,
      "node_id": "PRRC_kwDOABII586O_gT1",
      "diff_hunk": "@@ -3195,6 +3195,8 @@ bool Chainstate::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew,\n     LogDebug(BCLog::BENCH, \"  - Load block from disk: %.2fms\\n\",\n              Ticks<MillisecondsDouble>(time_2 - time_1));\n     {\n+        m_chainman.GetInputFetcher().FetchInputs(CoinsTip(), CoinsDB(), blockConnecting);",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "b2da76444613229e0bf5539596903ac3c1db3053",
      "in_reply_to_id": 2083465171,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried to mimic the script validation like `GetCheckQueue`. But, I guess this is different enough. Will change next time I push.",
      "created_at": "2025-10-02T14:20:12Z",
      "updated_at": "2025-10-02T14:20:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399012085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399012085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399016753",
      "pull_request_review_id": 3294903795,
      "id": 2399016753,
      "node_id": "PRRC_kwDOABII586O_hcx",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 107,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388218975,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've updated to use semaphores instead of mutex. That should be more efficient.\r\n\r\n> especially if we sort the keys first so that threads are more likely to access different regions\r\n\r\nI don't understand what this has to do with being lock free.",
      "created_at": "2025-10-02T14:21:49Z",
      "updated_at": "2025-10-02T14:21:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399016753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399016753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399019592",
      "pull_request_review_id": 3294907722,
      "id": 2399019592,
      "node_id": "PRRC_kwDOABII586O_iJI",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388224454,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I updated the thread name to ThreadLoop, which just does the loop. There is another function now, `FetchInputsOnThread`, that fetches for each block until finished.",
      "created_at": "2025-10-02T14:22:46Z",
      "updated_at": "2025-10-02T14:22:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399019592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399019592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399025372",
      "pull_request_review_id": 3294915812,
      "id": 2399025372,
      "node_id": "PRRC_kwDOABII586O_jjc",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388250227,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Prefiltering on the main thread is too slow, it's faster if we do the filtering in parallel. So, we still need to have a smaller batch size because then work will not be divided evenly. One thread could get all cache misses while the others all have cached inputs.",
      "created_at": "2025-10-02T14:24:55Z",
      "updated_at": "2025-10-02T14:24:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399025372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399025372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399027783",
      "pull_request_review_id": 3294919045,
      "id": 2399027783,
      "node_id": "PRRC_kwDOABII586O_kJH",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};",
      "path": "src/inputfetcher.h",
      "position": 71,
      "original_position": 77,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388256954,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Prefiltering on the main thread is too slow. It is several milliseconds to check every input in large blocks whether they exist in the cache.\r\n\r\n",
      "created_at": "2025-10-02T14:25:46Z",
      "updated_at": "2025-10-02T14:25:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399027783",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399027783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399028082",
      "pull_request_review_id": 3294919403,
      "id": 2399028082,
      "node_id": "PRRC_kwDOABII586O_kNy",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "4331168bd08d63a73a6e45c84a7513d01541f19a",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388258759,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-02T14:25:52Z",
      "updated_at": "2025-10-02T14:25:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399028082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399028082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399032242",
      "pull_request_review_id": 3294924932,
      "id": 2399032242,
      "node_id": "PRRC_kwDOABII586O_lOy",
      "diff_hunk": "@@ -6266,6 +6268,7 @@ static ChainstateManager::Options&& Flatten(ChainstateManager::Options&& opts)\n \n ChainstateManager::ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options)\n     : m_script_check_queue{/*batch_size=*/128, std::clamp(options.worker_threads_num, 0, MAX_SCRIPTCHECK_THREADS)},\n+      m_input_fetcher{/*batch_size=*/128, std::clamp(options.worker_threads_num, 0, MAX_SCRIPTCHECK_THREADS)},",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388275122,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe this is resolved.",
      "created_at": "2025-10-02T14:27:19Z",
      "updated_at": "2025-10-02T14:27:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399032242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399032242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399049434",
      "pull_request_review_id": 3294948927,
      "id": 2399049434,
      "node_id": "PRRC_kwDOABII586O_pba",
      "diff_hunk": "@@ -110,10 +110,15 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n            (bool)it->second.coin.IsCoinBase());\n }\n \n-void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin) {\n-    cachedCoinsUsage += coin.DynamicMemoryUsage();\n+void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin, bool set_dirty) {\n+    const auto mem_usage{coin.DynamicMemoryUsage()};\n     auto [it, inserted] = cacheCoins.try_emplace(std::move(outpoint), std::move(coin));\n-    if (inserted) CCoinsCacheEntry::SetDirty(*it, m_sentinel);\n+    if (inserted) {\n+        cachedCoinsUsage += mem_usage;",
      "path": "src/coins.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "44f07f8957d03cf4aa8b3aea533ed6c5de9ba043",
      "original_commit_id": "af8a366bd6a08d9362e69a89b0b89b5c94eb63ca",
      "in_reply_to_id": 2388297125,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is dangerous because it doesn't check for freshness or if already inserted. It is meant to bulk load new utxos from the assume utxo set. Since assume utxo assumes the utxo set is currently empty, the coins would always be inserted.\r\nThis is repurposed here to bulk load utxos from the db directly into the cache. However, an invalid block could be mined which spends an already spent utxo that is in the cache but has not been synced to the db yet. In that case, \r\nthe insertion will fail here. There is a unit test specifically for this scenario.",
      "created_at": "2025-10-02T14:33:42Z",
      "updated_at": "2025-10-02T14:33:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399049434",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399049434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 118,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399056272",
      "pull_request_review_id": 3294959235,
      "id": 2399056272,
      "node_id": "PRRC_kwDOABII586O_rGQ",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388307927,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We iterate the prevouts directly from the block now. However, we store the tx index and vin index in a global vector now. This way we can flatten the inputs instead of having to scan the txs to see how many inputs they have.",
      "created_at": "2025-10-02T14:36:02Z",
      "updated_at": "2025-10-02T14:36:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399056272",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399056272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 26,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399059149",
      "pull_request_review_id": 3294963215,
      "id": 2399059149,
      "node_id": "PRRC_kwDOABII586O_rzN",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 83,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388318316,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure, would have to benchmark this.\r\nI have updated the functions though to make the main thread's entrance clearer.",
      "created_at": "2025-10-02T14:37:07Z",
      "updated_at": "2025-10-02T14:37:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399059149",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399059149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399062889",
      "pull_request_review_id": 3294968319,
      "id": 2399062889,
      "node_id": "PRRC_kwDOABII586O_stp",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 130,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388399879,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is definitely safe to do, since all access would be on main thread. It is also safe to do from parallel threads if we don't write until all threads are done reading, which is what this PR does.\r\nPrefiltering is slow though (several milliseconds) so is better to do in parallel.",
      "created_at": "2025-10-02T14:38:33Z",
      "updated_at": "2025-10-02T14:38:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399062889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399062889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399067712",
      "pull_request_review_id": 3294975172,
      "id": 2399067712,
      "node_id": "PRRC_kwDOABII586O_t5A",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 127,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388409573,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure I understand this.\r\nThe m_txids set is computed on the main thread, and is only read from multiple threads. If we didn't do this we would try to fetch non-existent outputs from the db, which would be much slower.",
      "created_at": "2025-10-02T14:40:12Z",
      "updated_at": "2025-10-02T14:40:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399067712",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399067712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399069027",
      "pull_request_review_id": 3294977180,
      "id": 2399069027,
      "node_id": "PRRC_kwDOABII586O_uNj",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 73,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388250227,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure why that's problematic, we don't *have* to have perfect parallelism, it seems to me we can assume uniform distribution - it's fine if there are outliers if that makes the code simpler (which I think it should, it could even eliminate most locks, since the jobs are basically completely independent)",
      "created_at": "2025-10-02T14:40:35Z",
      "updated_at": "2025-10-02T14:40:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399069027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399069027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399069282",
      "pull_request_review_id": 3294977557,
      "id": 2399069282,
      "node_id": "PRRC_kwDOABII586O_uRi",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 107,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388218975,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't understand what this has to do with being lock free.\r\n\r\nWe may have fewer file system locks if the threads are accessing different regions\r\n\r\n> I've updated to use semaphores instead of mutex\r\n\r\nI will review that in more detail soon, probably next week.",
      "created_at": "2025-10-02T14:40:41Z",
      "updated_at": "2025-10-02T14:40:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399069282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399069282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399071701",
      "pull_request_review_id": 3294980461,
      "id": 2399071701,
      "node_id": "PRRC_kwDOABII586O_u3V",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 136,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388412343,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We don't really care, but it would be good to not continue doing work here if we know it's pointless. This just exits early. No validation is happening.",
      "created_at": "2025-10-02T14:41:29Z",
      "updated_at": "2025-10-02T14:41:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399071701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399071701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399074127",
      "pull_request_review_id": 3294983877,
      "id": 2399074127,
      "node_id": "PRRC_kwDOABII586O_vdP",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {\n+                // Database error. This will be handled later in validation.\n+                // Skip remaining outpoints and continue so main thread\n+                // can proceed.\n+                LOCK(m_mutex);\n+                m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                m_last_outpoint_index = 0;\n+            }\n+        } while (true);\n+    }\n+\n+public:\n+\n+    //! Create a new input fetcher\n+    explicit InputFetcher(int32_t batch_size, int32_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        if (worker_thread_count < 1) {\n+            // Don't do anything if there are no worker threads.\n+            return;\n+        }\n+        m_pairs.reserve(worker_thread_count + 1);\n+        for (auto n{0}; n < worker_thread_count + 1; ++n) {\n+            m_pairs.emplace_back();\n+        }\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (auto n{0}; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop(n);\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache,\n+                     const CCoinsView& db,\n+                     const CBlock& block) noexcept\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (m_worker_threads.empty() || block.vtx.size() <= 1) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 192,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388427056,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is to not enter if there is only a coinbase tx, since it has no inputs to fetch. If there were 2 txs, and the second has 1000 inputs, we would still want to enter here.",
      "created_at": "2025-10-02T14:42:21Z",
      "updated_at": "2025-10-02T14:42:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399074127",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399074127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399077894",
      "pull_request_review_id": 3294988855,
      "id": 2399077894,
      "node_id": "PRRC_kwDOABII586O_wYG",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 83,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388318316,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My benchmarks so far indicate the opposite: after 3-4 threads there is no benefit to the parallelization (either on SSD or HDD). I will remeasure your new changes after you give me the 👍 ",
      "created_at": "2025-10-02T14:43:24Z",
      "updated_at": "2025-10-02T14:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399077894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399077894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399079463",
      "pull_request_review_id": 3294990649,
      "id": 2399079463,
      "node_id": "PRRC_kwDOABII586O_wwn",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {\n+                // Database error. This will be handled later in validation.\n+                // Skip remaining outpoints and continue so main thread\n+                // can proceed.\n+                LOCK(m_mutex);\n+                m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                m_last_outpoint_index = 0;\n+            }\n+        } while (true);\n+    }\n+\n+public:\n+\n+    //! Create a new input fetcher\n+    explicit InputFetcher(int32_t batch_size, int32_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        if (worker_thread_count < 1) {\n+            // Don't do anything if there are no worker threads.\n+            return;\n+        }\n+        m_pairs.reserve(worker_thread_count + 1);\n+        for (auto n{0}; n < worker_thread_count + 1; ++n) {\n+            m_pairs.emplace_back();\n+        }\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (auto n{0}; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop(n);\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache,\n+                     const CCoinsView& db,\n+                     const CBlock& block) noexcept\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (m_worker_threads.empty() || block.vtx.size() <= 1) {\n+            return;\n+        }\n+\n+        // Set the db and cache to use for this block.\n+        m_db = &db;\n+        m_cache = &cache;",
      "path": "src/inputfetcher.h",
      "position": 152,
      "original_position": 198,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388430113,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think we can do that. We need to set these here for other threads to read. These are only read from other threads, never written to. We also only read from other threads after the main thread has released the counting_semaphore, so we know the pointers are synced across the threads.",
      "created_at": "2025-10-02T14:43:51Z",
      "updated_at": "2025-10-02T14:43:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399079463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399079463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": 151,
      "original_start_line": 197,
      "start_side": "RIGHT",
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399082258",
      "pull_request_review_id": 3294994294,
      "id": 2399082258,
      "node_id": "PRRC_kwDOABII586O_xcS",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <primitives/transaction_identifier.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <unordered_set>\n+\n+BOOST_AUTO_TEST_SUITE(inputfetcher_tests)\n+\n+struct InputFetcherTest : BasicTestingSetup {\n+private:\n+    std::unique_ptr<InputFetcher> m_fetcher{nullptr};\n+    std::unique_ptr<CBlock> m_block{nullptr};\n+\n+    CBlock CreateBlock(int32_t num_txs)\n+    {\n+        CBlock block;\n+        CMutableTransaction coinbase;\n+        coinbase.vin.emplace_back();\n+        block.vtx.push_back(MakeTransactionRef(coinbase));\n+\n+        Txid prevhash{Txid::FromUint256(uint256(1))};\n+\n+        for (auto i{1}; i < num_txs; ++i) {\n+            CMutableTransaction tx;\n+            const auto txid{m_rng.randbool() ? Txid::FromUint256(uint256(i)) : prevhash};\n+            tx.vin.emplace_back(COutPoint(txid, 0));\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        return block;\n+    }\n+\n+public:\n+    explicit InputFetcherTest(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts}\n+    {\n+        SeedRandomForTest(SeedRand::ZEROS);\n+\n+        const auto cores{GetNumCores()};\n+        const auto num_txs{m_rng.randrange(cores * 10)};\n+        m_block = std::make_unique<CBlock>(CreateBlock(num_txs));\n+        const auto batch_size{m_rng.randrange<int32_t>(m_block->vtx.size() * 2)};\n+        const auto worker_threads{m_rng.randrange(cores * 2) + 1};\n+        m_fetcher = std::make_unique<InputFetcher>(batch_size, worker_threads);\n+    }\n+\n+    InputFetcher& getFetcher() { return *m_fetcher; }\n+    const CBlock& getBlock() { return *m_block; }\n+};\n+\n+BOOST_FIXTURE_TEST_CASE(fetch_inputs, InputFetcherTest)\n+{\n+    const auto& block{getBlock()};\n+    for (auto i{0}; i < 3; ++i) {\n+        CCoinsView dummy;\n+        CCoinsViewCache db(&dummy);\n+\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                auto outpoint{in.prevout};\n+                Coin coin{};\n+                coin.out.nValue = 1;\n+                db.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+            }\n+        }\n+\n+        CCoinsViewCache cache(&db);\n+        getFetcher().FetchInputs(cache, db, block);\n+\n+        std::unordered_set<Txid, SaltedTxidHasher> txids{};\n+        txids.reserve(block.vtx.size() - 1);\n+\n+        for (const auto& tx : block.vtx) {\n+            if (tx->IsCoinBase()) {\n+                BOOST_CHECK(!cache.HaveCoinInCache(tx->vin[0].prevout));\n+            } else {\n+                for (const auto& in : tx->vin) {\n+                    const auto& outpoint{in.prevout};\n+                    const auto have{cache.HaveCoinInCache(outpoint)};\n+                    const auto should_have{!txids.contains(outpoint.hash)};\n+                    BOOST_CHECK(should_have ? have : !have);\n+                }\n+                txids.emplace(tx->GetHash());\n+            }\n+        }\n+    }\n+}\n+\n+// Test for the case where a block spends coins that are spent in the cache, but\n+// the spentness has not been flushed to the db. So the input fetcher will fetch\n+// the coin from the db since HaveCoinInCache will return false for an existing\n+// but spent coin. However, the fetched coin will fail to be inserted into the\n+// cache because the emplace call in EmplaceCoinInternalDANGER will not insert\n+// the unspent coin due to the collision with the already spent coin in the map.\n+BOOST_FIXTURE_TEST_CASE(fetch_no_double_spend, InputFetcherTest)\n+{\n+    const auto& block{getBlock()};\n+    for (auto i{0}; i < 3; ++i) {\n+        CCoinsView dummy;\n+        CCoinsViewCache db(&dummy);\n+\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                auto outpoint{in.prevout};\n+                Coin coin{};\n+                coin.out.nValue = 1;\n+                db.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+            }\n+        }\n+\n+        CCoinsViewCache cache(&db);\n+\n+        // Add all inputs as spent already in cache\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                auto outpoint{in.prevout};\n+                Coin coin{};\n+                cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+            }\n+        }\n+\n+        getFetcher().FetchInputs(cache, db, block);\n+\n+        // Coins are still spent, even though they exist unspent in the parent db\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                BOOST_CHECK(!cache.HaveCoinInCache(in.prevout));\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(fetch_no_inputs, InputFetcherTest)\n+{\n+    const auto& block{getBlock()};\n+    for (auto i{0}; i < 3; ++i) {\n+        CCoinsView db;\n+        CCoinsViewCache cache(&db);\n+        getFetcher().FetchInputs(cache, db, block);\n+\n+        for (const auto& tx : block.vtx) {\n+            for (const auto& in : tx->vin) {\n+                BOOST_CHECK(!cache.HaveCoinInCache(in.prevout));\n+            }\n+        }\n+    }\n+}\n+\n+class ThrowCoinsView : public CCoinsView\n+{\n+    std::optional<Coin> GetCoin(const COutPoint& outpoint) const override\n+    {\n+        throw std::runtime_error(\"database error\");",
      "path": "src/test/inputfetcher_tests.cpp",
      "position": 170,
      "original_position": 171,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "c705c6f1f1b2b11c9f292d4bb60e197c6bd42603",
      "in_reply_to_id": 2388449458,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Err, we want to throw a runtime error here to test the try/catch in the inputfetcher.",
      "created_at": "2025-10-02T14:44:35Z",
      "updated_at": "2025-10-02T14:44:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399082258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399082258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399083511",
      "pull_request_review_id": 3294995976,
      "id": 2399083511,
      "node_id": "PRRC_kwDOABII586O_xv3",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 86,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388733196,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I rewrote this part, these are gone now.",
      "created_at": "2025-10-02T14:44:59Z",
      "updated_at": "2025-10-02T14:45:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399083511",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399083511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 85,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399084818",
      "pull_request_review_id": 3294997807,
      "id": 2399084818,
      "node_id": "PRRC_kwDOABII586O_yES",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 130,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388399879,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But prefiltering would allow sorting, which should untangle the threads.\r\nThe threads will access the same files (which are more likely to be different from the files the other threads are requesting), so they may profit from cache locality if the OS supports it - that's why I suggested giving it a try.",
      "created_at": "2025-10-02T14:45:28Z",
      "updated_at": "2025-10-02T14:45:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399084818",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399084818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399092048",
      "pull_request_review_id": 3295008083,
      "id": 2399092048,
      "node_id": "PRRC_kwDOABII586O_z1Q",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 107,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388218975,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> We may have fewer file system locks if the threads are accessing different regions\r\n\r\nOk, but that is not the same as this InputFetcher construction being lock free.",
      "created_at": "2025-10-02T14:47:30Z",
      "updated_at": "2025-10-02T14:47:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399092048",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399092048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399094785",
      "pull_request_review_id": 3295011711,
      "id": 2399094785,
      "node_id": "PRRC_kwDOABII586O_0gB",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {\n+                // Database error. This will be handled later in validation.\n+                // Skip remaining outpoints and continue so main thread\n+                // can proceed.\n+                LOCK(m_mutex);\n+                m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                m_last_outpoint_index = 0;\n+            }\n+        } while (true);\n+    }\n+\n+public:\n+\n+    //! Create a new input fetcher\n+    explicit InputFetcher(int32_t batch_size, int32_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        if (worker_thread_count < 1) {\n+            // Don't do anything if there are no worker threads.\n+            return;\n+        }\n+        m_pairs.reserve(worker_thread_count + 1);\n+        for (auto n{0}; n < worker_thread_count + 1; ++n) {\n+            m_pairs.emplace_back();\n+        }\n+        m_worker_threads.reserve(worker_thread_count);\n+        for (auto n{0}; n < worker_thread_count; ++n) {\n+            m_worker_threads.emplace_back([this, n]() {\n+                util::ThreadRename(strprintf(\"inputfetch.%i\", n));\n+                Loop(n);\n+            });\n+        }\n+    }\n+\n+    // Since this class manages its own resources, which is a thread\n+    // pool `m_worker_threads`, copy and move operations are not appropriate.\n+    InputFetcher(const InputFetcher&) = delete;\n+    InputFetcher& operator=(const InputFetcher&) = delete;\n+    InputFetcher(InputFetcher&&) = delete;\n+    InputFetcher& operator=(InputFetcher&&) = delete;\n+\n+    //! Fetch all block inputs from db, and insert into cache.\n+    void FetchInputs(CCoinsViewCache& cache,\n+                     const CCoinsView& db,\n+                     const CBlock& block) noexcept\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        if (m_worker_threads.empty() || block.vtx.size() <= 1) {\n+            return;\n+        }\n+\n+        // Set the db and cache to use for this block.\n+        m_db = &db;\n+        m_cache = &cache;",
      "path": "src/inputfetcher.h",
      "position": 152,
      "original_position": 198,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388430113,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I really dislike that, will try to come up with a lock-free version later (maybe next week)",
      "created_at": "2025-10-02T14:48:22Z",
      "updated_at": "2025-10-02T14:48:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399094785",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399094785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": 151,
      "original_start_line": 197,
      "start_side": "RIGHT",
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399100147",
      "pull_request_review_id": 3295018607,
      "id": 2399100147,
      "node_id": "PRRC_kwDOABII586O_1zz",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 136,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388412343,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I would prefer a less opinionated version, as long as it's still correct. No need to optimize for the consensus failure speed in my opinion, I would prefer simpler code for a change as risky as this one.",
      "created_at": "2025-10-02T14:50:17Z",
      "updated_at": "2025-10-02T14:50:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399100147",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399100147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399116295",
      "pull_request_review_id": 3295038544,
      "id": 2399116295,
      "node_id": "PRRC_kwDOABII586O_5wH",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 107,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388218975,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No, that's orthogonal, it's another area where we could possibly reduce contention.",
      "created_at": "2025-10-02T14:54:52Z",
      "updated_at": "2025-10-02T14:54:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2399116295",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2399116295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402470414",
      "pull_request_review_id": 3299718995,
      "id": 2402470414,
      "node_id": "PRRC_kwDOABII586PMsoO",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {\n+                // Database error. This will be handled later in validation.\n+                // Skip remaining outpoints and continue so main thread\n+                // can proceed.\n+                LOCK(m_mutex);\n+                m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                m_last_outpoint_index = 0;\n+            }\n+        } while (true);\n+    }\n+\n+public:\n+\n+    //! Create a new input fetcher\n+    explicit InputFetcher(int32_t batch_size, int32_t worker_thread_count) noexcept\n+        : m_batch_size(batch_size)\n+    {\n+        if (worker_thread_count < 1) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 162,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388419154,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-03T15:58:56Z",
      "updated_at": "2025-10-03T15:58:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2402470414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402470414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402470769",
      "pull_request_review_id": 3299719451,
      "id": 2402470769,
      "node_id": "PRRC_kwDOABII586PMstx",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "912f26b81e0e772634fc04be2fb047bafb1723af",
      "in_reply_to_id": 2388303800,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-03T15:59:05Z",
      "updated_at": "2025-10-03T15:59:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2402470769",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402470769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402472467",
      "pull_request_review_id": 3299721826,
      "id": 2402472467,
      "node_id": "PRRC_kwDOABII586PMtIT",
      "diff_hunk": "@@ -110,10 +110,15 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n            (bool)it->second.coin.IsCoinBase());\n }\n \n-void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin) {\n-    cachedCoinsUsage += coin.DynamicMemoryUsage();\n+void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin, bool set_dirty) {\n+    const auto mem_usage{coin.DynamicMemoryUsage()};",
      "path": "src/coins.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "44f07f8957d03cf4aa8b3aea533ed6c5de9ba043",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388273122,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added some explanation in the commit message. Please let me know if it makes it more clear.",
      "created_at": "2025-10-03T15:59:58Z",
      "updated_at": "2025-10-03T15:59:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2402472467",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402472467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 114,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403069813",
      "pull_request_review_id": 3300510926,
      "id": 2403069813,
      "node_id": "PRRC_kwDOABII586PO-91",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <bench/data/block413567.raw.h>\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <util/time.h>\n+\n+static constexpr auto QUEUE_BATCH_SIZE{128};",
      "path": "src/bench/inputfetcher.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "2349ac7d6071746a80223358bce0d5e556b277d7",
      "in_reply_to_id": 1859192217,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed the batch size 🎉",
      "created_at": "2025-10-03T19:06:32Z",
      "updated_at": "2025-10-03T19:06:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2403069813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403069813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403595535",
      "pull_request_review_id": 3301344527,
      "id": 2403595535,
      "node_id": "PRRC_kwDOABII586PQ_UP",
      "diff_hunk": "@@ -3195,6 +3195,8 @@ bool Chainstate::ConnectTip(BlockValidationState& state, CBlockIndex* pindexNew,\n     LogDebug(BCLog::BENCH, \"  - Load block from disk: %.2fms\\n\",\n              Ticks<MillisecondsDouble>(time_2 - time_1));\n     {\n+        m_chainman.GetInputFetcher().FetchInputs(CoinsTip(), CoinsDB(), blockConnecting);",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "original_commit_id": "b2da76444613229e0bf5539596903ac3c1db3053",
      "in_reply_to_id": 2083465171,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-04T00:00:08Z",
      "updated_at": "2025-10-04T00:00:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2403595535",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403595535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2404065695",
      "pull_request_review_id": 3301981036,
      "id": 2404065695,
      "node_id": "PRRC_kwDOABII586PSyGf",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;",
      "path": "src/inputfetcher.h",
      "position": 75,
      "original_position": 79,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388236852,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Can we add a single-threaded input fetcher first and add multithreading only as the very last step?\r\n\r\nDone.",
      "created_at": "2025-10-04T15:55:22Z",
      "updated_at": "2025-10-04T15:55:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2404065695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2404065695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2404066620",
      "pull_request_review_id": 3301981608,
      "id": 2404066620,
      "node_id": "PRRC_kwDOABII586PSyU8",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <primitives/transaction_identifier.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <unordered_set>\n+\n+BOOST_AUTO_TEST_SUITE(inputfetcher_tests)\n+\n+struct InputFetcherTest : BasicTestingSetup {\n+private:\n+    std::unique_ptr<InputFetcher> m_fetcher{nullptr};\n+    std::unique_ptr<CBlock> m_block{nullptr};\n+\n+    CBlock CreateBlock(int32_t num_txs)\n+    {\n+        CBlock block;\n+        CMutableTransaction coinbase;\n+        coinbase.vin.emplace_back();\n+        block.vtx.push_back(MakeTransactionRef(coinbase));\n+\n+        Txid prevhash{Txid::FromUint256(uint256(1))};\n+\n+        for (auto i{1}; i < num_txs; ++i) {\n+            CMutableTransaction tx;\n+            const auto txid{m_rng.randbool() ? Txid::FromUint256(uint256(i)) : prevhash};\n+            tx.vin.emplace_back(COutPoint(txid, 0));\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        return block;\n+    }\n+\n+public:\n+    explicit InputFetcherTest(const ChainType chainType = ChainType::MAIN,",
      "path": "src/test/inputfetcher_tests.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "c705c6f1f1b2b11c9f292d4bb60e197c6bd42603",
      "in_reply_to_id": 2388436958,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-04T15:57:41Z",
      "updated_at": "2025-10-04T15:57:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2404066620",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2404066620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423072675",
      "pull_request_review_id": 3327511391,
      "id": 2423072675,
      "node_id": "PRRC_kwDOABII586QbSej",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;\n+    bool m_request_stop GUARDED_BY(m_mutex){false};\n+\n+    //! Internal function that does the fetching from disk.\n+    void Loop(int32_t index, bool is_main_thread = false) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        auto local_batch_size{0};\n+        auto end_index{0};\n+        auto& cond{is_main_thread ? m_main_cv : m_worker_cv};\n+        do {\n+            {\n+                WAIT_LOCK(m_mutex, lock);\n+                // first do the clean-up of the previous loop run (allowing us to do\n+                // it in the same critsect) local_batch_size will only be\n+                // truthy after first run.\n+                if (local_batch_size) {\n+                    m_in_flight_outpoints_count -= local_batch_size;\n+                    if (!is_main_thread && m_in_flight_outpoints_count == 0) {\n+                        m_main_cv.notify_one();\n+                    }\n+                }\n+\n+                // logically, the do loop starts here\n+                while (m_last_outpoint_index == 0) {\n+                    if ((is_main_thread && m_in_flight_outpoints_count == 0) || m_request_stop) {\n+                        return;\n+                    }\n+                    ++m_idle_worker_count;\n+                    cond.wait(lock);\n+                    --m_idle_worker_count;\n+                }\n+\n+                // Assign a batch of outpoints to this thread\n+                local_batch_size = std::max(1, std::min(m_batch_size,\n+                            static_cast<int32_t>(m_last_outpoint_index /\n+                            (m_worker_threads.size() + 1 + m_idle_worker_count))));\n+                end_index = m_last_outpoint_index;\n+                m_last_outpoint_index -= local_batch_size;\n+            }\n+\n+            auto& local_pairs{m_pairs[index]};\n+            local_pairs.reserve(local_pairs.size() + local_batch_size);\n+            try {\n+                for (auto i{end_index - local_batch_size}; i < end_index; ++i) {\n+                    const auto& outpoint{m_outpoints[i]};\n+                    // If an input spends an outpoint from earlier in the\n+                    // block, it won't be in the cache yet but it also won't be\n+                    // in the db either.\n+                    if (m_txids.contains(outpoint.hash)) {\n+                        continue;\n+                    }\n+                    if (m_cache->HaveCoinInCache(outpoint)) {\n+                        continue;\n+                    }\n+                    if (auto coin{m_db->GetCoin(outpoint)}; coin) {\n+                        local_pairs.emplace_back(outpoint, std::move(*coin));\n+                    } else {\n+                        // Missing an input. This block will fail validation.\n+                        // Skip remaining outpoints and continue so main thread\n+                        // can proceed.\n+                        LOCK(m_mutex);\n+                        m_in_flight_outpoints_count -= m_last_outpoint_index;\n+                        m_last_outpoint_index = 0;\n+                        break;\n+                    }\n+                }\n+            } catch (const std::runtime_error&) {",
      "path": "src/inputfetcher.h",
      "position": 1,
      "original_position": 145,
      "commit_id": "6701eef088668a9d9f87b0cc37d0d0ff885d449d",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388213294,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a log.",
      "created_at": "2025-10-11T18:04:13Z",
      "updated_at": "2025-10-11T18:04:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2423072675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423072675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423072759",
      "pull_request_review_id": 3327511515,
      "id": 2423072759,
      "node_id": "PRRC_kwDOABII586QbSf3",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <common/system.h>\n+#include <inputfetcher.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <primitives/transaction_identifier.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <cstdint>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <unordered_set>\n+\n+BOOST_AUTO_TEST_SUITE(inputfetcher_tests)\n+\n+struct InputFetcherTest : BasicTestingSetup {\n+private:\n+    std::unique_ptr<InputFetcher> m_fetcher{nullptr};\n+    std::unique_ptr<CBlock> m_block{nullptr};\n+\n+    CBlock CreateBlock(int32_t num_txs)\n+    {\n+        CBlock block;\n+        CMutableTransaction coinbase;\n+        coinbase.vin.emplace_back();\n+        block.vtx.push_back(MakeTransactionRef(coinbase));\n+\n+        Txid prevhash{Txid::FromUint256(uint256(1))};\n+\n+        for (auto i{1}; i < num_txs; ++i) {\n+            CMutableTransaction tx;\n+            const auto txid{m_rng.randbool() ? Txid::FromUint256(uint256(i)) : prevhash};\n+            tx.vin.emplace_back(COutPoint(txid, 0));\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        return block;\n+    }\n+\n+public:\n+    explicit InputFetcherTest(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts}\n+    {\n+        SeedRandomForTest(SeedRand::ZEROS);",
      "path": "src/test/inputfetcher_tests.cpp",
      "position": 1,
      "original_position": 55,
      "commit_id": "cf209da104d483aa064aa3bec621f1adc9574749",
      "original_commit_id": "c705c6f1f1b2b11c9f292d4bb60e197c6bd42603",
      "in_reply_to_id": 2388439344,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed to `FIXED_SEED`.",
      "created_at": "2025-10-11T18:04:32Z",
      "updated_at": "2025-10-11T18:04:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2423072759",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423072759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423072787",
      "pull_request_review_id": 3327511553,
      "id": 2423072787,
      "node_id": "PRRC_kwDOABII586QbSgT",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/amount.h>\n+#include <inputfetcher.h>\n+#include <primitives/transaction_identifier.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/random.h>\n+\n+#include <cstdint>\n+#include <map>\n+#include <optional>\n+#include <stdexcept>\n+#include <utility>\n+\n+using DbMap = std::map<const COutPoint, std::pair<std::optional<const Coin>, bool>>;\n+\n+class DbCoinsView : public CCoinsView\n+{\n+private:\n+    DbMap& m_map;\n+\n+public:\n+    DbCoinsView(DbMap& map) : m_map(map) {}\n+\n+    std::optional<Coin> GetCoin(const COutPoint& outpoint) const override\n+    {\n+        const auto it{m_map.find(outpoint)};\n+        assert(it != m_map.end());\n+        const auto [coin, err] = it->second;\n+        if (err) {\n+            throw std::runtime_error(\"database error\");\n+        }\n+        return coin;\n+    }\n+};\n+\n+class NoAccessCoinsView : public CCoinsView\n+{\n+public:\n+    std::optional<Coin> GetCoin(const COutPoint& outpoint) const override\n+    {\n+        abort();\n+    }\n+};\n+\n+FUZZ_TARGET(inputfetcher)\n+{\n+    SeedRandomStateForTest(SeedRand::ZEROS);\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto batch_size{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(0, 1024)};\n+    const auto worker_threads{\n+        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(2, 4)};\n+    InputFetcher fetcher{batch_size, worker_threads};\n+\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000) {\n+        CBlock block;\n+        Txid prevhash{Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))};\n+\n+        DbMap db_map{};\n+        std::map<const COutPoint, const Coin> cache_map{};\n+\n+        DbCoinsView db(db_map);\n+\n+        NoAccessCoinsView back;\n+        CCoinsViewCache cache(&back);\n+\n+        LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), static_cast<uint32_t>(batch_size * worker_threads * 2)) {\n+            CMutableTransaction tx;\n+\n+            LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10) {\n+                const auto txid{fuzzed_data_provider.ConsumeBool()\n+                    ? Txid::FromUint256(ConsumeUInt256(fuzzed_data_provider))\n+                    : prevhash};\n+                const auto index{fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+                const COutPoint outpoint(txid, index);\n+\n+                tx.vin.emplace_back(outpoint);\n+\n+                std::optional<Coin> maybe_coin;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    Coin coin{};\n+                    coin.fCoinBase = fuzzed_data_provider.ConsumeBool();\n+                    coin.nHeight =\n+                        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(\n+                            0, std::numeric_limits<int32_t>::max());\n+                    coin.out.nValue = ConsumeMoney(fuzzed_data_provider);\n+                    maybe_coin = coin;\n+                } else {\n+                    maybe_coin = std::nullopt;\n+                }\n+                db_map.try_emplace(outpoint, std::make_pair(\n+                    maybe_coin,\n+                    fuzzed_data_provider.ConsumeBool()));\n+\n+                // Add the coin to the cache\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    Coin coin{};\n+                    coin.fCoinBase = fuzzed_data_provider.ConsumeBool();\n+                    coin.nHeight =\n+                        fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(\n+                            0, std::numeric_limits<int32_t>::max());\n+                    coin.out.nValue =\n+                        fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(\n+                            -1, MAX_MONEY);\n+                    cache_map.try_emplace(outpoint, coin);\n+                    cache.EmplaceCoinInternalDANGER(\n+                        COutPoint(outpoint),\n+                        std::move(coin),\n+                        /*set_dirty=*/fuzzed_data_provider.ConsumeBool());\n+                }\n+            }\n+\n+            prevhash = tx.GetHash();\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+        }\n+\n+        fetcher.FetchInputs(cache, db, block);\n+\n+        for (const auto& [outpoint, pair] : db_map) {\n+            // Check pre-existing coins in the cache have not been updated\n+            const auto it{cache_map.find(outpoint)};\n+            if (it != cache_map.end()) {\n+                const auto& cache_coin{it->second};\n+                const auto& coin{cache.AccessCoin(outpoint)};\n+                assert(coin.IsSpent() == cache_coin.IsSpent());\n+                assert(coin.fCoinBase == cache_coin.fCoinBase);\n+                assert(coin.nHeight == cache_coin.nHeight);\n+                assert(coin.out == cache_coin.out);\n+                continue;\n+            }\n+\n+            if (!cache.HaveCoinInCache(outpoint)) {\n+                continue;\n+            }\n+\n+            const auto& [maybe_coin, err] = pair;\n+            assert(maybe_coin && !err);\n+\n+            // Check any newly added coins in the cache are the same as the db\n+            const auto& coin{cache.AccessCoin(outpoint)};\n+            assert(!coin.IsSpent());\n+            assert(coin.fCoinBase == (*maybe_coin).fCoinBase);\n+            assert(coin.nHeight == (*maybe_coin).nHeight);\n+            assert(coin.out == (*maybe_coin).out);",
      "path": "src/test/fuzz/inputfetcher.cpp",
      "position": 1,
      "original_position": 150,
      "commit_id": "cf209da104d483aa064aa3bec621f1adc9574749",
      "original_commit_id": "1faf0595a59ee0da61aabb195c9939575f2536eb",
      "in_reply_to_id": 2388459245,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done!",
      "created_at": "2025-10-11T18:04:40Z",
      "updated_at": "2025-10-11T18:04:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2423072787",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423072787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2429350877",
      "pull_request_review_id": 3335914404,
      "id": 2429350877,
      "node_id": "PRRC_kwDOABII586QzPPd",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;",
      "path": "src/inputfetcher.h",
      "position": 75,
      "original_position": 79,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388236852,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I have tried std::jthread\r\n\r\nI looked at this, but it doesn't really add anything to this implementation. We could have a `std::stop_token` for each thread, but we would have to `request_stop()` each `jthread` before releasing the semaphore in the destructor anyway. So it doesn't let us remove the destructor, and saves a line for not having to declare `m_request_stop`. I don't think it's worth it to use `jthread`s here.",
      "created_at": "2025-10-14T14:09:53Z",
      "updated_at": "2025-10-14T14:09:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2429350877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2429350877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2429481952",
      "pull_request_review_id": 3336096572,
      "id": 2429481952,
      "node_id": "PRRC_kwDOABII586QzvPg",
      "diff_hunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INPUTFETCHER_H\n+#define BITCOIN_INPUTFETCHER_H\n+\n+#include <coins.h>\n+#include <primitives/transaction_identifier.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <txdb.h>\n+#include <util/hasher.h>\n+#include <util/threadnames.h>\n+\n+#include <cstdint>\n+#include <stdexcept>\n+#include <thread>\n+#include <unordered_set>\n+#include <vector>\n+\n+/**\n+ * Input fetcher for fetching inputs from the CoinsDB and inserting\n+ * into the CoinsTip.\n+ *\n+ * The main thread loops through the block and writes all input prevouts to a\n+ * global vector. It then wakes all workers and starts working as well. Each\n+ * thread assigns itself a range of outpoints from the shared vector, and\n+ * fetches the coins from disk. The outpoint and coin pairs are written to a\n+ * thread local vector of pairs. Once all outpoints are fetched, the main thread\n+ * loops through all thread local vectors and writes the pairs to the cache.\n+ */\n+class InputFetcher\n+{\n+private:\n+    //! Mutex to protect the inner state\n+    Mutex m_mutex{};\n+    //! Worker threads block on this when out of work\n+    std::condition_variable m_worker_cv{};\n+    //! Main thread blocks on this when out of work\n+    std::condition_variable m_main_cv{};\n+\n+    /**\n+     * The outpoints to be fetched from disk.\n+     * This is written to on the main thread, then read from all worker\n+     * threads only after the main thread is done writing. Hence, it doesn't\n+     * need to be guarded by a lock.\n+     */\n+    std::vector<COutPoint> m_outpoints{};\n+    /**\n+     * The index of the last outpoint that is being fetched. Workers assign\n+     * themselves a range of outpoints to fetch from m_outpoints. They will use\n+     * this index as the end of their range, and then set this index to the\n+     * beginning of the range they take for the next worker. Once it gets to\n+     * zero, all outpoints have been assigned and the next worker will wait.\n+     */\n+    size_t m_last_outpoint_index GUARDED_BY(m_mutex){0};\n+\n+    //! The set of txids of the transactions in the current block being fetched.\n+    std::unordered_set<Txid, SaltedTxidHasher> m_txids{};\n+    //! The vector of thread local vectors of pairs to be written to the cache.\n+    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_pairs{};\n+\n+    /**\n+     * Number of outpoint fetches that haven't completed yet.\n+     * This includes outpoints that have already been assigned, but are still in\n+     * the worker's own batches.\n+     */\n+    int32_t m_in_flight_outpoints_count GUARDED_BY(m_mutex){0};\n+    //! The number of worker threads that are waiting on m_worker_cv\n+    int32_t m_idle_worker_count GUARDED_BY(m_mutex){0};\n+    //! The maximum number of outpoints to be assigned in one batch\n+    const int32_t m_batch_size;\n+    //! DB coins view to fetch from.\n+    const CCoinsView* m_db{nullptr};\n+    //! The cache to check if we already have this input.\n+    const CCoinsViewCache* m_cache{nullptr};\n+\n+    std::vector<std::thread> m_worker_threads;",
      "path": "src/inputfetcher.h",
      "position": 75,
      "original_position": 79,
      "commit_id": "64de91105312d36dadb5f71ec01fc6af9b14da69",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388236852,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I couldn't get it to work on CI anyway",
      "created_at": "2025-10-14T14:49:17Z",
      "updated_at": "2025-10-14T14:49:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2429481952",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2429481952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433196004",
      "pull_request_review_id": 3341247537,
      "id": 2433196004,
      "node_id": "PRRC_kwDOABII586RB5_k",
      "diff_hunk": "@@ -423,12 +423,13 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     /**\n      * Emplace a coin into cacheCoins without performing any checks, marking\n-     * the emplaced coin as dirty.\n+     * the emplaced coin as dirty unless `set_dirty` is `false`.\n      *\n-     * NOT FOR GENERAL USE. Used only when loading coins from a UTXO snapshot.\n+     * NOT FOR GENERAL USE. Used when loading coins from a UTXO snapshot, and\n+     * in the InputFetcher.\n      * @sa ChainstateManager::PopulateAndValidateSnapshot()\n      */\n-    void EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin);\n+    void EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin, bool set_dirty = true);",
      "path": "src/coins.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "44f07f8957d03cf4aa8b3aea533ed6c5de9ba043",
      "original_commit_id": "688c03597afb0b76077f1ffc4608eef19481056e",
      "in_reply_to_id": 2388269800,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I can just drop this first commit entirely. We don't actually care to not set the coins we fetch as dirty.\r\nIn the happy path, all these coins will be spent immediately after `ConnectBlock`, so they will be set to dirty anyways.\r\nIn the unhappy path where the valid proof-of-work block is found to be invalid, the dirty coins we added will just cause the coins to be overwritten by the same data in the db at the next flush.",
      "created_at": "2025-10-15T16:09:11Z",
      "updated_at": "2025-10-15T16:09:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31132#discussion_r2433196004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2433196004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31132"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    }
  ]
}
{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966",
    "id": 1216590444,
    "node_id": "PR_kwDOABII585Ig7Js",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/26966",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/26966.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/26966.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/201a90f03431708933040b3ba56aecd951db845e",
    "number": 26966,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "index: initial sync speedup, parallelize process",
    "user": {
      "login": "furszy",
      "id": 5377650,
      "node_id": "MDQ6VXNlcjUzNzc2NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/furszy",
      "html_url": "https://github.com/furszy",
      "followers_url": "https://api.github.com/users/furszy/followers",
      "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
      "organizations_url": "https://api.github.com/users/furszy/orgs",
      "repos_url": "https://api.github.com/users/furszy/repos",
      "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/furszy/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The current procedure for building the block filter index involves processing filters one at a time;\r\nReading blocks, undo data, and previous headers from disk sequentially.\r\n\r\nThis PR introduces a new mechanism to perform the work concurrently. Dividing the filters\r\ngeneration workload among a pool of workers that can be configured by the user,\r\nsignificantly increasing the speed of the index construction process.\r\n\r\nThe same concurrent processing model has been applied to the transactions index as well.\r\n\r\nThe newly introduced init flag `-indexworkers=<n>` enables the concurrent sync\r\nbehavior.\r\nWhere \"n\" is the number of worker threads that will be spawned at startup to create ranges\r\nof block filters during the initial sync process. Destroying the workers pool once the\r\ninitial sync completes.\r\nNote: by default, the parallelized sync process is not enabled.\r\n\r\nNow the juicy part:\r\nIn my computer, with the node in debug mode and on IBD, with `-indexworkers=4`, the\r\nblock filter index generation took less than an hour. While, in master, the sync took more than 7 hours.\r\n\r\nImportant Note:\r\nAs the access to the block data on disk is protected by `cs_main`, this new feature runs substantially\r\nfaster when the node is not in IBD.\r\n\r\n#### Testing Notes:\r\n\r\n1. Sync your node without any index.\r\n2. Restart the node with one of the indexes (`-blockfilterindex` or `-txindex`) and `-connect=0` (to sync only the index, without running the net/validation threads. Since threads won't be competing for `cs_main`, this will give you a more accurate result).\r\n\r\n   You’ll see a \"[index name] is enabled at height [height]\" log entry once it finishes. Then it’s just a matter of subtracting the index startup time from the \"index synced\" log time.\r\n\r\n  Keep in mind that threads are shared among all indexes you start. So if you run both indexes at the same time, your benchmark results cannot be compared against single-index runs.\r\n\r\n#### Fuzz Test Coverage Report\r\nCoverage diff for the fuzz test can be found on https://brunoerg.xyz/bitcoin-core-coverage/26966/coverage_report/",
    "labels": [
      {
        "id": 97470796,
        "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
        "name": "UTXO Db and Indexes",
        "color": "fbca04",
        "default": false
      }
    ],
    "created_at": "2023-01-25T13:36:23Z",
    "updated_at": "2025-10-14T01:31:11Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "6842e3ef7bb56cae41a70a7595678be3196c8ad5",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "furszy:2022_parallelize_blockfilter_index_2",
      "ref": "2022_parallelize_blockfilter_index_2",
      "sha": "201a90f03431708933040b3ba56aecd951db845e",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 143624913,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDM2MjQ5MTM=",
        "name": "bitcoin-core",
        "full_name": "furszy/bitcoin-core",
        "owner": {
          "login": "furszy",
          "id": 5377650,
          "node_id": "MDQ6VXNlcjUzNzc2NTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/furszy",
          "html_url": "https://github.com/furszy",
          "followers_url": "https://api.github.com/users/furszy/followers",
          "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
          "organizations_url": "https://api.github.com/users/furszy/orgs",
          "repos_url": "https://api.github.com/users/furszy/repos",
          "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/furszy/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/furszy/bitcoin-core",
        "description": "Bitcoin-Core",
        "fork": true,
        "url": "https://api.github.com/repos/furszy/bitcoin-core",
        "archive_url": "https://api.github.com/repos/furszy/bitcoin-core/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/furszy/bitcoin-core/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/furszy/bitcoin-core/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/furszy/bitcoin-core/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/furszy/bitcoin-core/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/furszy/bitcoin-core/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/furszy/bitcoin-core/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/furszy/bitcoin-core/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/furszy/bitcoin-core/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/furszy/bitcoin-core/contributors",
        "deployments_url": "https://api.github.com/repos/furszy/bitcoin-core/deployments",
        "downloads_url": "https://api.github.com/repos/furszy/bitcoin-core/downloads",
        "events_url": "https://api.github.com/repos/furszy/bitcoin-core/events",
        "forks_url": "https://api.github.com/repos/furszy/bitcoin-core/forks",
        "git_commits_url": "https://api.github.com/repos/furszy/bitcoin-core/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/furszy/bitcoin-core/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/furszy/bitcoin-core/git/tags%7B/sha%7D",
        "git_url": "git://github.com/furszy/bitcoin-core.git",
        "issue_comment_url": "https://api.github.com/repos/furszy/bitcoin-core/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/furszy/bitcoin-core/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/furszy/bitcoin-core/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/furszy/bitcoin-core/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/furszy/bitcoin-core/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/furszy/bitcoin-core/languages",
        "merges_url": "https://api.github.com/repos/furszy/bitcoin-core/merges",
        "milestones_url": "https://api.github.com/repos/furszy/bitcoin-core/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/furszy/bitcoin-core/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/furszy/bitcoin-core/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/furszy/bitcoin-core/releases%7B/id%7D",
        "ssh_url": "git@github.com:furszy/bitcoin-core.git",
        "stargazers_url": "https://api.github.com/repos/furszy/bitcoin-core/stargazers",
        "statuses_url": "https://api.github.com/repos/furszy/bitcoin-core/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/furszy/bitcoin-core/subscribers",
        "subscription_url": "https://api.github.com/repos/furszy/bitcoin-core/subscription",
        "tags_url": "https://api.github.com/repos/furszy/bitcoin-core/tags",
        "teams_url": "https://api.github.com/repos/furszy/bitcoin-core/teams",
        "trees_url": "https://api.github.com/repos/furszy/bitcoin-core/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/furszy/bitcoin-core.git",
        "hooks_url": "https://api.github.com/repos/furszy/bitcoin-core/hooks",
        "svn_url": "https://github.com/furszy/bitcoin-core",
        "homepage": "",
        "language": "C++",
        "forks_count": 3,
        "stargazers_count": 6,
        "watchers_count": 6,
        "size": 438154,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-14T01:31:09Z",
        "created_at": "2018-08-05T15:28:43Z",
        "updated_at": "2025-10-07T14:26:14Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "64a7c7cbb975cb3c3f25a3f784779f32cd95ebaa",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38022,
        "stargazers_count": 86140,
        "watchers_count": 86140,
        "size": 294840,
        "default_branch": "master",
        "open_issues_count": 834,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-13T13:07:34Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-14T01:41:11Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1058,
    "deletions": 137,
    "changed_files": 19,
    "commits": 7,
    "review_comments": 159,
    "comments": 39
  },
  "events": [
    {
      "event": "commented",
      "id": 1403631860,
      "node_id": "IC_kwDOABII585Tqbj0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1403631860",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-25T13:36:26Z",
      "updated_at": "2025-10-13T19:54:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/26966.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1275543891), [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1749211886), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3039751954), [mzumsande](https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3325595624) |\n| Approach ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2754283048) |\n| Approach NACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2965376357) |\n| Stale ACK | [pinheadmz](https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3067959910) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31308](https://github.com/bitcoin/bitcoin/pull/31308) (ci, iwyu: Treat warnings as errors for specific directories by hebasto)\n* [#29770](https://github.com/bitcoin/bitcoin/pull/29770) (index: Check all necessary block data is available before starting to sync by fjahr)\n* [#17783](https://github.com/bitcoin/bitcoin/pull/17783) (common: Disallow calling IsArgSet() on ALLOW_LIST options by ryanofsky)\n* [#17581](https://github.com/bitcoin/bitcoin/pull/17581) (refactor: Remove settings merge reverse precedence code by ryanofsky)\n* [#17580](https://github.com/bitcoin/bitcoin/pull/17580) (refactor: Add ALLOW_LIST flags and enforce usage in CheckArgFlags by ryanofsky)\n* [#17493](https://github.com/bitcoin/bitcoin/pull/17493) (util: Forbid ambiguous multiple assignments in config file by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1403631860",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "labeled",
      "id": 8354839933,
      "node_id": "LE_lADOABII585cyOzezwAAAAHx_L19",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8354839933",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-25T13:36:28Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8355412291,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAHyBXlD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8355412291",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ee71639af38ed0ca21ea09e0cda9818088f8a53c",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/ee71639af38ed0ca21ea09e0cda9818088f8a53c",
      "created_at": "2023-01-25T14:36:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8355861677,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAHyDFSt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8355861677",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "deb2e6ea4b7ccca18ec3254f356e4f5f722e7c92",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/deb2e6ea4b7ccca18ec3254f356e4f5f722e7c92",
      "created_at": "2023-01-25T15:20:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8356547944,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAHyFs1o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8356547944",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d8b0f5e246ca4600388a7375575423145f9fe3e8",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/d8b0f5e246ca4600388a7375575423145f9fe3e8",
      "created_at": "2023-01-25T16:29:14Z"
    },
    {
      "event": "commented",
      "id": 1405102999,
      "node_id": "IC_kwDOABII585TwCuX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1405102999",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-26T14:38:27Z",
      "updated_at": "2023-01-26T14:38:27Z",
      "author_association": "MEMBER",
      "body": "Cool, will take it for a spin...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1405102999",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8379907425,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAHzez1h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8379907425",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "65dc850806ad35cb7778e9b82f03521981279376",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/65dc850806ad35cb7778e9b82f03521981279376",
      "created_at": "2023-01-28T15:04:28Z"
    },
    {
      "event": "commented",
      "id": 1407420783,
      "node_id": "IC_kwDOABII585T44lv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407420783",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-28T15:18:54Z",
      "updated_at": "2023-01-28T15:18:54Z",
      "author_association": "MEMBER",
      "body": "Cool @Sjors, just pushed a small update. Found a little bug.\r\n\r\nGoing to add an important note to the PR description (because otherwise testing results will vary a lot):\r\n\r\nAs the access to the block data on disk is protected by `cs_main`, this new feature runs substantially\r\nfaster when the node is not in IBD.\r\n(where \"substantially\" here means full index sync, with 5 workers, in less than 20 minutes in my computer).",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1407420783",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "mentioned",
      "id": 8379935929,
      "node_id": "MEE_lADOABII585cyOzezwAAAAHze6y5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8379935929",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-28T15:18:54Z"
    },
    {
      "event": "subscribed",
      "id": 8379935930,
      "node_id": "SE_lADOABII585cyOzezwAAAAHze6y6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8379935930",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-28T15:18:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8379965169,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAHzfB7x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8379965169",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "09cc56aca0fe9231d5beaa4bef2948c25359a8a5",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/09cc56aca0fe9231d5beaa4bef2948c25359a8a5",
      "created_at": "2023-01-28T15:40:27Z"
    },
    {
      "event": "reviewed",
      "id": 1274319556,
      "node_id": "PRR_kwDOABII585L9JLE",
      "url": null,
      "actor": null,
      "commit_id": "09cc56aca0fe9231d5beaa4bef2948c25359a8a5",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2023-01-29T22:49:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "It's probably much easier suggested than done, but did you attempt to implement parallelization in a more general way so that other indices could benefit from it as well? On first glance, `txindex`, and the indices suggested in PRs  (#24539, #26951) seem to be parallelizable as well (not `coinstatsindex` though). \r\n",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1274319556",
      "submitted_at": "2023-01-29T22:49:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "commented",
      "id": 1408645764,
      "node_id": "IC_kwDOABII585T9jqE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1408645764",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-30T13:37:06Z",
      "updated_at": "2023-01-30T13:37:06Z",
      "author_association": "MEMBER",
      "body": "> It's probably much easier suggested than done, but did you attempt to implement parallelization in a more general way so that other indices could benefit from it as well?\r\n\r\nYeah, that is part of the plan. I started with the block filter index because it requires an special treatment that `txindex` parallelization does not require (block/undo data reading and block filters creation can be parallelized but writing must be done sequentially due the need to link filter headers to their predecessors to create the filters-chain on disk).\r\n\r\nMy idea was to start reviewing this one, so the process gets as clean as possible, and then move forward with the generalization step. It's usually more natural to abstract processes when the specific cases are well-defined.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1408645764",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8389982140,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAH0FPe8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8389982140",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "43e6237cd58be888a867dc7a4a7f2d35615ae640",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/43e6237cd58be888a867dc7a4a7f2d35615ae640",
      "created_at": "2023-01-30T16:15:03Z"
    },
    {
      "event": "reviewed",
      "id": 1275543891,
      "node_id": "PRR_kwDOABII585MB0FT",
      "url": null,
      "actor": null,
      "commit_id": "43e6237cd58be888a867dc7a4a7f2d35615ae640",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2023-01-30T16:42:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nPerhaps it could have separate parallelization and index logic. So it could be reused in other indexes.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1275543891",
      "submitted_at": "2023-01-30T16:42:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8392250159,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAH0N5Mv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8392250159",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b2b62f513a401dda1d60412189193840fb57aa3a",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/b2b62f513a401dda1d60412189193840fb57aa3a",
      "created_at": "2023-01-30T20:30:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8392410487,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAH0OgV3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8392410487",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4e1fba191fe532b2b43ce18964579482fda2eddd",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/4e1fba191fe532b2b43ce18964579482fda2eddd",
      "created_at": "2023-01-30T20:55:07Z"
    },
    {
      "event": "commented",
      "id": 1420800151,
      "node_id": "IC_kwDOABII585Ur7CX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1420800151",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-07T13:47:32Z",
      "updated_at": "2023-02-07T18:47:14Z",
      "author_association": "MEMBER",
      "body": "Building the index on (AMD Ryzen 7950X, blocks stored on SSD):\r\n* master @ fe86616bb4ad0c4296d34299bc2e2f0fca1fe936: 35'15\" (mostly 1 alternating CPU thread)\r\n* this PR (rebased)\r\n  * n=8: 5'20\" (uses about 8 of 32 CPU threads as expected)\r\n  * n=32: 4'26\" (pleasantly close to 100% CPU usage with a dip every 10 seconds, but it drops to only 1 CPU in the last minute or two)\r\n  \r\nI made sure to not load any wallets and disabled other indexes.\r\n\r\nI didn't test if the index was correct.\r\n\r\nI wonder if, for users without this index, it would be faster to generate the index, rescan the wallet and then delete it again. Combined with #26951 you would only have to generate filters up to the age of the wallet (IIUC, cc @pstratem).\r\n\r\nNote to self for future benchmarks: `-txindex` takes 1:07'14\", `-coinstatsindex` takes 3.5 hours.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1420800151",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "mentioned",
      "id": 8458405404,
      "node_id": "MEE_lADOABII585cyOzezwAAAAH4KQYc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8458405404",
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-07T14:03:17Z"
    },
    {
      "event": "subscribed",
      "id": 8458405422,
      "node_id": "SE_lADOABII585cyOzezwAAAAH4KQYu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8458405422",
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-07T14:03:17Z"
    },
    {
      "event": "commented",
      "id": 1420850865,
      "node_id": "IC_kwDOABII585UsHax",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1420850865",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-07T14:18:36Z",
      "updated_at": "2023-02-07T14:27:45Z",
      "author_association": "MEMBER",
      "body": "Great results @Sjors!.\r\n\r\nCould also give it a run rebased on top #27006.\r\nOn master, the index initial sync is slower when the node is in IBD because the index thread has to compete for access to block data on disk through `cs_main` acquisition.\r\n\r\n> I didn't test if the index was correct.\r\n\r\nThe PR contain a test verifying it.\r\n\r\n----------------------------------------------\r\n\r\nSide note:\r\nI'm working on generalizing the parallelization flow so other indexes, like the txindex and #26951 can make use of it too.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1420850865",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "mentioned",
      "id": 8458571498,
      "node_id": "MEE_lADOABII585cyOzezwAAAAH4K47q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8458571498",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-07T14:18:36Z"
    },
    {
      "event": "subscribed",
      "id": 8458571516,
      "node_id": "SE_lADOABII585cyOzezwAAAAH4K478",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8458571516",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-07T14:18:36Z"
    },
    {
      "event": "labeled",
      "id": 8551773620,
      "node_id": "LE_lADOABII585cyOzezwAAAAH9ubW0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8551773620",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-17T23:32:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8571310272,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAH-49DA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8571310272",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1da78b2a4e0fe8d5d0d290c8453dabc22b04c8a6",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/1da78b2a4e0fe8d5d0d290c8453dabc22b04c8a6",
      "created_at": "2023-02-21T13:56:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8571364585,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAH-5KTp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8571364585",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f264ed562e786abbf8636d57bdd933915d70826c",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f264ed562e786abbf8636d57bdd933915d70826c",
      "created_at": "2023-02-21T14:01:44Z"
    },
    {
      "event": "unlabeled",
      "id": 8572043596,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAH-7wFM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8572043596",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-21T15:07:08Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8586116429,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAH_xb1N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8586116429",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e57e27ab2e62c9d758bef374f1250c5f7b1d5195",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/e57e27ab2e62c9d758bef374f1250c5f7b1d5195",
      "created_at": "2023-02-22T22:45:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8620994733,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAIB2fCt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8620994733",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b18df4d0e826d1a3c1d08dd1addeecc39ff13afa",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/b18df4d0e826d1a3c1d08dd1addeecc39ff13afa",
      "created_at": "2023-02-27T22:37:47Z"
    },
    {
      "event": "renamed",
      "id": 8620995625,
      "node_id": "RTE_lADOABII585cyOzezwAAAAIB2fQp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8620995625",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-27T22:37:56Z",
      "rename": {
        "from": "index: blockfilter initial sync speedup, parallelize process",
        "to": "index: blockfilter and txindex initial sync speedup, parallelize process"
      }
    },
    {
      "event": "renamed",
      "id": 8621172012,
      "node_id": "RTE_lADOABII585cyOzezwAAAAIB3KUs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8621172012",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-27T23:07:13Z",
      "rename": {
        "from": "index: blockfilter and txindex initial sync speedup, parallelize process",
        "to": "index: blockfilter initial sync speedup, parallelize process"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8621436399,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAIB4K3v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8621436399",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "876afc27e4bd69940587790fb66d51d949284004",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/876afc27e4bd69940587790fb66d51d949284004",
      "created_at": "2023-02-27T23:57:02Z"
    },
    {
      "event": "commented",
      "id": 1448113513,
      "node_id": "IC_kwDOABII585WUHVp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448113513",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-28T12:40:55Z",
      "updated_at": "2023-02-28T12:40:55Z",
      "author_association": "MEMBER",
      "body": "PR updated, most of it implementation has changed.\r\n\r\nThe news are:\r\n1) Decreased ThreadSync `cs_main` lock contention.\r\n2) Removed `CBlockIndex` access from the child indexes internals.\r\n3) Implemented generic workers pool.\r\n4) Introduced a last header cache for the Block Filter index. Avoiding disk reads on every new processed block.\r\n5) Enabled parallel sync on the tx index.\r\n\r\nImportant Note:\r\nThe introduced workers pool spawned by the `-indexworkers` init arg is shared among all the enabled indexes that support parallel sync.\r\n\r\nThe implementation uses `std::any` mainly to simplify the patch-set, the base class template form of it requires a larger set of changes.\r\n\r\nSide note: in a first glance and without going too far over the coinstats index implementation, I would say that it could also be parallelized. But will leave it for a follow-up to not continue expanding the PR size.\r\n\r\nFuture (doesn't need to be included here, just mentioning so the path is clear):\r\nI'm working on decoupling the initial sync logic into a separate structure, so indexes subscribe to events instead of reading blocks from disk by themselves.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1448113513",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "labeled",
      "id": 9220750641,
      "node_id": "LE_lADOABII585cyOzezwAAAAIlmX0x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9220750641",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T10:29:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9225798029,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAIl5oGN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9225798029",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-11T18:57:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9226698287,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAIl9D4v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9226698287",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7b0fda74e28a4c2eb96373617431b5b136ac5fb7",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/7b0fda74e28a4c2eb96373617431b5b136ac5fb7",
      "created_at": "2023-05-11T20:50:10Z"
    },
    {
      "event": "labeled",
      "id": 9505256638,
      "node_id": "LE_lADOABII585cyOzezwAAAAI2jrS-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9505256638",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-12T17:03:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9595606228,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAI78VTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9595606228",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a6602df24936b108da6911edc27db647dc69a6ec",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/a6602df24936b108da6911edc27db647dc69a6ec",
      "created_at": "2023-06-21T15:48:53Z"
    },
    {
      "event": "unlabeled",
      "id": 9596608210,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAI8AJ7S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9596608210",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-21T17:13:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9686873816,
      "node_id": "LE_lADOABII585cyOzezwAAAAJBYfbY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9686873816",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T11:24:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 9688743953,
      "node_id": "UE_lADOABII585cyOzezwAAAAJBfoAR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9688743953",
      "actor": {
        "login": "joostjager",
        "id": 4638168,
        "node_id": "MDQ6VXNlcjQ2MzgxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4638168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/joostjager",
        "html_url": "https://github.com/joostjager",
        "followers_url": "https://api.github.com/users/joostjager/followers",
        "following_url": "https://api.github.com/users/joostjager/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/joostjager/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/joostjager/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/joostjager/subscriptions",
        "organizations_url": "https://api.github.com/users/joostjager/orgs",
        "repos_url": "https://api.github.com/users/joostjager/repos",
        "events_url": "https://api.github.com/users/joostjager/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/joostjager/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T14:51:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9689787027,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAJBjmqT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9689787027",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "608ba0a5fc7adbc44173ce42b0ad42f71a6006ef",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/608ba0a5fc7adbc44173ce42b0ad42f71a6006ef",
      "created_at": "2023-06-30T16:39:54Z"
    },
    {
      "event": "unlabeled",
      "id": 9690407604,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAJBl-K0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9690407604",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T18:03:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9690916871,
      "node_id": "LE_lADOABII585cyOzezwAAAAJBn6gH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9690916871",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-06-30T18:52:30Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 9724188917,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAJDm1j1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9724188917",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-04T18:17:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9748574133,
      "node_id": "LE_lADOABII585cyOzezwAAAAJFD2-1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9748574133",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-07-06T22:10:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10047778887,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAJW5PBH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10047778887",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "642050d9eafc917e9d4468f94d696c7fdb7c660f",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/642050d9eafc917e9d4468f94d696c7fdb7c660f",
      "created_at": "2023-08-09T14:23:49Z"
    },
    {
      "event": "unlabeled",
      "id": 10049812185,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAJXA_bZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10049812185",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-09T16:24:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10219277022,
      "node_id": "LE_lADOABII585cyOzezwAAAAJhHcre",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10219277022",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-29T10:28:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10221183332,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAJhOuFk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10221183332",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9bffd743d1d08c8e16a86214aabf5ecb92e4c1b3",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/9bffd743d1d08c8e16a86214aabf5ecb92e4c1b3",
      "created_at": "2023-08-29T13:19:44Z"
    },
    {
      "event": "commented",
      "id": 1705682424,
      "node_id": "IC_kwDOABII585lqqX4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1705682424",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-04T20:34:56Z",
      "updated_at": "2023-09-04T20:34:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Could mark as draft while CI is red?",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1705682424",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10277147606,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAJkkNPW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10277147606",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fce1e63d3bcb13500afb4988b6b64e789a1704b6",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/fce1e63d3bcb13500afb4988b6b64e789a1704b6",
      "created_at": "2023-09-04T21:30:51Z"
    },
    {
      "event": "commented",
      "id": 1707706393,
      "node_id": "IC_kwDOABII585lyYgZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1707706393",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-06T05:47:05Z",
      "updated_at": "2023-09-06T05:47:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "It looks like tsan failed, but there is no log, when there should be a log. Maybe it was accidentally removed by https://github.com/bitcoin/bitcoin/pull/27667 ?",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1707706393",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "labeled",
      "id": 10345007297,
      "node_id": "LE_lADOABII585cyOzezwAAAAJonEjB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10345007297",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-12T10:33:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10346720201,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAJotmvJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10346720201",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80cb63b28c38646468ab498198b2af6074d97da3",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/80cb63b28c38646468ab498198b2af6074d97da3",
      "created_at": "2023-09-12T13:10:11Z"
    },
    {
      "event": "unlabeled",
      "id": 10347943188,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAJoyRUU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10347943188",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-12T14:46:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 10347952900,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAJoyTsE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10347952900",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-12T14:47:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10531004528,
      "node_id": "LE_lADOABII585cyOzezwAAAAJzsmBw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10531004528",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-02T21:55:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10693881822,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAJ9Z6_e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10693881822",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "937c89670d96faa393dbad2f3226189b8154b91d",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/937c89670d96faa393dbad2f3226189b8154b91d",
      "created_at": "2023-10-18T14:23:41Z"
    },
    {
      "event": "unlabeled",
      "id": 10693992264,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAJ9aV9I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10693992264",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-18T14:31:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10697000836,
      "node_id": "LE_lADOABII585cyOzezwAAAAJ9l0eE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10697000836",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-18T17:35:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1778849023,
      "node_id": "IC_kwDOABII585qBxT_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1778849023",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-25T09:16:14Z",
      "updated_at": "2023-10-25T09:16:14Z",
      "author_association": "MEMBER",
      "body": "CI is still red. Also, how would this work with AU?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1778849023",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10792842678,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAKDTbW2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10792842678",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4027f6e6020cb1ab9ab4edf778841a82d1769a87",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/4027f6e6020cb1ab9ab4edf778841a82d1769a87",
      "created_at": "2023-10-27T14:59:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10793295142,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAKDVJ0m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10793295142",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "373b0bb077296624b7aeb5108673ae8f8b00b20d",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/373b0bb077296624b7aeb5108673ae8f8b00b20d",
      "created_at": "2023-10-27T15:44:32Z"
    },
    {
      "event": "unlabeled",
      "id": 10793692886,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAKDWq7W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10793692886",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-27T16:29:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1798294413,
      "node_id": "IC_kwDOABII585rL8uN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1798294413",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-07T11:09:23Z",
      "updated_at": "2023-11-07T12:18:19Z",
      "author_association": "MEMBER",
      "body": "> Could also give it a run rebased on top #27006.\r\n\r\nThat PR currently does not cleanly cherry-pick on top of this PR, not can I (trivially) rebase this PR on top top of it. Happy to try if you can make a branch.\r\n\r\nI just tried it again, deleting the blockfilterindex and rebuilding it. My impression is that it's going slower than before and I'm not seeing much CPU activity.\r\n\r\nI also noticed the shutdown takes a very long time, with the indexer (?) threads sticking around for many minutes:\r\n\r\n<img width=\"760\" alt=\"Scherm­afbeelding 2023-11-07 om 21 16 24\" src=\"https://github.com/bitcoin/bitcoin/assets/10217/909e8257-44e9-4c9c-8744-1876a9c41a9b\">\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1798294413",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "reviewed",
      "id": 1747911419,
      "node_id": "PRR_kwDOABII585oLwL7",
      "url": null,
      "actor": null,
      "commit_id": "373b0bb077296624b7aeb5108673ae8f8b00b20d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2023-11-25T12:53:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1747911419",
      "submitted_at": "2023-11-25T12:53:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "commented",
      "id": 1826301507,
      "node_id": "IC_kwDOABII585s2yZD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1826301507",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-25T12:54:33Z",
      "updated_at": "2023-11-25T12:54:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "This all looks pretty promising. I left some feedback before continuing with the latter half of the PR.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1826301507",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "reviewed",
      "id": 1749211886,
      "node_id": "PRR_kwDOABII585oQtru",
      "url": null,
      "actor": null,
      "commit_id": "373b0bb077296624b7aeb5108673ae8f8b00b20d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2023-11-25T23:01:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\n\r\nDone with my first pass, still want to think some of the approaches here over a bit.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1749211886",
      "submitted_at": "2023-11-25T23:01:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 1749369732,
      "node_id": "PRR_kwDOABII585oRUOE",
      "url": null,
      "actor": null,
      "commit_id": "373b0bb077296624b7aeb5108673ae8f8b00b20d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2023-11-26T16:08:46Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1749369732",
      "submitted_at": "2023-11-26T16:08:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "labeled",
      "id": 11253296861,
      "node_id": "LE_lADOABII585cyOzezwAAAAKev67d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11253296861",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T21:54:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1863088709,
      "node_id": "PRR_kwDOABII585vDHpF",
      "url": null,
      "actor": null,
      "commit_id": "373b0bb077296624b7aeb5108673ae8f8b00b20d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-02-05T15:22:24Z",
      "author_association": "MEMBER",
      "body": "Focus is on #28955, which contains a good number of commits decoupled from this PR.\r\nWill come back here after it.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1863088709",
      "submitted_at": "2024-02-05T15:22:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "referenced",
      "id": 12187782474,
      "node_id": "REFE_lADOABII585cyOzezwAAAALWcs1K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12187782474",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b96a1925e21b7d79506cc652f4d29781e9f949c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b96a1925e21b7d79506cc652f4d29781e9f949c",
      "created_at": "2024-03-20T16:30:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12191981340,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAALWst8c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12191981340",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aa0da5a82a8e9910cad6c8e5e861bea0f4d5941d",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/aa0da5a82a8e9910cad6c8e5e861bea0f4d5941d",
      "created_at": "2024-03-20T22:07:21Z"
    },
    {
      "event": "unlabeled",
      "id": 12192870117,
      "node_id": "UNLE_lADOABII585cyOzezwAAAALWwG7l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12192870117",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T23:53:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 12193519646,
      "node_id": "LE_lADOABII585cyOzezwAAAALWylge",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12193519646",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-21T01:36:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2011026298,
      "node_id": "IC_kwDOABII58533dN6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2011026298",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-21T01:36:40Z",
      "updated_at": "2024-03-21T01:36:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22906894781</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2011026298",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12204386011,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAALXcCbb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12204386011",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fd79112a1cec4cf993200bd89e6fd19957bb608e",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/fd79112a1cec4cf993200bd89e6fd19957bb608e",
      "created_at": "2024-03-21T17:22:34Z"
    },
    {
      "event": "commented",
      "id": 2013158583,
      "node_id": "IC_kwDOABII5853_ly3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2013158583",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-21T17:44:10Z",
      "updated_at": "2024-03-21T22:13:56Z",
      "author_association": "MEMBER",
      "body": "Running it again, let's see how quick it is...\r\n\r\nSince I might set `indexworkers=32` in my config file, which is great for the initial sync and if it needs to do a big catchup. But does it cause much overhead when it's up to date? Maybe the threads should spin down if there's not much work.\r\n\r\nWhat happens when there are multiple `readBlockFromDisk` calls around the same time? I don't see any (obvious) thread locking happening in `CAutoFile`. Since I keep block files on a spinning disk (`-blocksdir`), I wonder if that potentially slows things down - compared to fetching one file in a single uninterrupted operation.\r\n\r\nSo far (block 200K) my spinning disk is making a ton of noise and CPU activity is negligible.\r\n\r\n---\r\n\r\nIt took 4 hours and 23 minutes. That's an improvement over the 5 hours 46 minutes without: https://github.com/bitcoin/bitcoin/pull/28955#issuecomment-1961511162\r\n\r\nNote that last year I tested with SSD - which resulted in a 16x improvement https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-1420800151. This time I used a spinning disk. CPU activity was negligible all the way.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2013158583",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "commented",
      "id": 2013176407,
      "node_id": "IC_kwDOABII5853_qJX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2013176407",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-21T17:54:05Z",
      "updated_at": "2024-03-21T17:54:37Z",
      "author_association": "MEMBER",
      "body": "> Running it again, let's see how quick it is...\r\n> \r\n> Since I might set `indexworkers=32` in my config file, which is great for the initial sync and if it needs to do a big catchup. But does it cause much overhead when it's up to date? Maybe the threads should spin down if there's not much work.\r\n\r\nYeah sure. The thread pool can be destructed once all indexes initial sync finish (once the index is synced, it starts receiving blocks through the validation signals and does not use the initial sync workers anymore). \r\nI'm currently tackling theCharlatan's feedback, and thinking about some improvements. Will add this change too on the next push.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2013176407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "unlabeled",
      "id": 12205915373,
      "node_id": "UNLE_lADOABII585cyOzezwAAAALXh3zt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12205915373",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-21T19:29:31Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12224388900,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAALYoV8k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12224388900",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eff91c8656cd49b5b626925f5ec281b06f4eba28",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/eff91c8656cd49b5b626925f5ec281b06f4eba28",
      "created_at": "2024-03-23T13:08:13Z"
    },
    {
      "event": "commented",
      "id": 2016496882,
      "node_id": "IC_kwDOABII5854MUzy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2016496882",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-23T13:34:19Z",
      "updated_at": "2024-03-23T16:39:26Z",
      "author_association": "MEMBER",
      "body": "Thanks for the in-depth review theCharlatan! Most comments were tackled. And thanks for testing Sjors!\r\n\r\nNow that we've reached this point (after #28955 merge), I'm rethinking and polishing the design. I'm not totally convinced about the current implementation anymore. We've grown a lot since this was implemented two years ago.\r\nOther than that, Sjors had a nice idea that I want to try out (or at least design this in a way so that the idea can be implemented in isolation in the future) --> Instead of dividing the work based on block ranges, it can be divided based on block file ranges. This would minimize the needle movement on spinning disks.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2016496882",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "labeled",
      "id": 12224496985,
      "node_id": "LE_lADOABII585cyOzezwAAAALYowVZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12224496985",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-23T14:10:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2016505858,
      "node_id": "IC_kwDOABII5854MXAC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2016505858",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-23T14:10:35Z",
      "updated_at": "2024-03-23T14:10:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23011013574</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2016505858",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "commented",
      "id": 2017518691,
      "node_id": "IC_kwDOABII5854QORj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017518691",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-25T09:06:58Z",
      "updated_at": "2024-03-25T09:08:07Z",
      "author_association": "MEMBER",
      "body": ">  Instead of dividing the work based on block ranges, it can be divided based on block file ranges. This would minimize the needle movement on spinning disks.\r\n\r\nIt's possible that this can be achieved with block ranges too. But you have to make sure only one block range is read at any given time. I.e. the other threads should wait while a disk read is in progress. I suspect the problem lies in having 32 threads trying to read different things at the same time, and then operating system goes and fetches a few kilobytes, a few kilobytes there, etc. Though I haven't measured this.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2017518691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "unlabeled",
      "id": 12361051331,
      "node_id": "UNLE_lADOABII585cyOzezwAAAALgxqzD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12361051331",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-04T16:08:44Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2039182163,
      "node_id": "IC_kwDOABII5855i3NT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2039182163",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T07:54:33Z",
      "updated_at": "2024-04-05T07:54:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23011013574</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2039182163",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "labeled",
      "id": 12369611035,
      "node_id": "LE_lADOABII585cyOzezwAAAALhSUkb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12369611035",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T07:54:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2039191008,
      "node_id": "IC_kwDOABII5855i5Xg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2039191008",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T07:59:13Z",
      "updated_at": "2024-04-05T07:59:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\ntest/threadpool_tests.cpp(9): Entering test suite \"threadpool_tests\"\r\ntest/threadpool_tests.cpp(11): Entering test case \"threadpool_basic\"\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=26928)\r\n  Write of size 8 at 0x721000012718 by thread T13 (mutexes: write M0):\r\n    #0 free <null> (test_bitcoin+0x156ae3) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #1 std::range_error::~range_error() <null> (libc++abi.so.1+0x28b74) (BuildId: 40d8c515ee7a3c2d826acc730982f279ffe00146)\r\n    #2 std::__1::__shared_count::__release_shared[abi:ne180100]() /usr/lib/llvm-18/bin/../include/c++/v1/__memory/shared_ptr.h:157:7 (test_bitcoin+0xb2e070) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #3 std::__1::__shared_weak_count::__release_shared[abi:ne180100]() /usr/lib/llvm-18/bin/../include/c++/v1/__memory/shared_ptr.h:186:25 (test_bitcoin+0xb2e070)\r\n    #4 std::__1::shared_ptr<std::__1::packaged_task<void ()>>::~shared_ptr[abi:ne180100]() /usr/lib/llvm-18/bin/../include/c++/v1/__memory/shared_ptr.h:648:17 (test_bitcoin+0xb2e070)\r\n    #5 std::__1::future<decltype(fp())> ThreadPool::Submit<threadpool_tests::threadpool_basic::test_method()::$_6>(threadpool_tests::threadpool_basic::test_method()::$_6)::'lambda'()::~() src/./util/threadpool.h:96:34 (test_bitcoin+0xb2e070)\r\n    #6 std::__1::__compressed_pair_elem<std::__1::future<decltype(fp())> ThreadPool::Submit<threadpool_tests::threadpool_basic::test_method()::$_6>(threadpool_tests::threadpool_basic::test_method()::$_6)::'lambda'(), 0, false>::~__compressed_pair_elem() /usr/lib/llvm-18/bin/../include/c++/v1/__memory/compressed_pair.h:44:8 (test_bitcoin+0xb2e070)\r\n    #7 std::__1::__function::__alloc_func<std::__1::future<decltype(fp())> ThreadPool::Submit<threadpool_tests::threadpool_basic::test_method()::$_6>(threadpool_tests::threadpool_basic::test_method()::$_6)::'lambda'(), std::__1::allocator<std::__1::future<decltype(fp())> ThreadPool::Submit<threadpool_tests::threadpool_basic::test_method()::$_6>(threadpool_tests::threadpool_basic::test_method()::$_6)::'lambda'()>, void ()>::destroy[abi:ne180100]() /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:182:58 (test_bitcoin+0xb2e070)\r\n    #8 std::__1::__function::__func<std::__1::future<decltype(fp())> ThreadPool::Submit<threadpool_tests::threadpool_basic::test_method()::$_6>(threadpool_tests::threadpool_basic::test_method()::$_6)::'lambda'(), std::__1::allocator<std::__1::future<decltype(fp())> ThreadPool::Submit<threadpool_tests::threadpool_basic::test_method()::$_6>(threadpool_tests::threadpool_basic::test_method()::$_6)::'lambda'()>, void ()>::destroy() /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:297:8 (test_bitcoin+0xb2e070)\r\n    #9 std::__1::__function::__value_func<void ()>::~__value_func[abi:ne180100]() src/./sync.h (test_bitcoin+0x442c8b) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #10 std::__1::function<void ()>::~function() /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:972:43 (test_bitcoin+0x442c8b)\r\n    #11 ThreadPool::WorkerThread() src/./util/threadpool.h:56:9 (test_bitcoin+0x442c8b)\r\n    #12 ThreadPool::Start(int)::'lambda'()::operator()() const src/./util/threadpool.h:73:101 (test_bitcoin+0x442ae5) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #13 decltype(std::declval<ThreadPool::Start(int)::'lambda'()&>()()) std::__1::__invoke[abi:ne180100]<ThreadPool::Start(int)::'lambda'()&>(ThreadPool::Start(int)::'lambda'()&) /usr/lib/llvm-18/bin/../include/c++/v1/__type_traits/invoke.h:344:25 (test_bitcoin+0x442ae5)\r\n    #14 void std::__1::__invoke_void_return_wrapper<void, true>::__call[abi:ne180100]<ThreadPool::Start(int)::'lambda'()&>(ThreadPool::Start(int)::'lambda'()&) /usr/lib/llvm-18/bin/../include/c++/v1/__type_traits/invoke.h:419:5 (test_bitcoin+0x442ae5)\r\n    #15 std::__1::__function::__alloc_func<ThreadPool::Start(int)::'lambda'(), std::__1::allocator<ThreadPool::Start(int)::'lambda'()>, void ()>::operator()[abi:ne180100]() /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:169:12 (test_bitcoin+0x442ae5)\r\n    #16 std::__1::__function::__func<ThreadPool::Start(int)::'lambda'(), std::__1::allocator<ThreadPool::Start(int)::'lambda'()>, void ()>::operator()() /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:311:10 (test_bitcoin+0x442ae5)\r\n    #17 std::__1::__function::__value_func<void ()>::operator()[abi:ne180100]() const /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:428:12 (test_bitcoin+0x1815b98) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #18 std::__1::function<void ()>::operator()() const /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:981:10 (test_bitcoin+0x1815b98)\r\n    #19 util::TraceThread(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>) src/util/thread.cpp:21:9 (test_bitcoin+0x1815b98)\r\n    #20 decltype(std::declval<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>)>()(std::declval<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(), std::declval<ThreadPool::Start(int)::'lambda'()>())) std::__1::__invoke[abi:ne180100]<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'()>(void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, ThreadPool::Start(int)::'lambda'()&&) /usr/lib/llvm-18/bin/../include/c++/v1/__type_traits/invoke.h:344:25 (test_bitcoin+0x44261e) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #21 void std::__1::__thread_execute[abi:ne180100]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'(), 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'()>&, std::__1::__tuple_indices<2ul, 3ul>) /usr/lib/llvm-18/bin/../include/c++/v1/__thread/thread.h:193:3 (test_bitcoin+0x44261e)\r\n    #22 void* std::__1::__thread_proxy[abi:ne180100]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'()>>(void*) /usr/lib/llvm-18/bin/../include/c++/v1/__thread/thread.h:202:3 (test_bitcoin+0x44261e)\r\n  Previous read of size 8 at 0x721000012718 by main thread:\r\n    #0 strcmp <null> (test_bitcoin+0x161718) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #1 boost::test_tools::tt_detail::equal_impl(char const*, char const*) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/test_tools.ipp:463:30 (test_bitcoin+0x1fca6f) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #2 boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl<char const*, char [25]>(char const* const&, char const (&) [25], mpl_::bool_<false>) const /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/tools/old/impl.hpp:130:16 (test_bitcoin+0xb2f88f) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #3 boost::test_tools::assertion_result boost::test_tools::tt_detail::equal_impl_frwd::operator()<char const*, char [25]>(char const* const&, char const (&) [25]) const /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/tools/old/impl.hpp:145:16 (test_bitcoin+0xb2f88f)\r\n    #4 bool boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, char const*, char [25]>(boost::test_tools::tt_detail::equal_impl_frwd, boost::unit_test::lazy_ostream const&, boost::unit_test::basic_cstring<char const>, unsigned long, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, char const* const&, char const*, char const (&) [25], char const*) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/tools/old/impl.hpp:92:1 (test_bitcoin+0xb2f88f)\r\n    #5 threadpool_tests::threadpool_basic::test_method() src/test/threadpool_tests.cpp:117:13 (test_bitcoin+0xb2855b) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #6 threadpool_tests::threadpool_basic_invoker() src/test/threadpool_tests.cpp:11:1 (test_bitcoin+0xb26256) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #7 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:117:11 (test_bitcoin+0x31b9dd) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #8 boost::function0<void>::operator()() const /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:763:14 (test_bitcoin+0x26f5f8) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #9 boost::detail::forward::operator()() /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:1388:32 (test_bitcoin+0x26f5f8)\r\n    #10 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:137:18 (test_bitcoin+0x26f5f8)\r\n    #11 boost::function0<int>::operator()() const /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:763:14 (test_bitcoin+0x1f49f3) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #12 int boost::detail::do_invoke<boost::shared_ptr<boost::detail::translator_holder_base>, boost::function<int ()>>(boost::shared_ptr<boost::detail::translator_holder_base> const&, boost::function<int ()> const&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:301:30 (test_bitcoin+0x1f49f3)\r\n    #13 boost::execution_monitor::catch_signals(boost::function<int ()> const&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:903:16 (test_bitcoin+0x1f49f3)\r\n    #14 boost::execution_monitor::execute(boost::function<int ()> const&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:1301:16 (test_bitcoin+0x1f4d6a) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #15 boost::execution_monitor::vexecute(boost::function<void ()> const&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:1397:5 (test_bitcoin+0x1f04d8) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #16 boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::function<void ()> const&, unsigned long) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/unit_test_monitor.ipp:49:9 (test_bitcoin+0x1f04d8)\r\n    #17 boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/framework.ipp:815:44 (test_bitcoin+0x227215) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #18 boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/framework.ipp:784:58 (test_bitcoin+0x227aa1) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #19 boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/framework.ipp:784:58 (test_bitcoin+0x227aa1) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #20 boost::unit_test::framework::run(unsigned long, bool) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/framework.ipp:1722:29 (test_bitcoin+0x1ef05f) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #21 boost::unit_test::unit_test_main(boost::unit_test::test_suite* (*)(int, char**), int, char**) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/unit_test_main.ipp:250:9 (test_bitcoin+0x209e26) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #22 main /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/unit_test_main.ipp:306:12 (test_bitcoin+0x20a753) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n  Mutex M0 (0x7fff25c67fe0) created at:\r\n    #0 pthread_mutex_trylock <null> (test_bitcoin+0x159aae) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #1 std::__1::mutex::try_lock() <null> (libc++.so.1+0x5f63c) (BuildId: b52c260d7d8ecb73699f2407c0a9b193fc4761fc)\r\n    #2 UniqueLock<AnnotatedMixin<std::__1::mutex>>::UniqueLock(AnnotatedMixin<std::__1::mutex>&, char const*, char const*, int, bool) src/./sync.h:182:13 (test_bitcoin+0x442c37) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #3 ThreadPool::WorkerThread() src/./util/threadpool.h:37:9 (test_bitcoin+0x442c37)\r\n    #4 ThreadPool::Start(int)::'lambda'()::operator()() const src/./util/threadpool.h:73:101 (test_bitcoin+0x442ae5) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #5 decltype(std::declval<ThreadPool::Start(int)::'lambda'()&>()()) std::__1::__invoke[abi:ne180100]<ThreadPool::Start(int)::'lambda'()&>(ThreadPool::Start(int)::'lambda'()&) /usr/lib/llvm-18/bin/../include/c++/v1/__type_traits/invoke.h:344:25 (test_bitcoin+0x442ae5)\r\n    #6 void std::__1::__invoke_void_return_wrapper<void, true>::__call[abi:ne180100]<ThreadPool::Start(int)::'lambda'()&>(ThreadPool::Start(int)::'lambda'()&) /usr/lib/llvm-18/bin/../include/c++/v1/__type_traits/invoke.h:419:5 (test_bitcoin+0x442ae5)\r\n    #7 std::__1::__function::__alloc_func<ThreadPool::Start(int)::'lambda'(), std::__1::allocator<ThreadPool::Start(int)::'lambda'()>, void ()>::operator()[abi:ne180100]() /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:169:12 (test_bitcoin+0x442ae5)\r\n    #8 std::__1::__function::__func<ThreadPool::Start(int)::'lambda'(), std::__1::allocator<ThreadPool::Start(int)::'lambda'()>, void ()>::operator()() /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:311:10 (test_bitcoin+0x442ae5)\r\n    #9 std::__1::__function::__value_func<void ()>::operator()[abi:ne180100]() const /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:428:12 (test_bitcoin+0x1815b98) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #10 std::__1::function<void ()>::operator()() const /usr/lib/llvm-18/bin/../include/c++/v1/__functional/function.h:981:10 (test_bitcoin+0x1815b98)\r\n    #11 util::TraceThread(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>) src/util/thread.cpp:21:9 (test_bitcoin+0x1815b98)\r\n    #12 decltype(std::declval<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>)>()(std::declval<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(), std::declval<ThreadPool::Start(int)::'lambda'()>())) std::__1::__invoke[abi:ne180100]<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'()>(void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, ThreadPool::Start(int)::'lambda'()&&) /usr/lib/llvm-18/bin/../include/c++/v1/__type_traits/invoke.h:344:25 (test_bitcoin+0x44261e) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #13 void std::__1::__thread_execute[abi:ne180100]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'(), 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'()>&, std::__1::__tuple_indices<2ul, 3ul>) /usr/lib/llvm-18/bin/../include/c++/v1/__thread/thread.h:193:3 (test_bitcoin+0x44261e)\r\n    #14 void* std::__1::__thread_proxy[abi:ne180100]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'()>>(void*) /usr/lib/llvm-18/bin/../include/c++/v1/__thread/thread.h:202:3 (test_bitcoin+0x44261e)\r\n  Thread T13 'b-threadpool_wo' (tid=26954, running) created by main thread at:\r\n    #0 pthread_create <null> (test_bitcoin+0x157daf) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #1 std::__1::__libcpp_thread_create[abi:ne180100](unsigned long*, void* (*)(void*), void*) /usr/lib/llvm-18/bin/../include/c++/v1/__threading_support:317:10 (test_bitcoin+0x442473) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #2 std::__1::thread::thread<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'(), void>(void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, ThreadPool::Start(int)::'lambda'()&&) /usr/lib/llvm-18/bin/../include/c++/v1/__thread/thread.h:212:14 (test_bitcoin+0x442473)\r\n    #3 std::__1::thread* std::__1::construct_at[abi:ne180100]<std::__1::thread, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'(), std::__1::thread*>(std::__1::thread*, void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, ThreadPool::Start(int)::'lambda'()&&) /usr/lib/llvm-18/bin/../include/c++/v1/__memory/construct_at.h:41:46 (test_bitcoin+0x4421c5) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #4 std::__1::thread* std::__1::__construct_at[abi:ne180100]<std::__1::thread, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'(), std::__1::thread*>(std::__1::thread*, void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, ThreadPool::Start(int)::'lambda'()&&) /usr/lib/llvm-18/bin/../include/c++/v1/__memory/construct_at.h:49:10 (test_bitcoin+0x4421c5)\r\n    #5 void std::__1::allocator_traits<std::__1::allocator<std::__1::thread>>::construct[abi:ne180100]<std::__1::thread, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'(), void, void>(std::__1::allocator<std::__1::thread>&, std::__1::thread*, void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, ThreadPool::Start(int)::'lambda'()&&) /usr/lib/llvm-18/bin/../include/c++/v1/__memory/allocator_traits.h:305:5 (test_bitcoin+0x4421c5)\r\n    #6 std::__1::thread* std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::__emplace_back_slow_path<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'()>(void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, ThreadPool::Start(int)::'lambda'()&&) /usr/lib/llvm-18/bin/../include/c++/v1/vector:1491:3 (test_bitcoin+0x4421c5)\r\n    #7 std::__1::thread& std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::emplace_back<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, ThreadPool::Start(int)::'lambda'()>(void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, ThreadPool::Start(int)::'lambda'()&&) /usr/lib/llvm-18/bin/../include/c++/v1/vector:1511:13 (test_bitcoin+0x43efb4) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #8 ThreadPool::Start(int) src/./util/threadpool.h:73:23 (test_bitcoin+0x43efb4)\r\n    #9 threadpool_tests::threadpool_basic::test_method() src/test/threadpool_tests.cpp:109:20 (test_bitcoin+0xb283a6) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #10 threadpool_tests::threadpool_basic_invoker() src/test/threadpool_tests.cpp:11:1 (test_bitcoin+0xb26256) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #11 boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:117:11 (test_bitcoin+0x31b9dd) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #12 boost::function0<void>::operator()() const /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:763:14 (test_bitcoin+0x26f5f8) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #13 boost::detail::forward::operator()() /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:1388:32 (test_bitcoin+0x26f5f8)\r\n    #14 boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:137:18 (test_bitcoin+0x26f5f8)\r\n    #15 boost::function0<int>::operator()() const /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/function/function_template.hpp:763:14 (test_bitcoin+0x1f49f3) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #16 int boost::detail::do_invoke<boost::shared_ptr<boost::detail::translator_holder_base>, boost::function<int ()>>(boost::shared_ptr<boost::detail::translator_holder_base> const&, boost::function<int ()> const&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:301:30 (test_bitcoin+0x1f49f3)\r\n    #17 boost::execution_monitor::catch_signals(boost::function<int ()> const&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:903:16 (test_bitcoin+0x1f49f3)\r\n    #18 boost::execution_monitor::execute(boost::function<int ()> const&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:1301:16 (test_bitcoin+0x1f4d6a) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #19 boost::execution_monitor::vexecute(boost::function<void ()> const&) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/execution_monitor.ipp:1397:5 (test_bitcoin+0x1f04d8) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #20 boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::function<void ()> const&, unsigned long) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/unit_test_monitor.ipp:49:9 (test_bitcoin+0x1f04d8)\r\n    #21 boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/framework.ipp:815:44 (test_bitcoin+0x227215) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #22 boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/framework.ipp:784:58 (test_bitcoin+0x227aa1) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #23 boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/framework.ipp:784:58 (test_bitcoin+0x227aa1) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #24 boost::unit_test::framework::run(unsigned long, bool) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/framework.ipp:1722:29 (test_bitcoin+0x1ef05f) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #25 boost::unit_test::unit_test_main(boost::unit_test::test_suite* (*)(int, char**), int, char**) /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/unit_test_main.ipp:250:9 (test_bitcoin+0x209e26) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\n    #26 main /ci_container_base/depends/x86_64-pc-linux-gnu/include/boost/test/impl/unit_test_main.ipp:306:12 (test_bitcoin+0x20a753) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d)\r\nSUMMARY: ThreadSanitizer: data race (/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x156ae3) (BuildId: 5ce48731414b473abd5838c79ce7029f5872bd2d) in free\r\n==================\r\nRunning tests: translation_tests from test/translation_tests.cpp\r\nmake[3]: *** [Makefile:22558: test/threadpool_tests.cpp.test] Error 1\r\nmake[3]: *** Waiting for unfinished jobs....\r\nmake[3]: Leaving directory '/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake[2]: *** [Makefile:20520: check-am] Error 2\r\nmake[2]: Leaving directory '/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake[1]: *** [Makefile:20185: check-recursive] Error 1\r\nmake[1]: Leaving directory '/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src'\r\nmake: *** [Makefile:756: check-recursive] Error 1\r\nExit status: 2",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2039191008",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "unlabeled",
      "id": 12369963399,
      "node_id": "UNLE_lADOABII585cyOzezwAAAALhTqmH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12369963399",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T08:19:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2039247719,
      "node_id": "IC_kwDOABII5855jHNn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2039247719",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T08:37:46Z",
      "updated_at": "2024-04-05T08:37:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23011013574</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2039247719",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "labeled",
      "id": 12370127953,
      "node_id": "LE_lADOABII585cyOzezwAAAALhUSxR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12370127953",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T08:37:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 12370138966,
      "node_id": "UNLE_lADOABII585cyOzezwAAAALhUVdW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12370138966",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T08:38:56Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 12370784317,
      "node_id": "LE_lADOABII585cyOzezwAAAALhWzA9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12370784317",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-05T09:34:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12384627023,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAALiLmlP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12384627023",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "57e37aecfdacb6f911dd57c4c1fb680a7660633d",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/57e37aecfdacb6f911dd57c4c1fb680a7660633d",
      "created_at": "2024-04-07T17:30:09Z"
    },
    {
      "event": "commented",
      "id": 2061806007,
      "node_id": "IC_kwDOABII58565Km3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2061806007",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-17T17:19:10Z",
      "updated_at": "2024-04-17T17:19:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "Are you still working on this? If not, this could be moved to draft for as long as the tsan CI is failing.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2061806007",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "convert_to_draft",
      "id": 12522218342,
      "node_id": "CTDE_lADOABII585cyOzezwAAAALqYeNm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12522218342",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T11:50:54Z"
    },
    {
      "event": "labeled",
      "id": 12664867407,
      "node_id": "LE_lADOABII585cyOzezwAAAALy4opP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12664867407",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-30T22:53:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12671271372,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAALzREHM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12671271372",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4ceaf6253eada351a20a82ba69a3aee636726527",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/4ceaf6253eada351a20a82ba69a3aee636726527",
      "created_at": "2024-05-01T14:44:51Z"
    },
    {
      "event": "unlabeled",
      "id": 12671771631,
      "node_id": "UNLE_lADOABII585cyOzezwAAAALzS-Pv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12671771631",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T15:30:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 12673326435,
      "node_id": "UNLE_lADOABII585cyOzezwAAAALzY51j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12673326435",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:18:13Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 13161649192,
      "node_id": "LE_lADOABII585cyOzezwAAAAMQftQo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13161649192",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T14:16:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2168146153,
      "node_id": "IC_kwDOABII586BO0jp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2168146153",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T14:16:29Z",
      "updated_at": "2024-06-14T14:16:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24470829129</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2168146153",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13300039090,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAMYvn2y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13300039090",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bfc8dce122474ddf6e5814731fa816cbdf1f7c7b",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/bfc8dce122474ddf6e5814731fa816cbdf1f7c7b",
      "created_at": "2024-06-26T14:57:36Z"
    },
    {
      "event": "labeled",
      "id": 13770574628,
      "node_id": "LE_lADOABII585cyOzezwAAAAM0yksk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13770574628",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-05T23:03:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 13793644708,
      "node_id": "RTE_lADOABII585cyOzezwAAAAM2KlCk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13793644708",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-07T14:41:29Z",
      "rename": {
        "from": "index: blockfilter initial sync speedup, parallelize process",
        "to": "index: initial sync speedup, parallelize process"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13886355441,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAM7sPfx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13886355441",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e798711ab0f3dd973ab359f54c6f79581d79e2c3",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/e798711ab0f3dd973ab359f54c6f79581d79e2c3",
      "created_at": "2024-08-14T19:32:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13886362048,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAM7sRHA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13886362048",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "513fbc6b1fae951ea292bb3c8a32d104773995f0",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/513fbc6b1fae951ea292bb3c8a32d104773995f0",
      "created_at": "2024-08-14T19:33:02Z"
    },
    {
      "event": "unlabeled",
      "id": 13887507846,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAM7wo2G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13887507846",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T21:15:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 13909123869,
      "node_id": "LE_lADOABII585cyOzezwAAAAM9DGMd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13909123869",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T10:24:22Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "unlabeled",
      "id": 14055891328,
      "node_id": "UNLE_lADOABII585cyOzezwAAAANFy-GA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14055891328",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T05:21:37Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "labeled",
      "id": 14107551985,
      "node_id": "LE_lADOABII585cyOzezwAAAANI4Cjx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14107551985",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T22:46:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14477997865,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAANe9Lcp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14477997865",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "created_at": "2024-10-01T19:12:52Z"
    },
    {
      "event": "unlabeled",
      "id": 14478816742,
      "node_id": "UNLE_lADOABII585cyOzezwAAAANfATXm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14478816742",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T20:04:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1592642598,
      "node_id": "PRR_kwDOABII585e7cwm",
      "url": null,
      "actor": null,
      "commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-23T15:02:45Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-1592642598",
      "submitted_at": "2024-10-23T15:02:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 2442986452,
      "node_id": "PRR_kwDOABII586RnQPU",
      "url": null,
      "actor": null,
      "commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-18T15:37:35Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2442986452",
      "submitted_at": "2024-11-18T15:37:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "commented",
      "id": 2483780319,
      "node_id": "IC_kwDOABII586UC3rf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2483780319",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T18:11:52Z",
      "updated_at": "2024-11-18T18:11:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm using the ThreadPool here in https://github.com/bitcoin/bitcoin/pull/31132 as a cherry-picked commit, modulo changing `ThreadPool() {}` to `ThreadPool() = default;`. Perhaps we could pull this out to a separate PR since it would be useful for both changes.\r\n\r\nOne request for the ThreadPool would be to track in flight tasks being executed. That way we could write tests that ensure that all tasks have been completed before continuing, even if we don't have access to the futures.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2483780319",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "labeled",
      "id": 16033249670,
      "node_id": "LE_lADOABII585cyOzezwAAAAO7p_mG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16033249670",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T18:28:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16466543846,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAPVe4Tm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16466543846",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "349b09983d994cb46faeed12b123ae2269c6c516",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/349b09983d994cb46faeed12b123ae2269c6c516",
      "created_at": "2025-02-25T18:57:49Z"
    },
    {
      "event": "unlabeled",
      "id": 16468554442,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAPVmjLK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16468554442",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-25T20:54:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 16468670135,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAPVm_a3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16468670135",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-25T21:03:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2646111093,
      "node_id": "PRR_kwDOABII586duHN1",
      "url": null,
      "actor": null,
      "commit_id": "349b09983d994cb46faeed12b123ae2269c6c516",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-02-26T22:37:20Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2646111093",
      "submitted_at": "2025-02-26T22:37:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "labeled",
      "id": 16720936080,
      "node_id": "LE_lADOABII585cyOzezwAAAAPkpTyQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16720936080",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-12T20:45:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2754283048,
      "node_id": "PRR_kwDOABII586kKwYo",
      "url": null,
      "actor": null,
      "commit_id": "349b09983d994cb46faeed12b123ae2269c6c516",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-04-09T21:50:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 349b09983d994cb46faeed12b123ae2269c6c516 and I reviewed most of the code. Seems like a nice design and good approach. Plan to finish reviewing later.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2754283048",
      "submitted_at": "2025-04-09T21:50:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18008998560,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAQxa4Kg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18008998560",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "55f23cddc345a818191b86479a6328001d32dc26",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/55f23cddc345a818191b86479a6328001d32dc26",
      "created_at": "2025-06-05T20:00:39Z"
    },
    {
      "event": "reviewed",
      "id": 2901371695,
      "node_id": "PRR_kwDOABII586s72sv",
      "url": null,
      "actor": null,
      "commit_id": "55f23cddc345a818191b86479a6328001d32dc26",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-05T20:02:58Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review, andrewtoth and ryanofsky!\r\nAddressed most of the suggestions, but not all yet. Will finish the rest soon.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2901371695",
      "submitted_at": "2025-06-05T20:02:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "unlabeled",
      "id": 18010086099,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAQxfBrT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18010086099",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-05T21:00:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18011200575,
      "node_id": "LE_lADOABII585cyOzezwAAAAQxjRw_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18011200575",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-05T22:09:57Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2946515339,
      "node_id": "IC_kwDOABII586voEGL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2946515339",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-05T22:09:58Z",
      "updated_at": "2025-06-05T22:09:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `TSan, depends, gui`: https://github.com/bitcoin/bitcoin/runs/43571812170</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a segmentation fault occurring in CBlockIndex::GetBlockPos().</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2946515339",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18012374658,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAQxnwaC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18012374658",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1ccb9f6959e28aabd06e891cdf0b30ee99add2f3",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/1ccb9f6959e28aabd06e891cdf0b30ee99add2f3",
      "created_at": "2025-06-05T23:16:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18014622934,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAQxwVTW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18014622934",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f3f5e4cb071497f7c9fccf5e81edc5c476333098",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f3f5e4cb071497f7c9fccf5e81edc5c476333098",
      "created_at": "2025-06-06T01:34:08Z"
    },
    {
      "event": "unlabeled",
      "id": 18015205542,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAQxyjim",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18015205542",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-06T02:24:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2950793651,
      "node_id": "IC_kwDOABII586v4Ymz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2950793651",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-06T21:04:37Z",
      "updated_at": "2025-06-06T21:04:37Z",
      "author_association": "MEMBER",
      "body": "Decoupled part of this work inside #32694 - combining it with part of #24230.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2950793651",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "referenced",
      "id": 18123908173,
      "node_id": "REFE_lADOABII585cyOzezwAAAAQ4RORN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18123908173",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "19765dca197a6334e5ad3985a30c7836374d5c26",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19765dca197a6334e5ad3985a30c7836374d5c26",
      "created_at": "2025-06-12T23:01:26Z"
    },
    {
      "event": "labeled",
      "id": 18124249758,
      "node_id": "LE_lADOABII585cyOzezwAAAAQ4Shqe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18124249758",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-12T23:51:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18124619958,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAQ4T8C2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18124619958",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "53bc8b9663fd51fa43eb568aee8a38936cc7c6e8",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/53bc8b9663fd51fa43eb568aee8a38936cc7c6e8",
      "created_at": "2025-06-13T00:20:55Z"
    },
    {
      "event": "unlabeled",
      "id": 18125540099,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAQ4XcsD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18125540099",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-13T01:58:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2924075732,
      "node_id": "PRR_kwDOABII586uSdrU",
      "url": null,
      "actor": null,
      "commit_id": "53bc8b9663fd51fa43eb568aee8a38936cc7c6e8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-13T09:38:15Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2924075732",
      "submitted_at": "2025-06-13T09:38:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "labeled",
      "id": 18180226501,
      "node_id": "LE_lADOABII585cyOzezwAAAAQ7oD3F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18180226501",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-17T00:05:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 18186434605,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAQ7_vgt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18186434605",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-17T09:06:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18237550711,
      "node_id": "LE_lADOABII585cyOzezwAAAAQ_CvB3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18237550711",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T00:34:40Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2989481208,
      "node_id": "IC_kwDOABII586yL9z4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2989481208",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T00:34:42Z",
      "updated_at": "2025-06-20T00:34:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/44013275482</sub>\n<sub>LLM reason (✨ experimental): The CI failed due to compilation errors caused by an incorrect macro invocation in the source code.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2989481208",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18250815190,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAQ_1VbW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18250815190",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "69ac2c05e04ff66428426d00fb2db4672d85726c",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/69ac2c05e04ff66428426d00fb2db4672d85726c",
      "created_at": "2025-06-20T16:42:23Z"
    },
    {
      "event": "unlabeled",
      "id": 18251585120,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAQ_4RZg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18251585120",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T17:43:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18279625241,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARBjPIZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18279625241",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d14fa644acf03919a74909b52916fd4dff4aa88e",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/d14fa644acf03919a74909b52916fd4dff4aa88e",
      "created_at": "2025-06-23T19:08:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18279708510,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARBjjde",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18279708510",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f4041cb91ff965fa08ac36ddb130f67e2d1671b0",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f4041cb91ff965fa08ac36ddb130f67e2d1671b0",
      "created_at": "2025-06-23T19:14:01Z"
    },
    {
      "event": "reviewed",
      "id": 2951262244,
      "node_id": "PRR_kwDOABII586v6LAk",
      "url": null,
      "actor": null,
      "commit_id": "d14fa644acf03919a74909b52916fd4dff4aa88e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-23T19:15:17Z",
      "author_association": "MEMBER",
      "body": "Updated based on the feedback. Thanks!\r\nI believe I’ve addressed all the comments, but let me know if I missed anything.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2951262244",
      "submitted_at": "2025-06-23T19:15:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "ready_for_review",
      "id": 18279926496,
      "node_id": "RFRE_lADOABII585cyOzezwAAAARBkYrg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18279926496",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-23T19:28:28Z"
    },
    {
      "event": "labeled",
      "id": 18280828942,
      "node_id": "LE_lADOABII585cyOzezwAAAARBn1AO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18280828942",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-23T20:34:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2997865936,
      "node_id": "IC_kwDOABII586yr83Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2997865936",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-23T20:34:26Z",
      "updated_at": "2025-06-23T20:34:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `TSan, depends, gui`: https://github.com/bitcoin/bitcoin/runs/44630110161</sub>\n<sub>LLM reason (✨ experimental): Data race detected in operator delete caused the failure of threadpool_tests.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-2997865936",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18281865605,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARBryGF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18281865605",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a13b48d67622659529fabdec6e2c96e31aa86263",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/a13b48d67622659529fabdec6e2c96e31aa86263",
      "created_at": "2025-06-23T21:59:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18284539357,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARB1-3d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18284539357",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6acaa7919d2fdfdecb8c626e6f9fe3447f5fd11b",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/6acaa7919d2fdfdecb8c626e6f9fe3447f5fd11b",
      "created_at": "2025-06-24T02:54:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18295669567,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARCgcM_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18295669567",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5fea91eae012a062b540b02fffb872e81b584eaa",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/5fea91eae012a062b540b02fffb872e81b584eaa",
      "created_at": "2025-06-24T13:58:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18302731712,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARC7YXA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18302731712",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a3e7d97b89821239bbba3e2c434a9a6405911865",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/a3e7d97b89821239bbba3e2c434a9a6405911865",
      "created_at": "2025-06-24T21:12:30Z"
    },
    {
      "event": "reviewed",
      "id": 2957109420,
      "node_id": "PRR_kwDOABII586wQeis",
      "url": null,
      "actor": null,
      "commit_id": "a3e7d97b89821239bbba3e2c434a9a6405911865",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-25T08:11:34Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2957109420",
      "submitted_at": "2025-06-25T08:11:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18317741457,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARD0o2R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18317741457",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e4bdca5f74bf504882a6bc517192c426d4ad2cf8",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/e4bdca5f74bf504882a6bc517192c426d4ad2cf8",
      "created_at": "2025-06-25T14:12:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18317782068,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARD0yw0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18317782068",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d405976ed05ec4b99b18151ae5b1021a53531be0",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/d405976ed05ec4b99b18151ae5b1021a53531be0",
      "created_at": "2025-06-25T14:14:07Z"
    },
    {
      "event": "unlabeled",
      "id": 18319075128,
      "node_id": "UNLE_lADOABII585cyOzezwAAAARD5uc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18319075128",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-25T15:14:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18320212353,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARD-EGB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18320212353",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "59984a1d31aca2a523a8e8aafb3cb26500d8e990",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/59984a1d31aca2a523a8e8aafb3cb26500d8e990",
      "created_at": "2025-06-25T16:15:15Z"
    },
    {
      "event": "labeled",
      "id": 18321656483,
      "node_id": "LE_lADOABII585cyOzezwAAAAREDkqj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18321656483",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-25T17:54:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18336818375,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARE9aTH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18336818375",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ef3e47d4623bcfacdfe87f556520fcb42d3f43e5",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/ef3e47d4623bcfacdfe87f556520fcb42d3f43e5",
      "created_at": "2025-06-26T13:42:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18338409065,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARFDepp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18338409065",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c1b55be50f7c6dffde95d927b5d89e437b13ac79",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/c1b55be50f7c6dffde95d927b5d89e437b13ac79",
      "created_at": "2025-06-26T15:08:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18340913009,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARFNB9x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18340913009",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "89f5fc80c2957c89a6f42f5bde11c9fb0f9abc3a",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/89f5fc80c2957c89a6f42f5bde11c9fb0f9abc3a",
      "created_at": "2025-06-26T17:53:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18344089950,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARFZJle",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18344089950",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f6b7da2493488c0e48ad9acf569ef3bdaf6b07b3",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f6b7da2493488c0e48ad9acf569ef3bdaf6b07b3",
      "created_at": "2025-06-26T21:05:50Z"
    },
    {
      "event": "unlabeled",
      "id": 18345818669,
      "node_id": "UNLE_lADOABII585cyOzezwAAAARFfvot",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18345818669",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T23:18:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2985983304,
      "node_id": "PRR_kwDOABII586x-n1I",
      "url": null,
      "actor": null,
      "commit_id": "f6b7da2493488c0e48ad9acf569ef3bdaf6b07b3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-04T07:51:34Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2985983304",
      "submitted_at": "2025-07-04T07:51:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "referenced",
      "id": 18514976913,
      "node_id": "REFE_lADOABII585cyOzezwAAAARPlCCR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18514976913",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "528f79f010d1617163e4154753b85e04539af993",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/528f79f010d1617163e4154753b85e04539af993",
      "created_at": "2025-07-08T00:26:38Z"
    },
    {
      "event": "labeled",
      "id": 18515878135,
      "node_id": "LE_lADOABII585cyOzezwAAAARPoeD3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18515878135",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-08T02:07:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18516076423,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARPpOeH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18516076423",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e8e1e1471d08a8c9f22d3f0a68bab732649c9a52",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/e8e1e1471d08a8c9f22d3f0a68bab732649c9a52",
      "created_at": "2025-07-08T02:28:38Z"
    },
    {
      "event": "unlabeled",
      "id": 18517013360,
      "node_id": "UNLE_lADOABII585cyOzezwAAAARPszNw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18517013360",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-08T04:13:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18622434171,
      "node_id": "LE_lADOABII585cyOzezwAAAARV-8t7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18622434171",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T17:21:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3070380062,
      "node_id": "IC_kwDOABII5863Akge",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3070380062",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T17:28:11Z",
      "updated_at": "2025-07-14T17:28:11Z",
      "author_association": "MEMBER",
      "body": "Sorry, #32948 probably caused some conflicts.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3070380062",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18626050861,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARWMvst",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18626050861",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cd55c0317a69aae8fb69c0467b3582381e41b259",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/cd55c0317a69aae8fb69c0467b3582381e41b259",
      "created_at": "2025-07-14T21:31:35Z"
    },
    {
      "event": "reviewed",
      "id": 3017897441,
      "node_id": "PRR_kwDOABII586z4XXh",
      "url": null,
      "actor": null,
      "commit_id": "cd55c0317a69aae8fb69c0467b3582381e41b259",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-14T21:32:20Z",
      "author_association": "MEMBER",
      "body": "> Sorry, #32948 probably caused some conflicts.\r\n\r\nAuch. Rebased.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3017897441",
      "submitted_at": "2025-07-14T21:32:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "unlabeled",
      "id": 18626069073,
      "node_id": "UNLE_lADOABII585cyOzezwAAAARWM0JR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18626069073",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T21:33:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18628147879,
      "node_id": "LE_lADOABII585cyOzezwAAAARWUvqn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18628147879",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T01:26:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3071599558,
      "node_id": "IC_kwDOABII5863FOPG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3071599558",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T01:26:52Z",
      "updated_at": "2025-07-15T01:26:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `TSan, depends, gui`: https://github.com/bitcoin/bitcoin/runs/45962526520</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a data race detected in operator delete, leading to a crash during threadpool_tests.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3071599558",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18638155236,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARW663k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18638155236",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f1b4dd18bbc4232177be31bfdd373975887c9187",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f1b4dd18bbc4232177be31bfdd373975887c9187",
      "created_at": "2025-07-15T13:11:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18643416539,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARXO_Xb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18643416539",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2a6161adf0a92a64aac391deb9146e23ec99e47d",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/2a6161adf0a92a64aac391deb9146e23ec99e47d",
      "created_at": "2025-07-15T17:36:20Z"
    },
    {
      "event": "unlabeled",
      "id": 18645872235,
      "node_id": "UNLE_lADOABII585cyOzezwAAAARXYW5r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18645872235",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T19:59:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3083204938,
      "node_id": "IC_kwDOABII5863xflK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3083204938",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T08:48:50Z",
      "updated_at": "2025-07-17T08:48:50Z",
      "author_association": "MEMBER",
      "body": "I tried to use this to boost the silent payment indexer, but I don't know what I'm doing :-) https://github.com/Sjors/bitcoin/pull/96",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3083204938",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "reviewed",
      "id": 3029621925,
      "node_id": "PRR_kwDOABII5860lFyl",
      "url": null,
      "actor": null,
      "commit_id": "2a6161adf0a92a64aac391deb9146e23ec99e47d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-17T13:48:06Z",
      "author_association": "MEMBER",
      "body": "> I tried to use this to boost the silent payment indexer, but I don't know what I'm doing :-) [Sjors#96](https://github.com/Sjors/bitcoin/pull/96)\r\n\r\n@Sjors, see https://github.com/furszy/bitcoin-core/commits/2025_bip352_blind_fix.\r\nNote: I only spent a few minutes with it and the test seem to pass (I'm partially afk these days). Let me know how it goes and could check it in detail next week.\r\nThe first commit there (413ce51bf10326a6c56bd4250f9a9f19fde44ed4) is merely a code improvement + cleanup, because you don't need to re-read the undo data inside the child class anymore since #32694.\r\nAnd the last commit (b8883fa1fd76fbf3c3d3c10f702bea24abb42dc9) enables it by overriding `CustomProcessBlock()` (same as it was implemented for the tx index parallelization e8add40fbfbda9955f9b1cf998732ca03787eb72).",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3029621925",
      "submitted_at": "2025-07-17T13:48:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 3039751954,
      "node_id": "PRR_kwDOABII5861Lu8S",
      "url": null,
      "actor": null,
      "commit_id": "2a6161adf0a92a64aac391deb9146e23ec99e47d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-21T21:08:38Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, did a quick pass through this.\r\n\r\nWill do in-depth review soon\r\n\r\n> Now the juicy part:\r\n\r\nWhat is the step to reproduce your result?\r\n\r\nSide note to self could be useful to try benchmarking this using [benchkit](https://github.com/bitcoin-dev-tools/benchkit) so that anyone can reproduce using the yaml config?",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3039751954",
      "submitted_at": "2025-07-21T21:03:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 3048467543,
      "node_id": "PRR_kwDOABII5861s-xX",
      "url": null,
      "actor": null,
      "commit_id": "2a6161adf0a92a64aac391deb9146e23ec99e47d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-23T18:19:03Z",
      "author_association": "MEMBER",
      "body": "> What is the step to reproduce your result?\r\n\r\n1. Sync your node without any index.\r\n2. Restart the node with block filter or txindex enabled and let it run (you could also set `-connect=0` to sync only the index, without running the net/validation threads. Since threads won't be competing for `cs_main`, this will give you a more accurate result).\r\n\r\nYou’ll see a \"[index name] is enabled at height [height]\" log entry once it finishes. Then it’s just a matter of subtracting the index startup time from the \"index synced\" log time.\r\n\r\nUnfortunately, there’s no \"stop at block\" option like we have for chain sync, so this process is a bit more manual and has some variances depending on where/how you run it. But you will see an overall significant speedup anyway.\r\n\r\nNote: I should update my results in the PR description. Those were compiled three years ago on a small VPS, and we've introduced many changes since then.\r\n\r\n> Side note to self: could be useful to try benchmarking this using [[benchkit](https://github.com/bitcoin-dev-tools/benchkit)](https://github.com/bitcoin-dev-tools/benchkit) so that anyone can reproduce using the YAML config?\r\n\r\nThat would be nice. I'm not sure it supports stopping after a specific log is written. Maybe @willcl-ark could enlighten us here.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3048467543",
      "submitted_at": "2025-07-23T17:58:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18780175795,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARfYr2z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18780175795",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "068537ae61309a61e3bc350dc747d75cf2207517",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/068537ae61309a61e3bc350dc747d75cf2207517",
      "created_at": "2025-07-23T18:17:52Z"
    },
    {
      "event": "reviewed",
      "id": 3052111555,
      "node_id": "PRR_kwDOABII586164bD",
      "url": null,
      "actor": null,
      "commit_id": "068537ae61309a61e3bc350dc747d75cf2207517",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-25T20:02:10Z",
      "author_association": "MEMBER",
      "body": "code review ACK 068537ae61309a61e3bc350dc747d75cf2207517\r\n\r\n\r\nBuilt and tested on macos/arm64 as well as Debian/x86. Left several questions and suggestions. I really like ThreadPool as a util and look forward to using it for http workers as well, to share the code. \r\n\r\nI'm currently rebuilding block filter and tx indexes with this branch to compare against master, which after 48 hours was only about 70% complete...\r\n\r\n\r\n<details><summary>Show Signature</summary>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA256\r\n\r\nACK 068537ae61309a61e3bc350dc747d75cf2207517\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmiD4qAACgkQ5+KYS2KJ\r\nyToG8g//d72j0Pq/TmDjOA0nbCrqrBIKLIvHiTD8DIBCvCb2Ul+NnZDfvFAbuR9s\r\nnkArmxEUPRPBSkKBYMqJHUt+JF4zsLyttkryJW1vFCHwLi49an82B2MKSNNyOfs+\r\nPUufS9ro5FNDNax66jVdjD1/CrNRYAt/AQ/K3FSo7FNG5dbpO2n09ZBXWAHqwZfU\r\n3bf7p3Ug0JBlEe7/JMz1Wbu7wDV9E0lINarr/n5dnVQZTBLHaCvabSYtrEix/BRG\r\nku2MjexrbZdR5PY1xKQvJYkOkndZDkLQVJMC9BT9GeCYBdGRaGXadZQ3AwNlzobz\r\nJVSMQO2Ngv/Ow8IQWrAs705Moqzu680PjdodxTSrj0QU/D4cNJAW390QzwT7evrw\r\npAVipwM4oomc4ZMfWX4pq8AwlZ+GywEIMa34UbO0pbpGnlIEUPRUBb7l7ODzcCcb\r\n/cp9l9xpXwWH8+1yY9uRUnh9AHRlVsNdTJeCq3kTU8W1CYcmCOaImwjMJU3tM9Aj\r\nvgFzVQam4KYJTD+WjhKkFAb7M0uTF6LqaM5ChfSaTR1zXuVQ7OX0sYM8R0B2QLJ8\r\nuxNzNF/KnTJZYaOc0i/b4JHP3MZWgoO3GcT64woj1GqHGjLj2YOAKYSfpNZfWaL+\r\nkdwRnzC4qgMKunoqtv4sX9Ht0Hk7qyDfPnEog/AT4wnSbiP/HZs=\r\n=VG2A\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\npinheadmz's public key is [on openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/E61773CD6E01040E2F1BD78CE7E2984B6289C93A)\r\n</details>\r\n\r\n\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3052111555",
      "submitted_at": "2025-07-25T20:00:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "review_requested",
      "id": 18820691473,
      "node_id": "RRE_lADOABII585cyOzezwAAAARhzPYR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18820691473",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T20:02:15Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18820691658,
      "node_id": "RRE_lADOABII585cyOzezwAAAARhzPbK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18820691658",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T20:02:15Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18820691822,
      "node_id": "RRE_lADOABII585cyOzezwAAAARhzPdu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18820691822",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T20:02:16Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18820691999,
      "node_id": "RRE_lADOABII585cyOzezwAAAARhzPgf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18820691999",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-25T20:02:17Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18822104073,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARh4oQJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18822104073",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9bba5ef0cc5b6890eba2be3a6ed429c4fea5a28f",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/9bba5ef0cc5b6890eba2be3a6ed429c4fea5a28f",
      "created_at": "2025-07-25T21:35:18Z"
    },
    {
      "event": "commented",
      "id": 3124309346,
      "node_id": "IC_kwDOABII5866OS1i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3124309346",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-27T11:01:26Z",
      "updated_at": "2025-07-27T11:01:26Z",
      "author_association": "MEMBER",
      "body": "Did a rough benchmark test. Froze a full node at height `906551` by restarting with `-noconnect` and also `-txindex -blockfilterindex`. First test was from master, after 48 hours I aborted the process after reaching only:\r\n\r\n```\r\n$ bitcoin-cli getindexinfo\r\n{\r\n  \"txindex\": {\r\n    \"synced\": false,\r\n    \"best_block_height\": 770289\r\n  },\r\n  \"basic block filter index\": {\r\n    \"synced\": true,\r\n    \"best_block_height\": 906551\r\n  }\r\n}\r\n```\r\n\r\nRunning this PR (restarting with empty `indexes/`), both indexing operations were complete after about 16 hours:\r\n```\r\n2025-07-25T18:12:46Z txindex thread start\r\n2025-07-25T18:12:46Z basic block filter index thread start\r\n...\r\n2025-07-25T19:48:16Z basic block filter index thread exit\r\n2025-07-26T10:14:21Z txindex thread exit\r\n\r\n```\r\n\r\n```\r\n{\r\n  \"txindex\": {\r\n    \"synced\": true,\r\n    \"best_block_height\": 906551\r\n  },\r\n  \"basic block filter index\": {\r\n    \"synced\": true,\r\n    \"best_block_height\": 906551\r\n  }\r\n}\r\n\r\n```",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3124309346",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "reviewed",
      "id": 3067959910,
      "node_id": "PRR_kwDOABII58623Vpm",
      "url": null,
      "actor": null,
      "commit_id": "9bba5ef0cc5b6890eba2be3a6ed429c4fea5a28f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-29T14:53:00Z",
      "author_association": "MEMBER",
      "body": "re-ACK 9bba5ef0cc5b6890eba2be3a6ed429c4fea5a28f\r\n\r\nChanges since last review are minimal responses to my own review suggestions. Built on macos/arm64 and debian/x86. Ran functional and unit tests, ran with `-indexworkers=16` on mainnet fullnode with >900000 blocks\r\n\r\n<details><summary>Show Signature</summary>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA256\r\n\r\nACK 9bba5ef0cc5b6890eba2be3a6ed429c4fea5a28f\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmiI394ACgkQ5+KYS2KJ\r\nyTruCxAAwQ1Q4syFsBPG0fS1KaKSV7LKLl5oJNzr5RPP7w/NliMB3KDXI8lhQnhr\r\nej6NNs7ovm05O99QrjFomGyg5oYO+rcECPoXp5lrwsOQBWJk10ZNgDIKdh2ChWr0\r\nsn2o8DCsGpHfkXZ9qg8ynStt5ScCv/1bopb2jvaFjWHdy/5LREJ62XuJZoah5O74\r\nkSSWyj1Nxi9oVNKctXifFp0WwqOqofft2kgDWghRPw67SERuZGqcyzb89zKLPLxr\r\niyMIWd8LY36isVj7XZBNVz1+jQnr77ldR15Uar/CKlrEoNC/tKs/NBE0eXAHrKhs\r\n4iuKdtX470yazbKGAm6Ei2wQbYa4w5319QDa6pVYlqo30ZMlW/AvVMC//Uc1/v3a\r\nfCW2ootvbbzz0lBPXg5yIB8wvaCuDkYYjMGL6tnYg1T4ChlS7P2y7IbfWryAjOKt\r\nUN1kJNkMoXzSrHu2nZaDmIv3hFpQBaDUH0BlT+unUg8hUioE1VqpIw/+rmcCj7eA\r\nIhKJ0NnJZnh92y5Y+9b+lf+ix6TiF0ZqGT/h+5Yv7Vj8YVXP006HpKvpx2Y84ii+\r\n5IZag6OviHoKt056Gn2iixQFSbw6hVMOw8JnF5FC3iZR28roEkJlY2WtOUF6h/Se\r\nUJTC1VMQuxRm+AIYLwC8w1RCRMoZDRKlOKBjOY5beFCIOARef3w=\r\n=Zxbl\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\npinheadmz's public key is [on openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/E61773CD6E01040E2F1BD78CE7E2984B6289C93A)\r\n</details>\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3067959910",
      "submitted_at": "2025-07-29T14:53:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "referenced",
      "id": 18912001248,
      "node_id": "REFE_lADOABII585cyOzezwAAAARnPjzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18912001248",
      "actor": {
        "login": "DashCoreAutoGuix",
        "id": 156604295,
        "node_id": "U_kgDOCVWXhw",
        "avatar_url": "https://avatars.githubusercontent.com/u/156604295?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DashCoreAutoGuix",
        "html_url": "https://github.com/DashCoreAutoGuix",
        "followers_url": "https://api.github.com/users/DashCoreAutoGuix/followers",
        "following_url": "https://api.github.com/users/DashCoreAutoGuix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DashCoreAutoGuix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DashCoreAutoGuix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DashCoreAutoGuix/subscriptions",
        "organizations_url": "https://api.github.com/users/DashCoreAutoGuix/orgs",
        "repos_url": "https://api.github.com/users/DashCoreAutoGuix/repos",
        "events_url": "https://api.github.com/users/DashCoreAutoGuix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DashCoreAutoGuix/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "55c5a2a348e6cd84f53001c4a95b71f79440c73b",
      "commit_url": "https://api.github.com/repos/DashCoreAutoGuix/dash/commits/55c5a2a348e6cd84f53001c4a95b71f79440c73b",
      "created_at": "2025-07-31T05:32:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19044691181,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARvJuzt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19044691181",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b349fbafadbc9b5af0a35b4c282e142994a5a1d7",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/b349fbafadbc9b5af0a35b4c282e142994a5a1d7",
      "created_at": "2025-08-07T22:43:19Z"
    },
    {
      "event": "labeled",
      "id": 19045391717,
      "node_id": "LE_lADOABII585cyOzezwAAAARvMZ1l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19045391717",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T00:19:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3166200643,
      "node_id": "IC_kwDOABII5868uGND",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3166200643",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T00:19:14Z",
      "updated_at": "2025-08-08T00:19:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `TSan, depends, no gui`: https://github.com/bitcoin/bitcoin/runs/47637510992</sub>\n<sub>LLM reason (✨ experimental): The CI failure is due to the threadpool_tests timing out.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3166200643",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19045985008,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARvOqrw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19045985008",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "647f6f0f4432a113a66bb3a423afe1ba68a842c9",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/647f6f0f4432a113a66bb3a423afe1ba68a842c9",
      "created_at": "2025-08-08T01:37:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19046385476,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARvQMdE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19046385476",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f6a52c6686b4d14aea2b05ca0413ad664bcf72e6",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f6a52c6686b4d14aea2b05ca0413ad664bcf72e6",
      "created_at": "2025-08-08T02:33:06Z"
    },
    {
      "event": "unlabeled",
      "id": 19046916387,
      "node_id": "UNLE_lADOABII585cyOzezwAAAARvSOEj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19046916387",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T03:44:02Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 19067087162,
      "node_id": "REFE_lADOABII585cyOzezwAAAARwfKk6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19067087162",
      "actor": {
        "login": "DashCoreAutoGuix",
        "id": 156604295,
        "node_id": "U_kgDOCVWXhw",
        "avatar_url": "https://avatars.githubusercontent.com/u/156604295?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DashCoreAutoGuix",
        "html_url": "https://github.com/DashCoreAutoGuix",
        "followers_url": "https://api.github.com/users/DashCoreAutoGuix/followers",
        "following_url": "https://api.github.com/users/DashCoreAutoGuix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DashCoreAutoGuix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DashCoreAutoGuix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DashCoreAutoGuix/subscriptions",
        "organizations_url": "https://api.github.com/users/DashCoreAutoGuix/orgs",
        "repos_url": "https://api.github.com/users/DashCoreAutoGuix/repos",
        "events_url": "https://api.github.com/users/DashCoreAutoGuix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DashCoreAutoGuix/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3ee82f3b2b4f1879d8fbe0018cc987bfd3007f3f",
      "commit_url": "https://api.github.com/repos/DashCoreAutoGuix/dash/commits/3ee82f3b2b4f1879d8fbe0018cc987bfd3007f3f",
      "created_at": "2025-08-09T10:39:38Z"
    },
    {
      "event": "commented",
      "id": 3178896875,
      "node_id": "IC_kwDOABII5869eh3r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3178896875",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T11:19:15Z",
      "updated_at": "2025-08-12T11:19:15Z",
      "author_association": "MEMBER",
      "body": "Fwiw I encountered a segfault previously while testing on master on previous PR HEAD https://github.com/bitcoin/bitcoin/commit/9bba5ef0cc5b6890eba2be3a6ed429c4fea5a28f\r\n\r\nI ran the node on mainnet with `-noconnect` `-txindex`  `-blockfilterindex` `-indexworkers=4`\r\n![Screenshot 2025-08-05 at 09 42 43](https://github.com/user-attachments/assets/313b7ebc-3d8f-49ce-a42a-3a757366a085)\r\n\r\n\r\nAlthough I was not able to later reproduce the crash it seems to be happen intermittently cc @furszy  ",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3178896875",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "mentioned",
      "id": 19109993277,
      "node_id": "MEE_lADOABII585cyOzezwAAAARzC1s9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19109993277",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T11:19:17Z"
    },
    {
      "event": "subscribed",
      "id": 19109993307,
      "node_id": "SE_lADOABII585cyOzezwAAAARzC1tb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19109993307",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T11:19:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19121863772,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAARzwHxc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19121863772",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "49efddfae7e46637be2c2efc3938ef1a0fecb1e3",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/49efddfae7e46637be2c2efc3938ef1a0fecb1e3",
      "created_at": "2025-08-12T20:25:14Z"
    },
    {
      "event": "reviewed",
      "id": 3112731964,
      "node_id": "PRR_kwDOABII5865iIU8",
      "url": null,
      "actor": null,
      "commit_id": "49efddfae7e46637be2c2efc3938ef1a0fecb1e3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T20:34:46Z",
      "author_association": "MEMBER",
      "body": "> Although I was not able to later reproduce the crash it seems to be happen intermittently\r\n\r\nThanks for the report! Check it now if you can. There was a very subtle bug on which the worker threads might have accessed an index `Sync()` local variable post-destruction.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3112731964",
      "submitted_at": "2025-08-12T20:34:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "labeled",
      "id": 19232295315,
      "node_id": "LE_lADOABII585cyOzezwAAAAR6VYmT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19232295315",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T20:45:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19241639826,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAR65B-S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19241639826",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "69792b6d3ee4b7320c608d5b23056d3e8b998247",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/69792b6d3ee4b7320c608d5b23056d3e8b998247",
      "created_at": "2025-08-20T09:26:20Z"
    },
    {
      "event": "labeled",
      "id": 19243840508,
      "node_id": "LE_lADOABII585cyOzezwAAAAR7BbP8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19243840508",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T11:26:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3205770008,
      "node_id": "IC_kwDOABII586_FCsY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205770008",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T11:26:41Z",
      "updated_at": "2025-08-20T11:26:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `MSan, depends`: https://github.com/bitcoin/bitcoin/runs/48475050585</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a test timeout due to the index not reaching the expected height within the allowed time.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3205770008",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "unlabeled",
      "id": 19244219984,
      "node_id": "UNLE_lADOABII585cyOzezwAAAAR7C35Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19244219984",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T11:49:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19424794213,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASFztZl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19424794213",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "84fec2c2e1b43783dc4049e2cb69ebd9035083a1",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/84fec2c2e1b43783dc4049e2cb69ebd9035083a1",
      "created_at": "2025-08-30T17:46:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19424797293,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASFzuJt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19424797293",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3d123f76428b745f57c77519b07ebce442f82c06",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/3d123f76428b745f57c77519b07ebce442f82c06",
      "created_at": "2025-08-30T17:47:16Z"
    },
    {
      "event": "unlabeled",
      "id": 19425092938,
      "node_id": "UNLE_lADOABII585cyOzezwAAAASF02VK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19425092938",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-30T18:58:56Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19442253566,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASG2T7-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19442253566",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7fccd9fbae85d5a1d0109128ef37c641ba32287e",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/7fccd9fbae85d5a1d0109128ef37c641ba32287e",
      "created_at": "2025-09-01T13:17:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19758943138,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASZuYui",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19758943138",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "46c6bfe5485bd28f76ff23c4a92f70f2a972d681",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/46c6bfe5485bd28f76ff23c4a92f70f2a972d681",
      "created_at": "2025-09-17T20:09:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19759451648,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASZwU4A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19759451648",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8eafb7b2bca9680e4467cd9122042c5d84a85522",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/8eafb7b2bca9680e4467cd9122042c5d84a85522",
      "created_at": "2025-09-17T20:43:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19762925873,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASZ9lEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19762925873",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "created_at": "2025-09-18T01:31:33Z"
    },
    {
      "event": "reviewed",
      "id": 3306087309,
      "node_id": "PRR_kwDOABII587FDuON",
      "url": null,
      "actor": null,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-06T17:09:00Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3306087309",
      "submitted_at": "2025-10-06T17:09:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 3310859660,
      "node_id": "PRR_kwDOABII587FV7WM",
      "url": null,
      "actor": null,
      "commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-07T16:11:57Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3310859660",
      "submitted_at": "2025-10-07T16:11:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 3311757139,
      "node_id": "PRR_kwDOABII587FZWdT",
      "url": null,
      "actor": null,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-07T20:19:04Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3311757139",
      "submitted_at": "2025-10-07T20:19:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20149935141,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASxB5wl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20149935141",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "created_at": "2025-10-07T21:07:50Z"
    },
    {
      "event": "reviewed",
      "id": 3314334098,
      "node_id": "PRR_kwDOABII587FjLmS",
      "url": null,
      "actor": null,
      "commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-08T11:16:35Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3314334098",
      "submitted_at": "2025-10-08T11:16:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 3314876093,
      "node_id": "PRR_kwDOABII587FlP69",
      "url": null,
      "actor": null,
      "commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-08T13:40:05Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3314876093",
      "submitted_at": "2025-10-08T13:40:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20165731962,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASx-KZ6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20165731962",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5a992bce07ea1f038bfaa18aa6f774e7d179075a",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/5a992bce07ea1f038bfaa18aa6f774e7d179075a",
      "created_at": "2025-10-08T14:42:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20167006791,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASyDBpH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20167006791",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "202b7cc81a71444297dc3cfb4be461cac995d944",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/202b7cc81a71444297dc3cfb4be461cac995d944",
      "created_at": "2025-10-08T15:39:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20167283788,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASyEFRM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20167283788",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9270fdded923ddea7e89f72fed5184fecb462efa",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/9270fdded923ddea7e89f72fed5184fecb462efa",
      "created_at": "2025-10-08T15:52:13Z"
    },
    {
      "event": "reviewed",
      "id": 3315536617,
      "node_id": "PRR_kwDOABII587FnxLp",
      "url": null,
      "actor": null,
      "commit_id": "9270fdded923ddea7e89f72fed5184fecb462efa",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-08T16:01:03Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3315536617",
      "submitted_at": "2025-10-08T16:01:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20167528060,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASyFA58",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20167528060",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3c4c3cbe09061088d2649b6bfadacaeed49a6ed6",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/3c4c3cbe09061088d2649b6bfadacaeed49a6ed6",
      "created_at": "2025-10-08T16:04:41Z"
    },
    {
      "event": "reviewed",
      "id": 3315567523,
      "node_id": "PRR_kwDOABII587Fn4uj",
      "url": null,
      "actor": null,
      "commit_id": "3c4c3cbe09061088d2649b6bfadacaeed49a6ed6",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-08T16:07:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3315567523",
      "submitted_at": "2025-10-08T16:07:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20171621419,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASyUoQr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20171621419",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "234f65b6a733a96242381e657ae9978d22b49a8f",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/234f65b6a733a96242381e657ae9978d22b49a8f",
      "created_at": "2025-10-08T20:12:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20172034262,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASyWNDW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20172034262",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f856b8780a90a636012c4137884a26b79cd646a9",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f856b8780a90a636012c4137884a26b79cd646a9",
      "created_at": "2025-10-08T20:38:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20172285579,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASyXKaL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20172285579",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1abd4afe69920c9caca01eda3ab3964823f9ecd6",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/1abd4afe69920c9caca01eda3ab3964823f9ecd6",
      "created_at": "2025-10-08T20:55:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20172851560,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASyZUlo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20172851560",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80e63b71d828276bb18ec1eaa6038ff298db6f21",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/80e63b71d828276bb18ec1eaa6038ff298db6f21",
      "created_at": "2025-10-08T21:37:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20191560721,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASzgsQR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20191560721",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6a81272c2e7e5852187cbaa2f5d9dd5c95dc2745",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/6a81272c2e7e5852187cbaa2f5d9dd5c95dc2745",
      "created_at": "2025-10-09T18:26:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20191698821,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAASzhN-F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20191698821",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "da73d3dc6cec170e3c9e459d15960af196a124f9",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/da73d3dc6cec170e3c9e459d15960af196a124f9",
      "created_at": "2025-10-09T18:32:51Z"
    },
    {
      "event": "commented",
      "id": 3387099398,
      "node_id": "IC_kwDOABII587J4wkG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3387099398",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-09T18:41:15Z",
      "updated_at": "2025-10-09T18:41:15Z",
      "author_association": "MEMBER",
      "body": "Updated with a fuzz test case from @TheCharlatan. Thanks!\r\n",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3387099398",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "mentioned",
      "id": 20191857088,
      "node_id": "MEE_lADOABII585cyOzezwAAAASzh0nA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20191857088",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-09T18:41:16Z"
    },
    {
      "event": "subscribed",
      "id": 20191857119,
      "node_id": "SE_lADOABII585cyOzezwAAAASzh0nf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20191857119",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-09T18:41:16Z"
    },
    {
      "event": "reviewed",
      "id": 3324866101,
      "node_id": "PRR_kwDOABII587GLW41",
      "url": null,
      "actor": null,
      "commit_id": "da73d3dc6cec170e3c9e459d15960af196a124f9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-10T17:13:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Left the fuzz target (`threadpool`) running overnight, performance is reasonable and didn't get any memory leak. I generated a coverage report at https://brunoerg.xyz/bitcoin-core-coverage/26966/coverage_report/.",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3324866101",
      "submitted_at": "2025-10-10T17:13:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "commented",
      "id": 3391433693,
      "node_id": "IC_kwDOABII587KJSvd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3391433693",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-10T17:35:18Z",
      "updated_at": "2025-10-10T17:35:18Z",
      "author_association": "MEMBER",
      "body": "> Left the fuzz target (`threadpool`) running overnight, performance is reasonable and didn't get any memory leak. I generated a coverage report at https://brunoerg.xyz/bitcoin-core-coverage/26966/coverage_report/.\r\n\r\nBoth awesome news! Added report link to the PR description. Thanks!\r\n",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3391433693",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20215334742,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAS07YdW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20215334742",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "created_at": "2025-10-10T18:50:05Z"
    },
    {
      "event": "reviewed",
      "id": 3325457768,
      "node_id": "PRR_kwDOABII587GNnVo",
      "url": null,
      "actor": null,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-10T18:55:17Z",
      "author_association": "MEMBER",
      "body": "Rebased to get latest CI updates.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3325457768",
      "submitted_at": "2025-10-10T18:55:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 3325931655,
      "node_id": "PRR_kwDOABII587GPbCH",
      "url": null,
      "actor": null,
      "commit_id": "3943630a4cea56b040377b33476803745055510c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-10T21:08:50Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3325931655",
      "submitted_at": "2025-10-10T21:08:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 3325981490,
      "node_id": "PRR_kwDOABII587GPnMy",
      "url": null,
      "actor": null,
      "commit_id": "3943630a4cea56b040377b33476803745055510c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-10T21:29:18Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3325981490",
      "submitted_at": "2025-10-10T21:29:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 3325595624,
      "node_id": "PRR_kwDOABII587GOI_o",
      "url": null,
      "actor": null,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-10T21:35:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed only the first two commits so far.\r\n\r\nIt could make sense to introduce the threadpool in an extra PR first, since it is very generic and can be used for multiple things, in case there are some reviewers who don't feel comfortable ACKing the pretty involved index changes, but would want to ACK the threadpool changes. (just a suggestion, not necessary just for my sake since I happen know the index code)",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-3325595624",
      "submitted_at": "2025-10-10T21:35:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "reviewed",
      "id": 2965376357,
      "node_id": "PRR_kwDOABII586wwA1l",
      "url": null,
      "actor": null,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-12T20:51:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "I started a detailed review of this PR and I'm enthusiastic about the concept - it addresses a real problem and the potential performance gains are significant. \\\nStrong Concept ACK!\n\nHowever, I've encountered some concerns that make me hesitant to continue reviewing the current implementation in depth:\n* The txindex parallelization appears to be broken (showing 3-13% slowdowns rather than speedups), and this went unnoticed for years\n* The complexity of the changes makes thorough review very challenging\n* A shared thread pool introduces additional complexity when IO-bound and CPU-bound tasks compete for the same resources - this typically requires work-stealing mechanisms or separate pools to prevent CPU starvation.\n\n### Reproducer\n\nNot sure how other reviewers have reproduced these results, but I needed something reliable that I can run on different platforms with different numbers of threads and storage types.\nI have automated it to make it easier to replicate on different platforms, this is a variation of the script I used:\n```bash\nBEFORE=\"3943630a4cea56b040377b33476803745055510c\"; AFTER=\"aa9cf5db0dce0e5982f69857070c9f2a30fcf095\"; \\\nDATA_DIR=\"/mnt/my_storage/BitcoinData\"; export DATA_DIR; \\\nwait_index() { tail -F ${DATA_DIR}/debug.log | grep -q -m1 'is enabled at height'; killall bitcoind 2>/dev/null || true; sleep 10; }; export -f wait_index; \\\ngit reset --hard >/dev/null 2>&1 && git clean -fxd >/dev/null 2>&1 && git fetch origin $BEFORE $AFTER >/dev/null 2>&1; \\\nfor c in $BEFORE:build-before $AFTER:build-after; do \\\n  git checkout ${c%:*} >/dev/null 2>&1 && cmake -B ${c#*:} -G Ninja -DCMAKE_BUILD_TYPE=Release >/dev/null 2>&1 && ninja -C ${c#*:} bitcoind >/dev/null 2>&1; \\\ndone; \\\necho \"indexes | $(hostname) | $(uname -m) | $(lscpu | grep 'Model name' | head -1 | cut -d: -f2 | xargs) | $(nproc) cores | $(free -h | awk '/^Mem:/{print $2}') RAM | $(df -T $DATA_DIR | awk 'NR==2{print $2}') | $(lsblk -no ROTA $(df --output=source $DATA_DIR | tail -1) | grep -q 0 && echo SSD || echo HDD)\" && \\\nfor INDEX_FLAG in \"-txindex=1\" \"-blockfilterindex=1\"; do \\\n  hyperfine --runs 1 --shell bash --sort command \\\n    --prepare \"rm -rf ${DATA_DIR}/indexes/* ${DATA_DIR}/debug.log\" \\\n    \"./build-before/bin/bitcoind -datadir=${DATA_DIR} ${INDEX_FLAG} -connect=0 -printtoconsole=0                  & wait_index\" \\\n    \"./build-after/bin/bitcoind  -datadir=${DATA_DIR} ${INDEX_FLAG} -connect=0 -printtoconsole=0 -indexworkers=1  & wait_index\" \\\n    \"./build-after/bin/bitcoind  -datadir=${DATA_DIR} ${INDEX_FLAG} -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\" \\\n    \"./build-after/bin/bitcoind  -datadir=${DATA_DIR} ${INDEX_FLAG} -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\" \\\n    \"./build-after/bin/bitcoind  -datadir=${DATA_DIR} ${INDEX_FLAG} -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\" \\\n    \"./build-after/bin/bitcoind  -datadir=${DATA_DIR} ${INDEX_FLAG} -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\" \\\n    \"./build-after/bin/bitcoind  -datadir=${DATA_DIR} ${INDEX_FLAG} -connect=0 -printtoconsole=0 -indexworkers=32 & wait_index\";\\\ndone\n```\n\n### `txindex` parallelization seems broken\n\n<details>\n<summary>txindex 3-9% slower (i9-ssd | Intel i9-9900K | 16 cores | SSD)</summary>\n\n```\nBenchmark 1: ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0                  & wait_index\n  Time (abs ≡):        6761.801 s               [User: 9011.877 s, System: 875.527 s]\n\nBenchmark 2: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=1  & wait_index\n  Time (abs ≡):        6996.856 s               [User: 9344.333 s, System: 896.312 s]\n\nBenchmark 3: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\n  Time (abs ≡):        7015.870 s               [User: 9530.219 s, System: 912.646 s]\n\nBenchmark 4: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\n  Time (abs ≡):        7156.885 s               [User: 10203.442 s, System: 954.607 s]\n\nBenchmark 5: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\n  Time (abs ≡):        7315.911 s               [User: 11774.143 s, System: 1047.173 s]\n\nBenchmark 6: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\n  Time (abs ≡):        7325.947 s               [User: 13227.157 s, System: 1200.721 s]\n\nBenchmark 7: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=32 & wait_index\n  Time (abs ≡):        7382.974 s               [User: 14253.246 s, System: 1989.118 s]\n\nRelative speed comparison\n        1.00          ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0                  & wait_index\n        1.03          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=1  & wait_index\n        1.04          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\n        1.06          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\n        1.08          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\n        1.08          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\n        1.09          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=32 & wait_index\n```\n\n</details>\n\n<details>\n<summary>txindex 10-13% slower (rpi5-16-2 | ARM Cortex-A76 | 4 cores | SSD)</summary>\n\n```\nBenchmark 1: ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0                 & wait_index\n  Time (abs ≡):        12433.186 s               [User: 14666.244 s, System: 2535.770 s]\n\nBenchmark 2: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=1 & wait_index\n  Time (abs ≡):        13671.833 s               [User: 16723.879 s, System: 2939.177 s]\n\nBenchmark 3: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=2 & wait_index\n  Time (abs ≡):        13738.200 s               [User: 17270.730 s, System: 2942.644 s]\n\nBenchmark 4: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=3 & wait_index\n  Time (abs ≡):        13924.557 s               [User: 17881.093 s, System: 3034.775 s]\n\nBenchmark 5: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=4 & wait_index\n  Time (abs ≡):        14023.831 s               [User: 18130.048 s, System: 3040.891 s]\n\nRelative speed comparison\n        1.00          ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0                 & wait_index\n        1.10          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=1 & wait_index\n        1.10          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=2 & wait_index\n        1.12          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=3 & wait_index\n        1.13          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=4 & wait_index\n```\n\n</details>\n\n\n<details>\n<summary>txindex 11.6% faster at 2 workers, then degrades (i7-hdd | Intel i7-7700 | 8 cores | HDD)</summary>\n\n```\nBenchmark 1: ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0                  & wait_index\n  Time (abs ≡):        22530.714 s               [User: 13506.955 s, System: 1931.403 s]\n\nBenchmark 2: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\n  Time (abs ≡):        20188.026 s               [User: 13265.594 s, System: 1815.091 s]\n\nBenchmark 3: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\n  Time (abs ≡):        21060.158 s               [User: 13379.147 s, System: 1862.493 s]\n\nBenchmark 4: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\n  Time (abs ≡):        20894.177 s               [User: 13484.637 s, System: 1921.494 s]\n\nBenchmark 5: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\n  Time (abs ≡):        20998.180 s               [User: 13956.983 s, System: 2132.438 s]\n\nRelative speed comparison\n        1.12          ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0                  & wait_index\n        1.00          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\n        1.04          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\n        1.03          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\n        1.04          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -txindex=1 -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\n\n```\n\n</details>\n\n---\n\n### `blockfilterindex` scales beautifully even on an HDD and on an Rpi5\n\n<details>\n<summary>blockfilterindex 6.4x faster (i9-ssd | Intel i9-9900K | 16 cores | SSD)</summary>\n\n```\nBenchmark 1: ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0                  & wait_index\n  Time (abs ≡):        5883.572 s               [User: 5571.286 s, System: 162.350 s]\n\nBenchmark 2: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=1  & wait_index\n  Time (abs ≡):        3179.316 s               [User: 5783.941 s, System: 189.363 s]\n\nBenchmark 3: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\n  Time (abs ≡):        2223.222 s               [User: 6033.892 s, System: 199.876 s]\n\nBenchmark 4: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\n  Time (abs ≡):        1497.150 s               [User: 6744.119 s, System: 228.107 s]\n\nBenchmark 5: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\n  Time (abs ≡):        1069.091 s               [User: 8684.280 s, System: 286.993 s]\n\nBenchmark 6: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\n  Time (abs ≡):        919.136 s               [User: 13555.771 s, System: 406.747 s]\n\nBenchmark 7: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=32 & wait_index\n  Time (abs ≡):        923.283 s               [User: 13998.239 s, System: 405.510 s]\n\nRelative speed comparison\n        6.40          ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0                  & wait_index\n        3.46          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=1  & wait_index\n        2.42          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\n        1.63          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\n        1.16          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\n        1.00          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\n        1.00          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=32 & wait_index\n```\n\n</details>\n\n<details>\n<summary>blockfilterindex 2.23x faster (rpi5-16-2 | ARM Cortex-A76 | 4 cores | SSD)</summary>\n\n```\nBenchmark 1: ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0                 & wait_index\n  Time (abs ≡):        9862.855 s               [User: 8111.196 s, System: 683.591 s]\n\nBenchmark 2: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=1 & wait_index\n  Time (abs ≡):        5793.623 s               [User: 9166.985 s, System: 818.496 s]\n\nBenchmark 3: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=2 & wait_index\n  Time (abs ≡):        4832.000 s               [User: 11593.642 s, System: 1101.024 s]\n\nBenchmark 4: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=3 & wait_index\n  Time (abs ≡):        4598.405 s               [User: 14802.846 s, System: 1408.865 s]\n\nBenchmark 5: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=4 & wait_index\n  Time (abs ≡):        4421.838 s               [User: 14844.763 s, System: 1388.922 s]\n\nRelative speed comparison\n        2.23          ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0                 & wait_index\n        1.31          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=1 & wait_index\n        1.09          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=2 & wait_index\n        1.04          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=3 & wait_index\n        1.00          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=4 & wait_index\n```\n\n</details>\n\n<details>\n<summary>blockfilterindex 1.63x faster (i7-hdd | Intel i7-7700 | 8 cores | HDD)</summary>\n\n```\nBenchmark 1: ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0                  & wait_index\n  Time (abs ≡):        13060.843 s               [User: 7263.991 s, System: 372.429 s]\n\nBenchmark 2: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\n  Time (abs ≡):        12159.703 s               [User: 11120.566 s, System: 571.598 s]\n\nBenchmark 3: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\n  Time (abs ≡):        9941.238 s               [User: 10606.612 s, System: 534.873 s]\n\nBenchmark 4: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\n  Time (abs ≡):        8396.993 s               [User: 10272.194 s, System: 579.457 s]\n\nBenchmark 5: ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\n  Time (abs ≡):        8028.142 s               [User: 10481.527 s, System: 719.766 s]\n\nRelative speed comparison\n        1.63          ./build-before/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0                  & wait_index\n        1.51          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=2  & wait_index\n        1.24          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=4  & wait_index\n        1.05          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=8  & wait_index\n        1.00          ./build-after/bin/bitcoind  -datadir=/mnt/my_storage/BitcoinData -blockfilterindex=1 -connect=0 -printtoconsole=0 -indexworkers=16 & wait_index\n```\n\n</details>\n\n### Way forward\n\nGiven that this PR has struggled to attract reviewers over the past two years, I think we need a different approach.\nThis is a risky change that touches critical index infrastructure - let's do it in tiny, focused steps instead.\n\nI'd like to propose keeping this PR open as a **draft tracking PR** that contains the full end-to-end implementation for reference and discussion. Meanwhile, we can merge the work through a series of smaller, focused PRs:\n1. Start with a minimal implementation: single index (blockfilterindex), hardcoded 2 threads, minimal configurability\n2. Get that reviewed, tested, and merged - let's see what users think\n3. Then add the thread pool infrastructure in a separate PR (if still needed - we might find simpler per-index solutions work better)\n4. Then add txindex and coinstatsindex (and eventually chainstate) support once we have confidence in the approach (and fix the current implementation issues).\n\nI'm happy to help in any way I can and I don't want to discourage you, but I strongly disagree with the current direction, so that's an **Approach NACK** from me.\n\nBreaking this into smaller, more manageable chunks would significantly improve the chances of getting this important work merged - let me know how I can help!\n\n<details>\n<summary>Side note: C++20 coroutines as an alternative?</summary>\n\n```\nC++20 coroutines (with work-stealing threadpool, suspending on I/O operations) might be worth investigating for this scenario - they could provide a cleaner way to handle the async I/O patterns here. I haven't used them in C++ myself, so I'm not sure if they're a good fit, but I'd be happy to experiment with them if there's interest.\n```\n\n</details>\n",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#pullrequestreview-2965376357",
      "submitted_at": "2025-10-12T20:51:48Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
    },
    {
      "event": "commented",
      "id": 3397616691,
      "node_id": "IC_kwDOABII587Kg4Qz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3397616691",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-13T13:48:31Z",
      "updated_at": "2025-10-13T17:45:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "I also measured the txindex with `-indexworkers=15` on a 32 vcpu machine and it was slightly slower than master.\r\nI guess this makes sense since each thread needs to write the index data to leveldb, and the actual work done by the CPU is minimal (serializing then computing offsets). So each thread is waiting for the other threads to finish writing.\r\nFor blockfilter the filter computation is more intensive, and then each filter is written to a separate file. Only after the filter is written the location of the filter is written to the shared leveldb.\r\n\r\nEdit: Just tried again on latest push f13033233d3f2953f179612ac0582b653ac629da on a node synced to 913866:\r\n\r\n`./build/bin/bitcoind -connect=0 -disablewallet -txindex=1 -indexworkers=5`\r\n\r\nbranch (f13033233d3f2953f179612ac0582b653ac629da) - time was 90 minutes 41 seconds\r\nmaster (becf1500131805bd6a47486cd5bc5bdb55839211) - time was 84 minutes 42 seconds\r\n\r\nSo master was ~7% faster than this PR with 5 workers on an SSD.\r\n\r\nMaybe we don't enable parallel sync for txindex?\r\n\r\nNote: https://github.com/bitcoin/bitcoin/pull/30039 was merged since many of the earlier benchmarks were made. That greatly speeds up the txindex creation.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3397616691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20250262410,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAS3AnuK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20250262410",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f13033233d3f2953f179612ac0582b653ac629da",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f13033233d3f2953f179612ac0582b653ac629da",
      "created_at": "2025-10-13T15:34:31Z"
    },
    {
      "event": "commented",
      "id": 3398073492,
      "node_id": "IC_kwDOABII587KinyU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3398073492",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-13T15:48:58Z",
      "updated_at": "2025-10-13T15:55:31Z",
      "author_association": "MEMBER",
      "body": "Haven't read the latest comments yet (will do soon), but I’ve been working on an overhaul of the approach this weekend. I got enlightened after last week’s review.\r\n\r\nThe latest code on Signet, syncing the block filter index up to block height 240593 on a MacBook M1 Pro, running on an SSD (following the testing steps in the PR description). Results:\r\n\r\nMaster branch (64a7c7cbb975cb3c3f25a3f784779f32cd95ebaa) sync time: ~50 minutes.\r\nCurrent PR (f130332) sync time: ~5 minutes (with 5 worker threads). Flying.",
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#issuecomment-3398073492",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26966"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20252657592,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAS3Jwe4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20252657592",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "afd759a12ff8ee971fbc951d3008eb94073ff29f",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/afd759a12ff8ee971fbc951d3008eb94073ff29f",
      "created_at": "2025-10-13T17:47:03Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI0ODg5MGQzNjgwNDY5YjRmMzk4OGYwZDY1NDc4MGUwZDdlZWViNWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b48890d3680469b4f3988f0d654780e0d7eeeb5c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b48890d3680469b4f3988f0d654780e0d7eeeb5c",
      "tree": {
        "sha": "7c981431fedd61f5d8e853c8bedae9863e83cdce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c981431fedd61f5d8e853c8bedae9863e83cdce"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7c981431fedd61f5d8e853c8bedae9863e83cdce\nparent 64a7c7cbb975cb3c3f25a3f784779f32cd95ebaa\nauthor furszy <matiasfurszyfer@protonmail.com> 1676560833 -0300\ncommitter furszy <matiasfurszyfer@protonmail.com> 1760385095 -0400\n\nutil: introduce general purpose thread pool\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjtWEcACgkQXdI8zGhq\npiPwbQ/9EkJxHwVScvSrCzCQc4sVSDZ5rSNPWPlRM7UZ1qge5YOBG1OsXTRj+oA1\n26AN4asBc3Wmj9azEV4d7k/U8fWqJGEJ1TgZtXis54ghQgTN45sbbZOX+/T4k5eK\ndyu9Cuy7lPz+4XHhPywAMRcqonIxuxvKTRXLgKOuh0LnMW5wdi2AqaZ/bv/fmNZX\nzxsHkvz2i3BGKpPsz1aH4wRp7UO0+C9wI4JI3j9F85RVSc86mdmq0ECHiNEUblSM\nJ4rrZ88Ner9m7XhqC7KYXdqie6BMZfnt+G+7OtlNeaE329DdHSezT5Wews2xALtS\nfneaEMWv84CA6nltMI/s5CwTjQwyeDGavqCfFLHR+dKtZ7oV0rFwrDCoG846qbL0\nI9x3R9JFtBAHKFDsyTrmqEiCd0Le/5q8/Cv4wGwnRO3ce3qCcDlISILVC+XkjgMs\nKeqiwUwvcTT9oRbKWhRX4pnsPRaTy0p7VMj6M3BLB7NcrQ2qyh2Pl2OJ4L71SK+v\noSJ236ekHwGJRMmzQ/bqu6hmKF/OUeKldilMk1n8ZjpB+0E2uUJNUbZQRZF0geqx\nwztTYP+v15OOrMXsapaCA5nhR1xDplZKtLEv5U0edX9QpbUcWTxgIm65c5paXqE8\nFpUsUdelxu4WXlcmR0DuXvVVKlsOmhpoAqBuWfAgtXS8VaJju6A=\n=wfYL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64a7c7cbb975cb3c3f25a3f784779f32cd95ebaa",
          "sha": "64a7c7cbb975cb3c3f25a3f784779f32cd95ebaa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/64a7c7cbb975cb3c3f25a3f784779f32cd95ebaa"
        }
      ],
      "message": "util: introduce general purpose thread pool",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-13T19:51:35Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2023-02-16T15:20:33Z"
      },
      "sha": "b48890d3680469b4f3988f0d654780e0d7eeeb5c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBiZjQ0NzM0OWRmZDJmMmNmODM4NmU0ZDZmYjVhY2EwNjVhNDAxMjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf447349dfd2f2cf8386e4d6fb5aca065a40121",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf447349dfd2f2cf8386e4d6fb5aca065a40121",
      "tree": {
        "sha": "a7ce0f4cbe7605483201055d8cfb956608e000f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7ce0f4cbe7605483201055d8cfb956608e000f8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a7ce0f4cbe7605483201055d8cfb956608e000f8\nparent b48890d3680469b4f3988f0d654780e0d7eeeb5c\nauthor furszy <matiasfurszyfer@protonmail.com> 1676941848 -0300\ncommitter furszy <matiasfurszyfer@protonmail.com> 1760385095 -0400\n\ninit: provide thread pool to indexes\n\nAnd add option to customize thread pool workers count\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjtWEcACgkQXdI8zGhq\npiPMhQ/+LU0hUzYVQjhkpI7YMBVyytPFrzv2syMhLmu4x2sMgd1gUu4BXbzfIerL\nrrer2g/PwivAZbYgvQipImh6gBdxPAk7v3sGr3J6pe+23uzuoYKmCsaCkEtED1OB\n9w3Pe7OFwfNrodMn7/3bf8pSoEDsHLWedIEyWq3T6iziv+CJ0QrV8EWGYHtRGvfD\nxQ72wgujQoBuw2Q76JyxR5BywufscVsdm7WeXmABulGNg4M1MNSYOwBYkNf2gJds\nzocG1C1kJ754Bq4BJEts3lqsQ9Y33+aURbttuuTC3R1TdTQEBDhGl/lUvtiMyal9\n6ebV+szpKxrB6PO+N1yjdI+9dX5DQign2wdE8QD3ZJXiiKGbFXdiqzObB4d3eInp\n4Tmw3TOvBfrBntDYTd/s9uAcdF74ZFCpWWlha3QscLlLERRDtZxzE8tWZsU7jbKG\nddLpXFjOF7/u9RbBqrw7k9+hHa6LZ8JcyDiy8epQQHkE6Sh8M81lUw0kvvsHunc+\nch90R/IQyLNTEHgQfzsSb6yvGDUKl8d2NLtyHICd2KTDacARixJgQTR54fcADgAQ\ndYhMmGR3e6gOpIDSzZTrZee58zHA01TXjOFon8TtyePJ5Rq8Za+BXL4fu8+JCE4r\n/i6QSI/WsbsxsB6ymzFpWIcGFebaMOu0BA1rFXMDGdub4o1xbhI=\n=uNG+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b48890d3680469b4f3988f0d654780e0d7eeeb5c",
          "sha": "b48890d3680469b4f3988f0d654780e0d7eeeb5c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b48890d3680469b4f3988f0d654780e0d7eeeb5c"
        }
      ],
      "message": "init: provide thread pool to indexes\n\nAnd add option to customize thread pool workers count",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-13T19:51:35Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2023-02-21T01:10:48Z"
      },
      "sha": "0bf447349dfd2f2cf8386e4d6fb5aca065a40121"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUzNThkNjNjNWM3MGI0YmIyZDBiMTI4OTNmNDcxZDNhYjI3ZjlmMmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e358d63c5c70b4bb2d0b12893f471d3ab27f9f2b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e358d63c5c70b4bb2d0b12893f471d3ab27f9f2b",
      "tree": {
        "sha": "797314c7141badf924392919e6859e1a21b548c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/797314c7141badf924392919e6859e1a21b548c3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 797314c7141badf924392919e6859e1a21b548c3\nparent 0bf447349dfd2f2cf8386e4d6fb5aca065a40121\nauthor furszy <matiasfurszyfer@protonmail.com> 1676935070 -0300\ncommitter furszy <matiasfurszyfer@protonmail.com> 1760385096 -0400\n\nindex: implement index parallel sync\n\nThis introduces parallel sync for the indexes initial sync,\ndistributing the workload across multiple threads.\n\nWhen enabled, the chain is divided into fixed-size block ranges called\n\"tasks\". Worker threads consume tasks concurrently, calling to the\nCustomProcessBlock over their assigned range, storing results in a\nshared context while opportunistically batching and dumping the collected\ninformation to disk sequentially (when needed).\n\nSince large reorgs are improbable during initial sync (headers-chain PoW\ndictates the valid chain), reorgs are detected only before syncing begins\nand once it completes. Any new blocks connected during the process are\ncaught up sequentially at the end. This, together with the fact that we\nno longer depend on an intermediate \"index best block\" that might be out\nof sync with the index m_best_block_index, allows us to remove the\nindex_reorg_crash test, as it is no longer possible to call Rewind on a\nblock that is not the index tip.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjtWEgACgkQXdI8zGhq\npiOQlw//dIZlnLXma/ILBWCTKdW49EWdnNnt4Z5JKR2DbG2kXZ1y6tehdFwak9mS\nFcorIc2f+Tjq6fEU6oQ5G6k/xnhbyvi7JYZCrcCUglkjrlUnXphQLMFo+NlzI78M\ntae8mAO3GMRGUl82ibfruuBHo4wOCD9ui9AxRxRfU+3zlCAIg11zvsNHuMb9WdMd\nbnZZM7cpcL2Uy6wz7DCbsUMWJnNdUkossEEhftT8ByHX8VyQmFU8qa2tyDCoFG6P\n3IIfoOd/4fhhyoKFIWa/GoG/Sz+Wonh8Z/9mMklm6pUvl9G0XUfW04Xw519dT9mY\nV6SOFjtqwlFD9154xNtiingmGbzj3CsssNuMeLD6atPKIpaTJ3VZR8gYCt+ro+1y\nJp6gbXRRVq7iGHJFFBxkRL91CeevwYOlih1BSKuh1srn+R6K4h+cG8sdDy8oXopX\nEpXqXogUZuUSMzUVgxT06UnPCpQ83RR0Tg85G5yis2dMnPY8EsekiHWscx9kPjA0\nx53QgB4Lc8k3n3+6/H978zrKe0d48kI5aOU4o3n9JYu2NJw+HF4im5mQ9oXFxpr5\nMBNkaddroWgwl1fFNMo/Envj9XojCHNyJRMeyT4pb1W5puIHF251ekL4fcC5QGKz\nObr+xP+Sam/PRJMsonc8C7YHKgMpP34wSgTL7CWfaERP65FoCNE=\n=VJR3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf447349dfd2f2cf8386e4d6fb5aca065a40121",
          "sha": "0bf447349dfd2f2cf8386e4d6fb5aca065a40121",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf447349dfd2f2cf8386e4d6fb5aca065a40121"
        }
      ],
      "message": "index: implement index parallel sync\n\nThis introduces parallel sync for the indexes initial sync,\ndistributing the workload across multiple threads.\n\nWhen enabled, the chain is divided into fixed-size block ranges called\n\"tasks\". Worker threads consume tasks concurrently, calling to the\nCustomProcessBlock over their assigned range, storing results in a\nshared context while opportunistically batching and dumping the collected\ninformation to disk sequentially (when needed).\n\nSince large reorgs are improbable during initial sync (headers-chain PoW\ndictates the valid chain), reorgs are detected only before syncing begins\nand once it completes. Any new blocks connected during the process are\ncaught up sequentially at the end. This, together with the fact that we\nno longer depend on an intermediate \"index best block\" that might be out\nof sync with the index m_best_block_index, allows us to remove the\nindex_reorg_crash test, as it is no longer possible to call Rewind on a\nblock that is not the index tip.",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-13T19:51:36Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2023-02-20T23:17:50Z"
      },
      "sha": "e358d63c5c70b4bb2d0b12893f471d3ab27f9f2b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE2OGIxODY3ZjVkZDIwYjQwNjk1NTY4YTJmMmRjOTYxYTllMmZiYmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168b1867f5dd20b40695568a2f2dc961a9e2fbbd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/168b1867f5dd20b40695568a2f2dc961a9e2fbbd",
      "tree": {
        "sha": "9be6798a64caa667b2ff9ca14f008c2b24bcec34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9be6798a64caa667b2ff9ca14f008c2b24bcec34"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9be6798a64caa667b2ff9ca14f008c2b24bcec34\nparent e358d63c5c70b4bb2d0b12893f471d3ab27f9f2b\nauthor furszy <matiasfurszyfer@protonmail.com> 1676935142 -0300\ncommitter furszy <matiasfurszyfer@protonmail.com> 1760385096 -0400\n\nindex: enable block filter index parallel sync\n\nIt also adds coverage for initial sync from a particular block.\nMimicking a node restart.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjtWEgACgkQXdI8zGhq\npiObYQ//cjHFu4Fp9rhiLHZ+TEtJxAnEl9A/SeSFBOTtPEpClL37AUedw5LcC3fF\nVkMMbZzftO+afenCVb2hM9Xp3i5RBMdnwEj3PCwaPPQf3vnQIA/Nu63WqpOZqc8D\noYwwxda2j2Y3HPdZ5zpTtuxe2aViat+P5YLz3pdjW4GKqC3cZAhr1Iam+y86BmAf\nLnCDtaFbYmByo93tf4r5PhHM95RqtE1M2QL3RpTyd8p4+IsNCh9E8pfz6dK5OXnK\nJBueDKjzRqf92SjzVem/pyRyLoiz7c1436TWE1ZWnvXrKZ+b5Vh20B1mgu66TBNq\nyu73M+3J84nZoqIBnA2sQREuJYLlJJuRMeoeeNFIqLIhEh1j8rirh7L/QoPy9B87\n9vARaWQeAiDqAkG1bJpYmdykbedMIT5j5dnn0jM2ypUIOcMy1mPdLTq4iTThhP2k\nnUBTwnJE46s2ogP/1ITsDwrRxPEOh7R2yyoc9rZJ4sz6YWf4D6CUzb39mUEACKv9\nUs7jSN6vx8Jju+L6bXNM2fkygHfOYl7yg6V67fr6w/AueJBTJrdxENu3OO+FHa21\nGcd7UZKfBT0DmfwdcFbABUlTOppbS4OGWQbdnnbDZDemSLwLzxf+MXR2U+YIm0ga\nTAJqHMx3Qu15m35+fGMaxe2A+BlfPVwZHCGQS5IsViQaSJ5fXLo=\n=z4Om\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e358d63c5c70b4bb2d0b12893f471d3ab27f9f2b",
          "sha": "e358d63c5c70b4bb2d0b12893f471d3ab27f9f2b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e358d63c5c70b4bb2d0b12893f471d3ab27f9f2b"
        }
      ],
      "message": "index: enable block filter index parallel sync\n\nIt also adds coverage for initial sync from a particular block.\nMimicking a node restart.",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-13T19:51:36Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2023-02-20T23:19:02Z"
      },
      "sha": "168b1867f5dd20b40695568a2f2dc961a9e2fbbd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFhMmQ5OTIwMWVkNTQ4ODg4YjQ0ODM0MzVkZTAyM2FiYTFjNjEwZDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a2d99201ed548888b4483435de023aba1c610d5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1a2d99201ed548888b4483435de023aba1c610d5",
      "tree": {
        "sha": "c362e2026172f78ca72b1ea96baa0964708c32ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c362e2026172f78ca72b1ea96baa0964708c32ab"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c362e2026172f78ca72b1ea96baa0964708c32ab\nparent 168b1867f5dd20b40695568a2f2dc961a9e2fbbd\nauthor furszy <matiasfurszyfer@protonmail.com> 1677536178 -0300\ncommitter furszy <matiasfurszyfer@protonmail.com> 1760385096 -0400\n\ntxindex: enable parallel sync\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjtWEgACgkQXdI8zGhq\npiP3KRAAjdTiAb6XRMmAJkCGxQLaqfO8y5VNwhkUXd1FNqpS6NAIHjNpQC4wFP/M\nVHJFoS4A03XsGNZF4LMszcpqPzvgUxkvWRSWd5JJL93rZBlijE7jb7i7lD+ROz2B\nDcE+I4pvTv57Klu7vD4K33mLJZrrkSHv44QHuB0eKuO5vlAQQiXNDbq4HvWwGv1o\nQFAiGx1TsqYbXQ0H7Yu01Ri4JGXVybjZHOUDORSjd/6bpfCu1tgxclcYEjrutOiL\nSMCWzwXA45Mqt4as5n7P8hKvYJY9a4Aq567/mfRukcp0kBQjBxOh6jL1Pjn0EdXs\nciBk0gJuckh5C0YPH7ZlJ7BFRizQiZEKBj5HG+1s6yUYWft6b/uX6JgsB0SAS+87\nnXV0OATqbe66k2TrMh4Kf1ciZxJPniSRVk/Tlp9dTNOi9/tTq0a9YBjyfDijhQDC\nmr7E0XSRoXTUjRPSvqToFvbLIAwsvNEoQig5lncPznuP1Ox7Xf5gCuKh0hkRQeo4\nemF67ipdtjWnSJD8qF/R47QGl8f7SID1mtyp4voAC0iqn89QIkb0IcM2qAuVJC3m\nf9a5/wMwcGXwI5u8reOLq9Gzim6pJgT11N46c9j7eGmLGd2p7dCxVe2MD+Wcy13V\nhYAAeJFpPlSqpFiHCp6rFR7t26K091G5FbmwU5Oq28CeYLcJBzk=\n=cMfd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168b1867f5dd20b40695568a2f2dc961a9e2fbbd",
          "sha": "168b1867f5dd20b40695568a2f2dc961a9e2fbbd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/168b1867f5dd20b40695568a2f2dc961a9e2fbbd"
        }
      ],
      "message": "txindex: enable parallel sync",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-13T19:51:36Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2023-02-27T22:16:18Z"
      },
      "sha": "1a2d99201ed548888b4483435de023aba1c610d5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg0NjAxNzc4OGNiZDM1ZWIzOThlZWY5ZDJkYjk1NzI4YWM4NTdiM2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/846017788cbd35eb398eef9d2db95728ac857b3d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/846017788cbd35eb398eef9d2db95728ac857b3d",
      "tree": {
        "sha": "eef8581bffccfeb1c5207cabbcefd1c58860be9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eef8581bffccfeb1c5207cabbcefd1c58860be9a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree eef8581bffccfeb1c5207cabbcefd1c58860be9a\nparent 1a2d99201ed548888b4483435de023aba1c610d5\nauthor TheCharlatan <seb.kung@gmail.com> 1758561710 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1760385096 -0400\n\nfuzz: add test case for threadpool\n\nCo-authored-by: furszy <matiasfurszyfer@protonmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjtWEgACgkQXdI8zGhq\npiNHxRAAjN1NmF/gLwHoIEzzw2c08SCOx/QsfkQeOad8hGSeHwQpd4z/Dq0qPm6z\nZKvSO/Jq2JBeifI2S2Z9s2Ijj1LzYlyi+wDnO5Dn4KrpDDCXQ8g2xLYZwAzn1kcx\nb/Q4I+bczwI7vMs8bKgvIo9PVjnz2ZERPEh4mot0zrlbicjVmFZwskZH+xgYQcPk\nXaSzfr6sl2Lg3M87StGGnvzezg8EEdLsadTGXXRg8gnekcnq+0xHknQTn9RKersN\nbet2ireNO+uaQgJ++0fdpsQ5LkyVSba5wqrEFsjEky69t2XrGS5ITbVlsmpJ1N9Q\nnHZqwnXmCawj5K6sbGeIMrol3IwN3Qyyr6GzeoH1W+ODf3T4Tp1wFlmBAZbs0wVB\nLdhyc+rpuOVqnxrQjYdpekKyV+t9WYfzbGUNgKjuUaW0NdXyG+FbpMGBSWlQ9eJm\nVrOL4jvi/uMqGZyqX7rwUGzEbgThyKpmQUFCItNaSJdFatYCPJHQskHnHGUHKkOA\n5UcUBF1vPEptpwuv7nAx0hXES6e0kyr2JlZjSKVSklFCDY6wd+fGzzKsnMuzcDd4\ny/9W2afI1uLNlocr0LyLSplJ3aQh0inp807JsFmqkNMN8EuJSMX3oAGIPSOBHo4g\ns+ZsC4WJFl6rJtEvaeQHPXoQQdfNKPXUoasyQLONPTLhuoRWp/Y=\n=lK/R\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a2d99201ed548888b4483435de023aba1c610d5",
          "sha": "1a2d99201ed548888b4483435de023aba1c610d5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1a2d99201ed548888b4483435de023aba1c610d5"
        }
      ],
      "message": "fuzz: add test case for threadpool\n\nCo-authored-by: furszy <matiasfurszyfer@protonmail.com>",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-13T19:51:36Z"
      },
      "author": {
        "name": "TheCharlatan",
        "email": "seb.kung@gmail.com",
        "date": "2025-09-22T17:21:50Z"
      },
      "sha": "846017788cbd35eb398eef9d2db95728ac857b3d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20254569123,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAS3RDKj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20254569123",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "536f7b0acf376f05d18834a35436a6654e3b83ac",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/536f7b0acf376f05d18834a35436a6654e3b83ac",
      "created_at": "2025-10-13T19:53:43Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIwMWE5MGYwMzQzMTcwODkzMzA0MGIzYmE1NmFlY2Q5NTFkYjg0NWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/201a90f03431708933040b3ba56aecd951db845e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/201a90f03431708933040b3ba56aecd951db845e",
      "tree": {
        "sha": "d42491dbf5fc51feeed03f917a825bdc9c894bfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d42491dbf5fc51feeed03f917a825bdc9c894bfc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d42491dbf5fc51feeed03f917a825bdc9c894bfc\nparent 846017788cbd35eb398eef9d2db95728ac857b3d\nauthor furszy <matiasfurszyfer@protonmail.com> 1760384718 -0400\ncommitter furszy <matiasfurszyfer@protonmail.com> 1760405442 -0400\n\nDROP: debugging CI failure live\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA++0fqwRHQpmlZfQXdI8zGhqpiMFAmjtp8IACgkQXdI8zGhq\npiM/0hAAmzlql270e5vDIGeT53qFh2IDxNC0DhHhu1AoD62nGAo3rbCmftH+CXr/\nFVOGNjHDYJpz4e9l8kUTUH07w4RXpqEQwPt9IccRxhgjubinPN+RzrZ5Cj5gBvrQ\nECiHzoqpirHho30nK9BdiWfzM+kjP2HFjewfuKp0WGHlW1jL6vzsIwAbdnotXYCy\nuUSPu7VSV3T20z790/ecVdhei+CoA3/UyTS4fpvOFrxYqYJko2i7WJRFseqvQQQQ\ndH8X4GbXJtX4FBsILRpjXoHbdYO+u8Zmtn+GECHNmewl/yvkGzmBzUAsFrxh79vf\nnFvAqkDk8ZO3t0Nn2OzVeTnbS6cnlBuq5rP9kVAE3KPZ+eXsDuaMxIJPZZ/78nXw\nucRJQhGvNpqIGUia2c+K/7NjwhuLf1TSp2G4hrmtMx+Orfxe3QQMCcJ+fThBrSjG\nB0b/dPUFZqQg9gSNwm6giLoomyog5eP06Ec87iI0NFHjgKj9A6DLbyHz+4x6UwTT\n48mSUF0O7vg5uyxDjNNfFVpiwb3WOik0/3jimdvYWN9V8DHJQkTmgD+zVAB2ah0B\ntrrfIR1LDRMB8Zg5t9rFdr96rJ2pe3kfbcXI7pMnvtp1CXqTczeRE3kjaK4UWjPl\n27Rq8+dHi40tLbjOBjb6vDFNSJT9b0qYp7saSGfqzvn2I6ZkKM0=\n=/iQw\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/846017788cbd35eb398eef9d2db95728ac857b3d",
          "sha": "846017788cbd35eb398eef9d2db95728ac857b3d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/846017788cbd35eb398eef9d2db95728ac857b3d"
        }
      ],
      "message": "DROP: debugging CI failure live",
      "committer": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-14T01:30:42Z"
      },
      "author": {
        "name": "furszy",
        "email": "matiasfurszyfer@protonmail.com",
        "date": "2025-10-13T19:45:18Z"
      },
      "sha": "201a90f03431708933040b3ba56aecd951db845e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20258418295,
      "node_id": "HRFPE_lADOABII585cyOzezwAAAAS3fu53",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20258418295",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/201a90f03431708933040b3ba56aecd951db845e",
      "created_at": "2025-10-14T01:31:11Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404328365",
      "pull_request_review_id": 1747911419,
      "id": 1404328365,
      "node_id": "PRRC_kwDOABII585TtFmt",
      "diff_hunk": "@@ -42,6 +42,9 @@ class BlockFilterIndex final : public BaseIndex\n     /** cache of block hash to filter header, to avoid disk access when responding to getcfcheckpt. */\n     std::unordered_map<uint256, uint256, FilterHeaderHasher> m_headers_cache GUARDED_BY(m_cs_headers_cache);\n \n+    // Last computed header to avoid disk reads at every new block.\n+    uint256 last_header{};",
      "path": "src/index/blockfilterindex.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "003f076a150c1237e4b9b212265d4665a32dcb5c",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "NIt: Might take this opportunity to add the <uint256.h> header?",
      "created_at": "2023-11-24T12:58:03Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404328365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404328365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404459012",
      "pull_request_review_id": 1747911419,
      "id": 1404459012,
      "node_id": "PRRC_kwDOABII585TtlgE",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};\n+    // Worker threads\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread(const std::string& thread_name) EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        util::ThreadRename(std::string{thread_name});\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_stop.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_stop.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_stop.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }\n+    }\n+\n+public:\n+    ThreadPool() {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't being stopped.",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 58,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "NIt: `// In case it hasn't been stoppped.`",
      "created_at": "2023-11-24T15:18:11Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404459012",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404459012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404460151",
      "pull_request_review_id": 1747911419,
      "id": 1404460151,
      "node_id": "PRRC_kwDOABII585Ttlx3",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: Adjust copyright date.",
      "created_at": "2023-11-24T15:19:04Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404460151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404460151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404471253",
      "pull_request_review_id": 1747911419,
      "id": 1404471253,
      "node_id": "PRRC_kwDOABII585TtofV",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+",
      "path": "src/util/threadpool.h",
      "position": 25,
      "original_position": 16,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I run IWYU locally, it reports the following headers as missing:\r\n```\r\n#include <cstddef>            // for size_t\r\n#include <algorithm>           // for max\r\n#include <atomic>              // for atomic\r\n#include <functional>          // for function\r\n#include <memory>              // for make_shared\r\n#include <stdexcept>           // for runtime_error\r\n#include <utility>             // for move, swap\r\n#include <vector>              // for vector\r\n```",
      "created_at": "2023-11-24T15:32:09Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404471253",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404471253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404663869",
      "pull_request_review_id": 1747911419,
      "id": 1404663869,
      "node_id": "PRRC_kwDOABII585TuXg9",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just a comment: It would be nice if we could re-use the `CThreadInterrupt` interface here, but I don't think it's easily possible.",
      "created_at": "2023-11-24T22:37:07Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404663869",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404663869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404664671",
      "pull_request_review_id": 1747911419,
      "id": 1404664671,
      "node_id": "PRRC_kwDOABII585TuXtf",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};\n+    // Worker threads\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread(const std::string& thread_name) EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        util::ThreadRename(std::string{thread_name});\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_stop.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_stop.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_stop.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }\n+    }\n+\n+public:\n+    ThreadPool() {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't being stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+\n+        // Create the workers\n+        for (int i=0; i<num_workers; i++) {\n+            m_workers.emplace_back(&ThreadPool::WorkerThread, this, \"threadpool_worker_\" + ToString(i));\n+        }\n+    }\n+\n+    void Stop()\n+    {\n+        // Notify workers and join them.\n+        m_stop = true;\n+        m_condition.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        m_stop = false;\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        auto ptr_task = std::make_shared<std::packaged_task<decltype(task()) ()>>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(cs_work_queue);\n+            m_work_queue.emplace([=]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_condition.notify_one();\n+        return future;\n+    }\n+\n+    // Synchronous processing\n+    void ProcessTask() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 99,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why is this added?",
      "created_at": "2023-11-24T22:41:50Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404664671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404664671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404871876",
      "pull_request_review_id": 1747911419,
      "id": 1404871876,
      "node_id": "PRRC_kwDOABII585TvKTE",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};\n+    // Worker threads\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread(const std::string& thread_name) EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        util::ThreadRename(std::string{thread_name});\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_stop.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_stop.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_stop.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }",
      "path": "src/util/threadpool.h",
      "position": 84,
      "original_position": 50,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it would be necessary for the tasks themselves, since you already demonstrate in the tests how to retrieve exceptions, but I think some kind of exception handling and infomation logging similar to the one of `util::TraceThread` would still be nice. Did you choose not to use `TraceThread` on purpose?",
      "created_at": "2023-11-25T12:37:05Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404871876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404871876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404873978",
      "pull_request_review_id": 1747911419,
      "id": 1404873978,
      "node_id": "PRRC_kwDOABII585TvKz6",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_workers = 3;\n+        int num_tasks = 50;",
      "path": "src/test/threadpool_tests.cpp",
      "position": 76,
      "original_position": 24,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could use this test to stress test the pool a bit with more tasks?",
      "created_at": "2023-11-25T12:44:25Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404873978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404873978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404874302",
      "pull_request_review_id": 1747911419,
      "id": 1404874302,
      "node_id": "PRRC_kwDOABII585TvK4-",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_workers = 3;\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(num_workers);\n+        std::atomic<int> counter = 0;\n+        for (int i=0; i<num_tasks; i++) {",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think a test where each task is assigned slightly different data would be nice. Something like:\r\n```c++\r\n+        std::atomic<int> par_sum{0};\r\n+        for (int i = 0; i < num_tasks; i++) {\r\n+            threadPool.Submit([&par_sum,i]() {\r\n+                par_sum += i;\r\n             });\r\n         }\r\n+        int sync_sum{0};\r\n+        for (int i = 0; i < num_tasks; i++) {\r\n+            sync_sum += i;\r\n+        }\r\n```",
      "created_at": "2023-11-25T12:45:50Z",
      "updated_at": "2023-11-25T12:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1404874302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404874302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405161198",
      "pull_request_review_id": 1749211886,
      "id": 1405161198,
      "node_id": "PRRC_kwDOABII585TwQ7u",
      "diff_hunk": "@@ -16,13 +16,17 @@ class CBlock;\n class CBlockIndex;\n class Chainstate;\n class ChainstateManager;\n+class ThreadPool;\n namespace interfaces {\n class Chain;\n } // namespace interfaces\n namespace Consensus {\n     struct Params;\n }\n \n+/** Number of concurrent jobs during the initial sync process */\n+const int16_t INDEX_WORKERS_COUNT = 0;",
      "path": "src/index/base.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "7b2d4d471ae251d4c22184dda26b73993a65eff8",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`static constexpr int16_t INDEX_WORKERS_COUNT{0}` (and similarly below)?",
      "created_at": "2023-11-25T16:22:29Z",
      "updated_at": "2023-11-25T23:01:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1405161198",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405161198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405168955",
      "pull_request_review_id": 1749211886,
      "id": 1405168955,
      "node_id": "PRRC_kwDOABII585TwS07",
      "diff_hunk": "@@ -1966,7 +1970,21 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    std::shared_ptr<ThreadPool> thread_pool;\n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > 100) return InitError(_(\"Invalid -indexworkers arg\"));\n+\n+        thread_pool = std::make_shared<ThreadPool>();\n+        thread_pool->Start(index_workers);\n+    }\n+\n     // Start threads\n-    for (auto index : node.indexes) if (!index->StartBackgroundSync()) return false;\n+    for (auto index : node.indexes) {\n+        // todo: Only provide thread pool to indexes that supports parallel sync",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "7b2d4d471ae251d4c22184dda26b73993a65eff8",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit 7b2d4d471ae251d4c22184dda26b73993a65eff8: Could the `AllowParallelSync` method be moved to this commit?",
      "created_at": "2023-11-25T16:46:03Z",
      "updated_at": "2023-11-25T23:01:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1405168955",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405168955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1984,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405180029",
      "pull_request_review_id": 1749211886,
      "id": 1405180029,
      "node_id": "PRRC_kwDOABII585TwVh9",
      "diff_hunk": "@@ -205,9 +217,53 @@ void BaseIndex::ThreadSync()\n                            __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {\n+                int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\n+                int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+                int remaining_blocks = tip_height - pindex_next->nHeight;",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "727be9d500c081309042c256dc02166acb6d4774",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Make `max_blocks_to_sync`, `tip_height`, and `remaining_blocks` `const`.",
      "created_at": "2023-11-25T17:25:51Z",
      "updated_at": "2023-11-25T23:01:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1405180029",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405180029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405180661",
      "pull_request_review_id": 1749211886,
      "id": 1405180661,
      "node_id": "PRRC_kwDOABII585TwVr1",
      "diff_hunk": "@@ -205,9 +217,53 @@ void BaseIndex::ThreadSync()\n                            __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {\n+                int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\n+                int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+                int remaining_blocks = tip_height - pindex_next->nHeight;\n+                work_chunk = remaining_blocks > max_blocks_to_sync ? m_tasks_per_worker : remaining_blocks / (m_thread_pool->WorkersCount() + 1);\n+                workers_count = m_thread_pool->WorkersCount();\n+                if (work_chunk == 0) { // disable parallel sync if we are close to the tip\n+                    workers_count = 0;",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 70,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "727be9d500c081309042c256dc02166acb6d4774",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nitty nit: Keep the order of `workers_count` and `work_chunk` consistent?",
      "created_at": "2023-11-25T17:28:24Z",
      "updated_at": "2023-11-25T23:01:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1405180661",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405180661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405250581",
      "pull_request_review_id": 1749211886,
      "id": 1405250581,
      "node_id": "PRRC_kwDOABII585TwmwV",
      "diff_hunk": "@@ -205,9 +217,53 @@ void BaseIndex::ThreadSync()\n                            __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {\n+                int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\n+                int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+                int remaining_blocks = tip_height - pindex_next->nHeight;\n+                work_chunk = remaining_blocks > max_blocks_to_sync ? m_tasks_per_worker : remaining_blocks / (m_thread_pool->WorkersCount() + 1);\n+                workers_count = m_thread_pool->WorkersCount();\n+                if (work_chunk == 0) { // disable parallel sync if we are close to the tip\n+                    workers_count = 0;\n+                    work_chunk = 1;\n+                }\n+\n+                for (int i = 0; i < workers_count; i++) {\n+                    const CBlockIndex* it_end =  WITH_LOCK(::cs_main, return m_chainstate->m_chain[it_start->nHeight + work_chunk - 1]);\n+                    // Async process\n+                    futures.emplace_back(m_thread_pool->Submit(std::bind(&BaseIndex::ProcessBlocks, this, it_start, it_end)));\n+                    // Update iterator\n+                    it_start = WITH_LOCK(::cs_main, return NextSyncBlock(it_end, m_chainstate->m_chain));\n+                }\n+            }\n \n+            // If we have only one block to process, run it directly.\n+            // Otherwise, this is an active-wait, so we process blocks until all workers finish.",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 84,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "727be9d500c081309042c256dc02166acb6d4774",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would `so we also process blocks in this thread until all workers finish.` be more accurate?",
      "created_at": "2023-11-25T22:38:59Z",
      "updated_at": "2023-11-25T23:01:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1405250581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405250581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405253107",
      "pull_request_review_id": 1749211886,
      "id": 1405253107,
      "node_id": "PRRC_kwDOABII585TwnXz",
      "diff_hunk": "@@ -14,6 +14,7 @@\n #include <test/util/blockfilter.h>",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 8,
      "original_position": 1,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "de69506c090f530f34d78478db39898bd4e2cbba",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit de69506c090f530f34d78478db39898bd4e2cbba: I think the test introduction should be squashed into the following commit, or do you want to demonstrate something here first?",
      "created_at": "2023-11-25T22:52:11Z",
      "updated_at": "2023-11-25T23:01:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1405253107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405253107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405426732",
      "pull_request_review_id": 1749369732,
      "id": 1405426732,
      "node_id": "PRRC_kwDOABII585TxRws",
      "diff_hunk": "@@ -1966,7 +1970,20 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    std::shared_ptr<ThreadPool> thread_pool;\n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > 100) return InitError(_(\"Invalid -indexworkers arg\"));\n+\n+        thread_pool = std::make_shared<ThreadPool>();\n+        thread_pool->Start(index_workers);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "373b0bb077296624b7aeb5108673ae8f8b00b20d",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since the constructor and `Start` are always called in succession in this patch set, you could make `ThreadPool` more RAII styled if the `Start` method were removed and instead placed in the constructor. Could also make sense to do the same with the destructor and `Stop`.",
      "created_at": "2023-11-26T16:08:46Z",
      "updated_at": "2023-11-26T16:08:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1405426732",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1405426732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1535993177",
      "pull_request_review_id": 1955447962,
      "id": 1535993177,
      "node_id": "PRRC_kwDOABII585bjWVZ",
      "diff_hunk": "@@ -42,6 +42,9 @@ class BlockFilterIndex final : public BaseIndex\n     /** cache of block hash to filter header, to avoid disk access when responding to getcfcheckpt. */\n     std::unordered_map<uint256, uint256, FilterHeaderHasher> m_headers_cache GUARDED_BY(m_cs_headers_cache);\n \n+    // Last computed header to avoid disk reads at every new block.\n+    uint256 last_header{};",
      "path": "src/index/blockfilterindex.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "003f076a150c1237e4b9b212265d4665a32dcb5c",
      "in_reply_to_id": 1404328365,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "hmm sorry, I missed to add it on #28955.",
      "created_at": "2024-03-22T18:03:01Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1535993177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1535993177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1535993253",
      "pull_request_review_id": 1955447962,
      "id": 1535993253,
      "node_id": "PRRC_kwDOABII585bjWWl",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};\n+    // Worker threads\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread(const std::string& thread_name) EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        util::ThreadRename(std::string{thread_name});\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_stop.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_stop.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_stop.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }\n+    }\n+\n+public:\n+    ThreadPool() {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't being stopped.",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 58,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404459012,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done as suggested. Thanks.",
      "created_at": "2024-03-22T18:03:06Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1535993253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1535993253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1535993516",
      "pull_request_review_id": 1955447962,
      "id": 1535993516,
      "node_id": "PRRC_kwDOABII585bjWas",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404460151,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done as suggested. Thanks.",
      "created_at": "2024-03-22T18:03:21Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1535993516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1535993516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536011023",
      "pull_request_review_id": 1955447962,
      "id": 1536011023,
      "node_id": "PRRC_kwDOABII585bjasP",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+",
      "path": "src/util/threadpool.h",
      "position": 25,
      "original_position": 16,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404471253,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done as suggested. Thanks.",
      "created_at": "2024-03-22T18:19:25Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536011023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536011023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536011315",
      "pull_request_review_id": 1955447962,
      "id": 1536011315,
      "node_id": "PRRC_kwDOABII585bjawz",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404663869,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, it shouldn't be that hard, let me see.",
      "created_at": "2024-03-22T18:19:43Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536011315",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536011315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536019699",
      "pull_request_review_id": 1955447962,
      "id": 1536019699,
      "node_id": "PRRC_kwDOABII585bjczz",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};\n+    // Worker threads\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread(const std::string& thread_name) EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        util::ThreadRename(std::string{thread_name});\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_stop.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_stop.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_stop.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }\n+    }\n+\n+public:\n+    ThreadPool() {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't being stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+\n+        // Create the workers\n+        for (int i=0; i<num_workers; i++) {\n+            m_workers.emplace_back(&ThreadPool::WorkerThread, this, \"threadpool_worker_\" + ToString(i));\n+        }\n+    }\n+\n+    void Stop()\n+    {\n+        // Notify workers and join them.\n+        m_stop = true;\n+        m_condition.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        m_stop = false;\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        auto ptr_task = std::make_shared<std::packaged_task<decltype(task()) ()>>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(cs_work_queue);\n+            m_work_queue.emplace([=]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_condition.notify_one();\n+        return future;\n+    }\n+\n+    // Synchronous processing\n+    void ProcessTask() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 99,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404664671,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Why is this added?\r\n\r\nBecause I initially thought on pushing extra work into the thread pool queue so then the originator thread, once it finishes calculating the different tasks, can take the workload on its active wait. But I ended up implementing it differently to re-use the same piece of code for the single-thread approach (Can check it looking for where it says \"// Otherwise, this is an active-wait, so we process blocks until all workers finish.\")\r\nStill, I think that having a method to process tasks manually make sense for a general thread pool implementation. But could remove it if you are strong on it.",
      "created_at": "2024-03-22T18:27:51Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536019699",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536019699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536032270",
      "pull_request_review_id": 1955447962,
      "id": 1536032270,
      "node_id": "PRRC_kwDOABII585bjf4O",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};\n+    // Worker threads\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread(const std::string& thread_name) EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        util::ThreadRename(std::string{thread_name});\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_stop.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_stop.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_stop.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }",
      "path": "src/util/threadpool.h",
      "position": 84,
      "original_position": 50,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404871876,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't think it would be necessary for the tasks themselves, since you already demonstrate in the tests how to retrieve exceptions, but I think some kind of exception handling and infomation logging similar to the one of `util::TraceThread` would still be nice. Did you choose not to use `TraceThread` on purpose?\r\n\r\nI probably wasn't aware of `TraceThread` when this was implemented. Changing it.. Thanks!",
      "created_at": "2024-03-22T18:37:07Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536032270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536032270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536056252",
      "pull_request_review_id": 1955447962,
      "id": 1536056252,
      "node_id": "PRRC_kwDOABII585bjlu8",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_workers = 3;\n+        int num_tasks = 50;",
      "path": "src/test/threadpool_tests.cpp",
      "position": 76,
      "original_position": 24,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404873978,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Could use this test to stress test the pool a bit with more tasks?\r\n\r\nWhat about creating a fuzzing test instead? I'm not sure about the benefits of adding more tasks here. I can only foresee other developers complaining about the increased unit test times.",
      "created_at": "2024-03-22T18:55:02Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536056252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536056252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536620146",
      "pull_request_review_id": 1955447962,
      "id": 1536620146,
      "node_id": "PRRC_kwDOABII585blvZy",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_workers = 3;\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(num_workers);\n+        std::atomic<int> counter = 0;\n+        for (int i=0; i<num_tasks; i++) {",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404874302,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure. Thats the Gauss sum :).",
      "created_at": "2024-03-23T11:48:22Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536620146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536620146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536627797",
      "pull_request_review_id": 1955447962,
      "id": 1536627797,
      "node_id": "PRRC_kwDOABII585blxRV",
      "diff_hunk": "@@ -16,13 +16,17 @@ class CBlock;\n class CBlockIndex;\n class Chainstate;\n class ChainstateManager;\n+class ThreadPool;\n namespace interfaces {\n class Chain;\n } // namespace interfaces\n namespace Consensus {\n     struct Params;\n }\n \n+/** Number of concurrent jobs during the initial sync process */\n+const int16_t INDEX_WORKERS_COUNT = 0;",
      "path": "src/index/base.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "7b2d4d471ae251d4c22184dda26b73993a65eff8",
      "in_reply_to_id": 1405161198,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "sure",
      "created_at": "2024-03-23T12:45:00Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536627797",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536627797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536628918",
      "pull_request_review_id": 1955447962,
      "id": 1536628918,
      "node_id": "PRRC_kwDOABII585blxi2",
      "diff_hunk": "@@ -1966,7 +1970,21 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    std::shared_ptr<ThreadPool> thread_pool;\n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > 100) return InitError(_(\"Invalid -indexworkers arg\"));\n+\n+        thread_pool = std::make_shared<ThreadPool>();\n+        thread_pool->Start(index_workers);\n+    }\n+\n     // Start threads\n-    for (auto index : node.indexes) if (!index->StartBackgroundSync()) return false;\n+    for (auto index : node.indexes) {\n+        // todo: Only provide thread pool to indexes that supports parallel sync",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "7b2d4d471ae251d4c22184dda26b73993a65eff8",
      "in_reply_to_id": 1405168955,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit [7b2d4d4](https://github.com/bitcoin/bitcoin/commit/7b2d4d471ae251d4c22184dda26b73993a65eff8): Could the `AllowParallelSync` method be moved to this commit?\r\n\r\nSure.",
      "created_at": "2024-03-23T12:53:22Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536628918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536628918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1984,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536628999",
      "pull_request_review_id": 1955447962,
      "id": 1536628999,
      "node_id": "PRRC_kwDOABII585blxkH",
      "diff_hunk": "@@ -205,9 +217,53 @@ void BaseIndex::ThreadSync()\n                            __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {\n+                int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\n+                int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+                int remaining_blocks = tip_height - pindex_next->nHeight;",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "727be9d500c081309042c256dc02166acb6d4774",
      "in_reply_to_id": 1405180029,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done as suggested.",
      "created_at": "2024-03-23T12:54:01Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536628999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536628999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536629222",
      "pull_request_review_id": 1955447962,
      "id": 1536629222,
      "node_id": "PRRC_kwDOABII585blxnm",
      "diff_hunk": "@@ -205,9 +217,53 @@ void BaseIndex::ThreadSync()\n                            __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {\n+                int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\n+                int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+                int remaining_blocks = tip_height - pindex_next->nHeight;\n+                work_chunk = remaining_blocks > max_blocks_to_sync ? m_tasks_per_worker : remaining_blocks / (m_thread_pool->WorkersCount() + 1);\n+                workers_count = m_thread_pool->WorkersCount();\n+                if (work_chunk == 0) { // disable parallel sync if we are close to the tip\n+                    workers_count = 0;",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 70,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "727be9d500c081309042c256dc02166acb6d4774",
      "in_reply_to_id": 1405180661,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Nitty nit: Keep the order of `workers_count` and `work_chunk` consistent?\r\n\r\nWhat do you mean? Set `workers_count` first, then `work_chunk` always in the same order?",
      "created_at": "2024-03-23T12:55:44Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536629222",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536629222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536629364",
      "pull_request_review_id": 1955447962,
      "id": 1536629364,
      "node_id": "PRRC_kwDOABII585blxp0",
      "diff_hunk": "@@ -205,9 +217,53 @@ void BaseIndex::ThreadSync()\n                            __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {\n+                int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\n+                int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+                int remaining_blocks = tip_height - pindex_next->nHeight;\n+                work_chunk = remaining_blocks > max_blocks_to_sync ? m_tasks_per_worker : remaining_blocks / (m_thread_pool->WorkersCount() + 1);\n+                workers_count = m_thread_pool->WorkersCount();\n+                if (work_chunk == 0) { // disable parallel sync if we are close to the tip\n+                    workers_count = 0;\n+                    work_chunk = 1;\n+                }\n+\n+                for (int i = 0; i < workers_count; i++) {\n+                    const CBlockIndex* it_end =  WITH_LOCK(::cs_main, return m_chainstate->m_chain[it_start->nHeight + work_chunk - 1]);\n+                    // Async process\n+                    futures.emplace_back(m_thread_pool->Submit(std::bind(&BaseIndex::ProcessBlocks, this, it_start, it_end)));\n+                    // Update iterator\n+                    it_start = WITH_LOCK(::cs_main, return NextSyncBlock(it_end, m_chainstate->m_chain));\n+                }\n+            }\n \n+            // If we have only one block to process, run it directly.\n+            // Otherwise, this is an active-wait, so we process blocks until all workers finish.",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 84,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "727be9d500c081309042c256dc02166acb6d4774",
      "in_reply_to_id": 1405250581,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure. Done as suggested. Thanks.",
      "created_at": "2024-03-23T12:56:39Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536629364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536629364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536630106",
      "pull_request_review_id": 1955447962,
      "id": 1536630106,
      "node_id": "PRRC_kwDOABII585blx1a",
      "diff_hunk": "@@ -14,6 +14,7 @@\n #include <test/util/blockfilter.h>",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 8,
      "original_position": 1,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "de69506c090f530f34d78478db39898bd4e2cbba",
      "in_reply_to_id": 1405253107,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit [de69506](https://github.com/bitcoin/bitcoin/commit/de69506c090f530f34d78478db39898bd4e2cbba): I think the test introduction should be squashed into the following commit, or do you want to demonstrate something here first?\r\n\r\nhmm, will squash them. I don't remember why I split them (2 years ago).",
      "created_at": "2024-03-23T13:01:30Z",
      "updated_at": "2024-03-23T13:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1536630106",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1536630106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812965559",
      "pull_request_review_id": 1592642598,
      "id": 1812965559,
      "node_id": "PRRC_kwDOABII585sD6i3",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_interrupt || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 45,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we receive an interrupt, we don't also want to wait for the work queue to be empty right?",
      "created_at": "2024-10-23T14:54:39Z",
      "updated_at": "2024-10-23T15:02:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1812965559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812965559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812986201",
      "pull_request_review_id": 1592642598,
      "id": 1812986201,
      "node_id": "PRRC_kwDOABII585sD_lZ",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 39,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we modify this to be more generic and return a type? And add logic to collect all returned values into a shared vector which can then be atomically swapped out by an observer? Possibly not in this PR, but if this will be split out into a generic thread pool.",
      "created_at": "2024-10-23T15:02:40Z",
      "updated_at": "2024-10-23T15:02:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1812986201",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1812986201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817847707",
      "pull_request_review_id": 2397248915,
      "id": 1817847707,
      "node_id": "PRRC_kwDOABII585sWieb",
      "diff_hunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) 2023-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/threadnames.h>\n+\n+#include <condition_variable>\n+#include <future>\n+#include <queue>\n+#include <thread>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    // Stop indicator\n+    std::atomic<bool> m_stop{false};\n+    // Worker threads\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread(const std::string& thread_name) EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        util::ThreadRename(std::string{thread_name});\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_stop.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_stop.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_stop.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }\n+    }\n+\n+public:\n+    ThreadPool() {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't being stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+\n+        // Create the workers\n+        for (int i=0; i<num_workers; i++) {\n+            m_workers.emplace_back(&ThreadPool::WorkerThread, this, \"threadpool_worker_\" + ToString(i));\n+        }\n+    }\n+\n+    void Stop()\n+    {\n+        // Notify workers and join them.\n+        m_stop = true;\n+        m_condition.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        m_stop = false;\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        auto ptr_task = std::make_shared<std::packaged_task<decltype(task()) ()>>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(cs_work_queue);\n+            m_work_queue.emplace([=]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_condition.notify_one();\n+        return future;\n+    }\n+\n+    // Synchronous processing\n+    void ProcessTask() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 99,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404664671,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This would make sense if we wanted to reuse this for CCheckQueue. Then, we could just loop and `ProcessTask` on the main thread once when we call `Wait`.",
      "created_at": "2024-10-26T13:00:24Z",
      "updated_at": "2024-10-26T13:00:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1817847707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1817847707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818140297",
      "pull_request_review_id": 2397591697,
      "id": 1818140297,
      "node_id": "PRRC_kwDOABII585sXp6J",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_interrupt || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 45,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": 1812965559,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried this and it causes memory errors, since the remaining futures will have a dangling ref to `m_condition`.",
      "created_at": "2024-10-27T16:52:55Z",
      "updated_at": "2024-10-27T16:52:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1818140297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1818140297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846807424",
      "pull_request_review_id": 2442986452,
      "id": 1846807424,
      "node_id": "PRRC_kwDOABII585uFAuA",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_interrupt || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }\n+    }\n+\n+public:\n+    ThreadPool() {}",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 60,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "tidy doesn't like this\r\n```suggestion\r\n    ThreadPool() = default;\r\n```",
      "created_at": "2024-11-18T15:37:35Z",
      "updated_at": "2024-11-18T15:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1846807424",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846807424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1972522204",
      "pull_request_review_id": 2646111093,
      "id": 1972522204,
      "node_id": "PRRC_kwDOABII5851kkzc",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.",
      "path": "src/test/threadpool_tests.cpp",
      "position": 53,
      "original_position": 15,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "349b09983d994cb46faeed12b123ae2269c6c516",
      "in_reply_to_id": null,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // 2) Maintain all busy threads except one.\r\n```",
      "created_at": "2025-02-26T22:37:20Z",
      "updated_at": "2025-02-26T22:37:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1972522204",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1972522204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035856366",
      "pull_request_review_id": 2754283048,
      "id": 2035856366,
      "node_id": "PRRC_kwDOABII5855WLPu",
      "diff_hunk": "@@ -186,20 +220,7 @@ void BaseIndex::Sync()\n             pindex = pindex_next;\n \n \n-            CBlock block;\n-            interfaces::BlockInfo block_info = kernel::MakeBlockInfo(pindex);\n-            if (!m_chainstate->m_blockman.ReadBlock(block, *pindex)) {\n-                FatalErrorf(\"%s: Failed to read block %s from disk\",\n-                           __func__, pindex->GetBlockHash().ToString());\n-                return;\n-            } else {\n-                block_info.data = &block;\n-            }\n-            if (!CustomAppend(block_info)) {\n-                FatalErrorf(\"%s: Failed to write block %s to index database\",\n-                           __func__, pindex->GetBlockHash().ToString());\n-                return;\n-            }\n+            if (!ProcessBlock(pindex)) break; // error logged internally",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "c4723fb9857c624ac0e1e034dc6c29d7821f5b4a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"index: remove CBlockIndex access from node internals\" (c4723fb9857c624ac0e1e034dc6c29d7821f5b4a)\r\n\r\nIt seems like this should be returning, not breaking. Would be good to change or clarify with a comment",
      "created_at": "2025-04-09T17:52:51Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2035856366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035856366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035900118",
      "pull_request_review_id": 2754283048,
      "id": 2035900118,
      "node_id": "PRRC_kwDOABII5855WV7W",
      "diff_hunk": "@@ -311,17 +332,13 @@ void BaseIndex::BlockConnected(ChainstateRole role, const std::shared_ptr<const\n             return;\n         }\n     }\n-    interfaces::BlockInfo block_info = kernel::MakeBlockInfo(pindex, block.get());\n-    if (CustomAppend(block_info)) {\n+\n+    if (ProcessBlock(pindex)) {",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 77,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "c4723fb9857c624ac0e1e034dc6c29d7821f5b4a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"index: remove CBlockIndex access from node internals\" (c4723fb9857c624ac0e1e034dc6c29d7821f5b4a)\r\n\r\nCoud add another `// error logged internally` comment here since it now looks like this failure is being ignored.\r\n",
      "created_at": "2025-04-09T18:24:10Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2035900118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035900118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 336,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035903040",
      "pull_request_review_id": 2754283048,
      "id": 2035903040,
      "node_id": "PRRC_kwDOABII5855WWpA",
      "diff_hunk": "@@ -250,19 +250,8 @@ std::optional<uint256> BlockFilterIndex::ReadFilterHeader(int height, const uint\n \n bool BlockFilterIndex::CustomAppend(const interfaces::BlockInfo& block)\n {\n-    CBlockUndo block_undo;\n-\n-    if (block.height > 0) {\n-        // pindex variable gives indexing code access to node internals. It\n-        // will be removed in upcoming commit\n-        const CBlockIndex* pindex = WITH_LOCK(cs_main, return m_chainstate->m_blockman.LookupBlockIndex(block.hash));\n-        if (!m_chainstate->m_blockman.ReadBlockUndo(block_undo, *pindex)) {\n-            return false;\n-        }\n-    }\n-\n+    const CBlockUndo& block_undo = block.height > 0 ? *Assert(block.undo_data) : CBlockUndo();",
      "path": "src/index/blockfilterindex.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "c4723fb9857c624ac0e1e034dc6c29d7821f5b4a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"index: remove CBlockIndex access from node internals\" (c4723fb9857c624ac0e1e034dc6c29d7821f5b4a)\r\n\r\nI'm not sure this is safe. It looks like if block height is 0 this is taking a reference to a temporary object that will go out scope.\r\n\r\nIn any case I think this could be simplified to `const CBlockUndo& block_undo{*Assert(block.undo_data)}` because it looks like pointer will be set above even if height is 0.",
      "created_at": "2025-04-09T18:26:21Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2035903040",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035903040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036050607",
      "pull_request_review_id": 2754283048,
      "id": 2036050607,
      "node_id": "PRRC_kwDOABII5855W6qv",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 32,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "a382501d798c02a4dc042bc0641ce7b99c2db40f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: introduce general purpose thread pool\" (a382501d798c02a4dc042bc0641ce7b99c2db40f)\r\n\r\nI don't think it makes sense for `m_interrupt` to use the `CThreadInterrupt` class because the ThreadPool class already has it's own mutex and condition variable and it would be wasteful to introduce more. I think could just replace `CThreadInterrupt` with bool here, and replace `m_interrupt();` with `m_interrupt = true` and replace `m_interrupt.reset()` with `m_interrupt = false` while holding the mutex.",
      "created_at": "2025-04-09T19:52:39Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036050607",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036050607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036055308",
      "pull_request_review_id": 2754283048,
      "id": 2036055308,
      "node_id": "PRRC_kwDOABII5855W70M",
      "diff_hunk": "@@ -299,6 +299,7 @@ inline MutexType* MaybeCheckNotHeld(MutexType* m) LOCKS_EXCLUDED(m) LOCK_RETURNE\n //! The above is detectable at compile-time with the -Wreturn-local-addr flag in\n //! gcc and the -Wreturn-stack-address flag in clang, both enabled by default.\n #define WITH_LOCK(cs, code) (MaybeCheckNotHeld(cs), [&]() -> decltype(auto) { LOCK(cs); code; }())\n+#define WITH_REVERSE_LOCK(cs, code) ([&]() -> decltype(auto) { REVERSE_LOCK(cs); code; }())",
      "path": "src/sync.h",
      "position": 1,
      "original_position": 4,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "a382501d798c02a4dc042bc0641ce7b99c2db40f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: introduce general purpose thread pool\" (a382501d798c02a4dc042bc0641ce7b99c2db40f)\r\n\r\nThis seems ok, but it's is only used one place where `WITH_REVERSE_LOCK` is not much simpler than plain `REVERSE_LOCK`. Could consider dropping it.",
      "created_at": "2025-04-09T19:56:20Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036055308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036055308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036057917",
      "pull_request_review_id": 2754283048,
      "id": 2036057917,
      "node_id": "PRRC_kwDOABII5855W8c9",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_interrupt || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 45,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": 1812965559,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/26966#discussion_r1818140297\r\n\r\nIn commit \"util: introduce general purpose thread pool\" (a382501d798c02a4dc042bc0641ce7b99c2db40f)\r\n\r\n> I tried this and it causes memory errors, since the remaining futures will have a dangling ref to `m_condition`.\r\n\r\nTo be clear, you tried dropping the `m_work_queue.empty()` condition and that didn't work, so current code is correct? If so we could probably mark this thread resolved (if I am not misinterpreting).",
      "created_at": "2025-04-09T19:58:14Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036057917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036057917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036071200",
      "pull_request_review_id": 2754283048,
      "id": 2036071200,
      "node_id": "PRRC_kwDOABII5855W_sg",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 29,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "a382501d798c02a4dc042bc0641ce7b99c2db40f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: introduce general purpose thread pool\" (a382501d798c02a4dc042bc0641ce7b99c2db40f)\r\n\r\nNot important, but would suggest simplifying naming and just calling these members:\r\n\r\n```c++\r\nMutex m_mutex;\r\nstd::condition_variable m_cv;\r\n```\r\n\r\nThe `cs_` prefix is an older convention that comes from windows code, and there is as long as this class is going to have one mutex there isn't really a reason to use a more complicated name.",
      "created_at": "2025-04-09T20:08:34Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036071200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036071200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036091278",
      "pull_request_review_id": 2754283048,
      "id": 2036091278,
      "node_id": "PRRC_kwDOABII5855XEmO",
      "diff_hunk": "@@ -2104,7 +2108,20 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    std::shared_ptr<ThreadPool> thread_pool;",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "d9e4adb147ef71b7afa4234b94d077bce99416e4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"index: implement index parallel sync\" (bc0e5211e8a914e80e68e9c700b846a4cc3ef95b)\r\n\r\nThis doesn't seem like a great use of shared_ptr because makes the shutdown sequence more complicated than it needs to be. I think it would be clearer if instead of taking `std::shared_ptr<ThreadPool>` references they just used `ThreadPool&` and a new `std::unique_ptr<ThreadPool> m_index_threads` member was added to `NodeContext`. This way the threads could be stopped with an explicit `reset()` call instead of shutting down more unpredictably when the last index is destroyed.",
      "created_at": "2025-04-09T20:23:31Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036091278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036091278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036131025",
      "pull_request_review_id": 2754283048,
      "id": 2036131025,
      "node_id": "PRRC_kwDOABII5855XOTR",
      "diff_hunk": "@@ -217,11 +228,53 @@ void BaseIndex::Sync()\n                 FatalErrorf(\"%s: Failed to rewind index %s to a previous chain tip\", __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {\n+                const int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\n+                const int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+                const int remaining_blocks = tip_height - pindex_next->nHeight;\n+                work_chunk = remaining_blocks > max_blocks_to_sync ? m_tasks_per_worker : remaining_blocks / (m_thread_pool->WorkersCount() + 1);",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 68,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "bc0e5211e8a914e80e68e9c700b846a4cc3ef95b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"index: implement index parallel sync\" (bc0e5211e8a914e80e68e9c700b846a4cc3ef95b)\r\n\r\nI found this hard to follow:\r\n\r\n```\r\nconst int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\r\nwork_chunk = remaining_blocks > max_blocks_to_sync ? m_tasks_per_worker : remaining_blocks / (m_thread_pool->WorkersCount() + 1);\r\nworkers_count = m_thread_pool->WorkersCount();\r\n```\r\n\r\nwould suggest dropping the `max_blocks_to_sync` variable and simplifying to:\r\n\r\n```c++\r\nworkers_count = m_thread_pool->WorkersCount();\r\nwork_chunk = std::min(m_tasks_per_worker, remaining_blocks / (workers_count + 1));\r\n```\r\n",
      "created_at": "2025-04-09T20:56:12Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036131025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036131025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036133823",
      "pull_request_review_id": 2754283048,
      "id": 2036133823,
      "node_id": "PRRC_kwDOABII5855XO-_",
      "diff_hunk": "@@ -88,6 +91,7 @@ class BaseIndex : public CValidationInterface\n     CThreadInterrupt m_interrupt;\n \n     std::shared_ptr<ThreadPool> m_thread_pool;\n+    uint16_t m_tasks_per_worker{INDEX_WORK_PER_CHUNK};",
      "path": "src/index/base.h",
      "position": 1,
      "original_position": 21,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "bc0e5211e8a914e80e68e9c700b846a4cc3ef95b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"index: implement index parallel sync\" (bc0e5211e8a914e80e68e9c700b846a4cc3ef95b)\r\n\r\nIMO, this would be clearer if it were called blocks_per_worker or blocks_per_chunk instead of tasks_per_worker. Not knowing that a task is a block made the code harder to understand when initially reading it.",
      "created_at": "2025-04-09T20:58:36Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036133823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036133823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036163105",
      "pull_request_review_id": 2754283048,
      "id": 2036163105,
      "node_id": "PRRC_kwDOABII5855XWIh",
      "diff_hunk": "@@ -217,11 +228,53 @@ void BaseIndex::Sync()\n                 FatalErrorf(\"%s: Failed to rewind index %s to a previous chain tip\", __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 64,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "bc0e5211e8a914e80e68e9c700b846a4cc3ef95b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"index: implement index parallel sync\" (bc0e5211e8a914e80e68e9c700b846a4cc3ef95b)\r\n\r\nWould be really helpful to have a comment saying how this works at a high level. Would suggest something like \"If parallel sync is enabled, use `WorkersCount()+1` threads (including the current thread) to each process block ranges of up to `m_tasks_per_worker` blocks. The blocks in each range are processed in sequence by calling the index's `CustomProcessBlock` method which returns `std::any` values that are collected into vectors. As the threads finish their work, the `std::any` values are processed in order by calling the index's `CustomPostProcessBlocks` method, and the process repeats until no blocks are remaining to be processed and post-processed.\"\r\n\r\nI guess at a high level this seems reasonable, but perhaps too rigid. Like if there are 3 threads processing block ranges 1-10, 11-20, 21-30, and the first 2 threads finish while the third thread is slow. Why should the loop need to wait for the third thread before beginning to process blocks 31-50 and there are two idle threads doing nothing?\r\n\r\nIt seems like this idleness could be avoided by moving the `CustomPostProcessBlocks` calls into the worker threads. So that whenever each worker thread finishes processing blocks, it then opportunistically calls `CustomPostProcessBlocks` to post-process any blocks that are available (given the ordering constraint for post-processing). This way all the worker threads would continuously have work to do, and I suspect the resulting code might be simpler too since there would just be a single phase of work, not alternating Processing/PostProcessing phases.",
      "created_at": "2025-04-09T21:24:01Z",
      "updated_at": "2025-04-09T21:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036163105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036163105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036207269",
      "pull_request_review_id": 2754912046,
      "id": 2036207269,
      "node_id": "PRRC_kwDOABII5855Xg6l",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_interrupt || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 45,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": 1812965559,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Err, I still think we would want to abandon the work queue if we are interrupted instead of waiting for it to finish, no? My naive approach of not waiting for the queue to be empty does not work though.",
      "created_at": "2025-04-09T22:12:33Z",
      "updated_at": "2025-04-09T22:13:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2036207269",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036207269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129539102",
      "pull_request_review_id": 2901371695,
      "id": 2129539102,
      "node_id": "PRRC_kwDOABII585-7jAe",
      "diff_hunk": "@@ -186,20 +220,7 @@ void BaseIndex::Sync()\n             pindex = pindex_next;\n \n \n-            CBlock block;\n-            interfaces::BlockInfo block_info = kernel::MakeBlockInfo(pindex);\n-            if (!m_chainstate->m_blockman.ReadBlock(block, *pindex)) {\n-                FatalErrorf(\"%s: Failed to read block %s from disk\",\n-                           __func__, pindex->GetBlockHash().ToString());\n-                return;\n-            } else {\n-                block_info.data = &block;\n-            }\n-            if (!CustomAppend(block_info)) {\n-                FatalErrorf(\"%s: Failed to write block %s to index database\",\n-                           __func__, pindex->GetBlockHash().ToString());\n-                return;\n-            }\n+            if (!ProcessBlock(pindex)) break; // error logged internally",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "c4723fb9857c624ac0e1e034dc6c29d7821f5b4a",
      "in_reply_to_id": 2035856366,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"index: remove CBlockIndex access from node internals\" ([c4723fb](https://github.com/bitcoin/bitcoin/commit/c4723fb9857c624ac0e1e034dc6c29d7821f5b4a))\r\n> \r\n> It seems like this should be returning, not breaking. Would be good to change or clarify with a comment\r\n\r\n\r\nyeah, good catch!.\r\nI think at the end it doesn't matter much because `ProcessBlock` aborts the node during a failure but still, this would have logged an extra line \"index enabled at height <height>\" during shutdown.",
      "created_at": "2025-06-05T17:41:04Z",
      "updated_at": "2025-06-05T20:05:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2129539102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129539102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129576690",
      "pull_request_review_id": 2901371695,
      "id": 2129576690,
      "node_id": "PRRC_kwDOABII585-7sLy",
      "diff_hunk": "@@ -311,17 +332,13 @@ void BaseIndex::BlockConnected(ChainstateRole role, const std::shared_ptr<const\n             return;\n         }\n     }\n-    interfaces::BlockInfo block_info = kernel::MakeBlockInfo(pindex, block.get());\n-    if (CustomAppend(block_info)) {\n+\n+    if (ProcessBlock(pindex)) {",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 77,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "c4723fb9857c624ac0e1e034dc6c29d7821f5b4a",
      "in_reply_to_id": 2035900118,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"index: remove CBlockIndex access from node internals\" ([c4723fb](https://github.com/bitcoin/bitcoin/commit/c4723fb9857c624ac0e1e034dc6c29d7821f5b4a))\r\n> \r\n> Coud add another `// error logged internally` comment here since it now looks like this failure is being ignored.\r\n\r\n\r\nDone as suggested.",
      "created_at": "2025-06-05T17:48:00Z",
      "updated_at": "2025-06-05T20:06:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2129576690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129576690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 336,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129584923",
      "pull_request_review_id": 2901371695,
      "id": 2129584923,
      "node_id": "PRRC_kwDOABII585-7uMb",
      "diff_hunk": "@@ -250,19 +250,8 @@ std::optional<uint256> BlockFilterIndex::ReadFilterHeader(int height, const uint\n \n bool BlockFilterIndex::CustomAppend(const interfaces::BlockInfo& block)\n {\n-    CBlockUndo block_undo;\n-\n-    if (block.height > 0) {\n-        // pindex variable gives indexing code access to node internals. It\n-        // will be removed in upcoming commit\n-        const CBlockIndex* pindex = WITH_LOCK(cs_main, return m_chainstate->m_blockman.LookupBlockIndex(block.hash));\n-        if (!m_chainstate->m_blockman.ReadBlockUndo(block_undo, *pindex)) {\n-            return false;\n-        }\n-    }\n-\n+    const CBlockUndo& block_undo = block.height > 0 ? *Assert(block.undo_data) : CBlockUndo();",
      "path": "src/index/blockfilterindex.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "c4723fb9857c624ac0e1e034dc6c29d7821f5b4a",
      "in_reply_to_id": 2035903040,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"index: remove CBlockIndex access from node internals\" ([c4723fb](https://github.com/bitcoin/bitcoin/commit/c4723fb9857c624ac0e1e034dc6c29d7821f5b4a))\r\n> \r\n> I'm not sure this is safe. It looks like if block height is 0 this is taking a reference to a temporary object that will go out scope.\r\n> \r\n> In any case I think this could be simplified to `const CBlockUndo& block_undo{*Assert(block.undo_data)}` because it looks like pointer will be set above even if height is 0.\r\n\r\n\r\nyeah, great. Done as suggested.",
      "created_at": "2025-06-05T17:49:43Z",
      "updated_at": "2025-06-05T20:06:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2129584923",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129584923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129691798",
      "pull_request_review_id": 2901371695,
      "id": 2129691798,
      "node_id": "PRRC_kwDOABII585-8ISW",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 32,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "a382501d798c02a4dc042bc0641ce7b99c2db40f",
      "in_reply_to_id": 2036050607,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"util: introduce general purpose thread pool\" ([a382501](https://github.com/bitcoin/bitcoin/commit/a382501d798c02a4dc042bc0641ce7b99c2db40f))\r\n> \r\n> I don't think it makes sense for `m_interrupt` to use the `CThreadInterrupt` class because the ThreadPool class already has it's own mutex and condition variable and it would be wasteful to introduce more. I think could just replace `CThreadInterrupt` with bool here, and replace `m_interrupt();` with `m_interrupt = true` and replace `m_interrupt.reset()` with `m_interrupt = false` while holding the mutex.\r\n\r\n\r\n\r\nsure, done as suggested. Thanks!",
      "created_at": "2025-06-05T18:16:02Z",
      "updated_at": "2025-06-05T20:06:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2129691798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129691798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129720967",
      "pull_request_review_id": 2901371695,
      "id": 2129720967,
      "node_id": "PRRC_kwDOABII585-8PaH",
      "diff_hunk": "@@ -299,6 +299,7 @@ inline MutexType* MaybeCheckNotHeld(MutexType* m) LOCKS_EXCLUDED(m) LOCK_RETURNE\n //! The above is detectable at compile-time with the -Wreturn-local-addr flag in\n //! gcc and the -Wreturn-stack-address flag in clang, both enabled by default.\n #define WITH_LOCK(cs, code) (MaybeCheckNotHeld(cs), [&]() -> decltype(auto) { LOCK(cs); code; }())\n+#define WITH_REVERSE_LOCK(cs, code) ([&]() -> decltype(auto) { REVERSE_LOCK(cs); code; }())",
      "path": "src/sync.h",
      "position": 1,
      "original_position": 4,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "a382501d798c02a4dc042bc0641ce7b99c2db40f",
      "in_reply_to_id": 2036055308,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"util: introduce general purpose thread pool\" ([a382501](https://github.com/bitcoin/bitcoin/commit/a382501d798c02a4dc042bc0641ce7b99c2db40f))\r\n> \r\n> This seems ok, but it's is only used one place where `WITH_REVERSE_LOCK` is not much simpler than plain `REVERSE_LOCK`. Could consider dropping it.\r\n\r\n\r\n\r\nSure. I think I did it this way to be very explicit about the code that will be executed without the lock, but yeah, we could achieve the same outcome with another set of brackets too.",
      "created_at": "2025-06-05T18:22:01Z",
      "updated_at": "2025-06-05T20:06:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2129720967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129720967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129726620",
      "pull_request_review_id": 2901371695,
      "id": 2129726620,
      "node_id": "PRRC_kwDOABII585-8Qyc",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 29,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "a382501d798c02a4dc042bc0641ce7b99c2db40f",
      "in_reply_to_id": 2036071200,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"util: introduce general purpose thread pool\" ([a382501](https://github.com/bitcoin/bitcoin/commit/a382501d798c02a4dc042bc0641ce7b99c2db40f))\r\n> \r\n> Not important, but would suggest simplifying naming and just calling these members:\r\n> \r\n> ```c++\r\n> Mutex m_mutex;\r\n> std::condition_variable m_cv;\r\n> ```\r\n> \r\n> The `cs_` prefix is an older convention that comes from windows code, and there is as long as this class is going to have one mutex there isn't really a reason to use a more complicated name.\r\n\r\n\r\n\r\nk sure. Done as suggested.",
      "created_at": "2025-06-05T18:23:19Z",
      "updated_at": "2025-06-05T20:07:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2129726620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129726620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129902851",
      "pull_request_review_id": 2901371695,
      "id": 2129902851,
      "node_id": "PRRC_kwDOABII585-870D",
      "diff_hunk": "@@ -2104,7 +2108,20 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    std::shared_ptr<ThreadPool> thread_pool;",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "d9e4adb147ef71b7afa4234b94d077bce99416e4",
      "in_reply_to_id": 2036091278,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"index: implement index parallel sync\" ([bc0e521](https://github.com/bitcoin/bitcoin/commit/bc0e5211e8a914e80e68e9c700b846a4cc3ef95b))\r\n> \r\n> This doesn't seem like a great use of shared_ptr because makes the shutdown sequence more complicated than it needs to be. I think it would be clearer if instead of taking `std::shared_ptr<ThreadPool>` references they just used `ThreadPool&` and a new `std::unique_ptr<ThreadPool> m_index_threads` member was added to `NodeContext`. This way the threads could be stopped with an explicit `reset()` call instead of shutting down more unpredictably when the last index is destroyed.\r\n\r\n\r\nSounds good. Done as suggested. Thanks!",
      "created_at": "2025-06-05T19:05:59Z",
      "updated_at": "2025-06-05T20:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2129902851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129902851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130095726",
      "pull_request_review_id": 2901371695,
      "id": 2130095726,
      "node_id": "PRRC_kwDOABII585-9q5u",
      "diff_hunk": "@@ -217,11 +228,53 @@ void BaseIndex::Sync()\n                 FatalErrorf(\"%s: Failed to rewind index %s to a previous chain tip\", __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {\n+                const int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\n+                const int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+                const int remaining_blocks = tip_height - pindex_next->nHeight;\n+                work_chunk = remaining_blocks > max_blocks_to_sync ? m_tasks_per_worker : remaining_blocks / (m_thread_pool->WorkersCount() + 1);",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 68,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "bc0e5211e8a914e80e68e9c700b846a4cc3ef95b",
      "in_reply_to_id": 2036131025,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"index: implement index parallel sync\" ([bc0e521](https://github.com/bitcoin/bitcoin/commit/bc0e5211e8a914e80e68e9c700b846a4cc3ef95b))\r\n> \r\n> I found this hard to follow:\r\n> \r\n> ```\r\n> const int max_blocks_to_sync = m_tasks_per_worker * m_thread_pool->WorkersCount() + m_tasks_per_worker; // extra 'm_tasks_per_worker' due the active-wait.\r\n> work_chunk = remaining_blocks > max_blocks_to_sync ? m_tasks_per_worker : remaining_blocks / (m_thread_pool->WorkersCount() + 1);\r\n> workers_count = m_thread_pool->WorkersCount();\r\n> ```\r\n> \r\n> would suggest dropping the `max_blocks_to_sync` variable and simplifying to:\r\n> \r\n> ```c++\r\n> workers_count = m_thread_pool->WorkersCount();\r\n> work_chunk = std::min(m_tasks_per_worker, remaining_blocks / (workers_count + 1));\r\n> ```\r\n\r\n\r\n\r\nGood idea. Done as suggested.",
      "created_at": "2025-06-05T19:51:15Z",
      "updated_at": "2025-06-05T20:07:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2130095726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130095726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130122965",
      "pull_request_review_id": 2901371695,
      "id": 2130122965,
      "node_id": "PRRC_kwDOABII585-9xjV",
      "diff_hunk": "@@ -88,6 +91,7 @@ class BaseIndex : public CValidationInterface\n     CThreadInterrupt m_interrupt;\n \n     std::shared_ptr<ThreadPool> m_thread_pool;\n+    uint16_t m_tasks_per_worker{INDEX_WORK_PER_CHUNK};",
      "path": "src/index/base.h",
      "position": 1,
      "original_position": 21,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "bc0e5211e8a914e80e68e9c700b846a4cc3ef95b",
      "in_reply_to_id": 2036133823,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In commit \"index: implement index parallel sync\" ([bc0e521](https://github.com/bitcoin/bitcoin/commit/bc0e5211e8a914e80e68e9c700b846a4cc3ef95b))\r\n> \r\n> IMO, this would be clearer if it were called blocks_per_worker or blocks_per_chunk instead of tasks_per_worker. Not knowing that a task is a block made the code harder to understand when initially reading it.\r\n\r\n\r\n\r\nsure. Done as suggested.",
      "created_at": "2025-06-05T19:59:18Z",
      "updated_at": "2025-06-05T20:08:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2130122965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130122965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2144624538",
      "pull_request_review_id": 2924075732,
      "id": 2144624538,
      "node_id": "PRRC_kwDOABII585_1F-a",
      "diff_hunk": "@@ -282,6 +282,23 @@ bool BlockFilterIndex::Write(const BlockFilter& filter, uint32_t block_height, c\n     return true;\n }\n \n+std::any BlockFilterIndex::CustomProcessBlock(const interfaces::BlockInfo& block_info)\n+{\n+    return std::make_pair(BlockFilter(BlockFilterType::BASIC, *block_info.data, *block_info.undo_data), block_info.height);\n+}\n+\n+bool BlockFilterIndex::CustomPostProcessBlocks(const std::any& obj)\n+{\n+    const auto& [filter, height] = std::any_cast<std::pair<BlockFilter, int>>(obj);\n+    const uint256& header = filter.ComputeHeader(m_last_header);\n+    if (!Write(filter, height, header)) {\n+        LogError(\"Error writings filters, shutting down block filters index\\n\");",
      "path": "src/index/blockfilterindex.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "53bc8b9663fd51fa43eb568aee8a38936cc7c6e8",
      "in_reply_to_id": null,
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n    writings -> writing [incorrect verb form in \"Error writings filters\"]\r\n",
      "created_at": "2025-06-13T09:38:15Z",
      "updated_at": "2025-06-13T09:38:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2144624538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2144624538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 295,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162030647",
      "pull_request_review_id": 2950751583,
      "id": 2162030647,
      "node_id": "PRRC_kwDOABII586A3fg3",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_interrupt || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            // Execute the task without the lock\n+            WITH_REVERSE_LOCK(wait_lock, task());\n+        }\n+    }\n+\n+public:\n+    ThreadPool() {}",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 60,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": 1846807424,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done as suggested",
      "created_at": "2025-06-23T16:36:05Z",
      "updated_at": "2025-06-23T16:36:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2162030647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162030647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162360516",
      "pull_request_review_id": 2951262244,
      "id": 2162360516,
      "node_id": "PRRC_kwDOABII586A4wDE",
      "diff_hunk": "@@ -217,11 +228,53 @@ void BaseIndex::Sync()\n                 FatalErrorf(\"%s: Failed to rewind index %s to a previous chain tip\", __func__, GetName());\n                 return;\n             }\n-            pindex = pindex_next;\n \n+            // By default, parallel sync disabled\n+            int work_chunk = 1;\n+            int workers_count = 0;\n+            std::vector<std::future<std::vector<std::any>>> futures;\n+            const CBlockIndex* it_start = pindex_next;\n+\n+            if (parallel_sync_enabled) {",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 64,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "bc0e5211e8a914e80e68e9c700b846a4cc3ef95b",
      "in_reply_to_id": 2036163105,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Would be really helpful to have a comment saying how this works at a high level. Would suggest something like \"If parallel sync is enabled, use WorkersCount()+1 threads (including the current thread) to each process block ranges of up to m_tasks_per_worker blocks. The blocks in each range are processed in sequence by calling the index's CustomProcessBlock method which returns std::any values that are collected into vectors. As the threads finish their work, the std::any values are processed in order by calling the index's CustomPostProcessBlocks method, and the process repeats until no blocks are remaining to be processed and post-processed.\"\r\n\r\nSure done!\r\n\r\n> guess at a high level this seems reasonable, but perhaps too rigid. Like if there are 3 threads processing block ranges 1-10, 11-20, 21-30, and the first 2 threads finish while the third thread is slow. Why should the loop need to wait for the third thread before beginning to process blocks 31-50 and there are two idle threads doing nothing?\r\n>\r\n> It seems like this idleness could be avoided by moving the CustomPostProcessBlocks calls into the worker threads. So that whenever each worker thread finishes processing blocks, it then opportunistically calls CustomPostProcessBlocks to post-process any blocks that are available (given the ordering constraint for post-processing). This way all the worker threads would continuously have work to do, and I suspect the resulting code might be simpler too since there would just be a single phase of work, not alternating Processing/PostProcessing phases.\r\n\r\nSpent a few days implementing this suggestion. It started out small but turned into a larger change than I initially expected. That said, I liked the direction and felt it was worth the extra effort. The process runs faster now.\r\nLet me know what you think.\r\n\r\nDesign-wise, I kept everything within the `Sync` method, but could also encapsulate it into a separate class if preferred.",
      "created_at": "2025-06-23T19:10:31Z",
      "updated_at": "2025-06-23T19:15:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2162360516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162360516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2166085260",
      "pull_request_review_id": 2957109420,
      "id": 2166085260,
      "node_id": "PRRC_kwDOABII586BG9aM",
      "diff_hunk": "@@ -173,83 +175,270 @@ bool BaseIndex::ProcessBlock(const CBlockIndex* pindex, const CBlock* block_data\n         block_info.undo_data = &block_undo;\n     }\n \n-    if (!CustomAppend(block_info)) {\n-        FatalErrorf(\"%s: Failed to write block %s to index database\",\n-                    __func__, pindex->GetBlockHash().ToString());\n-        return false;\n+    const auto& any_obj = CustomProcessBlock(block_info);\n+    if (!any_obj.has_value()) {\n+        throw std::runtime_error(strprintf(\"%s: Failed to process block %s for index %s\", __func__, pindex->GetBlockHash().GetHex(), GetName()));\n     }\n+    return any_obj;\n+}\n \n-    return true;\n+std::vector<std::any> BaseIndex::ProcessBlocks(bool process_in_order, const CBlockIndex* start, const CBlockIndex* end)\n+{\n+    std::vector<std::any> results;\n+    if (process_in_order) {\n+        // When ordering is required, collect all block indexes from [end..start] in order\n+        std::vector<const CBlockIndex*> ordered_blocks;\n+        for (const CBlockIndex* block = end; block && start->pprev != block; block = block->pprev) {\n+            ordered_blocks.emplace_back(block);\n+        }\n+\n+        // And process blocks in forward order: from start to end\n+        for (auto it = ordered_blocks.rbegin(); it != ordered_blocks.rend(); ++it) {\n+            results.emplace_back(ProcessBlock(*it));\n+        }\n+        return results;\n+    }\n+\n+    // If ordering is not required, process blocks directly from end to start\n+    for (const CBlockIndex* block = end; block && start->pprev != block; block = block->pprev) {\n+        results.emplace_back(ProcessBlock(block));\n+    }\n+\n+    return results;\n }\n \n+struct Task {\n+    int id;\n+    const CBlockIndex* start_index;\n+    const CBlockIndex* end_index;\n+    std::vector<std::any> result;\n+\n+    Task(int task_id, const CBlockIndex* start, const CBlockIndex* end)\n+            : id(task_id), start_index(start), end_index(end) {}\n+\n+    // Disallow copy\n+    Task(const Task&) = delete;\n+    Task& operator=(const Task&) = delete;\n+    Task(Task&&) noexcept = default;\n+};\n+\n+// Context shared across the initial sync workers\n+struct SyncContext {\n+    Mutex mutex_pending_tasks;\n+    std::queue<Task> pending_tasks GUARDED_BY(mutex_pending_tasks);\n+\n+    Mutex mutex_processed_tasks;\n+    std::map<int, Task> processed_tasks GUARDED_BY(mutex_processed_tasks);\n+\n+    std::atomic<int> next_id_to_process{0};\n+};\n+\n+// Synchronizes the index with the active chain.\n+//\n+// If parallel sync is enabled, this method uses WorkersCount()+1 threads (including the current thread)\n+// to process block ranges concurrently. Each worker handles up to 'm_blocks_per_worker' blocks each time\n+// (this is called a \"task\"), which are processed via CustomProcessBlock calls. Results are stored in the\n+// SyncContext's 'processed_tasks' map so they can be sequentially post-processed later.\n+//\n+// After completing a task, workers opportunistically post-process completed tasks *in order* using\n+// CustomPostProcessBlocks. This continues until all blocks have been fully processed and committed.\n+//\n+// Reorgs are detected and handled before syncing begins, ensuring the index starts aligned with the active chain.\n void BaseIndex::Sync()\n {\n+    if (m_synced) return; // we are sync, nothing to do",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 105,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "a3e7d97b89821239bbba3e2c434a9a6405911865",
      "in_reply_to_id": null,
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n    “// we are sync, nothing to do” → “// we are synced, nothing to do” [‘sync’ is incorrect here; use past participle ‘synced’]\r\n    “// Log progress every often” → “// Log progress every so often” [missing ‘so’ in the idiom]\r\n    “// Commit changes every often” → “// Commit changes every so often” [same idiomatic error]\r\n",
      "created_at": "2025-06-25T08:11:34Z",
      "updated_at": "2025-06-25T08:11:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2166085260",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2166085260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2166835523",
      "pull_request_review_id": 2958359444,
      "id": 2166835523,
      "node_id": "PRRC_kwDOABII586BJ0lD",
      "diff_hunk": "@@ -173,83 +175,270 @@ bool BaseIndex::ProcessBlock(const CBlockIndex* pindex, const CBlock* block_data\n         block_info.undo_data = &block_undo;\n     }\n \n-    if (!CustomAppend(block_info)) {\n-        FatalErrorf(\"%s: Failed to write block %s to index database\",\n-                    __func__, pindex->GetBlockHash().ToString());\n-        return false;\n+    const auto& any_obj = CustomProcessBlock(block_info);\n+    if (!any_obj.has_value()) {\n+        throw std::runtime_error(strprintf(\"%s: Failed to process block %s for index %s\", __func__, pindex->GetBlockHash().GetHex(), GetName()));\n     }\n+    return any_obj;\n+}\n \n-    return true;\n+std::vector<std::any> BaseIndex::ProcessBlocks(bool process_in_order, const CBlockIndex* start, const CBlockIndex* end)\n+{\n+    std::vector<std::any> results;\n+    if (process_in_order) {\n+        // When ordering is required, collect all block indexes from [end..start] in order\n+        std::vector<const CBlockIndex*> ordered_blocks;\n+        for (const CBlockIndex* block = end; block && start->pprev != block; block = block->pprev) {\n+            ordered_blocks.emplace_back(block);\n+        }\n+\n+        // And process blocks in forward order: from start to end\n+        for (auto it = ordered_blocks.rbegin(); it != ordered_blocks.rend(); ++it) {\n+            results.emplace_back(ProcessBlock(*it));\n+        }\n+        return results;\n+    }\n+\n+    // If ordering is not required, process blocks directly from end to start\n+    for (const CBlockIndex* block = end; block && start->pprev != block; block = block->pprev) {\n+        results.emplace_back(ProcessBlock(block));\n+    }\n+\n+    return results;\n }\n \n+struct Task {\n+    int id;\n+    const CBlockIndex* start_index;\n+    const CBlockIndex* end_index;\n+    std::vector<std::any> result;\n+\n+    Task(int task_id, const CBlockIndex* start, const CBlockIndex* end)\n+            : id(task_id), start_index(start), end_index(end) {}\n+\n+    // Disallow copy\n+    Task(const Task&) = delete;\n+    Task& operator=(const Task&) = delete;\n+    Task(Task&&) noexcept = default;\n+};\n+\n+// Context shared across the initial sync workers\n+struct SyncContext {\n+    Mutex mutex_pending_tasks;\n+    std::queue<Task> pending_tasks GUARDED_BY(mutex_pending_tasks);\n+\n+    Mutex mutex_processed_tasks;\n+    std::map<int, Task> processed_tasks GUARDED_BY(mutex_processed_tasks);\n+\n+    std::atomic<int> next_id_to_process{0};\n+};\n+\n+// Synchronizes the index with the active chain.\n+//\n+// If parallel sync is enabled, this method uses WorkersCount()+1 threads (including the current thread)\n+// to process block ranges concurrently. Each worker handles up to 'm_blocks_per_worker' blocks each time\n+// (this is called a \"task\"), which are processed via CustomProcessBlock calls. Results are stored in the\n+// SyncContext's 'processed_tasks' map so they can be sequentially post-processed later.\n+//\n+// After completing a task, workers opportunistically post-process completed tasks *in order* using\n+// CustomPostProcessBlocks. This continues until all blocks have been fully processed and committed.\n+//\n+// Reorgs are detected and handled before syncing begins, ensuring the index starts aligned with the active chain.\n void BaseIndex::Sync()\n {\n+    if (m_synced) return; // we are sync, nothing to do",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 105,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "a3e7d97b89821239bbba3e2c434a9a6405911865",
      "in_reply_to_id": 2166085260,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. Please stop bullying my poor English :p",
      "created_at": "2025-06-25T14:14:58Z",
      "updated_at": "2025-06-25T14:20:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2166835523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2166835523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172705028",
      "pull_request_review_id": 2967674914,
      "id": 2172705028,
      "node_id": "PRRC_kwDOABII586BgNkE",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_condition.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(cs_work_queue) { return m_interrupt || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 45,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": 1812965559,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, sorry for the very very late response @andrewtoth. I missed this message completely.\r\n\r\n> I still think we would want to abandon the work queue if we are interrupted instead of waiting for it to finish, no? My naive approach of not waiting for the queue to be empty does not work though.\r\n\r\nYeah, I don’t think that’s safe. Other threads might be waiting on the tasks' futures to complete, so exiting without notifying them would leave them blocked forever.\r\nWhat we could do (and I think you mentioned this elsewhere) is keep track of all the tasks' promises internally and fail them with an interruption error/exception if the thread pool gets interrupted. In this way we also avoid lingering objects.",
      "created_at": "2025-06-27T19:14:13Z",
      "updated_at": "2025-06-27T19:15:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2172705028",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172705028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172711323",
      "pull_request_review_id": 2967687369,
      "id": 2172711323,
      "node_id": "PRRC_kwDOABII586BgPGb",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex cs_work_queue;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(cs_work_queue);\n+    std::condition_variable m_condition;\n+    CThreadInterrupt m_interrupt;\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!cs_work_queue)\n+    {\n+        WAIT_LOCK(cs_work_queue, wait_lock);\n+        while (!m_interrupt) {\n+            std::function<void()> task;",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 39,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "original_commit_id": "81dcee9464fc0f2b4a4fe547f312b71b405010b2",
      "in_reply_to_id": 1812986201,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Can we modify this to be more generic and return a type? And add logic to collect all returned values into a shared vector which can then be atomically swapped out by an observer? Possibly not in this PR, but if this will be split out into a generic thread pool.\r\n\r\nWe could keep track of the task futures' promises, if that's what you're referring to. In other words, this void() function is just a wrapper that executes a generic function which sets the result inside the caller’s future.",
      "created_at": "2025-06-27T19:19:30Z",
      "updated_at": "2025-06-27T19:19:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2172711323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172711323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2184661489",
      "pull_request_review_id": 2985983304,
      "id": 2184661489,
      "node_id": "PRRC_kwDOABII586CN0nx",
      "diff_hunk": "@@ -130,6 +141,26 @@ class BaseIndex : public CValidationInterface\n     /// Update the internal best block index as well as the prune lock.\n     void SetBestBlockIndex(const CBlockIndex* block);\n \n+    /// If 'AllowParallelSync()' retrieves true, 'ProcessBlock()' will run concurrently in batches.",
      "path": "src/index/base.h",
      "position": 1,
      "original_position": 48,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "f6b7da2493488c0e48ad9acf569ef3bdaf6b07b3",
      "in_reply_to_id": null,
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Possible typos and grammar issues:\r\n\r\n    retrieves -> returns [‘retrieves true’ is awkward; standard terminology is ‘returns true’]\r\n    will be already be logged -> will already be logged [duplicate “be”]\r\n",
      "created_at": "2025-07-04T07:51:33Z",
      "updated_at": "2025-07-04T07:51:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2184661489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2184661489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220282853",
      "pull_request_review_id": 3039751954,
      "id": 2220282853,
      "node_id": "PRRC_kwDOABII586EVtPl",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        while (!m_interrupt.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 44,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "7d984c3b2dca085ef7f49d21568b06c7b89c7807",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"util: introduce general purpose thread pool\" 7d984c3b2dca085ef7f49d21568b06c7b89c7807\r\n\r\nHmm I can imagine that this can be blocking when you want to stop instantly; but I guess there is a reason why you did not return here and then empty the work queue in Stop.\r\n```suggestion\r\n                // If stopped and no work left, exit worker.\r\n```",
      "created_at": "2025-07-21T20:44:15Z",
      "updated_at": "2025-07-21T21:04:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2220282853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220282853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220285854",
      "pull_request_review_id": 3039751954,
      "id": 2220285854,
      "node_id": "PRRC_kwDOABII586EVt-e",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        while (!m_interrupt.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "7d984c3b2dca085ef7f49d21568b06c7b89c7807",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"util: introduce general purpose thread pool\" 7d984c3b2dca085ef7f49d21568b06c7b89c7807\r\n\r\nI think this and other verbose comment can be removed, it is quite obvious.\r\n\r\nWhat might need comment is Submit due to the abstraction there.",
      "created_at": "2025-07-21T20:45:29Z",
      "updated_at": "2025-07-21T21:04:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2220285854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220285854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220304297",
      "pull_request_review_id": 3039751954,
      "id": 2220304297,
      "node_id": "PRRC_kwDOABII586EVyep",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.\n+        BOOST_CHECK_EQUAL(counter.load(), expected_value);",
      "path": "src/test/threadpool_tests.cpp",
      "position": 95,
      "original_position": 44,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "7d984c3b2dca085ef7f49d21568b06c7b89c7807",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"util: introduce general purpose thread pool\" 7d984c3b2dca085ef7f49d21568b06c7b89c7807\r\n\r\nAlso verify that no work queue size is 0.",
      "created_at": "2025-07-21T20:52:17Z",
      "updated_at": "2025-07-21T21:03:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2220304297",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220304297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 95,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220315413",
      "pull_request_review_id": 3039751954,
      "id": 2220315413,
      "node_id": "PRRC_kwDOABII586EV1MV",
      "diff_hunk": "@@ -2160,7 +2165,19 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > 100) return InitError(_(\"Invalid -indexworkers arg\"));",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \" init: provide thread pool to indexes \" 82fa9d29653b445118fc2d03e2ced520a5d4c7dc\r\n\r\nThis message should be more verbose users should know the limit",
      "created_at": "2025-07-21T20:55:41Z",
      "updated_at": "2025-07-21T21:03:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2220315413",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220315413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220317691",
      "pull_request_review_id": 3039751954,
      "id": 2220317691,
      "node_id": "PRRC_kwDOABII586EV1v7",
      "diff_hunk": "@@ -517,6 +519,7 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-indexworkers=<n>\", strprintf(\"Number of worker threads spawned for the indexes initial sync process (default: %d).\", INDEX_WORKERS_COUNT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \" init: provide thread pool to indexes \" 82fa9d29653b445118fc2d03e2ced520a5d4c7dc\r\n\r\nDefine the max and then use it here and in checking the bounds",
      "created_at": "2025-07-21T20:56:19Z",
      "updated_at": "2025-07-21T21:03:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2220317691",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220317691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220319189",
      "pull_request_review_id": 3039751954,
      "id": 2220319189,
      "node_id": "PRRC_kwDOABII586EV2HV",
      "diff_hunk": "@@ -18,10 +18,14 @@ class CBlock;\n class CBlockIndex;\n class Chainstate;\n class ChainstateManager;\n+class ThreadPool;\n namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n+/** Number of concurrent jobs during the initial sync process */\n+static constexpr int16_t INDEX_WORKERS_COUNT = 0;",
      "path": "src/index/base.h",
      "position": 21,
      "original_position": 10,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \" init: provide thread pool to indexes \" 82fa9d29653b445118fc2d03e2ced520a5d4c7dc\r\n\r\nWhy 0?",
      "created_at": "2025-07-21T20:56:46Z",
      "updated_at": "2025-07-21T21:03:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2220319189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220319189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223829051",
      "pull_request_review_id": 3044877628,
      "id": 2223829051,
      "node_id": "PRRC_kwDOABII586EjPA7",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        while (!m_interrupt.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 44,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "7d984c3b2dca085ef7f49d21568b06c7b89c7807",
      "in_reply_to_id": 2220282853,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Hmm I can imagine that this can be blocking when you want to stop instantly; but I guess there is a reason why you did not return here and then empty the work queue in Stop.\r\n\r\nYes. We need to fulfill all promises so there are no dangling futures waiting for the worker to finish executing the task.\r\nIn the future, we could avoid this by tracking all the promises and triggering a \"shutdown\" exception during stop.",
      "created_at": "2025-07-22T21:06:31Z",
      "updated_at": "2025-07-22T21:12:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2223829051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223829051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223838649",
      "pull_request_review_id": 3044877628,
      "id": 2223838649,
      "node_id": "PRRC_kwDOABII586EjRW5",
      "diff_hunk": "@@ -18,10 +18,14 @@ class CBlock;\n class CBlockIndex;\n class Chainstate;\n class ChainstateManager;\n+class ThreadPool;\n namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n+/** Number of concurrent jobs during the initial sync process */\n+static constexpr int16_t INDEX_WORKERS_COUNT = 0;",
      "path": "src/index/base.h",
      "position": 21,
      "original_position": 10,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": 2220319189,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Why 0?\r\n\r\nParallel sync is disabled by default. We’re currently not tracking the number of threads spawned by Core, so I chose not to make assumptions here (don't want indexes threads competing with net/validation ones). It’s safer to let users specify the appropriate number for their setup. In the future, we could improve this by adding thread tracking object/mechanism and picking up the best number for their machine.",
      "created_at": "2025-07-22T21:12:43Z",
      "updated_at": "2025-07-22T21:12:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2223838649",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223838649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223903289",
      "pull_request_review_id": 3044985960,
      "id": 2223903289,
      "node_id": "PRRC_kwDOABII586EjhI5",
      "diff_hunk": "@@ -18,10 +18,14 @@ class CBlock;\n class CBlockIndex;\n class Chainstate;\n class ChainstateManager;\n+class ThreadPool;\n namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n+/** Number of concurrent jobs during the initial sync process */\n+static constexpr int16_t INDEX_WORKERS_COUNT = 0;",
      "path": "src/index/base.h",
      "position": 21,
      "original_position": 10,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": 2220319189,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Makes sense, I think we can make the bounds not just an arbitrary number but tied it to the cores of the machine.\r\n\r\nThat will prevent footgun whereby user will spawn more threads than the machine can handle leading to degraded performance due to lots of context switching.",
      "created_at": "2025-07-22T21:54:49Z",
      "updated_at": "2025-07-22T22:01:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2223903289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2223903289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226285266",
      "pull_request_review_id": 3048471756,
      "id": 2226285266,
      "node_id": "PRRC_kwDOABII586EsmrS",
      "diff_hunk": "@@ -18,10 +18,14 @@ class CBlock;\n class CBlockIndex;\n class Chainstate;\n class ChainstateManager;\n+class ThreadPool;\n namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n+/** Number of concurrent jobs during the initial sync process */\n+static constexpr int16_t INDEX_WORKERS_COUNT = 0;",
      "path": "src/index/base.h",
      "position": 21,
      "original_position": 10,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": 2220319189,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Absolutely",
      "created_at": "2025-07-23T18:00:08Z",
      "updated_at": "2025-07-23T18:00:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2226285266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226285266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226304853",
      "pull_request_review_id": 3048500818,
      "id": 2226304853,
      "node_id": "PRRC_kwDOABII586EsrdV",
      "diff_hunk": "@@ -517,6 +519,7 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-indexworkers=<n>\", strprintf(\"Number of worker threads spawned for the indexes initial sync process (default: %d).\", INDEX_WORKERS_COUNT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": 2220317691,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In \" init: provide thread pool to indexes \" [82fa9d2](https://github.com/bitcoin/bitcoin/commit/82fa9d29653b445118fc2d03e2ced520a5d4c7dc)\r\n> \r\n> Define the max and then use it here and in checking the bounds\r\n\r\nSince the maximum number of threads for indexes should depend on how many threads Core has at runtime and the number of available processors, I don't think hardcoding it here is the best approach. I agree with adding it on the error side: https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2220315413",
      "created_at": "2025-07-23T18:10:51Z",
      "updated_at": "2025-07-23T18:10:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2226304853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226304853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226307172",
      "pull_request_review_id": 3048504023,
      "id": 2226307172,
      "node_id": "PRRC_kwDOABII586EssBk",
      "diff_hunk": "@@ -0,0 +1,187 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.\n+        BOOST_CHECK_EQUAL(counter.load(), expected_value);",
      "path": "src/test/threadpool_tests.cpp",
      "position": 95,
      "original_position": 44,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "7d984c3b2dca085ef7f49d21568b06c7b89c7807",
      "in_reply_to_id": 2220304297,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In \"util: introduce general purpose thread pool\" [7d984c3](https://github.com/bitcoin/bitcoin/commit/7d984c3b2dca085ef7f49d21568b06c7b89c7807)\r\n> \r\n> Also verify that no work queue size is 0.\r\n\r\nsure. Done.",
      "created_at": "2025-07-23T18:12:06Z",
      "updated_at": "2025-07-23T18:12:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2226307172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226307172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 95,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226319906",
      "pull_request_review_id": 3048523459,
      "id": 2226319906,
      "node_id": "PRRC_kwDOABII586EsvIi",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        while (!m_interrupt.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+\n+                // If stopped, exit worker.\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                // Pop the task",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "7d984c3b2dca085ef7f49d21568b06c7b89c7807",
      "in_reply_to_id": 2220285854,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done ",
      "created_at": "2025-07-23T18:17:21Z",
      "updated_at": "2025-07-23T18:17:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2226319906",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226319906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226322535",
      "pull_request_review_id": 3048528509,
      "id": 2226322535,
      "node_id": "PRRC_kwDOABII586Esvxn",
      "diff_hunk": "@@ -2160,7 +2165,19 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > 100) return InitError(_(\"Invalid -indexworkers arg\"));",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": 2220315413,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done as suggested",
      "created_at": "2025-07-23T18:18:23Z",
      "updated_at": "2025-07-23T18:18:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2226322535",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226322535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228814663",
      "pull_request_review_id": 3052111555,
      "id": 2228814663,
      "node_id": "PRRC_kwDOABII586E2QNH",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.",
      "path": "src/test/threadpool_tests.cpp",
      "position": 94,
      "original_position": 43,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc\r\n\r\nWhy not just `+1` in each task like you do in the next test block?",
      "created_at": "2025-07-24T15:12:00Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2228814663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228814663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228819659",
      "pull_request_review_id": 3052111555,
      "id": 2228819659,
      "node_id": "PRRC_kwDOABII586E2RbL",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.\n+        BOOST_CHECK_EQUAL(counter.load(), expected_value);\n+        BOOST_CHECK_EQUAL(threadPool.WorkQueueSize(), 0);\n+    }\n+\n+    // Test case 2, maintain all threads busy except one.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        // Single blocking future for all threads\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Use per-thread ready promises to ensure all blocked threads have started\n+        std::vector<std::promise<void>> ready_promises(NUM_WORKERS_DEFAULT - 1);\n+        std::vector<std::future<void>> ready_futures;\n+        ready_futures.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (auto& p : ready_promises) ready_futures.emplace_back(p.get_future());\n+\n+        // Submit blocking task to all threads except one\n+        std::vector<std::future<void>> blocking_tasks;\n+        blocking_tasks.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT - 1; i++) {\n+            std::promise<void>& ready = ready_promises[i];\n+            blocking_tasks.emplace_back(threadPool.Submit([&ready, blocker_future]() {\n+                ready.set_value();\n+                blocker_future.wait();\n+            }));\n+        }\n+        // Wait until all blocked threads are actually blocked\n+        for (auto& f : ready_futures) f.wait();\n+\n+        // Now execute tasks on the single available worker\n+        // and check that all the tasks are executed.\n+        int num_tasks = 15;\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to wait on\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+        for (int i = 0; i < num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            }));\n+        }\n+\n+        for (auto& fut : futures) fut.wait();\n+        BOOST_CHECK_EQUAL(counter.load(), num_tasks);\n+\n+        blocker.set_value();\n+        for (auto& t : blocking_tasks) t.wait(); // ensure blocking tasks finish too",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 93,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc\r\n\r\nwould there be any benefit here to incrementing the counter at the end of each blocking task and check that they executed properly when unblocked?",
      "created_at": "2025-07-24T15:14:02Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2228819659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228819659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228839630",
      "pull_request_review_id": 3052111555,
      "id": 2228839630,
      "node_id": "PRRC_kwDOABII586E2WTO",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.\n+        BOOST_CHECK_EQUAL(counter.load(), expected_value);\n+        BOOST_CHECK_EQUAL(threadPool.WorkQueueSize(), 0);\n+    }\n+\n+    // Test case 2, maintain all threads busy except one.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        // Single blocking future for all threads\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Use per-thread ready promises to ensure all blocked threads have started\n+        std::vector<std::promise<void>> ready_promises(NUM_WORKERS_DEFAULT - 1);\n+        std::vector<std::future<void>> ready_futures;\n+        ready_futures.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (auto& p : ready_promises) ready_futures.emplace_back(p.get_future());\n+\n+        // Submit blocking task to all threads except one\n+        std::vector<std::future<void>> blocking_tasks;\n+        blocking_tasks.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT - 1; i++) {\n+            std::promise<void>& ready = ready_promises[i];\n+            blocking_tasks.emplace_back(threadPool.Submit([&ready, blocker_future]() {\n+                ready.set_value();\n+                blocker_future.wait();\n+            }));\n+        }\n+        // Wait until all blocked threads are actually blocked\n+        for (auto& f : ready_futures) f.wait();\n+\n+        // Now execute tasks on the single available worker\n+        // and check that all the tasks are executed.\n+        int num_tasks = 15;\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to wait on\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+        for (int i = 0; i < num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            }));\n+        }\n+\n+        for (auto& fut : futures) fut.wait();\n+        BOOST_CHECK_EQUAL(counter.load(), num_tasks);\n+\n+        blocker.set_value();\n+        for (auto& t : blocking_tasks) t.wait(); // ensure blocking tasks finish too\n+        threadPool.Stop();\n+        BOOST_CHECK_EQUAL(threadPool.WorkersCount(), 0);\n+    }\n+\n+    // Test case 3, wait for work to finish.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<bool> flag = false;\n+        std::future<void> future = threadPool.Submit([&flag]() {\n+            std::this_thread::sleep_for(std::chrono::milliseconds{200});\n+            flag.store(true);\n+        });\n+        future.wait();\n+        BOOST_CHECK(flag.load());\n+    }\n+\n+    // Test case 4, wait for result object.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::future<bool> future_bool = threadPool.Submit([]() {\n+            return true;\n+        });\n+        BOOST_CHECK(future_bool.get());\n+\n+        std::future<std::string> future_str = threadPool.Submit([]() {\n+            return std::string(\"true\");\n+        });\n+        std::string result = future_str.get();\n+        BOOST_CHECK_EQUAL(result, \"true\");\n+    }\n+\n+    // Test case 5, throw exception and catch it on the consumer side.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+\n+        int ROUNDS = 5;\n+        std::string err_msg{\"something wrong happened\"};\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(ROUNDS);\n+        for (int i = 0; i < ROUNDS; i++) {\n+            futures.emplace_back(threadPool.Submit([err_msg, i]() {\n+                throw std::runtime_error(err_msg + util::ToString(i));\n+            }));\n+        }\n+\n+        for (int i = 0; i < ROUNDS; i++) {\n+            try {\n+                futures.at(i).get();\n+                BOOST_FAIL(\"Expected exception not thrown\");\n+            } catch (const std::runtime_error& e) {\n+                BOOST_CHECK_EQUAL(e.what(), err_msg + util::ToString(i));\n+            }\n+        }\n+    }\n+\n+    // Test case 6, all workers are busy, help them by processing tasks from outside.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Submit infinite blocking tasks that wait forever\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT; i++) {\n+            threadPool.Submit([blocker_future]() {\n+                blocker_future.wait();\n+            });\n+        }\n+\n+        // Now submit tasks and check that none of them are executed.\n+        int num_tasks = 20;\n+        std::atomic<int> counter = 0;\n+        for (int i = 0; i < num_tasks; i++) {\n+            threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            });\n+        }\n+        std::this_thread::sleep_for(std::chrono::milliseconds{100});",
      "path": "src/test/threadpool_tests.cpp",
      "position": 202,
      "original_position": 175,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc\r\n\r\nis this sleep to give tasks a chance to execute if the blocking breaks?",
      "created_at": "2025-07-24T15:21:37Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2228839630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228839630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228841403",
      "pull_request_review_id": 3052111555,
      "id": 2228841403,
      "node_id": "PRRC_kwDOABII586E2Wu7",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.\n+        BOOST_CHECK_EQUAL(counter.load(), expected_value);\n+        BOOST_CHECK_EQUAL(threadPool.WorkQueueSize(), 0);\n+    }\n+\n+    // Test case 2, maintain all threads busy except one.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        // Single blocking future for all threads\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Use per-thread ready promises to ensure all blocked threads have started\n+        std::vector<std::promise<void>> ready_promises(NUM_WORKERS_DEFAULT - 1);\n+        std::vector<std::future<void>> ready_futures;\n+        ready_futures.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (auto& p : ready_promises) ready_futures.emplace_back(p.get_future());\n+\n+        // Submit blocking task to all threads except one\n+        std::vector<std::future<void>> blocking_tasks;\n+        blocking_tasks.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT - 1; i++) {\n+            std::promise<void>& ready = ready_promises[i];\n+            blocking_tasks.emplace_back(threadPool.Submit([&ready, blocker_future]() {\n+                ready.set_value();\n+                blocker_future.wait();\n+            }));\n+        }\n+        // Wait until all blocked threads are actually blocked\n+        for (auto& f : ready_futures) f.wait();\n+\n+        // Now execute tasks on the single available worker\n+        // and check that all the tasks are executed.\n+        int num_tasks = 15;\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to wait on\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+        for (int i = 0; i < num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            }));\n+        }\n+\n+        for (auto& fut : futures) fut.wait();\n+        BOOST_CHECK_EQUAL(counter.load(), num_tasks);\n+\n+        blocker.set_value();\n+        for (auto& t : blocking_tasks) t.wait(); // ensure blocking tasks finish too\n+        threadPool.Stop();\n+        BOOST_CHECK_EQUAL(threadPool.WorkersCount(), 0);\n+    }\n+\n+    // Test case 3, wait for work to finish.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<bool> flag = false;\n+        std::future<void> future = threadPool.Submit([&flag]() {\n+            std::this_thread::sleep_for(std::chrono::milliseconds{200});\n+            flag.store(true);\n+        });\n+        future.wait();\n+        BOOST_CHECK(flag.load());\n+    }\n+\n+    // Test case 4, wait for result object.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::future<bool> future_bool = threadPool.Submit([]() {\n+            return true;\n+        });\n+        BOOST_CHECK(future_bool.get());\n+\n+        std::future<std::string> future_str = threadPool.Submit([]() {\n+            return std::string(\"true\");\n+        });\n+        std::string result = future_str.get();\n+        BOOST_CHECK_EQUAL(result, \"true\");\n+    }\n+\n+    // Test case 5, throw exception and catch it on the consumer side.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+\n+        int ROUNDS = 5;\n+        std::string err_msg{\"something wrong happened\"};\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(ROUNDS);\n+        for (int i = 0; i < ROUNDS; i++) {\n+            futures.emplace_back(threadPool.Submit([err_msg, i]() {\n+                throw std::runtime_error(err_msg + util::ToString(i));\n+            }));\n+        }\n+\n+        for (int i = 0; i < ROUNDS; i++) {\n+            try {\n+                futures.at(i).get();\n+                BOOST_FAIL(\"Expected exception not thrown\");\n+            } catch (const std::runtime_error& e) {\n+                BOOST_CHECK_EQUAL(e.what(), err_msg + util::ToString(i));\n+            }\n+        }\n+    }\n+\n+    // Test case 6, all workers are busy, help them by processing tasks from outside.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Submit infinite blocking tasks that wait forever\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT; i++) {\n+            threadPool.Submit([blocker_future]() {\n+                blocker_future.wait();\n+            });\n+        }\n+\n+        // Now submit tasks and check that none of them are executed.\n+        int num_tasks = 20;\n+        std::atomic<int> counter = 0;\n+        for (int i = 0; i < num_tasks; i++) {\n+            threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            });\n+        }\n+        std::this_thread::sleep_for(std::chrono::milliseconds{100});\n+        BOOST_CHECK_EQUAL(threadPool.WorkQueueSize(), 20);\n+\n+        // Now process manually\n+        for (int i = 0; i < num_tasks; i++) {\n+            threadPool.ProcessTask();\n+        }\n+        BOOST_CHECK_EQUAL(counter.load(), num_tasks);",
      "path": "src/test/threadpool_tests.cpp",
      "position": 209,
      "original_position": 182,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc\r\n\r\nCould anything be gained by checking the counter after each `ProcessTask()`?",
      "created_at": "2025-07-24T15:22:23Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2228841403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228841403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": 205,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": 209,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228891058",
      "pull_request_review_id": 3052111555,
      "id": 2228891058,
      "node_id": "PRRC_kwDOABII586E2i2y",
      "diff_hunk": "@@ -2160,7 +2165,19 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > MAX_INDEX_WORKERS_COUNT) return InitError(Untranslated(strprintf(\"Invalid -indexworkers arg. Must be a number in-between 1 and %d\", MAX_INDEX_WORKERS_COUNT)));",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "b36010261921adc74e61bdcbc91ba6b7778bad9a",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "b36010261921adc74e61bdcbc91ba6b7778bad9a\r\n\r\n\"must be in-between 1 and...\" but you allow `0`\r\n\r\nalso nit, could drop the \"in-\" and say \"number between 1 and ...\"",
      "created_at": "2025-07-24T15:42:31Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2228891058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228891058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228893805",
      "pull_request_review_id": 3052111555,
      "id": 2228893805,
      "node_id": "PRRC_kwDOABII586E2jht",
      "diff_hunk": "@@ -517,6 +519,7 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-indexworkers=<n>\", strprintf(\"Number of worker threads spawned for the indexes initial sync process (default: %d).\", INDEX_WORKERS_COUNT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": 2220317691,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "b36010261921adc74e61bdcbc91ba6b7778bad9a\r\n\r\nWonder if it should be specified that threadpool is **shared** among all indexers (that support multithreading)",
      "created_at": "2025-07-24T15:43:43Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2228893805",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228893805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2229009128",
      "pull_request_review_id": 3052111555,
      "id": 2229009128,
      "node_id": "PRRC_kwDOABII586E2_ro",
      "diff_hunk": "@@ -173,83 +175,270 @@ bool BaseIndex::ProcessBlock(const CBlockIndex* pindex, const CBlock* block_data\n         block_info.undo_data = &block_undo;\n     }\n \n-    if (!CustomAppend(block_info)) {\n-        FatalErrorf(\"Failed to write block %s to index database\",\n-                    pindex->GetBlockHash().ToString());\n-        return false;\n+    const auto& any_obj = CustomProcessBlock(block_info);\n+    if (!any_obj.has_value()) {\n+        throw std::runtime_error(strprintf(\"Failed to process block %s for index %s\", pindex->GetBlockHash().GetHex(), GetName()));\n     }\n+    return any_obj;\n+}\n \n-    return true;\n+std::vector<std::any> BaseIndex::ProcessBlocks(bool process_in_order, const CBlockIndex* start, const CBlockIndex* end)\n+{\n+    std::vector<std::any> results;\n+    if (process_in_order) {\n+        // When ordering is required, collect all block indexes from [end..start] in order\n+        std::vector<const CBlockIndex*> ordered_blocks;\n+        for (const CBlockIndex* block = end; block && start->pprev != block; block = block->pprev) {\n+            ordered_blocks.emplace_back(block);\n+        }\n+\n+        // And process blocks in forward order: from start to end\n+        for (auto it = ordered_blocks.rbegin(); it != ordered_blocks.rend(); ++it) {\n+            results.emplace_back(ProcessBlock(*it));\n+        }\n+        return results;\n+    }\n+\n+    // If ordering is not required, process blocks directly from end to start\n+    for (const CBlockIndex* block = end; block && start->pprev != block; block = block->pprev) {\n+        results.emplace_back(ProcessBlock(block));\n+    }\n+\n+    return results;\n }\n \n+struct Task {\n+    int id;\n+    const CBlockIndex* start_index;\n+    const CBlockIndex* end_index;\n+    std::vector<std::any> result;\n+\n+    Task(int task_id, const CBlockIndex* start, const CBlockIndex* end)\n+            : id(task_id), start_index(start), end_index(end) {}\n+\n+    // Disallow copy\n+    Task(const Task&) = delete;\n+    Task& operator=(const Task&) = delete;\n+    Task(Task&&) noexcept = default;\n+};\n+\n+// Context shared across the initial sync workers\n+struct SyncContext {\n+    Mutex mutex_pending_tasks;\n+    std::queue<Task> pending_tasks GUARDED_BY(mutex_pending_tasks);\n+\n+    Mutex mutex_processed_tasks;\n+    std::map<int, Task> processed_tasks GUARDED_BY(mutex_processed_tasks);\n+\n+    std::atomic<int> next_id_to_process{0};\n+};\n+\n+// Synchronizes the index with the active chain.\n+//\n+// If parallel sync is enabled, this method uses WorkersCount()+1 threads (including the current thread)\n+// to process block ranges concurrently. Each worker handles up to 'm_blocks_per_worker' blocks each time\n+// (this is called a \"task\"), which are processed via CustomProcessBlock calls. Results are stored in the\n+// SyncContext's 'processed_tasks' map so they can be sequentially post-processed later.\n+//\n+// After completing a task, workers opportunistically post-process completed tasks *in order* using\n+// CustomPostProcessBlocks. This continues until all blocks have been fully processed and committed.\n+//\n+// Reorgs are detected and handled before syncing begins, ensuring the index starts aligned with the active chain.\n void BaseIndex::Sync()\n {\n+    if (m_synced) return; // we are synced, nothing to do\n+\n+    // Before anything, verify we are in the active chain\n     const CBlockIndex* pindex = m_best_block_index.load();\n-    if (!m_synced) {\n-        std::chrono::steady_clock::time_point last_log_time{0s};\n-        std::chrono::steady_clock::time_point last_locator_write_time{0s};\n-        while (true) {\n-            if (m_interrupt) {\n-                LogInfo(\"%s: m_interrupt set; exiting ThreadSync\", GetName());\n-\n-                SetBestBlockIndex(pindex);\n-                // No need to handle errors in Commit. If it fails, the error will be already be\n-                // logged. The best way to recover is to continue, as index cannot be corrupted by\n-                // a missed commit to disk for an advanced index state.\n-                Commit();\n-                return;\n+    const int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+    // Note: be careful, could return null if there is no more work to do or if pindex is not found (erased blocks dir).\n+    const CBlockIndex* pindex_next = WITH_LOCK(cs_main, return NextSyncBlock(pindex, m_chainstate->m_chain));\n+    if (!pindex_next) {\n+        m_synced = true;\n+        return;\n+    }\n+\n+    // Handle potential reorgs; if the next block's parent doesn't match our current tip,\n+    // rewind our index state to match the chain and resume from there.\n+    if (pindex_next->pprev != pindex && !Rewind(pindex, pindex_next->pprev)) {\n+        FatalErrorf(\"Failed to rewind index %s to a previous chain tip\", GetName());\n+        return;\n+    }\n+\n+    // Compute tasks ranges\n+    const int blocks_to_sync = tip_height - pindex_next->nHeight;\n+    const int num_tasks = blocks_to_sync / m_blocks_per_worker;\n+    const int remaining_blocks = blocks_to_sync % m_blocks_per_worker;\n+    const bool process_in_order = !AllowParallelSync();\n+\n+    std::shared_ptr<SyncContext> ctx = std::make_shared<SyncContext>();\n+    {\n+        LOCK2(ctx->mutex_pending_tasks, ::cs_main);\n+        // Create fixed-size tasks\n+        const CBlockIndex* it_start = pindex;\n+        const CBlockIndex* it_end;\n+        for (int id = 0; id < num_tasks; ++id) {\n+            it_start = Assert(NextSyncBlock(it_start, m_chainstate->m_chain));\n+            it_end = m_chainstate->m_chain[it_start->nHeight + m_blocks_per_worker - 1];\n+            ctx->pending_tasks.emplace(id, it_start, it_end);\n+            it_start = it_end;\n+        }\n+\n+        // Add final task with the remaining blocks, if any\n+        if (remaining_blocks > 0) {\n+            it_start = Assert(NextSyncBlock(it_start, m_chainstate->m_chain));\n+            it_end = m_chainstate->m_chain[it_start->nHeight + remaining_blocks];\n+            ctx->pending_tasks.emplace(/*task_id=*/num_tasks, it_start, it_end);\n+        }\n+    }\n+\n+    // Returns nullopt only when there are no pending tasks\n+    const auto& try_get_task = [](auto& ctx) -> std::optional<Task> {\n+        LOCK(ctx->mutex_pending_tasks);\n+        if (ctx->pending_tasks.empty()) return std::nullopt;\n+        Task t = std::move(ctx->pending_tasks.front());\n+        ctx->pending_tasks.pop();\n+        return t;\n+    };",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 171,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "original_commit_id": "76aa1c2da9635b99e2fb8792b24b53f320b90624",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "76aa1c2da9635b99e2fb8792b24b53f320b90624\r\n\r\nWhats the benefit of defining this as a lambda instead of just moving the code inside `func_worker`? It doesn't seem to be called anywhere else ...?",
      "created_at": "2025-07-24T16:35:48Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2229009128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2229009128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": 296,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2229349665",
      "pull_request_review_id": 3052111555,
      "id": 2229349665,
      "node_id": "PRRC_kwDOABII586E4S0h",
      "diff_hunk": "@@ -138,6 +143,26 @@ class BaseIndex : public CValidationInterface\n     /// Update the internal best block index as well as the prune lock.\n     void SetBestBlockIndex(const CBlockIndex* block);\n \n+    /// If 'AllowParallelSync()' returns true, 'ProcessBlock()' will run concurrently in batches.\n+    /// The 'std::any' result will be passed to 'PostProcessBlocks()' so the index can process",
      "path": "src/index/base.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "76aa1c2da9635b99e2fb8792b24b53f320b90624",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "76aa1c2da9635b99e2fb8792b24b53f320b90624\r\n\r\nDid you mean `CustomPostProcessBlocks()` here?",
      "created_at": "2025-07-24T19:09:53Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2229349665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2229349665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231639166",
      "pull_request_review_id": 3052111555,
      "id": 2231639166,
      "node_id": "PRRC_kwDOABII586FBBx-",
      "diff_hunk": "@@ -299,6 +299,23 @@ bool BlockFilterIndex::Write(const BlockFilter& filter, uint32_t block_height, c\n     return true;\n }\n \n+std::any BlockFilterIndex::CustomProcessBlock(const interfaces::BlockInfo& block_info)\n+{\n+    return std::make_pair(BlockFilter(BlockFilterType::BASIC, *block_info.data, *block_info.undo_data), block_info.height);",
      "path": "src/index/blockfilterindex.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "77a14b37aaf5b1c1a5dbe28e900a3824e5732f3f",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "77a14b37aaf5b1c1a5dbe28e900a3824e5732f3f\r\n\r\nThe corresponding line in the serial/legacy processing path asserts the block data (I don't care much about that) but I do think you should keep the variable for the filter type if ever one day a new filter index is added:\r\n\r\n```cpp\r\nBlockFilter filter(m_filter_type, *Assert(block.data), *Assert(block.undo_data));\r\n```",
      "created_at": "2025-07-25T17:11:10Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2231639166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231639166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231646277",
      "pull_request_review_id": 3052111555,
      "id": 2231646277,
      "node_id": "PRRC_kwDOABII586FBDhF",
      "diff_hunk": "@@ -138,6 +143,26 @@ class BaseIndex : public CValidationInterface\n     /// Update the internal best block index as well as the prune lock.\n     void SetBestBlockIndex(const CBlockIndex* block);\n \n+    /// If 'AllowParallelSync()' returns true, 'ProcessBlock()' will run concurrently in batches.\n+    /// The 'std::any' result will be passed to 'PostProcessBlocks()' so the index can process\n+    /// async result batches in a synchronous fashion (if required).\n+    [[nodiscard]] virtual std::any CustomProcessBlock(const interfaces::BlockInfo& block_info) {\n+        // If parallel sync is enabled, the child class must implement this method.\n+        if (AllowParallelSync()) return std::any();",
      "path": "src/index/base.h",
      "position": 66,
      "original_position": 44,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "76aa1c2da9635b99e2fb8792b24b53f320b90624",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "76aa1c2da9635b99e2fb8792b24b53f320b90624\r\n\r\nI wonder if this condition should be a bit more attention-getting, since it *should* never execute right? Either log something or `Assume()` for the benefit of future index developers?",
      "created_at": "2025-07-25T17:15:28Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2231646277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231646277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231653627",
      "pull_request_review_id": 3052111555,
      "id": 2231653627,
      "node_id": "PRRC_kwDOABII586FBFT7",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        while (!m_interrupt.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool() = default;\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, \"threadpool_worker_\" + util::ToString(i), [this] { WorkerThread(); });",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 76,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc\r\n\r\nI'd like to see `ThreadPool` reused in the codebase (for example, as http workers) which makes me think the class should also have a custom name property for logging and process monitoring. (e.g. `index_worker_thread_1` and `http_worker_thread_1`)",
      "created_at": "2025-07-25T17:19:22Z",
      "updated_at": "2025-07-25T20:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2231653627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231653627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231978461",
      "pull_request_review_id": 3056750380,
      "id": 2231978461,
      "node_id": "PRRC_kwDOABII586FCUnd",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.",
      "path": "src/test/threadpool_tests.cpp",
      "position": 94,
      "original_position": 43,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": 2228814663,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [d2138be](https://github.com/bitcoin/bitcoin/commit/d2138bef76ae7c25679571f9c07ecb44e99d4ecc)\r\n> \r\n> Why not just `+1` in each task like you do in the next test block?\r\n\r\nHmm, good question. I was probably not only testing that all tasks were executed, but also that each of them was executed only once (if they were all doing the same, it would be hard to know if they were all executed). Or.. maybe I just wanted to mention Gauss somewhere in our code.\r\nI did this one 3 years ago so.. it is hard to know. But it doesn't hurt to have it.",
      "created_at": "2025-07-25T20:46:23Z",
      "updated_at": "2025-07-25T20:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2231978461",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231978461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231994092",
      "pull_request_review_id": 3056773483,
      "id": 2231994092,
      "node_id": "PRRC_kwDOABII586FCYbs",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.\n+        BOOST_CHECK_EQUAL(counter.load(), expected_value);\n+        BOOST_CHECK_EQUAL(threadPool.WorkQueueSize(), 0);\n+    }\n+\n+    // Test case 2, maintain all threads busy except one.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        // Single blocking future for all threads\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Use per-thread ready promises to ensure all blocked threads have started\n+        std::vector<std::promise<void>> ready_promises(NUM_WORKERS_DEFAULT - 1);\n+        std::vector<std::future<void>> ready_futures;\n+        ready_futures.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (auto& p : ready_promises) ready_futures.emplace_back(p.get_future());\n+\n+        // Submit blocking task to all threads except one\n+        std::vector<std::future<void>> blocking_tasks;\n+        blocking_tasks.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT - 1; i++) {\n+            std::promise<void>& ready = ready_promises[i];\n+            blocking_tasks.emplace_back(threadPool.Submit([&ready, blocker_future]() {\n+                ready.set_value();\n+                blocker_future.wait();\n+            }));\n+        }\n+        // Wait until all blocked threads are actually blocked\n+        for (auto& f : ready_futures) f.wait();\n+\n+        // Now execute tasks on the single available worker\n+        // and check that all the tasks are executed.\n+        int num_tasks = 15;\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to wait on\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+        for (int i = 0; i < num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            }));\n+        }\n+\n+        for (auto& fut : futures) fut.wait();\n+        BOOST_CHECK_EQUAL(counter.load(), num_tasks);\n+\n+        blocker.set_value();\n+        for (auto& t : blocking_tasks) t.wait(); // ensure blocking tasks finish too",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 93,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": 2228819659,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [d2138be](https://github.com/bitcoin/bitcoin/commit/d2138bef76ae7c25679571f9c07ecb44e99d4ecc)\r\n> \r\n> would there be any benefit here to incrementing the counter at the end of each blocking task and check that they executed properly when unblocked?\r\n\r\nIt's subtle but we're doing the same with the wait here. The `blocking_tasks` vector contains the futures whose promises are set only when the worker finishes executing the task (meaning it has run all its code).",
      "created_at": "2025-07-25T20:56:38Z",
      "updated_at": "2025-07-25T20:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2231994092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231994092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232002054",
      "pull_request_review_id": 3056783979,
      "id": 2232002054,
      "node_id": "PRRC_kwDOABII586FCaYG",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.\n+        BOOST_CHECK_EQUAL(counter.load(), expected_value);\n+        BOOST_CHECK_EQUAL(threadPool.WorkQueueSize(), 0);\n+    }\n+\n+    // Test case 2, maintain all threads busy except one.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        // Single blocking future for all threads\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Use per-thread ready promises to ensure all blocked threads have started\n+        std::vector<std::promise<void>> ready_promises(NUM_WORKERS_DEFAULT - 1);\n+        std::vector<std::future<void>> ready_futures;\n+        ready_futures.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (auto& p : ready_promises) ready_futures.emplace_back(p.get_future());\n+\n+        // Submit blocking task to all threads except one\n+        std::vector<std::future<void>> blocking_tasks;\n+        blocking_tasks.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT - 1; i++) {\n+            std::promise<void>& ready = ready_promises[i];\n+            blocking_tasks.emplace_back(threadPool.Submit([&ready, blocker_future]() {\n+                ready.set_value();\n+                blocker_future.wait();\n+            }));\n+        }\n+        // Wait until all blocked threads are actually blocked\n+        for (auto& f : ready_futures) f.wait();\n+\n+        // Now execute tasks on the single available worker\n+        // and check that all the tasks are executed.\n+        int num_tasks = 15;\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to wait on\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+        for (int i = 0; i < num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            }));\n+        }\n+\n+        for (auto& fut : futures) fut.wait();\n+        BOOST_CHECK_EQUAL(counter.load(), num_tasks);\n+\n+        blocker.set_value();\n+        for (auto& t : blocking_tasks) t.wait(); // ensure blocking tasks finish too\n+        threadPool.Stop();\n+        BOOST_CHECK_EQUAL(threadPool.WorkersCount(), 0);\n+    }\n+\n+    // Test case 3, wait for work to finish.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<bool> flag = false;\n+        std::future<void> future = threadPool.Submit([&flag]() {\n+            std::this_thread::sleep_for(std::chrono::milliseconds{200});\n+            flag.store(true);\n+        });\n+        future.wait();\n+        BOOST_CHECK(flag.load());\n+    }\n+\n+    // Test case 4, wait for result object.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::future<bool> future_bool = threadPool.Submit([]() {\n+            return true;\n+        });\n+        BOOST_CHECK(future_bool.get());\n+\n+        std::future<std::string> future_str = threadPool.Submit([]() {\n+            return std::string(\"true\");\n+        });\n+        std::string result = future_str.get();\n+        BOOST_CHECK_EQUAL(result, \"true\");\n+    }\n+\n+    // Test case 5, throw exception and catch it on the consumer side.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+\n+        int ROUNDS = 5;\n+        std::string err_msg{\"something wrong happened\"};\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(ROUNDS);\n+        for (int i = 0; i < ROUNDS; i++) {\n+            futures.emplace_back(threadPool.Submit([err_msg, i]() {\n+                throw std::runtime_error(err_msg + util::ToString(i));\n+            }));\n+        }\n+\n+        for (int i = 0; i < ROUNDS; i++) {\n+            try {\n+                futures.at(i).get();\n+                BOOST_FAIL(\"Expected exception not thrown\");\n+            } catch (const std::runtime_error& e) {\n+                BOOST_CHECK_EQUAL(e.what(), err_msg + util::ToString(i));\n+            }\n+        }\n+    }\n+\n+    // Test case 6, all workers are busy, help them by processing tasks from outside.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Submit infinite blocking tasks that wait forever\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT; i++) {\n+            threadPool.Submit([blocker_future]() {\n+                blocker_future.wait();\n+            });\n+        }\n+\n+        // Now submit tasks and check that none of them are executed.\n+        int num_tasks = 20;\n+        std::atomic<int> counter = 0;\n+        for (int i = 0; i < num_tasks; i++) {\n+            threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            });\n+        }\n+        std::this_thread::sleep_for(std::chrono::milliseconds{100});",
      "path": "src/test/threadpool_tests.cpp",
      "position": 202,
      "original_position": 175,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": 2228839630,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [d2138be](https://github.com/bitcoin/bitcoin/commit/d2138bef76ae7c25679571f9c07ecb44e99d4ecc)\r\n> \r\n> is this sleep to give tasks a chance to execute if the blocking breaks?\r\n\r\nGood eye.\r\nIIRC, I added it to wait until the workers actually get blocked. Otherwise, the thread pool queue size would be greater than the expected value (because it did not consumed the blocking tasks).\r\nStill, we could remove this by adding some `ready_promises`, as did in test 2. A bit more code but less fragile.",
      "created_at": "2025-07-25T21:01:45Z",
      "updated_at": "2025-07-25T21:01:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2232002054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232002054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232007294",
      "pull_request_review_id": 3056791011,
      "id": 2232007294,
      "node_id": "PRRC_kwDOABII586FCbp-",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    const int NUM_WORKERS_DEFAULT = 3;\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_tasks = 50;\n+\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to ensure completion before checking counter.\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+\n+        for (int i = 1; i <= num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter, i]() {\n+                counter.fetch_add(i);\n+            }));\n+        }\n+\n+        // Wait for all tasks to finish\n+        for (auto& fut : futures) fut.wait();\n+        int expected_value = (num_tasks * (num_tasks + 1)) / 2; // Gauss sum.\n+        BOOST_CHECK_EQUAL(counter.load(), expected_value);\n+        BOOST_CHECK_EQUAL(threadPool.WorkQueueSize(), 0);\n+    }\n+\n+    // Test case 2, maintain all threads busy except one.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        // Single blocking future for all threads\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Use per-thread ready promises to ensure all blocked threads have started\n+        std::vector<std::promise<void>> ready_promises(NUM_WORKERS_DEFAULT - 1);\n+        std::vector<std::future<void>> ready_futures;\n+        ready_futures.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (auto& p : ready_promises) ready_futures.emplace_back(p.get_future());\n+\n+        // Submit blocking task to all threads except one\n+        std::vector<std::future<void>> blocking_tasks;\n+        blocking_tasks.reserve(NUM_WORKERS_DEFAULT - 1);\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT - 1; i++) {\n+            std::promise<void>& ready = ready_promises[i];\n+            blocking_tasks.emplace_back(threadPool.Submit([&ready, blocker_future]() {\n+                ready.set_value();\n+                blocker_future.wait();\n+            }));\n+        }\n+        // Wait until all blocked threads are actually blocked\n+        for (auto& f : ready_futures) f.wait();\n+\n+        // Now execute tasks on the single available worker\n+        // and check that all the tasks are executed.\n+        int num_tasks = 15;\n+        std::atomic<int> counter = 0;\n+\n+        // Store futures to wait on\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(num_tasks);\n+        for (int i = 0; i < num_tasks; i++) {\n+            futures.emplace_back(threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            }));\n+        }\n+\n+        for (auto& fut : futures) fut.wait();\n+        BOOST_CHECK_EQUAL(counter.load(), num_tasks);\n+\n+        blocker.set_value();\n+        for (auto& t : blocking_tasks) t.wait(); // ensure blocking tasks finish too\n+        threadPool.Stop();\n+        BOOST_CHECK_EQUAL(threadPool.WorkersCount(), 0);\n+    }\n+\n+    // Test case 3, wait for work to finish.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::atomic<bool> flag = false;\n+        std::future<void> future = threadPool.Submit([&flag]() {\n+            std::this_thread::sleep_for(std::chrono::milliseconds{200});\n+            flag.store(true);\n+        });\n+        future.wait();\n+        BOOST_CHECK(flag.load());\n+    }\n+\n+    // Test case 4, wait for result object.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+        std::future<bool> future_bool = threadPool.Submit([]() {\n+            return true;\n+        });\n+        BOOST_CHECK(future_bool.get());\n+\n+        std::future<std::string> future_str = threadPool.Submit([]() {\n+            return std::string(\"true\");\n+        });\n+        std::string result = future_str.get();\n+        BOOST_CHECK_EQUAL(result, \"true\");\n+    }\n+\n+    // Test case 5, throw exception and catch it on the consumer side.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+\n+        int ROUNDS = 5;\n+        std::string err_msg{\"something wrong happened\"};\n+        std::vector<std::future<void>> futures;\n+        futures.reserve(ROUNDS);\n+        for (int i = 0; i < ROUNDS; i++) {\n+            futures.emplace_back(threadPool.Submit([err_msg, i]() {\n+                throw std::runtime_error(err_msg + util::ToString(i));\n+            }));\n+        }\n+\n+        for (int i = 0; i < ROUNDS; i++) {\n+            try {\n+                futures.at(i).get();\n+                BOOST_FAIL(\"Expected exception not thrown\");\n+            } catch (const std::runtime_error& e) {\n+                BOOST_CHECK_EQUAL(e.what(), err_msg + util::ToString(i));\n+            }\n+        }\n+    }\n+\n+    // Test case 6, all workers are busy, help them by processing tasks from outside.\n+    {\n+        ThreadPool threadPool;\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\n+\n+        std::promise<void> blocker;\n+        std::shared_future<void> blocker_future(blocker.get_future());\n+\n+        // Submit infinite blocking tasks that wait forever\n+        for (int i = 0; i < NUM_WORKERS_DEFAULT; i++) {\n+            threadPool.Submit([blocker_future]() {\n+                blocker_future.wait();\n+            });\n+        }\n+\n+        // Now submit tasks and check that none of them are executed.\n+        int num_tasks = 20;\n+        std::atomic<int> counter = 0;\n+        for (int i = 0; i < num_tasks; i++) {\n+            threadPool.Submit([&counter]() {\n+                counter.fetch_add(1);\n+            });\n+        }\n+        std::this_thread::sleep_for(std::chrono::milliseconds{100});\n+        BOOST_CHECK_EQUAL(threadPool.WorkQueueSize(), 20);\n+\n+        // Now process manually\n+        for (int i = 0; i < num_tasks; i++) {\n+            threadPool.ProcessTask();\n+        }\n+        BOOST_CHECK_EQUAL(counter.load(), num_tasks);",
      "path": "src/test/threadpool_tests.cpp",
      "position": 209,
      "original_position": 182,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": 2228841403,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [d2138be](https://github.com/bitcoin/bitcoin/commit/d2138bef76ae7c25679571f9c07ecb44e99d4ecc)\r\n> \r\n> Could anything be gained by checking the counter after each `ProcessTask()`?\r\n\r\ndon't think so. Could maybe improve it by making the task return something and checking the futures' promises. But I'm not totally convinced it will add much value.",
      "created_at": "2025-07-25T21:05:26Z",
      "updated_at": "2025-07-25T21:05:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2232007294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232007294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": 205,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": 209,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232008180",
      "pull_request_review_id": 3056792550,
      "id": 2232008180,
      "node_id": "PRRC_kwDOABII586FCb30",
      "diff_hunk": "@@ -2160,7 +2165,19 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > MAX_INDEX_WORKERS_COUNT) return InitError(Untranslated(strprintf(\"Invalid -indexworkers arg. Must be a number in-between 1 and %d\", MAX_INDEX_WORKERS_COUNT)));",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "b36010261921adc74e61bdcbc91ba6b7778bad9a",
      "in_reply_to_id": 2228891058,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good catch!, fixed.",
      "created_at": "2025-07-25T21:06:09Z",
      "updated_at": "2025-07-25T21:06:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2232008180",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232008180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232015151",
      "pull_request_review_id": 3056803122,
      "id": 2232015151,
      "node_id": "PRRC_kwDOABII586FCdkv",
      "diff_hunk": "@@ -173,83 +175,270 @@ bool BaseIndex::ProcessBlock(const CBlockIndex* pindex, const CBlock* block_data\n         block_info.undo_data = &block_undo;\n     }\n \n-    if (!CustomAppend(block_info)) {\n-        FatalErrorf(\"Failed to write block %s to index database\",\n-                    pindex->GetBlockHash().ToString());\n-        return false;\n+    const auto& any_obj = CustomProcessBlock(block_info);\n+    if (!any_obj.has_value()) {\n+        throw std::runtime_error(strprintf(\"Failed to process block %s for index %s\", pindex->GetBlockHash().GetHex(), GetName()));\n     }\n+    return any_obj;\n+}\n \n-    return true;\n+std::vector<std::any> BaseIndex::ProcessBlocks(bool process_in_order, const CBlockIndex* start, const CBlockIndex* end)\n+{\n+    std::vector<std::any> results;\n+    if (process_in_order) {\n+        // When ordering is required, collect all block indexes from [end..start] in order\n+        std::vector<const CBlockIndex*> ordered_blocks;\n+        for (const CBlockIndex* block = end; block && start->pprev != block; block = block->pprev) {\n+            ordered_blocks.emplace_back(block);\n+        }\n+\n+        // And process blocks in forward order: from start to end\n+        for (auto it = ordered_blocks.rbegin(); it != ordered_blocks.rend(); ++it) {\n+            results.emplace_back(ProcessBlock(*it));\n+        }\n+        return results;\n+    }\n+\n+    // If ordering is not required, process blocks directly from end to start\n+    for (const CBlockIndex* block = end; block && start->pprev != block; block = block->pprev) {\n+        results.emplace_back(ProcessBlock(block));\n+    }\n+\n+    return results;\n }\n \n+struct Task {\n+    int id;\n+    const CBlockIndex* start_index;\n+    const CBlockIndex* end_index;\n+    std::vector<std::any> result;\n+\n+    Task(int task_id, const CBlockIndex* start, const CBlockIndex* end)\n+            : id(task_id), start_index(start), end_index(end) {}\n+\n+    // Disallow copy\n+    Task(const Task&) = delete;\n+    Task& operator=(const Task&) = delete;\n+    Task(Task&&) noexcept = default;\n+};\n+\n+// Context shared across the initial sync workers\n+struct SyncContext {\n+    Mutex mutex_pending_tasks;\n+    std::queue<Task> pending_tasks GUARDED_BY(mutex_pending_tasks);\n+\n+    Mutex mutex_processed_tasks;\n+    std::map<int, Task> processed_tasks GUARDED_BY(mutex_processed_tasks);\n+\n+    std::atomic<int> next_id_to_process{0};\n+};\n+\n+// Synchronizes the index with the active chain.\n+//\n+// If parallel sync is enabled, this method uses WorkersCount()+1 threads (including the current thread)\n+// to process block ranges concurrently. Each worker handles up to 'm_blocks_per_worker' blocks each time\n+// (this is called a \"task\"), which are processed via CustomProcessBlock calls. Results are stored in the\n+// SyncContext's 'processed_tasks' map so they can be sequentially post-processed later.\n+//\n+// After completing a task, workers opportunistically post-process completed tasks *in order* using\n+// CustomPostProcessBlocks. This continues until all blocks have been fully processed and committed.\n+//\n+// Reorgs are detected and handled before syncing begins, ensuring the index starts aligned with the active chain.\n void BaseIndex::Sync()\n {\n+    if (m_synced) return; // we are synced, nothing to do\n+\n+    // Before anything, verify we are in the active chain\n     const CBlockIndex* pindex = m_best_block_index.load();\n-    if (!m_synced) {\n-        std::chrono::steady_clock::time_point last_log_time{0s};\n-        std::chrono::steady_clock::time_point last_locator_write_time{0s};\n-        while (true) {\n-            if (m_interrupt) {\n-                LogInfo(\"%s: m_interrupt set; exiting ThreadSync\", GetName());\n-\n-                SetBestBlockIndex(pindex);\n-                // No need to handle errors in Commit. If it fails, the error will be already be\n-                // logged. The best way to recover is to continue, as index cannot be corrupted by\n-                // a missed commit to disk for an advanced index state.\n-                Commit();\n-                return;\n+    const int tip_height = WITH_LOCK(cs_main, return m_chainstate->m_chain.Height());\n+    // Note: be careful, could return null if there is no more work to do or if pindex is not found (erased blocks dir).\n+    const CBlockIndex* pindex_next = WITH_LOCK(cs_main, return NextSyncBlock(pindex, m_chainstate->m_chain));\n+    if (!pindex_next) {\n+        m_synced = true;\n+        return;\n+    }\n+\n+    // Handle potential reorgs; if the next block's parent doesn't match our current tip,\n+    // rewind our index state to match the chain and resume from there.\n+    if (pindex_next->pprev != pindex && !Rewind(pindex, pindex_next->pprev)) {\n+        FatalErrorf(\"Failed to rewind index %s to a previous chain tip\", GetName());\n+        return;\n+    }\n+\n+    // Compute tasks ranges\n+    const int blocks_to_sync = tip_height - pindex_next->nHeight;\n+    const int num_tasks = blocks_to_sync / m_blocks_per_worker;\n+    const int remaining_blocks = blocks_to_sync % m_blocks_per_worker;\n+    const bool process_in_order = !AllowParallelSync();\n+\n+    std::shared_ptr<SyncContext> ctx = std::make_shared<SyncContext>();\n+    {\n+        LOCK2(ctx->mutex_pending_tasks, ::cs_main);\n+        // Create fixed-size tasks\n+        const CBlockIndex* it_start = pindex;\n+        const CBlockIndex* it_end;\n+        for (int id = 0; id < num_tasks; ++id) {\n+            it_start = Assert(NextSyncBlock(it_start, m_chainstate->m_chain));\n+            it_end = m_chainstate->m_chain[it_start->nHeight + m_blocks_per_worker - 1];\n+            ctx->pending_tasks.emplace(id, it_start, it_end);\n+            it_start = it_end;\n+        }\n+\n+        // Add final task with the remaining blocks, if any\n+        if (remaining_blocks > 0) {\n+            it_start = Assert(NextSyncBlock(it_start, m_chainstate->m_chain));\n+            it_end = m_chainstate->m_chain[it_start->nHeight + remaining_blocks];\n+            ctx->pending_tasks.emplace(/*task_id=*/num_tasks, it_start, it_end);\n+        }\n+    }\n+\n+    // Returns nullopt only when there are no pending tasks\n+    const auto& try_get_task = [](auto& ctx) -> std::optional<Task> {\n+        LOCK(ctx->mutex_pending_tasks);\n+        if (ctx->pending_tasks.empty()) return std::nullopt;\n+        Task t = std::move(ctx->pending_tasks.front());\n+        ctx->pending_tasks.pop();\n+        return t;\n+    };",
      "path": "src/index/base.cpp",
      "position": 1,
      "original_position": 171,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "original_commit_id": "76aa1c2da9635b99e2fb8792b24b53f320b90624",
      "in_reply_to_id": 2229009128,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [76aa1c2](https://github.com/bitcoin/bitcoin/commit/76aa1c2da9635b99e2fb8792b24b53f320b90624)\r\n> \r\n> Whats the benefit of defining this as a lambda instead of just moving the code inside `func_worker`? It doesn't seem to be called anywhere else ...?\r\n\r\nIt was like that at first, but I found it harder to follow and wanted to simplify `func_worker` as much as possible.\r\nYou can try moving it back in and will surely see what I'm referring to.",
      "created_at": "2025-07-25T21:12:05Z",
      "updated_at": "2025-07-25T21:12:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2232015151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232015151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": 296,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232021760",
      "pull_request_review_id": 3056810936,
      "id": 2232021760,
      "node_id": "PRRC_kwDOABII586FCfMA",
      "diff_hunk": "@@ -299,6 +299,23 @@ bool BlockFilterIndex::Write(const BlockFilter& filter, uint32_t block_height, c\n     return true;\n }\n \n+std::any BlockFilterIndex::CustomProcessBlock(const interfaces::BlockInfo& block_info)\n+{\n+    return std::make_pair(BlockFilter(BlockFilterType::BASIC, *block_info.data, *block_info.undo_data), block_info.height);",
      "path": "src/index/blockfilterindex.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "77a14b37aaf5b1c1a5dbe28e900a3824e5732f3f",
      "in_reply_to_id": 2231639166,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "good catch!, fixed.",
      "created_at": "2025-07-25T21:16:21Z",
      "updated_at": "2025-07-25T21:16:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2232021760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232021760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232035213",
      "pull_request_review_id": 3056827115,
      "id": 2232035213,
      "node_id": "PRRC_kwDOABII586FCieN",
      "diff_hunk": "@@ -138,6 +143,26 @@ class BaseIndex : public CValidationInterface\n     /// Update the internal best block index as well as the prune lock.\n     void SetBestBlockIndex(const CBlockIndex* block);\n \n+    /// If 'AllowParallelSync()' returns true, 'ProcessBlock()' will run concurrently in batches.\n+    /// The 'std::any' result will be passed to 'PostProcessBlocks()' so the index can process\n+    /// async result batches in a synchronous fashion (if required).\n+    [[nodiscard]] virtual std::any CustomProcessBlock(const interfaces::BlockInfo& block_info) {\n+        // If parallel sync is enabled, the child class must implement this method.\n+        if (AllowParallelSync()) return std::any();",
      "path": "src/index/base.h",
      "position": 66,
      "original_position": 44,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "76aa1c2da9635b99e2fb8792b24b53f320b90624",
      "in_reply_to_id": 2231646277,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [76aa1c2](https://github.com/bitcoin/bitcoin/commit/76aa1c2da9635b99e2fb8792b24b53f320b90624)\r\n> \r\n> I wonder if this condition should be a bit more attention-getting, since it _should_ never execute right? Either log something or `Assume()` for the benefit of future index developers?\r\n\r\nHmm, or we could remove this line and call `CustomAppend` by default. Then it would be up to the child index to decide whether it needs sequential ordering during parallel sync or not. This way, the tx and BIP352 indexes would require fewer lines of code.",
      "created_at": "2025-07-25T21:25:41Z",
      "updated_at": "2025-07-25T21:25:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2232035213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232035213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232051304",
      "pull_request_review_id": 3056843784,
      "id": 2232051304,
      "node_id": "PRRC_kwDOABII586FCmZo",
      "diff_hunk": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        while (!m_interrupt.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool() = default;\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, \"threadpool_worker_\" + util::ToString(i), [this] { WorkerThread(); });",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 76,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "d2138bef76ae7c25679571f9c07ecb44e99d4ecc",
      "in_reply_to_id": 2231653627,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done!",
      "created_at": "2025-07-25T21:35:30Z",
      "updated_at": "2025-07-25T21:35:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2232051304",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232051304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232052962",
      "pull_request_review_id": 3056845514,
      "id": 2232052962,
      "node_id": "PRRC_kwDOABII586FCmzi",
      "diff_hunk": "@@ -138,6 +143,26 @@ class BaseIndex : public CValidationInterface\n     /// Update the internal best block index as well as the prune lock.\n     void SetBestBlockIndex(const CBlockIndex* block);\n \n+    /// If 'AllowParallelSync()' returns true, 'ProcessBlock()' will run concurrently in batches.\n+    /// The 'std::any' result will be passed to 'PostProcessBlocks()' so the index can process",
      "path": "src/index/base.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "76aa1c2da9635b99e2fb8792b24b53f320b90624",
      "in_reply_to_id": 2229349665,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes, fixed.",
      "created_at": "2025-07-25T21:36:31Z",
      "updated_at": "2025-07-25T21:36:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2232052962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2232052962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2240120761",
      "pull_request_review_id": 3067959910,
      "id": 2240120761,
      "node_id": "PRRC_kwDOABII586FhYe5",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        while (!m_interrupt.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_threadpool_worker_\" + util::ToString(i), [this] { WorkerThread(); });",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 77,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "9bba5ef0cc5b6890eba2be3a6ed429c4fea5a28f",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is bike shedding now so ok to ignore -- but when we set thread names on Linux they are truncated to 15 characters. So I dunno I guess \"thread\" and \"worker\" are redundant in the name of a thread?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2f410ad78c767e37f083d03114f6661b73647af3/src/util/threadnames.cpp#L22-L27\r\n\r\n<img width=\"692\" height=\"317\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8819caee-2731-462c-a914-c595a8599000\" />\r\n",
      "created_at": "2025-07-29T14:50:53Z",
      "updated_at": "2025-07-29T14:53:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2240120761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2240120761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2240255267",
      "pull_request_review_id": 3068148361,
      "id": 2240255267,
      "node_id": "PRRC_kwDOABII586Fh5Uj",
      "diff_hunk": "@@ -517,6 +519,7 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-indexworkers=<n>\", strprintf(\"Number of worker threads spawned for the indexes initial sync process (default: %d).\", INDEX_WORKERS_COUNT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "82fa9d29653b445118fc2d03e2ced520a5d4c7dc",
      "in_reply_to_id": 2220317691,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [b360102](https://github.com/bitcoin/bitcoin/commit/b36010261921adc74e61bdcbc91ba6b7778bad9a)\r\n> \r\n> Wonder if it should be specified that threadpool is **shared** among all indexers (that support multithreading)\r\n\r\nDone as suggested.",
      "created_at": "2025-07-29T15:41:50Z",
      "updated_at": "2025-07-29T15:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2240255267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2240255267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2313947931",
      "pull_request_review_id": 3173649451,
      "id": 2313947931,
      "node_id": "PRRC_kwDOABII586J7Asb",
      "diff_hunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        while (!m_interrupt.load()) {\n+            std::function<void()> task;\n+            {\n+                // Wait for the task or until the stop flag is set\n+                m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_threadpool_worker_\" + util::ToString(i), [this] { WorkerThread(); });",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 77,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "9bba5ef0cc5b6890eba2be3a6ed429c4fea5a28f",
      "in_reply_to_id": 2240120761,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> So I dunno I guess \"thread\" and \"worker\" are redundant in the name of a thread?\r\n\r\nSure, done. Now the previous \"indexes_threadpool_worker_[num]\" will be \"indexes_pool_[num]\".",
      "created_at": "2025-09-01T13:20:28Z",
      "updated_at": "2025-09-01T13:20:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2313947931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2313947931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352862088",
      "pull_request_review_id": 3230516028,
      "id": 2352862088,
      "node_id": "PRRC_kwDOABII586MPdOI",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_workers = 3;\n+        int num_tasks = 50;",
      "path": "src/test/threadpool_tests.cpp",
      "position": 76,
      "original_position": 24,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404873978,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I made a small fuzz test now. If you think it is useful, and want to add it:\r\n\r\n```c++\r\n// Copyright (c) 2025-present The Bitcoin Core developers\r\n// Distributed under the MIT software license, see the accompanying\r\n// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n\r\n#include <util/threadpool.h>\r\n\r\n#include <test/fuzz/FuzzedDataProvider.h>\r\n#include <test/fuzz/fuzz.h>\r\n\r\nnamespace {\r\n\r\nstruct ExpectedException : std::runtime_error {\r\n    using std::runtime_error::runtime_error;\r\n};\r\n\r\nstruct MaybeThrowTask {\r\n    bool m_should_throw{false};\r\n\r\n    explicit MaybeThrowTask(const bool should_throw) : m_should_throw{should_throw}\r\n    {\r\n    }\r\n\r\n    void operator()() const\r\n    {\r\n        if (m_should_throw) throw ExpectedException(\"fail\");\r\n    }\r\n};\r\n\r\nstruct CounterTask {\r\n    std::atomic_uint32_t& m_counter;\r\n\r\n    explicit CounterTask(std::atomic_uint32_t& counter) : m_counter{counter}\r\n    {\r\n    }\r\n\r\n    void operator()() const\r\n    {\r\n        m_counter.fetch_add(1);\r\n    }\r\n};\r\n\r\n} // namespace\r\n\r\nFUZZ_TARGET(threadpool)\r\n{\r\n    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\r\n\r\n    const uint32_t num_tasks = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, 1024);\r\n    const uint32_t num_workers = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1, 16);\r\n    ThreadPool pool{\"fuzz_pool\"};\r\n\r\n    std::atomic_uint32_t task_counter{0};\r\n    uint32_t expected_task_counter{0};\r\n    std::vector<std::future<void>> futures;\r\n    futures.reserve(num_tasks);\r\n    pool.Start(num_workers);\r\n    assert(pool.WorkersCount() == num_workers);\r\n    assert(pool.WorkQueueSize() == 0);\r\n\r\n    for (uint32_t i = 0; i < num_tasks; ++i) {\r\n        if (fuzzed_data_provider.ConsumeBool()) {\r\n            futures.emplace_back(pool.Submit(MaybeThrowTask{fuzzed_data_provider.ConsumeBool()}));\r\n        } else {\r\n            futures.emplace_back(pool.Submit(CounterTask{task_counter}));\r\n            ++expected_task_counter;\r\n        }\r\n        if (fuzzed_data_provider.ConsumeBool()) {\r\n            try {\r\n                futures.back().get();\r\n            } catch (const ExpectedException&) {}\r\n            futures.pop_back();\r\n        }\r\n    }\r\n\r\n    while (!futures.empty()) {\r\n        for (size_t i{0}; i < futures.size();) {\r\n            if (futures[i].wait_for(std::chrono::milliseconds(0)) == std::future_status::ready) {\r\n                try {\r\n                    futures[i].get();\r\n                } catch (const ExpectedException&) {}\r\n                futures[i] = std::move(futures.back());\r\n                futures.pop_back();\r\n            } else {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    assert(pool.WorkQueueSize() == 0);\r\n    assert(task_counter == expected_task_counter);\r\n}\r\n```",
      "created_at": "2025-09-16T15:19:22Z",
      "updated_at": "2025-09-16T15:19:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2352862088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352862088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353555803",
      "pull_request_review_id": 3231555853,
      "id": 2353555803,
      "node_id": "PRRC_kwDOABII586MSGlb",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_workers = 3;\n+        int num_tasks = 50;",
      "path": "src/test/threadpool_tests.cpp",
      "position": 76,
      "original_position": 24,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404873978,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to have found something:\r\n```\r\n#234857\tREDUCE cov: 862 ft: 5138 corp: 265/28Kb lim: 1689 exec/s: 303 rss: 854Mb L: 1178/1640 MS: 4 ChangeByte-EraseBytes-InsertByte-InsertByte-\r\n#236845\tNEW    cov: 862 ft: 5140 corp: 266/29Kb lim: 1699 exec/s: 303 rss: 854Mb L: 1652/1652 MS: 3 CopyPart-CMP-CopyPart- DE: \"N10__cxxabiv\"-\r\n#237681\tREDUCE cov: 862 ft: 5140 corp: 266/29Kb lim: 1699 exec/s: 303 rss: 855Mb L: 23/1652 MS: 2 EraseBytes-PersAutoDict- DE: \"St9exception\"-\r\nALARM: working on the last Unit for 1608 seconds\r\n       and the timeout value is 1200 (use -timeout=N to change)\r\nMS: 4 CopyPart-CrossOver-ChangeByte-CopyPart-; base unit: 1dc3473815a9593c855cd52b02ae3f2ef0914d77\r\n0xf,0xd6,0xf,0x8,\r\n\\017\\326\\017\\010\r\nartifact_prefix='./'; Test unit written to ./timeout-8968fff41e23f31c0e704cd01b7706b86fccdc0b\r\nBase64: D9YPCA==\r\n==1785321== ERROR: libFuzzer: timeout after 1608 seconds\r\n    #0 0x5c3b117e9d65 in __sanitizer_print_stack_trace (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1c24d65) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #1 0x5c3b1174387c in fuzzer::PrintStackTrace() (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b7e87c) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #2 0x5c3b1172987b in fuzzer::Fuzzer::AlarmCallback() (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b6487b) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #3 0x7e01d464532f  (/lib/x86_64-linux-gnu/libc.so.6+0x4532f) (BuildId: 282c2c16e7b6600b0b22ea0c99010d2795752b5f)\r\n    #4 0x7e01d4698d70 in __futex_abstimed_wait_common64 nptl/futex-internal.c:57:12\r\n    #5 0x7e01d4698d70 in __futex_abstimed_wait_common nptl/futex-internal.c:87:9\r\n    #6 0x7e01d4698d70 in __GI___futex_abstimed_wait_cancelable64 nptl/futex-internal.c:139:10\r\n    #7 0x7e01d469e7a2 in __pthread_clockjoin_ex nptl/pthread_join_common.c:102:14\r\n    #8 0x5c3b117c4c91 in pthread_join (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1bffc91) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #9 0x7e01d4cece32 in __gthread_join /build/gcc-14-ig5ci0/gcc-14-14.2.0/build/x86_64-linux-gnu/libstdc++-v3/include/x86_64-linux-gnu/bits/gthr-default.h:682:33\r\n    #10 0x7e01d4cece32 in std::thread::join() /build/gcc-14-ig5ci0/gcc-14-14.2.0/build/x86_64-linux-gnu/libstdc++-v3/src/c++11/../../../../../src/libstdc++-v3/src/c++11/thread.cc:134:27\r\n    #11 0x5c3b11ecc4cf in ThreadPool::Stop() /home/drgrid/bitcoin/build_fuzz/src/test/fuzz/./util/threadpool.h:87:20\r\n    #12 0x5c3b11ec5b69 in ThreadPool::~ThreadPool() /home/drgrid/bitcoin/build_fuzz/src/test/fuzz/./util/threadpool.h:67:9\r\n    #13 0x5c3b11ec38b5 in threadpool_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>) /home/drgrid/bitcoin/build_fuzz/src/test/fuzz/./test/fuzz/threadpool.cpp:91:1\r\n    #14 0x5c3b1217d77e in std::function<void (std::span<unsigned char const, 18446744073709551615ul>)>::operator()(std::span<unsigned char const, 18446744073709551615ul>) const /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:591:9\r\n    #15 0x5c3b1217d77e in test_one_input(std::span<unsigned char const, 18446744073709551615ul>) /home/drgrid/bitcoin/build_fuzz/src/test/fuzz/util/./test/fuzz/fuzz.cpp:88:5\r\n    #16 0x5c3b1217d77e in LLVMFuzzerTestOneInput /home/drgrid/bitcoin/build_fuzz/src/test/fuzz/util/./test/fuzz/fuzz.cpp:216:5\r\n    #17 0x5c3b1172aed4 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b65ed4) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #18 0x5c3b1172a5c9 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b655c9) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #19 0x5c3b1172bdb5 in fuzzer::Fuzzer::MutateAndTestOne() (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b66db5) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #20 0x5c3b1172c915 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b67915) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #21 0x5c3b11719bef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b54bef) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #22 0x5c3b11744276 in main (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b7f276) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n    #23 0x7e01d462a1c9 in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n    #24 0x7e01d462a28a in __libc_start_main csu/../csu/libc-start.c:360:3\r\n    #25 0x5c3b1170ebd4 in _start (/home/drgrid/bitcoin/build_fuzz/bin/fuzz+0x1b49bd4) (BuildId: f39378c068291e70b8b8401725aeb1fb5f64a63c)\r\n\r\nSUMMARY: libFuzzer: timeout\r\n```",
      "created_at": "2025-09-16T20:15:33Z",
      "updated_at": "2025-09-16T20:15:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2353555803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353555803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353648451",
      "pull_request_review_id": 3231690116,
      "id": 2353648451,
      "node_id": "PRRC_kwDOABII586MSdND",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_workers = 3;\n+        int num_tasks = 50;",
      "path": "src/test/threadpool_tests.cpp",
      "position": 76,
      "original_position": 24,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404873978,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Very nice!\r\nPlayed a bit with the code, pushed some (dirty and untested) extensions here: https://github.com/furszy/bitcoin-core/commits/2022_parallelize_blockfilter_index_2_fuzz/\r\n\r\n> It seems to have found something\r\n\r\nwill check it out. Thanks!. I was having fun with the code first :).",
      "created_at": "2025-09-16T21:02:54Z",
      "updated_at": "2025-09-16T21:02:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2353648451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353648451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355204852",
      "pull_request_review_id": 3233980843,
      "id": 2355204852,
      "node_id": "PRRC_kwDOABII586MYZL0",
      "diff_hunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2012-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.\n+    // 2) Maintain all threads busy except one.\n+    // 3) Wait for work to finish.\n+    // 4) Wait for result object.\n+    // 5) The task throws an exception, catch must be done in the consumer side.\n+    // 6) Busy workers, help them by processing tasks from outside.\n+\n+    // Test case 1, submit tasks and verify completion.\n+    {\n+        int num_workers = 3;\n+        int num_tasks = 50;",
      "path": "src/test/threadpool_tests.cpp",
      "position": 76,
      "original_position": 24,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "46e74257f22ea35f21b522c5b01c8cc99e4d5482",
      "in_reply_to_id": 1404873978,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@TheCharlatan I tried to run this target and got 0 exec/s which is pretty bad. I was expecting a bad performance due to the number of tasks and the pool overhead btw. ",
      "created_at": "2025-09-17T11:29:44Z",
      "updated_at": "2025-09-17T11:29:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2355204852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355204852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407510165",
      "pull_request_review_id": 3306087309,
      "id": 2407510165,
      "node_id": "PRRC_kwDOABII586Pf7CV",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we `wait()` or `get()` on the returned future, does that imply a release/acquire memory ordering or a relaxed memory ordering? I can't seem to find out what this means for other non-atomic memory that was written on the worker thread before the task is completed.",
      "created_at": "2025-10-06T17:09:00Z",
      "updated_at": "2025-10-06T17:09:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2407510165",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407510165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408023767",
      "pull_request_review_id": 3306684297,
      "id": 2408023767,
      "node_id": "PRRC_kwDOABII586Ph4bX",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": 2407510165,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> If we `wait()` or `get()` on the returned future, does that imply a release/acquire memory ordering or a relaxed memory ordering? I can't seem to find out what this means for other non-atomic memory that was written on the worker thread before the task is completed.\r\n\r\nFor the returned value, `wait()`/`get()` provide release/acquire semantics. All updates performed by the task should be visible after `get()` returns.\r\nNow, if the task modifies other objects that might be accessed concurrently by threads that don’t wait on the future, I'm pretty sure you need to explicitly synchronize access to those objects.\r\n\r\nMaybe show an example of how you’re using it, and we could reason about it.",
      "created_at": "2025-10-06T19:01:45Z",
      "updated_at": "2025-10-06T19:02:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2408023767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408023767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408056506",
      "pull_request_review_id": 3306726994,
      "id": 2408056506,
      "node_id": "PRRC_kwDOABII586PiAa6",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": 2407510165,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, so I tried updating #31132 to use the thread pool here. It makes the change simpler if we were to already have this thread pool merged. However, the threads write to non-synchronized shared vectors, which the main thread will read. We need to make sure the write happens before the read. I initially stored the futures and wait on them like this https://github.com/andrewtoth/bitcoin/commit/c256f1b457cbd5b900aa34703eb5853d2449bcde#diff-3eff97d24109f473292b38a6495c5b51e8bda9f4bff9b691cf255968ba80d85dR151-R164. Since there is no happens before guarantee though, I think we still need a completion semaphore that each thread releases instead.",
      "created_at": "2025-10-06T19:10:40Z",
      "updated_at": "2025-10-06T19:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2408056506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408056506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408106215",
      "pull_request_review_id": 3306796999,
      "id": 2408106215,
      "node_id": "PRRC_kwDOABII586PiMjn",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": 2407510165,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> All updates performed by the task should be visible after get() returns.\r\n\r\nHmm so in that case, then the diff I linked above is correct? The main thread is the one waiting on the future, and the non-synchronized vector is modified only by the worker thread. So the change to the vector should be visible on the main thread.\r\n\r\n> For the returned value, wait()/get() provide release/acquire semantics.\r\n\r\nSo you mean not for the returned value, but for any thread that calls `get()/wait()`? Having the return value be visible is sufficient with just a relaxed memory ordering.\r\n\r\nSo I'm confused whether other memory modified by the thread will be visible (release/acquire), or just the returned value (relaxed).",
      "created_at": "2025-10-06T19:22:45Z",
      "updated_at": "2025-10-06T19:31:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2408106215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408106215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408379260",
      "pull_request_review_id": 3307131586,
      "id": 2408379260,
      "node_id": "PRRC_kwDOABII586PjPN8",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": 2407510165,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Sure, so I tried updating #31132 to use the thread pool here. It makes the change simpler if we were to already have this thread pool merged. However, the threads write to non-synchronized shared vectors, which the main thread will read. We need to make sure the write happens before the read. I initially stored the futures and wait on them like this [andrewtoth@c256f1b#diff-3eff97d24109f473292b38a6495c5b51e8bda9f4bff9b691cf255968ba80d85dR151-R164](https://github.com/andrewtoth/bitcoin/commit/c256f1b457cbd5b900aa34703eb5853d2449bcde#diff-3eff97d24109f473292b38a6495c5b51e8bda9f4bff9b691cf255968ba80d85dR151-R164). Since there is no happens before guarantee though, I think we still need a completion semaphore that each thread releases instead.\r\n\r\nHave you tried something like (haven't tried it yet, will give it a run tomorrow):\r\n\r\n```diff\r\ndiff --git a/src/inputfetcher.h b/src/inputfetcher.h\r\n--- a/src/inputfetcher.h\t(revision c256f1b457cbd5b900aa34703eb5853d2449bcde)\r\n+++ b/src/inputfetcher.h\t(date 1759781954442)\r\n@@ -43,15 +43,6 @@\r\n      */\r\n     std::atomic<size_t> m_input_counter{0};\r\n \r\n-    /**\r\n-     * The vector of vectors of outpoint:coin pairs.\r\n-     * Each thread writes the coins it fetches to the vector at its thread\r\n-     * index. This way multiple threads can write concurrently to different\r\n-     * vectors in a thread safe way. After all threads are finished, the main\r\n-     * thread can loop through all vectors and write the coins to the cache.\r\n-     */\r\n-    std::vector<std::vector<std::pair<COutPoint, Coin>>> m_coins{};\r\n-\r\n     /**\r\n      * The set of txids of all txs in the block being fetched.\r\n      * This is used to filter out inputs that are created in the block,\r\n@@ -69,15 +60,15 @@\r\n     const size_t m_worker_thread_count;\r\n     ThreadPool m_thread_pool{\"inputfetcher\"};\r\n \r\n-    void Work(size_t thread_index) noexcept\r\n+    std::vector<std::pair<COutPoint, Coin>> Work(size_t thread_index) noexcept\r\n     {\r\n         const auto inputs_count{m_inputs.size()};\r\n-        auto& coins{m_coins[thread_index]};\r\n+        std::vector<std::pair<COutPoint, Coin>> coins;\r\n         try {\r\n             while (true) {\r\n                 const auto input_index{m_input_counter.fetch_add(1, std::memory_order_relaxed)};\r\n                 if (input_index >= inputs_count) {\r\n-                    return;\r\n+                    return {};\r\n                 }\r\n                 const auto [tx_index, vin_index] = m_inputs[input_index];\r\n                 const auto& outpoint{m_block->vtx[tx_index]->vin[vin_index].prevout};\r\n@@ -96,7 +87,7 @@\r\n                     // Missing an input. This block will fail validation.\r\n                     // Skip remaining inputs.\r\n                     m_input_counter.store(inputs_count, std::memory_order_relaxed);\r\n-                    return;\r\n+                    return {};\r\n                 }\r\n             }\r\n         } catch (const std::runtime_error&) {\r\n@@ -104,6 +95,8 @@\r\n             // Skip remaining inputs.\r\n             m_input_counter.store(inputs_count, std::memory_order_relaxed);\r\n         }\r\n+\r\n+        return coins;\r\n     }\r\n \r\n public:\r\n@@ -116,10 +109,6 @@\r\n             return;\r\n         }\r\n         m_thread_pool.Start(worker_thread_count);\r\n-        m_coins.reserve(worker_thread_count + 1);\r\n-        for (size_t n{0}; n < worker_thread_count + 1; ++n) {\r\n-            m_coins.emplace_back();\r\n-        }\r\n     }\r\n \r\n     //! Fetch all block inputs from db, and insert into cache.\r\n@@ -148,25 +137,30 @@\r\n \r\n         // Set the input counter and wake threads.\r\n         m_input_counter.store(0, std::memory_order_relaxed);\r\n-        std::vector<std::future<void>> futures;\r\n+        std::vector<std::future<std::vector<std::pair<COutPoint, Coin>>>> futures;\r\n         futures.reserve(m_worker_thread_count);\r\n         for (size_t n{0}; n < m_worker_thread_count; ++n) {\r\n             futures.emplace_back(m_thread_pool.Submit([this, n]() {\r\n-                Work(n);\r\n+                return Work(n);\r\n             }));\r\n         }\r\n \r\n         // Have the main thread work too while we wait for other threads\r\n-        Work(m_worker_thread_count);\r\n+        std::vector<std::vector<std::pair<COutPoint, Coin>>> coins;\r\n+        coins.reserve(m_worker_thread_count + 1);\r\n+        coins[m_worker_thread_count] = Work(m_worker_thread_count);\r\n \r\n         // Wait for all worker threads to complete\r\n-        for (const auto& future : futures) {\r\n-            future.wait();\r\n+        for (size_t i = 0; i < futures.size(); i++) {\r\n+            coins[i] = futures[i].get();\r\n         }\r\n \r\n         // At this point all threads are done writing to m_coins, so we can\r\n         // safely read from it and insert the fetched coins into the cache.\r\n-        for (auto& thread_coins : m_coins) {\r\n+        for (auto& thread_coins : coins) {\r\n+            if (thread_coins.empty()) {\r\n+                // TODO: report failure..\r\n+            }\r\n             for (auto&& [outpoint, coin] : thread_coins) {\r\n                 cache.EmplaceCoinInternalDANGER(std::move(outpoint),\r\n                                                 std::move(coin),\r\n\r\n```",
      "created_at": "2025-10-06T20:22:02Z",
      "updated_at": "2025-10-06T20:23:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2408379260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408379260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408391339",
      "pull_request_review_id": 3307145096,
      "id": 2408391339,
      "node_id": "PRRC_kwDOABII586PjSKr",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": 2407510165,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice!",
      "created_at": "2025-10-06T20:24:03Z",
      "updated_at": "2025-10-06T20:24:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2408391339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408391339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408782353",
      "pull_request_review_id": 3307626203,
      "id": 2408782353,
      "node_id": "PRRC_kwDOABII586PkxoR",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": 2407510165,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let me know how it goes :)",
      "created_at": "2025-10-06T21:58:04Z",
      "updated_at": "2025-10-06T21:58:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2408782353",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408782353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2410469877",
      "pull_request_review_id": 3309895518,
      "id": 2410469877,
      "node_id": "PRRC_kwDOABII586PrNn1",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": 2407510165,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It went well thanks https://github.com/bitcoin/bitcoin/commit/0030dc5ba46da402d36edd5cb32492397deeae7f\r\nSorry for hijacking the PR :)",
      "created_at": "2025-10-07T12:32:16Z",
      "updated_at": "2025-10-07T12:32:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2410469877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2410469877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2410734769",
      "pull_request_review_id": 3310254798,
      "id": 2410734769,
      "node_id": "PRRC_kwDOABII586PsOSx",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    void Start(int num_workers)\n+    {\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt.store(false); // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex\n+        // used by threads waiting on the condition variable. This ensures threads blocked on m_cv\n+        // reliably observe the change and proceed correctly without missing signals.\n+        // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+        WITH_LOCK(m_mutex, m_interrupt.store(true));\n+        m_cv.notify_all();\n+        for (auto& worker : m_workers) {\n+            worker.join();\n+        }\n+        m_workers.clear();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            m_work_queue.emplace([ptr_task]() {\n+                (*ptr_task)();\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;",
      "path": "src/util/threadpool.h",
      "position": 163,
      "original_position": 114,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "in_reply_to_id": 2407510165,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It went well thanks [0030dc5](https://github.com/bitcoin/bitcoin/commit/0030dc5ba46da402d36edd5cb32492397deeae7f)\r\n> Sorry for hijacking the PR :)\r\n\r\nhehe np, I owe you a few reviews anyway.",
      "created_at": "2025-10-07T13:56:20Z",
      "updated_at": "2025-10-07T13:56:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2410734769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2410734769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411161631",
      "pull_request_review_id": 3310859660,
      "id": 2411161631,
      "node_id": "PRRC_kwDOABII586Pt2gf",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Any reason we can't use `memory_order_relaxed` on loads and stores of `m_interrupt`?",
      "created_at": "2025-10-07T16:11:56Z",
      "updated_at": "2025-10-07T16:11:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2411161631",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411161631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411794397",
      "pull_request_review_id": 3311757139,
      "id": 2411794397,
      "node_id": "PRRC_kwDOABII586PwQ_d",
      "diff_hunk": "@@ -530,6 +533,7 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-indexworkers=<n>\", strprintf(\"Number of worker threads spawned for the initial index synchronization (default: %d). These threads are shared across all indexes\", INDEX_WORKERS_COUNT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "99a4d06154a6ba2cf531eb6067cbdb833b71e11d",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tested this for signet on two computers, and while parallel sync (5 threads) was a great speedup on an SSD, I also observed a slowdown on a HDD compared to master (by a factor 2).\r\nPresumably that's because reading the blocks from disk is the main bottleneck on a HDD, and with parallel indexing there is a lot of jumping back and forth, increasing seek time.\r\nShould it be mentioned in the `-indexworkers` help that it is not advisable to use this option on a HDD?",
      "created_at": "2025-10-07T20:17:18Z",
      "updated_at": "2025-10-07T20:19:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2411794397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411794397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411796107",
      "pull_request_review_id": 3311759341,
      "id": 2411796107,
      "node_id": "PRRC_kwDOABII586PwRaL",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Any reason we can't use `memory_order_relaxed` on loads and stores of `m_interrupt`?\r\n\r\nI recall briefly thinking about it, but going down that path would mean guarding all `m_interrupt` accesses with `m_mutex` too. And that seemed like an unnecessary overhead for methods like `Submit` that should be performing a lightweight interruption check before submission.",
      "created_at": "2025-10-07T20:18:10Z",
      "updated_at": "2025-10-07T20:18:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2411796107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411796107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411822083",
      "pull_request_review_id": 3311792182,
      "id": 2411822083,
      "node_id": "PRRC_kwDOABII586PwXwD",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> going down that path would mean guarding all m_interrupt accesses with m_mutex too\r\n\r\nHmm I don't see why we would need to do that? If we wanted to make m_interrupt a non-atomic bool we would need to do that. But if it's atomic we can use relaxed since it's just a flag and not acting as a fence to any other non-atomic memory?",
      "created_at": "2025-10-07T20:28:58Z",
      "updated_at": "2025-10-07T20:48:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2411822083",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411822083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411917478",
      "pull_request_review_id": 3311923966,
      "id": 2411917478,
      "node_id": "PRRC_kwDOABII586PwvCm",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > going down that path would mean guarding all m_interrupt accesses with m_mutex too\r\n> \r\n> Hmm I don't see why we would need to do that? If we wanted to make m_interrupt a non-atomic bool we would need to do that. But if it's atomic we can just use relaxed since it's just a flag and not acting as a fence to any other non-atomic memory?\r\n\r\nHmm, but what about the flag updates visibility?\r\n\r\nIf all `m_interrupt` loads were relaxed, `Submit()` could read a stale false value even after `Stop()` set it to true, right?.\r\nThis would cause the task to be enqueued during shutdown, which could end up with a lingering task that never gets executed, which will hang the caller on the future's `get()`/`wait()` call forever and stall the shutdown procedure?",
      "created_at": "2025-10-07T21:00:35Z",
      "updated_at": "2025-10-07T21:00:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2411917478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411917478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411934291",
      "pull_request_review_id": 3311949660,
      "id": 2411934291,
      "node_id": "PRRC_kwDOABII586PwzJT",
      "diff_hunk": "@@ -530,6 +533,7 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-indexworkers=<n>\", strprintf(\"Number of worker threads spawned for the initial index synchronization (default: %d). These threads are shared across all indexes\", INDEX_WORKERS_COUNT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "9dbea51ab511fc9823a87cd522c1d705a3436bad",
      "original_commit_id": "99a4d06154a6ba2cf531eb6067cbdb833b71e11d",
      "in_reply_to_id": 2411794397,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated, thanks for testing!",
      "created_at": "2025-10-07T21:08:08Z",
      "updated_at": "2025-10-07T21:08:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2411934291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411934291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411949367",
      "pull_request_review_id": 3311971413,
      "id": 2411949367,
      "node_id": "PRRC_kwDOABII586Pw203",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't see how memory ordering solves that? Consider this exact line where the `Submit` thread is suspended:\r\n```\r\n    auto Submit(T task) -> std::future<decltype(task())>\r\n    {\r\n        if (m_workers.empty() || m_interrupt.load()) throw std::runtime_error(\"No active workers; cannot accept new tasks\");\r\n        ---> Stop() is called right here on another thread, setting m_interrupt to true and all threads exit before this thread continues execution\r\n        using TaskType = std::packaged_task<decltype(task())()>;\r\n```\r\n\r\nI think we need to say instead that all public methods must be called on the same thread. That way we can use `relaxed` ordering, since `Submit` and `Stop` cannot be called by different threads so this won't happen.",
      "created_at": "2025-10-07T21:16:01Z",
      "updated_at": "2025-10-07T21:24:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2411949367",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411949367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2412093040",
      "pull_request_review_id": 3312150020,
      "id": 2412093040,
      "node_id": "PRRC_kwDOABII586PxZ5w",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> If all m_interrupt loads were relaxed, Submit() could read a stale false value even after Stop() set it to true, right?\r\n\r\nI don't think it could? Once a write to true becomes visible to a thread, it cannot be read again as false until something writes false to it again. This is independent of memory ordering. Relaxed memory ordering can reorder when writes to different data become visible to a thread. For instance:\r\n```\r\natomic<bool> x{false}, y{false};\r\n// thread 1 stores true to x first then y\r\nx.store(true, relaxed);\r\ny.store(true, relaxed);\r\n// thread 2 \r\ny.load(relaxed); // Could be true\r\nx.load(relaxed); // Could still be false even if y above is already visible as true\r\ny.load(relaxed); // Cannot be false again after already reading true above\r\n```\r\n\r\nOf course this is only relevant if there are other threads that will be reading and writing. Since the same thread will be calling Stop, Start, and Submit, there is no need to be concerned with this.\r\nThe only reason m_interrupt needs to be atomic is because it is also being read from worker threads, and those are reading it while synchronized with `m_mutex`.",
      "created_at": "2025-10-07T22:40:49Z",
      "updated_at": "2025-10-07T22:43:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2412093040",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2412093040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2412161898",
      "pull_request_review_id": 3312233104,
      "id": 2412161898,
      "node_id": "PRRC_kwDOABII586Pxqtq",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thinking about this more, since `m_workers` is not synchronized it implies `Stop` and `Submit` must be called on the same thread. Therefore `m_workers.empty()` is sufficient to test if the pool is stopped since `Stop()` must complete before a subsequent `Submit()`. So `m_interrupt` is redundant in `if (m_workers.empty() || m_interrupt.load())`, and `m_interrupt` can just be made a regular bool guarded by `m_mutex`. `Start` would have to set it with the mutex locked, but that is infrequent compared to all the loads done in `Submit` and `WorkerThread`.",
      "created_at": "2025-10-07T23:28:19Z",
      "updated_at": "2025-10-08T13:37:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2412161898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2412161898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413513497",
      "pull_request_review_id": 3314334098,
      "id": 2413513497,
      "node_id": "PRRC_kwDOABII586P20sZ",
      "diff_hunk": "",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/26966/commits/0afb05cad29e4c30a2f9eb4295e997967129dc88\r\n\r\nI wrote a test for recursive task submission. You can add it if you consider it to be useful.\r\n```diff\r\ndiff --git a/src/test/threadpool_tests.cpp b/src/test/threadpool_tests.cpp\r\nindex ed0af8fa3f..4797144b78 100644\r\n--- a/src/test/threadpool_tests.cpp\r\n+++ b/src/test/threadpool_tests.cpp\r\n@@ -197,6 +197,21 @@ BOOST_AUTO_TEST_CASE(threadpool_basic)\r\n         blocker.set_value();\r\n         threadPool.Stop();\r\n     }\r\n+\r\n+    // Test case 7, recursive submission of tasks.\r\n+    {\r\n+        ThreadPool threadPool(POOL_NAME);\r\n+        threadPool.Start(NUM_WORKERS_DEFAULT);\r\n+\r\n+        std::promise<void> signal;\r\n+        threadPool.Submit([&]() {\r\n+            threadPool.Submit([&]() {\r\n+                signal.set_value();\r\n+            });\r\n+        });\r\n+\r\n+        signal.get_future().wait();\r\n+    }\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n\r\nEDIT\r\n```\r\n + signal.get_future().wait();\r\n + threadPool.Stop()\r\n```",
      "created_at": "2025-10-08T11:16:35Z",
      "updated_at": "2025-10-08T13:08:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2413513497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413513497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413596564",
      "pull_request_review_id": 3314450770,
      "id": 2413596564,
      "node_id": "PRRC_kwDOABII586P3I-U",
      "diff_hunk": "",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2413513497,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This would require `m_workers` to be synchronized somehow, since it is written in `Stop` and `Start` but read in `Submit`.\n\nEdit: actually this will work, since `m_workers` won't be written until after the signal inside the last task. But, if `Stop` was called manually before waiting for the signal it could cause a deadlock.",
      "created_at": "2025-10-08T11:50:25Z",
      "updated_at": "2025-10-08T12:01:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2413596564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413596564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413787797",
      "pull_request_review_id": 3314714775,
      "id": 2413787797,
      "node_id": "PRRC_kwDOABII586P33qV",
      "diff_hunk": "",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2413513497,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there value in making the `ThreadPool` safe for recursive task submission? We might not be able to implement certain divide and conquer algorithms, but we might not need to.",
      "created_at": "2025-10-08T13:02:05Z",
      "updated_at": "2025-10-08T13:02:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2413787797",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413787797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413851837",
      "pull_request_review_id": 3314806280,
      "id": 2413851837,
      "node_id": "PRRC_kwDOABII586P4HS9",
      "diff_hunk": "",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2413513497,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think so. In that case, should your test have some warnings that this can be unsafe if the thread pool is stopped or destroyed before all calls to `Submit` have returned?",
      "created_at": "2025-10-08T13:23:33Z",
      "updated_at": "2025-10-08T13:23:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2413851837",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413851837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413885650",
      "pull_request_review_id": 3314852496,
      "id": 2413885650,
      "node_id": "PRRC_kwDOABII586P4PjS",
      "diff_hunk": "",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2413513497,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We can modify the test to make the parent task wait for the child task to complete before returning. `Stop` waits for all workers to complete before clearing the workers vector,  that is, of course, if @furszy  determines that there is any point to a recursive test at all, since we are not designing for that",
      "created_at": "2025-10-08T13:34:29Z",
      "updated_at": "2025-10-08T13:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2413885650",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413885650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413902914",
      "pull_request_review_id": 3314876093,
      "id": 2413902914,
      "node_id": "PRRC_kwDOABII586P4TxC",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());",
      "path": "src/util/threadpool.h",
      "position": 75,
      "original_position": 53,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/26966/commits/0afb05cad29e4c30a2f9eb4295e997967129dc88:\r\n\r\nIs it not beneficial for a generic ThreadPool to support assigning tasks in batches to threads? I expect this to be useful when submitting many small tasks.",
      "created_at": "2025-10-08T13:40:05Z",
      "updated_at": "2025-10-08T13:46:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2413902914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2413902914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414227236",
      "pull_request_review_id": 3315358558,
      "id": 2414227236,
      "node_id": "PRRC_kwDOABII586P5i8k",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice thread of thoughts! Will try to go over the comments.\r\n\r\nRegarding `Submit` being called only from the initial controller thread:\r\n\r\nRight now, we are actually submitting tasks from threads that are not the initial one. Each index starts its own \"background sync\" thread that is responsible for computing the tasks submitted to the thread pool.\r\n\r\nI don’t think it’s reasonable to expect a generic thread pool to only accept submissions from a single thread. We must be able to submit tasks from any thread. I’ve adapted the code to reflect this.\r\n\r\nRegarding the `Start` and `Stop` restriction to the initial controller thread:\r\n\r\nAgree. In fact, calling `Stop` from a worker thread would actually deadlock. I’ve added documentation clearly expressing this requirement.\r\nCould extend this and check the thread id during shutdown too but it seemed like an overkill.\r\n\r\nRegarding `Submit` after shutdown:\r\n\r\nYeah, good eye there. I think the simplest solution is to move the interruption check inside the mutex guard, just before enqueuing the task. This is not really going to happen anyway. And even if it happens, the extra overhead of creating the wrapper and destructing it is minimal since the app will be shutting down anyway.\r\n\r\nThanks for the thread of thoughts! I have updated the class to reflect all of this.",
      "created_at": "2025-10-08T15:18:26Z",
      "updated_at": "2025-10-08T15:18:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414227236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414227236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414243718",
      "pull_request_review_id": 3315384388,
      "id": 2414243718,
      "node_id": "PRRC_kwDOABII586P5m-G",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt.load() || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt.load() && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());",
      "path": "src/util/threadpool.h",
      "position": 75,
      "original_position": 53,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2413902914,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> [0afb05c](https://github.com/bitcoin/bitcoin/commit/0afb05cad29e4c30a2f9eb4295e997967129dc88):\r\n> \r\n> Is it not beneficial for a generic ThreadPool to support assigning tasks in batches to threads? I expect this to be useful when submitting many small tasks.\r\n\r\nI don't think that's thread pool responsibility. Generic thread pools are designed to execute tasks efficiently, but they don't dictate their granularity (mainly because they do not know the content of the task). If batching is beneficial, the caller should handle it before submission (that's actually what I'm doing here for the indexes).",
      "created_at": "2025-10-08T15:22:49Z",
      "updated_at": "2025-10-08T20:13:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414243718",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414243718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414248250",
      "pull_request_review_id": 3315392693,
      "id": 2414248250,
      "node_id": "PRRC_kwDOABII586P5oE6",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, but now we also need `std::vector<std::thread> m_workers;` guarded by `m_mutex`. Since it can be written by `Stop` and also read in `Submit`. So it also needs to be locked at the end of `Stop` and in `WorkersCount`.",
      "created_at": "2025-10-08T15:24:11Z",
      "updated_at": "2025-10-08T15:24:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414248250",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414248250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414334630",
      "pull_request_review_id": 3315518545,
      "id": 2414334630,
      "node_id": "PRRC_kwDOABII586P59Km",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    std::atomic<bool> m_interrupt{false};\n+    std::vector<std::thread> m_workers;\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt.load() && m_work_queue.empty()) {",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "671bcec1608ae2d74483d7b56bf7ecd770dd3b95",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2411161631,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Ok, but now we also need `std::vector<std::thread> m_workers;` guarded by `m_mutex`. Since it can be written by `Stop` and also read in `Submit`. So it also needs to be locked at the end of `Stop` and in `WorkersCount`.\r\n\r\nTrue. Pushed. Thanks!",
      "created_at": "2025-10-08T15:53:06Z",
      "updated_at": "2025-10-08T15:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414334630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414334630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414346916",
      "pull_request_review_id": 3315536617,
      "id": 2414346916,
      "node_id": "PRRC_kwDOABII586P6AKk",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        std::vector<std::thread> threads_to_join;\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 124,
      "commit_id": "9270fdded923ddea7e89f72fed5184fecb462efa",
      "original_commit_id": "e780f6fdf3dafcc05d3482096501cb731c60435e",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This comment is stale now.",
      "created_at": "2025-10-08T15:57:58Z",
      "updated_at": "2025-10-08T16:01:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414346916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414346916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414350038",
      "pull_request_review_id": 3315540785,
      "id": 2414350038,
      "node_id": "PRRC_kwDOABII586P6A7W",
      "diff_hunk": "",
      "path": "src/test/threadpool_tests.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0afb05cad29e4c30a2f9eb4295e997967129dc88",
      "in_reply_to_id": 2413513497,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, I found the test worthwhile. Taken. Thanks for sharing! I had something similar on the fuzz test.\r\nAllowing task submission from any thread should be a must for me. It otherwise defeats the purpose of having a shared thread pool if you can only submit tasks from a single spot.\r\n\r\nThis also pushed me further. Added another test for the case where the pool is about to shut down while workers are all busy and a thread is concurrently submitting a new task.",
      "created_at": "2025-10-08T15:59:11Z",
      "updated_at": "2025-10-08T16:01:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414350038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414350038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414369286",
      "pull_request_review_id": 3315566988,
      "id": 2414369286,
      "node_id": "PRRC_kwDOABII586P6FoG",
      "diff_hunk": "@@ -0,0 +1,192 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        std::vector<std::thread> threads_to_join;\n+        // Notify workers and join them.\n+        // Note: even when m_interrupt is atomic, it must be modified while holding the same mutex",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 124,
      "commit_id": "9270fdded923ddea7e89f72fed5184fecb462efa",
      "original_commit_id": "e780f6fdf3dafcc05d3482096501cb731c60435e",
      "in_reply_to_id": 2414346916,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ups, updated. Thanks.\r\nAlso moved the condition variable comment above the member declaration (this caused a nasty bug that we shouldn't forget).",
      "created_at": "2025-10-08T16:06:53Z",
      "updated_at": "2025-10-08T16:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414369286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414369286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414369729",
      "pull_request_review_id": 3315567523,
      "id": 2414369729,
      "node_id": "PRRC_kwDOABII586P6FvB",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    /**\n+     * @brief Submit a new task for asynchronous execution.\n+     *\n+     * Enqueues a callable to be executed by one of the worker threads.\n+     * Returns a `std::future` that can be used to retrieve the task’s result.\n+     */\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            if (m_workers.empty() || m_interrupt) {",
      "path": "src/util/threadpool.h",
      "position": 157,
      "original_position": 151,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3c4c3cbe09061088d2649b6bfadacaeed49a6ed6",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These 2 checks are redundant since they are both set atomically. Should just pick one for clarity.",
      "created_at": "2025-10-08T16:07:02Z",
      "updated_at": "2025-10-08T16:07:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414369729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414369729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414378684",
      "pull_request_review_id": 3315581176,
      "id": 2414378684,
      "node_id": "PRRC_kwDOABII586P6H68",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    /**\n+     * @brief Submit a new task for asynchronous execution.\n+     *\n+     * Enqueues a callable to be executed by one of the worker threads.\n+     * Returns a `std::future` that can be used to retrieve the task’s result.\n+     */\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            if (m_workers.empty() || m_interrupt) {",
      "path": "src/util/threadpool.h",
      "position": 157,
      "original_position": 151,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3c4c3cbe09061088d2649b6bfadacaeed49a6ed6",
      "in_reply_to_id": 2414369729,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Actually, we must use worker count check. Since we can Start with 0 worker threads but still set interrupt to false, so this would deadlock with only the interrupt check.\nMaybe guard against starting with 0 threads and then pick either?",
      "created_at": "2025-10-08T16:10:42Z",
      "updated_at": "2025-10-08T16:10:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414378684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414378684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414383643",
      "pull_request_review_id": 3315588315,
      "id": 2414383643,
      "node_id": "PRRC_kwDOABII586P6JIb",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    /**\n+     * @brief Submit a new task for asynchronous execution.\n+     *\n+     * Enqueues a callable to be executed by one of the worker threads.\n+     * Returns a `std::future` that can be used to retrieve the task’s result.\n+     */\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            if (m_workers.empty() || m_interrupt) {",
      "path": "src/util/threadpool.h",
      "position": 157,
      "original_position": 151,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3c4c3cbe09061088d2649b6bfadacaeed49a6ed6",
      "in_reply_to_id": 2414369729,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> These 2 checks are redundant since they are both set atomically. Should just pick one for clarity.\r\n\r\nNot really. What if the `ThreadPool` was just constructed but not started? Only using `m_interrupt` here would allow submission when there are no workers.",
      "created_at": "2025-10-08T16:12:11Z",
      "updated_at": "2025-10-08T16:12:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414383643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414383643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414403520",
      "pull_request_review_id": 3315617981,
      "id": 2414403520,
      "node_id": "PRRC_kwDOABII586P6N_A",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    /**\n+     * @brief Submit a new task for asynchronous execution.\n+     *\n+     * Enqueues a callable to be executed by one of the worker threads.\n+     * Returns a `std::future` that can be used to retrieve the task’s result.\n+     */\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            if (m_workers.empty() || m_interrupt) {",
      "path": "src/util/threadpool.h",
      "position": 157,
      "original_position": 151,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3c4c3cbe09061088d2649b6bfadacaeed49a6ed6",
      "in_reply_to_id": 2414369729,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right, m_interrupt should be initialized to true.",
      "created_at": "2025-10-08T16:20:11Z",
      "updated_at": "2025-10-08T16:20:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414403520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414403520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414422774",
      "pull_request_review_id": 3315643853,
      "id": 2414422774,
      "node_id": "PRRC_kwDOABII586P6Sr2",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        // m_interrupt is left true until next Start()\n+    }\n+\n+    /**\n+     * @brief Submit a new task for asynchronous execution.\n+     *\n+     * Enqueues a callable to be executed by one of the worker threads.\n+     * Returns a `std::future` that can be used to retrieve the task’s result.\n+     */\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            if (m_workers.empty() || m_interrupt) {",
      "path": "src/util/threadpool.h",
      "position": 157,
      "original_position": 151,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3c4c3cbe09061088d2649b6bfadacaeed49a6ed6",
      "in_reply_to_id": 2414369729,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Actually, we must use worker count check. Since we can Start with 0 worker threads but still set interrupt to false, so this would deadlock with only the interrupt check.\r\n> Maybe guard against starting with 0 threads and then pick either?\r\n\r\nI'm tempted to leave it as is, mainly because we might want to add `Interrupt()` and `Resume()` methods in the future that don't kill the worker threads. We might want to clear the queue due to an early failure in one of our tasks without having to recreate the threads.\r\n",
      "created_at": "2025-10-08T16:28:32Z",
      "updated_at": "2025-10-08T16:28:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2414422774",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2414422774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2421835077",
      "pull_request_review_id": 3325595624,
      "id": 2421835077,
      "node_id": "PRRC_kwDOABII586QWkVF",
      "diff_hunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        assert(num_workers > 0);\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        {\n+            // Sanity cleanup: release any std::function captured shared_ptrs\n+            LOCK(m_mutex);\n+            std::queue<std::function<void()>> empty;",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 138,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't understand the need for the sanity cleanup. Shouldn't the logic from `WorkerThread` guarantee that `m_work_queue` is empty at this point, so that we could just assert that here?",
      "created_at": "2025-10-10T19:22:49Z",
      "updated_at": "2025-10-10T21:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2421835077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2421835077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422034019",
      "pull_request_review_id": 3325595624,
      "id": 2422034019,
      "node_id": "PRRC_kwDOABII586QXU5j",
      "diff_hunk": "@@ -0,0 +1,266 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+constexpr auto TIMEOUT_SECS = std::chrono::seconds(120);\n+\n+template <typename T>\n+void WaitFor(const std::vector<std::future<T>>& futures, const std::string& context)\n+{\n+    for (size_t i = 0; i < futures.size(); ++i) {\n+        if (futures[i].wait_for(TIMEOUT_SECS) != std::future_status::ready) {\n+            throw std::runtime_error(\"Timeout waiting for: \" + context + \", task index \" + util::ToString(i));\n+        }\n+    }\n+}\n+\n+// Block a number of worker threads by submitting tasks that wait on `blocker_future`.\n+// Returns the futures of the blocking tasks, ensuring all have started and are waiting.\n+std::vector<std::future<void>> BlockWorkers(ThreadPool& threadPool, std::shared_future<void>& blocker_future, int num_of_threads_to_block, const std::string& context) {\n+    // Per-thread ready promises to ensure all workers are actually blocked\n+    std::vector<std::promise<void>> ready_promises(num_of_threads_to_block);\n+    std::vector<std::future<void>> ready_futures;\n+    ready_futures.reserve(num_of_threads_to_block);\n+    for (auto& p : ready_promises) ready_futures.emplace_back(p.get_future());\n+\n+    // Fill all workers with blocking tasks\n+    std::vector<std::future<void>> blocking_tasks;\n+    for (int i = 0; i < num_of_threads_to_block; i++) {\n+        std::promise<void>& ready = ready_promises[i];\n+        blocking_tasks.emplace_back(threadPool.Submit([blocker_future, &ready]() {\n+            ready.set_value();\n+            blocker_future.wait();\n+        }));\n+    }\n+\n+    // Wait until all threads are actually blocked\n+    WaitFor(ready_futures, context);\n+    return blocking_tasks;\n+}\n+\n+BOOST_AUTO_TEST_CASE(threadpool_basic)\n+{\n+    // Test Cases\n+    // 1) Submit tasks and verify completion.",
      "path": "src/test/threadpool_tests.cpp",
      "position": 52,
      "original_position": 51,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could add Test case 0) in the description",
      "created_at": "2025-10-10T20:33:58Z",
      "updated_at": "2025-10-10T21:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2422034019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422034019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422052807",
      "pull_request_review_id": 3325595624,
      "id": 2422052807,
      "node_id": "PRRC_kwDOABII586QXZfH",
      "diff_hunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        assert(num_workers > 0);\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        {\n+            // Sanity cleanup: release any std::function captured shared_ptrs\n+            LOCK(m_mutex);\n+            std::queue<std::function<void()>> empty;\n+            m_work_queue.swap(empty);\n+        }\n+        // Note: m_interrupt is left true until next Start()\n+    }\n+\n+    /**\n+     * @brief Submit a new task for asynchronous execution.\n+     *\n+     * Enqueues a callable to be executed by one of the worker threads.\n+     * Returns a `std::future` that can be used to retrieve the task’s result.\n+     */\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));\n+        std::future<decltype(task())> future = ptr_task->get_future();\n+        {\n+            LOCK(m_mutex);\n+            if (m_workers.empty() || m_interrupt) {\n+                throw std::runtime_error(\"No active workers; cannot accept new tasks\");\n+            }\n+            m_work_queue.emplace([ptr_task]() mutable {\n+                (*ptr_task)();\n+                ptr_task.reset(); // Explicitly release packaged_task and the stored function obj.\n+            });\n+        }\n+        m_cv.notify_one();\n+        return future;\n+    }\n+\n+    /**\n+     * @brief Execute a single queued task synchronously.\n+     * Removes one task from the queue and executes it on the calling thread.\n+     */\n+    void ProcessTask() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)",
      "path": "src/util/threadpool.h",
      "position": 170,
      "original_position": 174,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this meant to be used by tests only, or are there possible other use cases? If it's the latter, it might be helpful to return a bool that indicates whether a task was executed or not (empty queue).",
      "created_at": "2025-10-10T20:45:41Z",
      "updated_at": "2025-10-10T21:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2422052807",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422052807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 170,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422078863",
      "pull_request_review_id": 3325595624,
      "id": 2422078863,
      "node_id": "PRRC_kwDOABII586QXf2P",
      "diff_hunk": "@@ -2252,7 +2259,19 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > MAX_INDEX_WORKERS_COUNT) return InitError(Untranslated(strprintf(\"Invalid -indexworkers arg. Must be a number between 0 and %d\", MAX_INDEX_WORKERS_COUNT)));",
      "path": "src/init.cpp",
      "position": 45,
      "original_position": 45,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0d7ae26ea4053562960e10be13ccc249bb3d99f3",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`-indexworkers=0` is allowed according to the doc, but it will trigger the assert `num_workers > 0` in the `ThreadPool`. Shouldn't create a `ThreadPool` in this case.",
      "created_at": "2025-10-10T21:00:57Z",
      "updated_at": "2025-10-10T21:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2422078863",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422078863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2264,
      "original_line": 2264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422090129",
      "pull_request_review_id": 3325931655,
      "id": 2422090129,
      "node_id": "PRRC_kwDOABII586QXimR",
      "diff_hunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        assert(num_workers > 0);\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        {\n+            // Sanity cleanup: release any std::function captured shared_ptrs\n+            LOCK(m_mutex);\n+            std::queue<std::function<void()>> empty;\n+            m_work_queue.swap(empty);\n+        }\n+        // Note: m_interrupt is left true until next Start()\n+    }\n+\n+    /**\n+     * @brief Submit a new task for asynchronous execution.\n+     *\n+     * Enqueues a callable to be executed by one of the worker threads.\n+     * Returns a `std::future` that can be used to retrieve the task’s result.\n+     */\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 154,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: introduce general purpose thread pool\" (3943630a4cea56b040377b33476803745055510c)\r\n\r\nWould be nice to avoid shared_ptr here. Apparently it is needed because std::function objects are required to be copyable and packaged tasks aren't copyable. Could fix this by avoiding std::function which would also simplify the Submit() function:\r\n\r\n<details><summary>diff</summary>\r\n<p>\r\n\r\n```diff\r\n--- a/src/util/threadpool.h\r\n+++ b/src/util/threadpool.h\r\n@@ -47,7 +47,7 @@ class ThreadPool {\r\n private:\r\n     std::string m_name;\r\n     Mutex m_mutex;\r\n-    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\r\n+    std::queue<std::packaged_task<void()>> m_work_queue GUARDED_BY(m_mutex);\r\n     std::condition_variable m_cv;\r\n     // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\r\n     // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\r\n@@ -59,7 +59,7 @@ private:\r\n     {\r\n         WAIT_LOCK(m_mutex, wait_lock);\r\n         for (;;) {\r\n-            std::function<void()> task;\r\n+            std::packaged_task<void()> task;\r\n             {\r\n                 // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\r\n                 if (!m_interrupt && m_work_queue.empty()) {\r\n@@ -135,7 +135,7 @@ public:\r\n         {\r\n             // Sanity cleanup: release any std::function captured shared_ptrs\r\n             LOCK(m_mutex);\r\n-            std::queue<std::function<void()>> empty;\r\n+            std::queue<std::packaged_task<void()>> empty;\r\n             m_work_queue.swap(empty);\r\n         }\r\n         // Note: m_interrupt is left true until next Start()\r\n@@ -147,21 +147,17 @@ public:\r\n      * Enqueues a callable to be executed by one of the worker threads.\r\n      * Returns a `std::future` that can be used to retrieve the task’s result.\r\n      */\r\n-    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\r\n-    auto Submit(T task) -> std::future<decltype(task())>\r\n+    template<class F> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\r\n+    auto Submit(F&& fn)\r\n     {\r\n-        using TaskType = std::packaged_task<decltype(task())()>;\r\n-        auto ptr_task = std::make_shared<TaskType>(std::move(task));\r\n-        std::future<decltype(task())> future = ptr_task->get_future();\r\n+        std::packaged_task task{std::forward<F>(fn)};\r\n+        auto future{task.get_future()};\r\n         {\r\n             LOCK(m_mutex);\r\n             if (m_workers.empty() || m_interrupt) {\r\n                 throw std::runtime_error(\"No active workers; cannot accept new tasks\");\r\n             }\r\n-            m_work_queue.emplace([ptr_task]() mutable {\r\n-                (*ptr_task)();\r\n-                ptr_task.reset(); // Explicitly release packaged_task and the stored function obj.\r\n-            });\r\n+            m_work_queue.emplace(std::move(task));\r\n         }\r\n         m_cv.notify_one();\r\n         return future;\r\n@@ -173,7 +169,7 @@ public:\r\n      */\r\n     void ProcessTask() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\r\n     {\r\n-        std::function<void()> task;\r\n+        std::packaged_task<void()> task;\r\n         {\r\n             LOCK(m_mutex);\r\n             if (m_work_queue.empty()) return;\r\n```\r\n</p>\r\n</details>",
      "created_at": "2025-10-10T21:08:50Z",
      "updated_at": "2025-10-10T21:08:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2422090129",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422090129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422124854",
      "pull_request_review_id": 3325981490,
      "id": 2422124854,
      "node_id": "PRRC_kwDOABII586QXrE2",
      "diff_hunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        assert(num_workers > 0);\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        {\n+            // Sanity cleanup: release any std::function captured shared_ptrs\n+            LOCK(m_mutex);\n+            std::queue<std::function<void()>> empty;\n+            m_work_queue.swap(empty);",
      "path": "src/util/threadpool.h",
      "position": 139,
      "original_position": 139,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: introduce general purpose thread pool\" (3943630a4cea56b040377b33476803745055510c)\r\n\r\nI'm a little unclear what this swap is trying to do. I would expect the point of swapping into a temporary vector would be to destroy the callables without holding m_mutex (since they could own resources and take time to destroy). But it looks like the `empty` vector is destroyed while `m_mutex` is still locked, so that isn't happening. Also I don't understand why `m_mutex` is locked twice in this function with a notify in between. I would expect it to look more like:\r\n\r\n```c++\r\nvoid Stop()\r\n{\r\n    std::vector<std::thread> threads_to_join;\r\n    std::queue<std::function<void()>> callables;\r\n    LOCK(m_mutex);\r\n    m_interrupt = true;\r\n    threads_to_join.swap(m_workers);\r\n    callables.swap(m_work_queue);\r\n    m_cv.notify_all();\r\n}\r\n```",
      "created_at": "2025-10-10T21:29:17Z",
      "updated_at": "2025-10-10T21:29:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2422124854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422124854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": 137,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422946155",
      "pull_request_review_id": 3327310902,
      "id": 2422946155,
      "node_id": "PRRC_kwDOABII586Qazlr",
      "diff_hunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        assert(num_workers > 0);\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        {\n+            // Sanity cleanup: release any std::function captured shared_ptrs\n+            LOCK(m_mutex);\n+            std::queue<std::function<void()>> empty;\n+            m_work_queue.swap(empty);\n+        }\n+        // Note: m_interrupt is left true until next Start()\n+    }\n+\n+    /**\n+     * @brief Submit a new task for asynchronous execution.\n+     *\n+     * Enqueues a callable to be executed by one of the worker threads.\n+     * Returns a `std::future` that can be used to retrieve the task’s result.\n+     */\n+    template<class T> EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    auto Submit(T task) -> std::future<decltype(task())>\n+    {\n+        using TaskType = std::packaged_task<decltype(task())()>;\n+        auto ptr_task = std::make_shared<TaskType>(std::move(task));",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 154,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": 2422090129,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ha, that's awesome. The queue's `std::packaged_task<void()>` change broke my mind because the task has obviously a different return value..\r\nI see the trick now, it seems the `packaged_task<R()>` is wrapped into another `packaged_task<void()>` which forwards the call internally. That's elegant.",
      "created_at": "2025-10-11T15:14:05Z",
      "updated_at": "2025-10-11T15:14:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2422946155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422946155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423172535",
      "pull_request_review_id": 3327639483,
      "id": 2423172535,
      "node_id": "PRRC_kwDOABII586Qbq23",
      "diff_hunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        assert(num_workers > 0);\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        {\n+            // Sanity cleanup: release any std::function captured shared_ptrs\n+            LOCK(m_mutex);\n+            std::queue<std::function<void()>> empty;\n+            m_work_queue.swap(empty);",
      "path": "src/util/threadpool.h",
      "position": 139,
      "original_position": 139,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": 2422124854,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I'm a little unclear what this swap is trying to do.\r\n> Also I don't understand why m_mutex is locked twice in this function with a notify in between\r\n\r\nThe idea behind the swap was more about ensuring the queue is empty after joining the threads, mainly to avoid any lingering future that would block callers indefinitely. That's why I used the \"sanity\" wording there.\r\nI did it after joining the threads because we’re currently waiting for all pending tasks to complete before stopping the worker loop. If we cleaned the queue prior to joining, all futures would throw a `future_error` - which could be fine too, but we’d probably want to throw something different, like a custom `TaskInterruptedException`, and adapt the submitter code to handle possible interruptions.\r\n\r\nA bit more context, I added this sanity swap after finding https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2411949367. But it is not really necessary anymore with the latest changes. Could also just drop it.\r\n\r\n> I would expect the point of swapping into a temporary vector would be to destroy the callables without holding m_mutex (since they could own resources and take time to destroy)\r\n\r\nThat's an overseen, yeah. Thanks!",
      "created_at": "2025-10-11T22:17:46Z",
      "updated_at": "2025-10-11T22:33:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2423172535",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423172535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": 137,
      "original_start_line": 137,
      "start_side": "RIGHT",
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423193226",
      "pull_request_review_id": 3327665476,
      "id": 2423193226,
      "node_id": "PRRC_kwDOABII586Qbv6K",
      "diff_hunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {\n+\n+private:\n+    std::string m_name;\n+    Mutex m_mutex;\n+    std::queue<std::function<void()>> m_work_queue GUARDED_BY(m_mutex);\n+    std::condition_variable m_cv;\n+    // Note: m_interrupt must be modified while holding the same mutex used by threads waiting on the condition variable.\n+    // This ensures threads blocked on m_cv reliably observe the change and proceed correctly without missing signals.\n+    // Ref: https://en.cppreference.com/w/cpp/thread/condition_variable\n+    bool m_interrupt GUARDED_BY(m_mutex){false};\n+    std::vector<std::thread> m_workers GUARDED_BY(m_mutex);\n+\n+    void WorkerThread() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        WAIT_LOCK(m_mutex, wait_lock);\n+        for (;;) {\n+            std::function<void()> task;\n+            {\n+                // Wait only if needed; avoid sleeping when a new task was submitted while we were processing another one.\n+                if (!m_interrupt && m_work_queue.empty()) {\n+                    // Block until the pool is interrupted or a task is available.\n+                    m_cv.wait(wait_lock,[&]() EXCLUSIVE_LOCKS_REQUIRED(m_mutex) { return m_interrupt || !m_work_queue.empty(); });\n+                }\n+\n+                // If stopped and no work left, exit worker\n+                if (m_interrupt && m_work_queue.empty()) {\n+                    return;\n+                }\n+\n+                task = std::move(m_work_queue.front());\n+                m_work_queue.pop();\n+            }\n+\n+            {\n+                // Execute the task without the lock\n+                REVERSE_LOCK(wait_lock, m_mutex);\n+                task();\n+            }\n+        }\n+    }\n+\n+public:\n+    explicit ThreadPool(const std::string& name) : m_name(name) {}\n+\n+    ~ThreadPool()\n+    {\n+        Stop(); // In case it hasn't been stopped.\n+    }\n+\n+    /**\n+     * @brief Start worker threads.\n+     *\n+     * Creates and launches `num_workers` threads that begin executing tasks\n+     * from the queue. If the pool is already started, throws.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Start(int num_workers) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        assert(num_workers > 0);\n+        LOCK(m_mutex);\n+        if (!m_workers.empty()) throw std::runtime_error(\"Thread pool already started\");\n+        m_interrupt = false; // Reset\n+\n+        // Create workers\n+        for (int i = 0; i < num_workers; i++) {\n+            m_workers.emplace_back(&util::TraceThread, m_name + \"_pool_\" + util::ToString(i), [this] { WorkerThread(); });\n+        }\n+    }\n+\n+    /**\n+     * @brief Stop all worker threads and wait for them to exit.\n+     *\n+     * Sets the interrupt flag, wakes all waiting workers, and joins them.\n+     * Any remaining tasks in the queue will be processed before returning.\n+     *\n+     * Must be called from a controller (non-worker) thread.\n+     */\n+    void Stop() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        // Notify workers and join them.\n+        std::vector<std::thread> threads_to_join;\n+        {\n+            LOCK(m_mutex);\n+            m_interrupt = true;\n+            threads_to_join.swap(m_workers);\n+        }\n+        m_cv.notify_all();\n+        for (auto& worker : threads_to_join) worker.join();\n+        {\n+            // Sanity cleanup: release any std::function captured shared_ptrs\n+            LOCK(m_mutex);\n+            std::queue<std::function<void()>> empty;",
      "path": "src/util/threadpool.h",
      "position": 1,
      "original_position": 138,
      "commit_id": "aa9cf5db0dce0e5982f69857070c9f2a30fcf095",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": 2421835077,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't understand the need for the sanity cleanup. Shouldn't the logic from `WorkerThread` guarantee that `m_work_queue` is empty at this point, so that we could just assert that here?\r\n\r\nYeah, right now it is not really necessary. Have explained the context and the rationale here: https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2423172535",
      "created_at": "2025-10-11T22:35:05Z",
      "updated_at": "2025-10-11T22:35:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2423193226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423193226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423212929",
      "pull_request_review_id": 3327692369,
      "id": 2423212929,
      "node_id": "PRRC_kwDOABII586Qb0uB",
      "diff_hunk": "@@ -2252,7 +2259,19 @@ bool StartIndexBackgroundSync(NodeContext& node)\n         }\n     }\n \n+    if (node.args->IsArgSet(\"-indexworkers\")) {\n+        int index_workers = node.args->GetIntArg(\"-indexworkers\", INDEX_WORKERS_COUNT);\n+        if (index_workers < 0 || index_workers > MAX_INDEX_WORKERS_COUNT) return InitError(Untranslated(strprintf(\"Invalid -indexworkers arg. Must be a number between 0 and %d\", MAX_INDEX_WORKERS_COUNT)));",
      "path": "src/init.cpp",
      "position": 45,
      "original_position": 45,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "0d7ae26ea4053562960e10be13ccc249bb3d99f3",
      "in_reply_to_id": 2422078863,
      "user": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nice catch. Fixed.",
      "created_at": "2025-10-11T23:37:56Z",
      "updated_at": "2025-10-11T23:37:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2423212929",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423212929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2264,
      "original_line": 2264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423291668",
      "pull_request_review_id": 2965376357,
      "id": 2423291668,
      "node_id": "PRRC_kwDOABII586QcH8U",
      "diff_hunk": "@@ -0,0 +1,266 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+constexpr auto TIMEOUT_SECS = std::chrono::seconds(120);",
      "path": "src/test/threadpool_tests.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: since it's strongly typed we don't need to include the type name in the variable anymore",
      "created_at": "2025-10-12T02:30:11Z",
      "updated_at": "2025-10-12T20:51:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2423291668",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423291668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2424805627",
      "pull_request_review_id": 2965376357,
      "id": 2424805627,
      "node_id": "PRRC_kwDOABII586Qh5j7",
      "diff_hunk": "@@ -0,0 +1,199 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREADPOOL_H\n+#define BITCOIN_UTIL_THREADPOOL_H\n+\n+#include <sync.h>\n+#include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadinterrupt.h>\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <condition_variable>\n+#include <cstddef>\n+#include <functional>\n+#include <future>\n+#include <memory>\n+#include <stdexcept>\n+#include <utility>\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * @brief Fixed-size thread pool for running arbitrary tasks concurrently.\n+ *\n+ * The thread pool maintains a set of worker threads that consume and execute\n+ * tasks submitted through Submit(). Once started, tasks can be queued and\n+ * processed asynchronously until Stop() is called.\n+ *\n+ * ### Thread-safety and lifecycle\n+ * - `Start()` and `Stop()` must be called from a controller (non-worker) thread.\n+ *   Calling `Stop()` from a worker thread will deadlock, as it waits for all\n+ *   workers to join, including the current one.\n+ *\n+ * - `Submit()` can be called from any thread, including workers. It safely\n+ *   enqueues new work for execution as long as the pool has active workers.\n+ *\n+ * - `Stop()` prevents further task submission and wakes all worker threads.\n+ *   Workers finish processing all remaining queued tasks before exiting,\n+ *   guaranteeing that no caller waits forever on a pending future.\n+ */\n+class ThreadPool {",
      "path": "src/util/threadpool.h",
      "position": 45,
      "original_position": 45,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it might be clearer if this commit came later in the series, after the groundwork is established. In my experience, it's often easier to review when the problem definition is presented before the solution.\r\n\r\nAs it stands, this commit introduces code whose purpose isn't immediately clear without reading ahead to future commits. \r\n\r\nI'd like to echo the concern other reviewers raised about separating the thread pool from the script parallelization work. Since script parallelization is already quite complex, would you consider starting with a simpler 2-threaded implementation in this PR, and introducing the general-purpose thread pool in a separate PR? \r\n\r\nGiven the review bandwidth challenges this PR has faced over the years, breaking it into smaller, more focused pieces might help reviewers feel more confident providing ACKs.",
      "created_at": "2025-10-12T19:32:56Z",
      "updated_at": "2025-10-12T20:51:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2424805627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2424805627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2424838828",
      "pull_request_review_id": 2965376357,
      "id": 2424838828,
      "node_id": "PRRC_kwDOABII586QiBqs",
      "diff_hunk": "@@ -29,13 +29,19 @@ class TxIndex final : public BaseIndex\n \n     BaseIndex::DB& GetDB() const override;\n \n+    std::any CustomProcessBlock(const interfaces::BlockInfo& block) override {\n+        return CustomAppend(block);",
      "path": "src/index/txindex.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "7868fae75d9b0fd721e32af9735152e822cab9c3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "based on my benchmarks on various platforms it seems this isn't speeding up txindex - was this measured by anyone?\r\n",
      "created_at": "2025-10-12T19:45:54Z",
      "updated_at": "2025-10-12T20:51:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2424838828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2424838828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2424865671",
      "pull_request_review_id": 2965376357,
      "id": 2424865671,
      "node_id": "PRRC_kwDOABII586QiIOH",
      "diff_hunk": "@@ -0,0 +1,266 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/string.h>\n+#include <util/threadpool.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(threadpool_tests)\n+\n+constexpr auto TIMEOUT_SECS = std::chrono::seconds(120);\n+\n+template <typename T>\n+void WaitFor(const std::vector<std::future<T>>& futures, const std::string& context)\n+{\n+    for (size_t i = 0; i < futures.size(); ++i) {\n+        if (futures[i].wait_for(TIMEOUT_SECS) != std::future_status::ready) {\n+            throw std::runtime_error(\"Timeout waiting for: \" + context + \", task index \" + util::ToString(i));\n+        }\n+    }\n+}",
      "path": "src/test/threadpool_tests.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3943630a4cea56b040377b33476803745055510c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to me we can loosen the args and avoid string concat:\r\n```suggestion\r\ntemplate <typename T>\r\nvoid WaitFor(std::span<const std::future<T>> futures, std::string_view context)\r\n{\r\n    for (size_t i = 0; i < futures.size(); ++i) {\r\n        if (futures[i].wait_for(TIMEOUT_SECS) != std::future_status::ready) {\r\n            throw std::runtime_error(strprintf(\"Timeout waiting for: %s, task index %d\", context, i));\r\n        }\r\n    }\r\n}\r\n```",
      "created_at": "2025-10-12T19:57:41Z",
      "updated_at": "2025-10-12T20:51:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2424865671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2424865671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": 14,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": 22,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2424874997",
      "pull_request_review_id": 2965376357,
      "id": 2424874997,
      "node_id": "PRRC_kwDOABII586QiKf1",
      "diff_hunk": "@@ -168,87 +170,292 @@ bool BaseIndex::ProcessBlock(const CBlockIndex* pindex, const CBlock* block_data\n         if (pindex->nHeight > 0 && !m_chainstate->m_blockman.ReadBlockUndo(block_undo, *pindex)) {\n             FatalErrorf(\"Failed to read undo block data %s from disk\",\n                         pindex->GetBlockHash().ToString());\n-            return false;\n+            return {};\n         }\n         block_info.undo_data = &block_undo;\n     }\n \n-    if (!CustomAppend(block_info)) {\n-        FatalErrorf(\"Failed to write block %s to index database\",\n-                    pindex->GetBlockHash().ToString());\n-        return false;\n+    const auto& any_obj = CustomProcessBlock(block_info);\n+    if (!any_obj.has_value()) {\n+        FatalErrorf(\"Failed to process block %s for index %s\",\n+                    pindex->GetBlockHash().GetHex(), GetName());\n+        return {};\n     }\n+    return any_obj;\n+}\n \n-    return true;\n+std::vector<std::any> BaseIndex::ProcessBlocks(bool process_in_order, const CBlockIndex* start, const CBlockIndex* end)",
      "path": "src/index/base.cpp",
      "position": 58,
      "original_position": 58,
      "commit_id": "201a90f03431708933040b3ba56aecd951db845e",
      "original_commit_id": "3087bd1ef1e9f85bf6a0b7c24be650f77a6c030a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "3087bd1ef1e9f85bf6a0b7c24be650f77a6c030a\r\n\r\nI'm finding this commit difficult to review in depth due to its complexity. Like before, I'm seeing the solution (out-of-order processing with task tracking and opportunistic post-processing) before experiencing the problem it solves.\r\n\r\nCould we break this down into focused, trivial commits, where low-risk changes are separated from high-risk ones and where the commits tell a story, where the pain is experienced before we propose a solution.",
      "created_at": "2025-10-12T20:05:18Z",
      "updated_at": "2025-10-12T20:51:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26966#discussion_r2424874997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2424874997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26966"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    }
  ]
}
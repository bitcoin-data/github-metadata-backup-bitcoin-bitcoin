{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324",
    "id": 2803909911,
    "node_id": "PR_kwDOABII586nIEUX",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33324",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33324.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33324.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78",
    "number": 33324,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "blocks: add `-reobfuscate-blocks` arg to xor existing blk/rev on startup",
    "user": {
      "login": "l0rinc",
      "id": 1841944,
      "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l0rinc",
      "html_url": "https://github.com/l0rinc",
      "followers_url": "https://api.github.com/users/l0rinc/followers",
      "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
      "organizations_url": "https://api.github.com/users/l0rinc/orgs",
      "repos_url": "https://api.github.com/users/l0rinc/repos",
      "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/l0rinc/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "### Context\r\n\r\nRecent discussions highlighted that many nodes which synced before Bitcoin Core v28 have their block and undo files stored effectively in the clear (zero XOR key). This patch adds a simple, resumable maintenance tool to obfuscate previously raw block files, rotate an existing key to a fresh random one, or de-obfuscate (set key to zero) if consciously chosen, all without requiring resync. The operation can be cancelled and restarted safely.\r\n\r\n### Implementation\r\n\r\nThe new startup option `-reobfuscate-blocks[=VALUE]` accepts either 16 hex characters as an exact 8-byte XOR key (little-endian in-memory layout) or a boolean to generate a random 64-bit key. e.g. `-reobfuscate-blocks=0000000000000000` sets the key to zero, effectively removing obfuscation.\r\n\r\nIf we detect unobfuscated blocks at start time we suggest this new option in a warning.\r\n\r\nAt startup, we iterate over all undo and block files (grouping the block and undo files for more uniform iteration), read them with the old XOR key and write them back with the new key (`<name>.reobfuscated`). The implementation actually combines the two keys and reads directly into the new obfuscated version to only do a single iteration over the data. This works if the original blocks aren't obfuscated or if the new blocks aren't or if both are.\r\nAfter successful write, we immediately delete the old file. Once all files are staged, we rename them back and atomically swap `xor.dat.reobfuscated` â†’ `xor.dat` and continue operation.\r\n\r\nWe log the old and new keys and print progress roughly per-percent as files complete (i.e. max 100 progress logs).\r\n\r\n### Constraints\r\n\r\n* Re-obfuscation resumes automatically (detected via `xor.dat.reobfuscated`) even without the flag. In worst-case a crash should only force us to redo previous work.\r\n* Single-threaded, processing one file at a time to keep code simple and avoid complexity of interleaving renames and key swaps across threads.\r\n* Fast in practice with sequential read/modify/write per blockfile - after recent obfuscation vectorization, this path is very quick.\r\n\r\n### Reproducer\r\n\r\n```bash\r\ncmake -B build -DENABLE_IPC=ON -DBUILD_GUI=ON\r\ncmake --build build -j$(nproc)\r\n# command line\r\n./build/bin/bitcoind -reobfuscate-blocks -stopatheight=1\r\n# same with GUI\r\n./build/bin/bitcoin-qt -reobfuscate-blocks -stopatheight=1\r\n```\r\n\r\n### Single-threaded Performance\r\n\r\n cpu                 | hdd/ssd | block count | size    | files  | time (min) | blocks/min \r\n---------------------|---------|-------------|---------|--------|------------|------------\r\n Apple M4 Max laptop | SSD     | ~909k       | ~707 GB | 9,982  | 8.4        | 146,613    \r\n Intel Core i9       | SSD     | ~909k       | ~725 GB | 10,238 | 23.1       | 39,351     \r\n Raspberry Pi 5      | SSD     | ~914k       | ~728 GB | 10,276 | 72.78      | 12,558     \r\n Intel Core i7       | HDD     | ~909k       | ~720 GB | 10,156 | 208.7      | 4,356      \r\n Raspberry Pi 4B     | HDD     | ~915k       | ~730 GB | 10,304 | 1467       | 624        \r\n\r\n----\r\n\r\nSimilar work:\r\n\r\n* https://github.com/bitcoin/bitcoin/pull/32451\r\n* https://github.com/andrewtoth/blocks-xor\r\n",
    "labels": [],
    "created_at": "2025-09-05T23:51:29Z",
    "updated_at": "2025-10-15T14:54:45Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "1c3b466b2443de71ead416d1b71963d7e217cb43",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "l0rinc:l0rinc/reobfuscate-blocks",
      "ref": "l0rinc/reobfuscate-blocks",
      "sha": "86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 674169038,
        "node_id": "R_kgDOKC8Azg",
        "name": "bitcoin",
        "full_name": "l0rinc/bitcoin",
        "owner": {
          "login": "l0rinc",
          "id": 1841944,
          "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/l0rinc",
          "html_url": "https://github.com/l0rinc",
          "followers_url": "https://api.github.com/users/l0rinc/followers",
          "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
          "organizations_url": "https://api.github.com/users/l0rinc/orgs",
          "repos_url": "https://api.github.com/users/l0rinc/repos",
          "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/l0rinc/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/l0rinc/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/l0rinc/bitcoin",
        "archive_url": "https://api.github.com/repos/l0rinc/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/l0rinc/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/l0rinc/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/l0rinc/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/l0rinc/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/l0rinc/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/l0rinc/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/l0rinc/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/l0rinc/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/l0rinc/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/l0rinc/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/l0rinc/bitcoin/events",
        "forks_url": "https://api.github.com/repos/l0rinc/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/l0rinc/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/l0rinc/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/l0rinc/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/l0rinc/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/l0rinc/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/l0rinc/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/l0rinc/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/l0rinc/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/l0rinc/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/l0rinc/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/l0rinc/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/l0rinc/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:l0rinc/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/l0rinc/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/l0rinc/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/l0rinc/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/l0rinc/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/l0rinc/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/l0rinc/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/l0rinc/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/l0rinc/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/l0rinc/bitcoin/hooks",
        "svn_url": "https://github.com/l0rinc/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 274273,
        "default_branch": "master",
        "open_issues_count": 12,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-15T14:36:55Z",
        "created_at": "2023-08-03T09:49:12Z",
        "updated_at": "2025-10-14T18:31:30Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1ed00a0d39d5190d8ad88a0dd705a09b56d987aa",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38032,
        "stargazers_count": 86185,
        "watchers_count": 86185,
        "size": 294954,
        "default_branch": "master",
        "open_issues_count": 824,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-15T14:01:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-15T14:26:37Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 258,
    "deletions": 12,
    "changed_files": 10,
    "commits": 5,
    "review_comments": 14,
    "comments": 7
  },
  "events": [
    {
      "event": "commented",
      "id": 3260079778,
      "node_id": "IC_kwDOABII587CUN6i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3260079778",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T23:51:33Z",
      "updated_at": "2025-10-15T14:54:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33324.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3265136162), [stickies-v](https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3268176314) |\n\nIf your review is incorrectly listed, please react with ðŸ‘Ž to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31260](https://github.com/bitcoin/bitcoin/pull/31260) (scripted-diff: Type-safe settings retrieval by ryanofsky)\n* [#30342](https://github.com/bitcoin/bitcoin/pull/30342) (kernel, logging: Pass Logger instances to kernel objects by ryanofsky)\n* [#24230](https://github.com/bitcoin/bitcoin/pull/24230) (indexes: Stop using node internal types and locking cs_main, improve sync logic by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3260079778",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19538113689,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASMj_SZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19538113689",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bb5037256a67a3afeb4b68fa3abf8000df5db769",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/bb5037256a67a3afeb4b68fa3abf8000df5db769",
      "created_at": "2025-09-06T00:29:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19549057536,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASNNvIA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19549057536",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7df02ea3c79aa34587f87479f712a45ec32de24d",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/7df02ea3c79aa34587f87479f712a45ec32de24d",
      "created_at": "2025-09-07T04:59:28Z"
    },
    {
      "event": "subscribed",
      "id": 19551769326,
      "node_id": "SE_lADOABII587KAPIpzwAAAASNYFLu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19551769326",
      "actor": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-07T18:02:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19555460591,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASNmKXv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19555460591",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2933b17d17399fe6092f8294a97b6292f93f1384",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/2933b17d17399fe6092f8294a97b6292f93f1384",
      "created_at": "2025-09-08T04:44:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19555487633,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASNmQ-R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19555487633",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d3962f65fae0dd5452b46e187569000a5088f432",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/d3962f65fae0dd5452b46e187569000a5088f432",
      "created_at": "2025-09-08T04:47:19Z"
    },
    {
      "event": "commented",
      "id": 3265136162,
      "node_id": "IC_kwDOABII587CngYi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3265136162",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-08T08:21:29Z",
      "updated_at": "2025-09-08T08:21:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3265136162",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324"
    },
    {
      "event": "commented",
      "id": 3268176314,
      "node_id": "IC_kwDOABII587CzGm6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3268176314",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-08T22:06:31Z",
      "updated_at": "2025-09-08T22:06:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, this seems like useful functionality to expose.\r\n\r\n> Should we split ObfuscateBlocks out of init? I have split it into many local lambdas, but we may want to find better home for those methods...\r\n\r\nI don't like using startup options for one-time operations (I feel the same about e.g. `-reindex`). Without having thought it through too much yet, maybe we can bundle this e.g. as part of `bitcoin-util` or a separate `bitcoin-xor-blocks` utility?\r\n\r\n> Should we repurpose the existing -blocksxor arg instead?\r\n\r\nWith this PR, IIUC we'd have `-blocksxor`, `reobfuscate-blocks`, and the existence of the `xor.dat` file that all have some redundancy and thus potential for conflict (e,g. `blocksxor=0`, `reobfuscate-blocks=1`, and a non-zero `xor.dat` file). Reducing that complexity seems like it would be useful.\r\n",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3268176314",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324"
    },
    {
      "event": "labeled",
      "id": 19600862543,
      "node_id": "LE_lADOABII587KAPIpzwAAAASQTW1P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19600862543",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T23:39:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19603339740,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASQcznc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19603339740",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "created_at": "2025-09-10T03:17:32Z"
    },
    {
      "event": "unlabeled",
      "id": 19604015924,
      "node_id": "UNLE_lADOABII587KAPIpzwAAAASQfYs0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19604015924",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T04:10:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3208824857,
      "node_id": "PRR_kwDOABII586_QsgZ",
      "url": null,
      "actor": null,
      "commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-11T05:46:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Having it be a startup option like -reindex seems fine to me.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#pullrequestreview-3208824857",
      "submitted_at": "2025-09-11T05:46:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19650903793,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASTSP7x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19650903793",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/ffb022179936f958678d1c38e60b4b41ff493dcd",
      "created_at": "2025-09-12T03:55:27Z"
    },
    {
      "event": "commented",
      "id": 3290838371,
      "node_id": "IC_kwDOABII587EJjVj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3290838371",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T07:32:02Z",
      "updated_at": "2025-09-15T07:32:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "tidy wants emplace_back over push_back",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3290838371",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324"
    },
    {
      "event": "commented",
      "id": 3305066838,
      "node_id": "IC_kwDOABII587E_1FW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3305066838",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-18T01:29:22Z",
      "updated_at": "2025-09-18T01:29:22Z",
      "author_association": "MEMBER",
      "body": "I agree a separate utility for this seems better - this requires very little of the existing codebase, in theory.\r\n\r\nAlso suggest making the files with the same names, but in a new directory, and then atomically rename the directory when complete, rather than every single file.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3305066838",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324"
    },
    {
      "event": "commented",
      "id": 3305103297,
      "node_id": "IC_kwDOABII587E_9_B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3305103297",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-18T01:49:52Z",
      "updated_at": "2025-09-18T01:49:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I agree a separate utility for this seems better\r\n\r\nCan you quote what you're agreeing with specifically, not sure who suggested that.\r\nBesides, @andrewtoth already has a tool for that, it was mentioned in the PR description.\r\n\r\n> but in a new directory, and then atomically rename \r\n\r\nI will think about it, could make sense, but in that case unrelated files should also be copied over (maybe duplicated to be safe) - and listing the directory content wouldn't make the progress obvious. What's wrong with the current approach?",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3305103297",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324"
    },
    {
      "event": "mentioned",
      "id": 19763113795,
      "node_id": "MEE_lADOABII587KAPIpzwAAAASZ-S9D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19763113795",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-18T01:49:54Z"
    },
    {
      "event": "subscribed",
      "id": 19763113804,
      "node_id": "SE_lADOABII587KAPIpzwAAAASZ-S9M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19763113804",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-18T01:49:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19814651227,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASdC5Vb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19814651227",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9b8bf69cef802d15abd745929ff73f531312a85f",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/9b8bf69cef802d15abd745929ff73f531312a85f",
      "created_at": "2025-09-20T06:58:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19817916073,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASdPWap",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19817916073",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "94ae42646b8358d5a8c2bcc209323554d5f5bb51",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/94ae42646b8358d5a8c2bcc209323554d5f5bb51",
      "created_at": "2025-09-20T20:09:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19827451118,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASdzuTu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19827451118",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "af1d2ec33364980ed309591b041c1c079e39b07a",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/af1d2ec33364980ed309591b041c1c079e39b07a",
      "created_at": "2025-09-22T03:31:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19933179222,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASkHC1W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19933179222",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3afb11fa4882f9be5c6a77cd1076dac3bfa772a0",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/3afb11fa4882f9be5c6a77cd1076dac3bfa772a0",
      "created_at": "2025-09-26T03:29:32Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDczZDlkOWRiNzlhYWM3NTcxNWQxZTkxYzE0YTkxYTUxYzE3NGVhY2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73d9d9db79aac75715d1e91c14a91a51c174eacd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/73d9d9db79aac75715d1e91c14a91a51c174eacd",
      "tree": {
        "sha": "a1c2252e559d1820d3f33f6fd63f3d36698a9dc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1c2252e559d1820d3f33f6fd63f3d36698a9dc8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ed00a0d39d5190d8ad88a0dd705a09b56d987aa",
          "sha": "1ed00a0d39d5190d8ad88a0dd705a09b56d987aa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1ed00a0d39d5190d8ad88a0dd705a09b56d987aa"
        }
      ],
      "message": "refactor: inline constant `f_obfuscate = false` parameter",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T19:58:54Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-01T22:05:56Z"
      },
      "sha": "73d9d9db79aac75715d1e91c14a91a51c174eacd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJkYWQ3ZTgwOTUyMjY0NmZlMWRlNDBiMDMyMTZmNTdlY2NlOTk3ZGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dad7e809522646fe1de40b03216f57ecce997dd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2dad7e809522646fe1de40b03216f57ecce997dd",
      "tree": {
        "sha": "088333dcf7b86d6616046a7b275c1c6f767d4ae6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/088333dcf7b86d6616046a7b275c1c6f767d4ae6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73d9d9db79aac75715d1e91c14a91a51c174eacd",
          "sha": "73d9d9db79aac75715d1e91c14a91a51c174eacd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/73d9d9db79aac75715d1e91c14a91a51c174eacd"
        }
      ],
      "message": "refactor: add path + string and file removal helpers",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T19:58:54Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-05T22:47:35Z"
      },
      "sha": "2dad7e809522646fe1de40b03216f57ecce997dd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIwMzZlMTY0ZTJkNGIyMWE1M2ZlOGYyMTBmMTEwNDdlZjY1ODc5NTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b036e164e2d4b21a53fe8f210f11047ef6587951",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b036e164e2d4b21a53fe8f210f11047ef6587951",
      "tree": {
        "sha": "f0c0f1dfb97ec4f65fdb4dfb299c44401804515e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0c0f1dfb97ec4f65fdb4dfb299c44401804515e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dad7e809522646fe1de40b03216f57ecce997dd",
          "sha": "2dad7e809522646fe1de40b03216f57ecce997dd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2dad7e809522646fe1de40b03216f57ecce997dd"
        }
      ],
      "message": "init: add `-reobfuscate-blocks` argument",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T21:41:26Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-05T22:48:50Z"
      },
      "sha": "b036e164e2d4b21a53fe8f210f11047ef6587951"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY0OWJmYTQ1ZjUzM2U2MmZiMGFhMWVlMWJmZmEwYzIxYzJhODBjNGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/649bfa45f533e62fb0aa1ee1bffa0c21c2a80c4c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/649bfa45f533e62fb0aa1ee1bffa0c21c2a80c4c",
      "tree": {
        "sha": "2aaaa2993ed37b4591d1e30a89903545b29def6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aaaa2993ed37b4591d1e30a89903545b29def6c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b036e164e2d4b21a53fe8f210f11047ef6587951",
          "sha": "b036e164e2d4b21a53fe8f210f11047ef6587951",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b036e164e2d4b21a53fe8f210f11047ef6587951"
        }
      ],
      "message": "blocks: add `-reobfuscate-blocks` to xor existing blk/rev on startup\n\n### Context\n\nRecent discussions highlighted that many nodes which synced before Bitcoin Core v28 have their block and undo files stored effectively in the clear (zero XOR key). This patch adds a simple, resumable maintenance tool to obfuscate previously raw block files, rotate an existing key to a fresh random one, or deobfuscate (set key to zero) if consciously chosen, all without requiring resync. The operation can be cancelled and restarted safely.\n\n### Implementation\n\nThe new startup option `-reobfuscate-blocks[=VALUE]` accepts either 16 hex characters as an exact 8-byte XOR key (little-endian in-memory layout) or a boolean to generate a random 64-bit key. e.g. `-reobfuscate-blocks=0000000000000000` sets the key to zero, effectively removing obfuscation.\n\nIf we detect unobfuscated blocks at start time, we suggest this new option in a warning.\n\nAt startup, we iterate over all undo and block files (grouping the block and undo files for more uniform iteration), read them with the old XOR key and write them back with the new key (`<name>.reobfuscated`). The implementation actually combines the two keys and reads directly into the new obfuscated version to only do a single iteration over the data. This works if the original blocks aren't obfuscated or if the new blocks aren't or if both are.\nAfter successful write, we immediately delete the old file. Once all files are staged, we rename them back and atomically swap `xor.dat.reobfuscated` â†’ `xor.dat` and continue operation.\n\nWe log the old and new keys and print progress roughly per-percent as undo and block files complete (i.e. max 2 * 100 progress logs).\n\n### Constraints\n\n* Reobfuscation resumes automatically (detected via `xor.dat.reobfuscated`) even without the flag. In worst-case a crash should only force us to redo previous work.\n* Single-threaded, processing one file at a time to keep code simple and avoid complexity of interleaving renames and key swaps across threads.\n* Fast in practice with sequential read/modify/write per blockfile - after recent obfuscation vectorization, this path is very quick.\n\n### Reproducer\n\n```bash\ncmake -B build -DENABLE_IPC=ON -DBUILD_GUI=ON\ncmake --build build -j$(nproc)\n./build/bin/bitcoind -reobfuscate-blocks -stopatheight=1\n```\n\n### Single-threaded Performance\n\n cpu                 | hdd/ssd | block count | size    | files  | time (min) | blocks/min\n---------------------|---------|-------------|---------|--------|------------|------------\n Apple M4 Max laptop | SSD     | ~909k       | ~707 GB | 9,982  | 8.4        | 146,613\n Intel Core i9       | SSD     | ~909k       | ~725 GB | 10,238 | 23.1       | 39,351\n Raspberry Pi 5      | SSD     | ~914k       | ~728 GB | 10,276 | 72.78      | 12,558\n Intel Core i7       | HDD     | ~909k       | ~720 GB | 10,156 | 208.7      | 4,356\n Raspberry Pi 4B     | HDD     | ~915k       | ~730 GB | 10,304 | 1467       | 624\n\n-----\n\nSimilar work: #32451 and andrewtoth/blocks-xor\n\nCo-authored-by: Andrew Toth <andrewstoth@gmail.com>\nCo-authored-by: Murch <murch@murch.one>\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-03T00:52:04Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-05T23:21:22Z"
      },
      "sha": "649bfa45f533e62fb0aa1ee1bffa0c21c2a80c4c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg2YzVhZmMyOTQ4NTExYzBmNGRiM2Y3YmE0ZjI3ZjJkNjliNmVkNzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78",
      "tree": {
        "sha": "77dc3c9d2aa561f61d7e2a73b50100ae6f0a08e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77dc3c9d2aa561f61d7e2a73b50100ae6f0a08e0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/649bfa45f533e62fb0aa1ee1bffa0c21c2a80c4c",
          "sha": "649bfa45f533e62fb0aa1ee1bffa0c21c2a80c4c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/649bfa45f533e62fb0aa1ee1bffa0c21c2a80c4c"
        }
      ],
      "message": "gui: add kernel notifications for reobfuscation progress\n\n### Reproducer\n\n```bash\ncmake -B build -DENABLE_IPC=ON -DBUILD_GUI=ON\ncmake --build build -j$(nproc)\n./build/bin/bitcoin-qt -reobfuscate-blocks -stopatheight=1\n```\n\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-03T00:52:28Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T20:48:52Z"
      },
      "sha": "86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20071540756,
      "node_id": "HRFPE_lADOABII587KAPIpzwAAAASsW2gU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20071540756",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78",
      "created_at": "2025-10-03T00:59:37Z"
    },
    {
      "event": "commented",
      "id": 3363772867,
      "node_id": "IC_kwDOABII587IfxnD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3363772867",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-03T01:01:44Z",
      "updated_at": "2025-10-03T01:01:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added kernel notifications (thanks @ryanofsky) and improved crash resistance at the very last step (final rename back to old names) - try it out with `./build/bin/bitcoin-qt -reobfuscate-blocks -stopatheight=1`.\r\n<img width=500 src=\"https://github.com/user-attachments/assets/95b72e06-63fe-4057-989d-24ab9e93bfac\" />\r\n",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#issuecomment-3363772867",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33324"
    },
    {
      "event": "mentioned",
      "id": 20071563557,
      "node_id": "MEE_lADOABII587KAPIpzwAAAASsW8El",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20071563557",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-03T01:01:46Z"
    },
    {
      "event": "subscribed",
      "id": 20071563568,
      "node_id": "SE_lADOABII587KAPIpzwAAAASsW8Ew",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20071563568",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-03T01:01:46Z"
    },
    {
      "event": "ready_for_review",
      "id": 20071563923,
      "node_id": "RFRE_lADOABII587KAPIpzwAAAASsW8KT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20071563923",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-03T01:01:49Z"
    },
    {
      "event": "renamed",
      "id": 20071567523,
      "node_id": "RTE_lADOABII587KAPIpzwAAAASsW9Cj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20071567523",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-03T01:02:13Z",
      "rename": {
        "from": "RFC: blocks: add `-reobfuscate-blocks` arg to xor existing blk/rev on startup",
        "to": "blocks: add `-reobfuscate-blocks` arg to xor existing blk/rev on startup"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338593448",
      "pull_request_review_id": 3208824857,
      "id": 2338593448,
      "node_id": "PRRC_kwDOABII586LZBqo",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);\n+\n+        AutoFile new_blocks{fsbridge::fopen(file + suffix, \"wb\")};\n+        new_blocks.write_buffer(buf);\n+\n+        if (old_blocks.fclose() || !new_blocks.Commit() || new_blocks.fclose()) return false;\n+\n+        Assert(RemoveOver(file));\n+        return true;\n+    }};\n+\n+    // Start reobfuscation\n+    const auto start{SteadyClock::now()};\n+\n+    const auto delta_obfuscation{create_delta_obfuscation()};\n+    std::vector<std::byte> buf;\n+    buf.resize(node::MAX_BLOCKFILE_SIZE);\n+\n+    // Migrate undo and block files atomically\n+    for (const auto& [name, files] : {std::make_pair(\"undo\", collect_undo_files()),\n+                                      std::make_pair(\"block\", collect_block_files())}) {",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 99,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was surprised when it hit 100% of the undo files then restarted on the block files and was much slower -- might be better to do the slow files first, or ideally to do block and undo files intermixed so you just have a single 0% to 100% run.",
      "created_at": "2025-09-11T05:10:14Z",
      "updated_at": "2025-09-11T05:46:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2338593448",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338593448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338618798",
      "pull_request_review_id": 3208824857,
      "id": 2338618798,
      "node_id": "PRRC_kwDOABII586LZH2u",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);\n+\n+        AutoFile new_blocks{fsbridge::fopen(file + suffix, \"wb\")};\n+        new_blocks.write_buffer(buf);\n+\n+        if (old_blocks.fclose() || !new_blocks.Commit() || new_blocks.fclose()) return false;",
      "path": "src/init.cpp",
      "position": 101,
      "original_position": 84,
      "commit_id": "86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be good to try to reset the timestamp of new_blocks to match that of old_blocks here.\r\n\r\n```c++\r\n        // attempt to preserve timestamp\r\n        fs::last_write_time(file + suffix, fs::last_write_time(file));\r\n```",
      "created_at": "2025-09-11T05:22:07Z",
      "updated_at": "2025-09-11T05:46:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2338618798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338618798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1342,
      "original_line": 1342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338622414",
      "pull_request_review_id": 3208824857,
      "id": 2338622414,
      "node_id": "PRRC_kwDOABII586LZIvO",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Rather than reading the entire blockfile into memory at once, consider chunking it:\r\n\r\n```c++\r\n        size_t left = fs::file_size(file);\r\n        while (left > 0) {\r\n            size_t chunk = std::min<size_t>(left, 2 * MAX_BLOCK_SERIALIZED_SIZE);\r\n            buf.resize(chunk);\r\n            old_blocks.read(buf);\r\n            new_blocks.write_buffer(buf);\r\n            left -= chunk;\r\n        }\r\n```",
      "created_at": "2025-09-11T05:23:45Z",
      "updated_at": "2025-09-11T05:46:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2338622414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338622414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338660825",
      "pull_request_review_id": 3208824857,
      "id": 2338660825,
      "node_id": "PRRC_kwDOABII586LZSHZ",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This doesn't seem like it would work correctly with pruning, when blk0000.dat has been deleted?",
      "created_at": "2025-09-11T05:43:17Z",
      "updated_at": "2025-09-11T05:46:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2338660825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338660825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1295,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338680285",
      "pull_request_review_id": 3208948761,
      "id": 2338680285,
      "node_id": "PRRC_kwDOABII586LZW3d",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338622414,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We could do that with the recently introduced buffered readers - but that's considerably slower.\r\nIs it a problem to read all of it in memory when we don't even have `dbcache` yet? The total memory usage is just 160 MB during migration, we should be fine until 1 GB at least, right?",
      "created_at": "2025-09-11T05:49:50Z",
      "updated_at": "2025-09-11T05:49:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2338680285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338680285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338802041",
      "pull_request_review_id": 3209087659,
      "id": 2338802041,
      "node_id": "PRRC_kwDOABII586LZ0l5",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338622414,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think buffered readers is the right thing (that's for when you want to process small amounts of data while still reading it from the file in large chunks), and trying the above didn't seem particularly slow to me.\r\n\r\nI guess it could be simplified a bit to:\r\n\r\n```c++\r\nbuf.resize(2 * MAX_BLOCK_SERIALIZED_SIZE);\r\nwhile (true) {\r\n    size_t size = old_blocks.detail_fread(buf);\r\n    if (size == 0) break;\r\n    new_blocks.write_buffer(std::span(buf, 0, size));\r\n}\r\n```",
      "created_at": "2025-09-11T06:20:54Z",
      "updated_at": "2025-09-11T06:20:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2338802041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2338802041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342879651",
      "pull_request_review_id": 3214503416,
      "id": 2342879651,
      "node_id": "PRRC_kwDOABII586LpYGj",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);\n+\n+        AutoFile new_blocks{fsbridge::fopen(file + suffix, \"wb\")};\n+        new_blocks.write_buffer(buf);\n+\n+        if (old_blocks.fclose() || !new_blocks.Commit() || new_blocks.fclose()) return false;\n+\n+        Assert(RemoveOver(file));\n+        return true;\n+    }};\n+\n+    // Start reobfuscation\n+    const auto start{SteadyClock::now()};\n+\n+    const auto delta_obfuscation{create_delta_obfuscation()};\n+    std::vector<std::byte> buf;\n+    buf.resize(node::MAX_BLOCKFILE_SIZE);\n+\n+    // Migrate undo and block files atomically\n+    for (const auto& [name, files] : {std::make_pair(\"undo\", collect_undo_files()),\n+                                      std::make_pair(\"block\", collect_block_files())}) {",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 99,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338593448,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I had that version before, but didn't like that the small and big files made the percentages look unevenly spaced. But I have reverted that version and shuffled the files, this should make the progress feel more uniform - thank you for the observation!",
      "created_at": "2025-09-12T03:56:21Z",
      "updated_at": "2025-09-12T03:56:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2342879651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342879651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342880343",
      "pull_request_review_id": 3214504314,
      "id": 2342880343,
      "node_id": "PRRC_kwDOABII586LpYRX",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);\n+\n+        AutoFile new_blocks{fsbridge::fopen(file + suffix, \"wb\")};\n+        new_blocks.write_buffer(buf);\n+\n+        if (old_blocks.fclose() || !new_blocks.Commit() || new_blocks.fclose()) return false;",
      "path": "src/init.cpp",
      "position": 101,
      "original_position": 84,
      "commit_id": "86c5afc2948511c0f4db3f7ba4f27f2d69b6ed78",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338618798,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks!",
      "created_at": "2025-09-12T03:56:45Z",
      "updated_at": "2025-09-12T03:56:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2342880343",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342880343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1342,
      "original_line": 1342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342882164",
      "pull_request_review_id": 3214506647,
      "id": 2342882164,
      "node_id": "PRRC_kwDOABII586LpYt0",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338622414,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What's problem would chunking solve in your opinion? I don't mind doing it, but the current version is slightly simpler and slightly faster, so I need at least *some* justification for giving up both :)",
      "created_at": "2025-09-12T03:58:26Z",
      "updated_at": "2025-09-12T03:58:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2342882164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342882164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342882442",
      "pull_request_review_id": 3214506950,
      "id": 2342882442,
      "node_id": "PRRC_kwDOABII586LpYyK",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338660825,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good call, changed it back to regex matching",
      "created_at": "2025-09-12T03:58:45Z",
      "updated_at": "2025-09-12T03:58:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2342882442",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342882442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1295,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2344113580",
      "pull_request_review_id": 3216476343,
      "id": 2344113580,
      "node_id": "PRRC_kwDOABII586LuFWs",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338622414,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Loading a large file entirely into memory when it's not necessary is just bad practice. What if we changed to .blk files of 1GB each? What if we're running on a node that's memory constrained and configured dbcache down to 4MB?\r\n\r\nIf we're worried about speed, then doing it in parallel helps on my system since obfuscation ends up CPU bound when single-threaded -- with the current code, it takes 238s (4min); with 8 threads it's 65s; with 16 threads it's 47s. Using 16MB chunks (BLOCKFILE_CHUNK_SIZE), 8 threads is also ~128MB of memory, but a user on a severely memory constrained system could reduce the thread count if they wanted. Here's roughly what I'm thinking: https://github.com/ajtowns/bitcoin/commits/202509-reobfus/",
      "created_at": "2025-09-12T12:36:26Z",
      "updated_at": "2025-09-12T12:36:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2344113580",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2344113580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2344324168",
      "pull_request_review_id": 3216806070,
      "id": 2344324168,
      "node_id": "PRRC_kwDOABII586Lu4xI",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338622414,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Loading a large file\r\n\r\nThis is run on request, before anything else loads, it's not *that* large, only 160 MB memory is needed.\r\n\r\nFor reference, applying the mentioned `dbcache=4` (which isn't used here yet) still makes the node use > 1 GB memory: \r\n<img width=\"1202\" height=\"631\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1867ba38-ba35-4ce5-86de-5bfe8add145b\" />\r\n\r\nEdit: doing an actual massif memory measurement with `dbcache=4` and `-blocksonly` reveals that the actual memory usage is lower than that (but still higher than the 160MB needed for a single blockfile):\r\n```\r\nCommand:            ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=200000 -dbcache=4 -blocksonly -printtoconsole=1                                               \r\nMassif arguments:   --time-unit=ms --massif-out-file=/mnt/my_storage/logs/massif-e66f04d0131b8c2db13ddd649e9eb20910eb6d1d-200000-4.out                                                    \r\nms_print arguments: /mnt/my_storage/logs/massif-e66f04d0131b8c2db13ddd649e9eb20910eb6d1d-200000-4.out                                                                                     \r\n--------------------------------------------------------------------------------                                                                                                          \r\n                                                                                                                                                                                          \r\n                                                                                                                                                                                          \r\n    MB                                                                                                                                                                                    \r\n383.1^#                                                                                                                                                                                   \r\n     |#                                                                                                                                                                                   \r\n     |#                                                                                                                                                                                   \r\n     |#                                                                                                                                                                                   \r\n     |#                                                                                                                                                                                   \r\n     |#                                                                                                                                                                                   \r\n     |#                                   :  : :::      :  :    ::::  @                                                                                                                   \r\n     |#   :@: :::@::::::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#::::@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::                                                                                                            \r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::\r\n     |#:: :@::: :@::: ::::::::::@:::@::::::::::::::::::@:::::::@::::::@:::::::\r\n   0 +----------------------------------------------------------------------->h\r\n     0                                                                   2.506\r\n```\r\n\r\n> Here's roughly what I'm thinking: [ajtowns/bitcoin@202509-reobfus (commits)](https://github.com/ajtowns/bitcoin/commits/202509-reobfus)\r\n\r\nMultithreading is indeed a very good argument for chunking, thanks a lot for the patch, I'll apply it soon and add you as coauthor!",
      "created_at": "2025-09-12T13:48:56Z",
      "updated_at": "2025-09-13T02:55:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2344324168",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2344324168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365380262",
      "pull_request_review_id": 3248727050,
      "id": 2365380262,
      "node_id": "PRRC_kwDOABII586M_Nam",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338622414,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks again for the review, I have pushed a change to fix the CI and took a few suggestion from your branch (chunking, code simplifications), but kept the original file iteration with progress indicator for now.\r\nThe parallelization complicates the situation considerably, I will see if I can find a simpler way or if single-threaded execution is also acceptable.\r\nEdit: grouped the block and undo files for more uniform iteration instead of shuffling",
      "created_at": "2025-09-20T07:02:20Z",
      "updated_at": "2025-09-22T03:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2365380262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365380262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380772877",
      "pull_request_review_id": 3270026865,
      "id": 2380772877,
      "node_id": "PRRC_kwDOABII586N57YN",
      "diff_hunk": "@@ -1268,6 +1268,134 @@ static std::optional<CService> CheckBindingConflicts(const CConnman::Options& co\n     return std::nullopt;\n }\n \n+static bool ObfuscateBlocks(\n+    const BlockManager& m_blockman,\n+    const util::SignalInterrupt& interrupt,\n+    std::string_view suffix,\n+    const fs::path& blocks_dir,\n+    const fs::path& xor_dat,\n+    const fs::path& xor_new,\n+    const std::span<const std::byte> requested_key)\n+{\n+    // Read all block and undo file names\n+    auto collect_undo_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetUndoPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+    auto collect_block_files{[&]() -> std::set<fs::path> {\n+        std::set<fs::path> files;\n+        while (true) {\n+            if (auto f{m_blockman.GetBlockPosFilename(FlatFilePos(files.size(), 0))}; fs::exists(f)) {\n+                files.insert(f);\n+            } else {\n+                break;\n+            }\n+        }\n+        return files;\n+    }};\n+\n+    auto write_missing_key{[&](const fs::path& file, const std::array<std::byte, Obfuscation::KEY_SIZE>& default_bytes) -> bool {\n+        if (!fs::exists(file)) {\n+            AutoFile autofile{fsbridge::fopen(file, \"wb\")};\n+            autofile << default_bytes;\n+            if (!autofile.Commit() || autofile.fclose()) return false;\n+        }\n+        return true;\n+    }};\n+    auto read_key{[&](const fs::path& file) -> std::optional<Obfuscation> {\n+        std::array<std::byte, Obfuscation::KEY_SIZE> obfuscation{};\n+        AutoFile{fsbridge::fopen(file, \"rb\")} >> obfuscation;\n+        return Obfuscation{obfuscation};\n+    }};\n+\n+    // Create delta obfuscation key by combining the old ^ new so that we only have to iterate once\n+    auto create_delta_obfuscation{[&]() -> std::optional<Obfuscation> {\n+        // Ensure old key exists\n+        if (!write_missing_key(xor_dat, {})) return std::nullopt;\n+        const auto old_obfuscation{read_key(xor_dat)};\n+        LogInfo(\"[obfuscate] old key: %s\", old_obfuscation->HexKey());\n+\n+        // Prepare new key\n+        std::array<std::byte, Obfuscation::KEY_SIZE> new_bytes{};\n+        if (requested_key.size() == Obfuscation::KEY_SIZE) {\n+            std::copy_n(requested_key.begin(), Obfuscation::KEY_SIZE, new_bytes.begin());\n+        } else {\n+            FastRandomContext{}.fillrand(new_bytes);\n+        }\n+        if (!write_missing_key(xor_new, new_bytes)) return std::nullopt;\n+        const auto new_obfuscation{read_key(xor_new)};\n+        LogInfo(\"[obfuscate] new key: %s\", new_obfuscation->HexKey());\n+\n+        // Combine keys\n+        std::array<std::byte, Obfuscation::KEY_SIZE> delta_bytes{};\n+        (*old_obfuscation)(delta_bytes);\n+        (*new_obfuscation)(delta_bytes);\n+        return Obfuscation{delta_bytes};\n+    }};\n+\n+    auto migrate_single_blockfile{[&](const fs::path& file, const Obfuscation& delta_obfuscation, std::vector<std::byte>& buf) -> bool {\n+        AutoFile old_blocks{fsbridge::fopen(file, \"rb\"), delta_obfuscation}; // deobfuscate & reobfuscate with a single combined key\n+        buf.resize(fs::file_size(file)); // reuse buffer\n+        old_blocks.read(buf);",
      "path": "src/init.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "ffb022179936f958678d1c38e60b4b41ff493dcd",
      "original_commit_id": "aa587f3740e39214d99da3fc44ce2878a0f4e32d",
      "in_reply_to_id": 2338622414,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have pushed a new version (rebased, extended test), let me know what you think.\r\n\r\nI have implemented a very simple multithreaded version but I couldn't convince it to achieve *any* speedup whatsoever - I guess xor operations are a lot cheaper than disk reads/writes. The total CPU usage was at 20% even with 50 threads.\r\n\r\nI have pushed my threaded solution to https://github.com/l0rinc/bitcoin/pull/40/files#diff-b1e19192258d83199d8adaa5ac31f067af98f63554bfdd679bd8e8073815e69dR1361-R1379, but I kept the single-threaded version here.",
      "created_at": "2025-09-26T03:33:10Z",
      "updated_at": "2025-09-26T03:52:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33324#discussion_r2380772877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380772877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1335,
      "side": "RIGHT"
    }
  ]
}
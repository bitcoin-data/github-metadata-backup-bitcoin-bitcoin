{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157",
    "id": 2730949339,
    "node_id": "PR_kwDOABII586ixvrb",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33157",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33157.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33157.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
    "number": 33157,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "cluster mempool: control/optimize TxGraph memory usage",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Part of #30289.\r\n\r\nThis adds a few optimizations to reduce `TxGraph`'s memory usage, and makes sure that dynamic memory it uses doesn't linger after shrinking clusters. Finally, it exposes a function `GetMainMemoryUsage()` to compute `TxGraph`'s approximate memory usage.\r\n\r\nIt makes the `Cluster` type abstract, with two instances (`SingletonClusterImpl` for 1-transaction clusters, and `GenericClusterImpl` for others).\r\n\r\nOn my 64-bit system, I obtain the following numbers:\r\n* `SingletonClusterImpl`: 48 bytes, plus 16 bytes malloc overhead in its `unique_ptr`, plus 8-byte pointer in `m_clusters`\r\n* `GenericClusterImpl`: 104 bytes, plus 16 bytes malloc overhead in its `unique_ptr`, plus 8-byte pointer in `m_clusters`, plus 72 bytes malloc overhead inside its vectors and `DepGraph`, plus 40 bytes per transaction in those.\r\n* `TxGraphImpl::Entry`: 72 bytes per transaction\r\n* `TxGraphImpl::ChunkData`: 8 bytes, plus 56 bytes in `std::set` overhead + malloc overhead, all per chunk.\r\n* `TxGraph::Ref`: 16 bytes per transaction\r\n\r\nThis overall amounts to 200 bytes per cluster, plus 64 bytes per chunk, plus 128 bytes per transaction, but only 224 bytes overall per singleton cluster.",
    "labels": [],
    "created_at": "2025-08-08T14:21:15Z",
    "updated_at": "2025-10-11T22:14:34Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "5ca3c4590bc513b7299807a8d17e3738b21c0622",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sipa:202508_txgraph_memusage",
      "ref": "202508_txgraph_memusage",
      "sha": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 22,
        "stargazers_count": 89,
        "watchers_count": 89,
        "size": 277537,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-11T22:12:19Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2025-09-01T06:42:52Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d2987102dd13f965c7a0bf1d5b8ee15bcf025398",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38013,
        "stargazers_count": 86066,
        "watchers_count": 86066,
        "size": 294747,
        "default_branch": "master",
        "open_issues_count": 825,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-10T19:52:05Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-11T22:38:21Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 847,
    "deletions": 261,
    "changed_files": 5,
    "commits": 13,
    "review_comments": 217,
    "comments": 12
  },
  "events": [
    {
      "event": "commented",
      "id": 3168124807,
      "node_id": "IC_kwDOABII58681b-H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3168124807",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T14:21:20Z",
      "updated_at": "2025-10-11T22:12:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33157.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Stale ACK | [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3333198233), [glozow](https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3182210966), [instagibbs](https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3323336944), [l0rinc](https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3393553555) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#33591](https://github.com/bitcoin/bitcoin/pull/33591) (Cluster mempool followups by sdaftuar)\n* [#33469](https://github.com/bitcoin/bitcoin/pull/33469) (TxGraph: change m_excluded_clusters by instagibbs)\n* [#33335](https://github.com/bitcoin/bitcoin/pull/33335) (txgraph: randomize order of same-feerate distinct-cluster transactions by sipa)\n* [#28676](https://github.com/bitcoin/bitcoin/pull/28676) (Cluster mempool implementation by sdaftuar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- */ -> (remove) [Trailing \"*/\" after a // comment produces a mismatched comment terminator and is confusing / invalid in the comment \"Cannot move or copy (would invalidate Cluster* in Locator and ClusterSet). */\".]\n\n<sup>drahtbot_id_5_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3168124807",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19056589328,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAARv3HoQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19056589328",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "754775357b15929aa51b0bc629231c96930039dd",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/754775357b15929aa51b0bc629231c96930039dd",
      "created_at": "2025-08-08T14:30:48Z"
    },
    {
      "event": "labeled",
      "id": 19056593118,
      "node_id": "LE_lADOABII587E8tJszwAAAARv3Ije",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19056593118",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T14:31:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3168151919,
      "node_id": "IC_kwDOABII58681ilv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3168151919",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T14:31:05Z",
      "updated_at": "2025-08-08T14:31:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `macOS-cross, gui, no tests`: https://github.com/bitcoin/bitcoin/runs/47684523262</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a compilation error due to ambiguous call to 'DynamicUsage' in txgraph.cpp.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3168151919",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "unlabeled",
      "id": 19057975039,
      "node_id": "UNLE_lADOABII587E8tJszwAAAARv8Z7_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19057975039",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T15:58:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3177972691,
      "node_id": "PRR_kwDOABII5869bAPT",
      "url": null,
      "actor": null,
      "commit_id": "754775357b15929aa51b0bc629231c96930039dd",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-02T20:14:46Z",
      "author_association": "MEMBER",
      "body": "Concept ACK to have control over memory usage, also not suprised by the numbers because of the added complexity of cluster mempool v master.",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3177972691",
      "submitted_at": "2025-09-02T20:14:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "commented",
      "id": 3254821483,
      "node_id": "IC_kwDOABII587CAKJr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3254821483",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T17:43:16Z",
      "updated_at": "2025-09-04T17:43:16Z",
      "author_association": "MEMBER",
      "body": "I had missed a few sources of memory usage in the numbers posted in the PR description before. I've redone the derivation, and explained it in more detail. Thanks @glozow for trying to make sense of my incorrect numbers.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3254821483",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "mentioned",
      "id": 19510773012,
      "node_id": "MEE_lADOABII587E8tJszwAAAASK7sUU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19510773012",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T17:43:17Z"
    },
    {
      "event": "subscribed",
      "id": 19510773037,
      "node_id": "SE_lADOABII587E8tJszwAAAASK7sUt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19510773037",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T17:43:17Z"
    },
    {
      "event": "reviewed",
      "id": 3186772025,
      "node_id": "PRR_kwDOABII58698kg5",
      "url": null,
      "actor": null,
      "commit_id": "754775357b15929aa51b0bc629231c96930039dd",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-04T20:20:49Z",
      "author_association": "MEMBER",
      "body": "concept ACK, I refuse to do math",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3186772025",
      "submitted_at": "2025-09-04T20:20:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19535535932,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASMaJ88",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19535535932",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9588f2d97a319a1060d022235b126984e92e6c7f",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/9588f2d97a319a1060d022235b126984e92e6c7f",
      "created_at": "2025-09-05T20:13:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19535720066,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASMa26C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19535720066",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0e9272a04380cdc791cb33e74f99ec42eedd342e",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/0e9272a04380cdc791cb33e74f99ec42eedd342e",
      "created_at": "2025-09-05T20:26:29Z"
    },
    {
      "event": "commented",
      "id": 3259692570,
      "node_id": "IC_kwDOABII587CSvYa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3259692570",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T20:39:36Z",
      "updated_at": "2025-09-05T20:39:36Z",
      "author_association": "MEMBER",
      "body": "I have implemented the \"abstract Cluster\" approach anyway, as special-casing singletons outside of the Cluster logic was too cumbersome.\r\n\r\nOld numbers:\r\n* 384 bytes per singleton cluster\r\n* 512 or 576 bytes per pair cluster\r\n\r\nNew numbers:\r\n* 224 bytes per singleton cluster\r\n* 520 or 584 bytes per pair cluster",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3259692570",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19536155186,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASMchIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19536155186",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "13ef14a21029f12d5ac25118619d188818b446e1",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/13ef14a21029f12d5ac25118619d188818b446e1",
      "created_at": "2025-09-05T21:05:33Z"
    },
    {
      "event": "commented",
      "id": 3262110826,
      "node_id": "IC_kwDOABII587Cb9xq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3262110826",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-06T13:02:19Z",
      "updated_at": "2025-09-06T18:04:56Z",
      "author_association": "MEMBER",
      "body": "And with the addition of `SingletonClusterImpl`, overall mempool usage (determined by loading a `mempool.dat` from a long-running node into both (1) master and (2) #28676 + this PR), the mempool memusage/vsize ratio seems to have dropped ~4.5%, meaning cluster mempool will effectively increase mempool size by that much for a constant `-maxmempool` setting.\r\n\r\nMaster (6.09 membyte/vbyte):\r\n```\r\n  \"size\": 58610,\r\n  \"bytes\": 28502050,\r\n  \"usage\": 173585008,\r\n  \"total_fee\": 0.05257629,\r\n  \"maxmempool\": 300000000,\r\n```\r\n\r\nCluster mempool + this PR (5.83 membyte/vbyte):\r\n```\r\n  \"size\": 58348,\r\n  \"bytes\": 28461800,\r\n  \"usage\": 165896648,\r\n  \"total_fee\": 0.05210373,\r\n  \"maxmempool\": 300000000,\r\n```",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3262110826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19551089298,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASNVfKS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19551089298",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "294292d9c41d63c9ef1e42fa4a5e5314105c1036",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/294292d9c41d63c9ef1e42fa4a5e5314105c1036",
      "created_at": "2025-09-07T14:42:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19570205942,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASOeaT2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19570205942",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "19540731a2c1cad09db3fe0acdb0eea2dfb6a27a",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/19540731a2c1cad09db3fe0acdb0eea2dfb6a27a",
      "created_at": "2025-09-08T17:31:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19596255906,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASQByKi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19596255906",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0c6d398bd401ba48f041138f6f5cdaace124d08d",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/0c6d398bd401ba48f041138f6f5cdaace124d08d",
      "created_at": "2025-09-09T18:32:42Z"
    },
    {
      "event": "labeled",
      "id": 19642101714,
      "node_id": "LE_lADOABII587E8tJszwAAAASSwq_S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19642101714",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T16:31:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19642798834,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASSzVLy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19642798834",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "38ab2104756b6c66e692235efd626e8e71496a05",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/38ab2104756b6c66e692235efd626e8e71496a05",
      "created_at": "2025-09-11T17:07:27Z"
    },
    {
      "event": "commented",
      "id": 3281939547,
      "node_id": "IC_kwDOABII587Dnmxb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3281939547",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T17:07:58Z",
      "updated_at": "2025-09-11T17:07:58Z",
      "author_association": "MEMBER",
      "body": "Rebased after #33354 merge.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3281939547",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "unlabeled",
      "id": 19644560881,
      "node_id": "UNLE_lADOABII587E8tJszwAAAASS6DXx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19644560881",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T18:56:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3229759456,
      "node_id": "PRR_kwDOABII587Agjfg",
      "url": null,
      "actor": null,
      "commit_id": "38ab2104756b6c66e692235efd626e8e71496a05",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T14:07:41Z",
      "author_association": "MEMBER",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3229759456",
      "submitted_at": "2025-09-16T14:07:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19752678669,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASZWfUN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19752678669",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/66401148ddcba04c27751e39e53fc41e6deb5d14",
      "created_at": "2025-09-17T14:50:51Z"
    },
    {
      "event": "reviewed",
      "id": 3239910323,
      "node_id": "PRR_kwDOABII587BHRuz",
      "url": null,
      "actor": null,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-18T13:54:43Z",
      "author_association": "MEMBER",
      "body": "Code Review ACK 66401148ddcba04c27751e39e53fc41e6deb5d14\r\n\r\nI shutdown a long-running node at height 915249.\r\n\r\n```\r\n.rw------- 128M ismaelsadeeq 18 Sep 14:46 mempool.dat\r\n```\r\n\r\nRestarted the node on master 1444ed855f4 with:\r\n\r\n  ```bash\r\n  build/bin/bitcoind -connect=0 -debug\r\n  ```\r\n\r\nAfter loading the mempool, `getmempoolinfo` returned:\r\n\r\n  ```json\r\n  {\r\n    \"loaded\": true,\r\n    \"size\": 104944,\r\n    \"bytes\": 43254588,\r\n    \"usage\": 260130384,\r\n    \"total_fee\": 0.10523099,\r\n    \"maxmempool\": 300000000\r\n  }\r\n  ```\r\n\r\nI restarted the node on full cluster mempool implementation 57f929d with the same config.\r\n  `getmempoolinfo` returned:\r\n\r\n  ```json\r\n  {\r\n    \"loaded\": true,\r\n    \"size\": 104944,\r\n    \"bytes\": 43254588,\r\n    \"usage\": 244614928,\r\n    \"total_fee\": 0.10523099,\r\n    \"maxmempool\": 300000000\r\n  }\r\n  ```\r\n\r\nThe mempool size and fee data are identical across runs, but `usage` differ with cluster mempool having slightly less usage at  6%.\r\n\r\n\r\n",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3239910323",
      "submitted_at": "2025-09-18T13:54:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "review_requested",
      "id": 19776316106,
      "node_id": "RRE_lADOABII587E8tJszwAAAASawqLK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19776316106",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-18T13:54:47Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3239814693,
      "node_id": "PRR_kwDOABII587BG6Yl",
      "url": null,
      "actor": null,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-18T17:00:38Z",
      "author_association": "MEMBER",
      "body": "ACK 66401148ddcba04c27751e39e53fc41e6deb5d14\r\n\r\nDid not validate the numbers, non-blocking comments only",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3239814693",
      "submitted_at": "2025-09-18T17:00:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19866666804,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASgJUc0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19866666804",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c60a639f67dc9e5e97e231337ddc881143e4c357",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/c60a639f67dc9e5e97e231337ddc881143e4c357",
      "created_at": "2025-09-23T13:26:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19866703632,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASgJdcQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19866703632",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "99e144778eeffc1074d5a1c193896bea335db8af",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/99e144778eeffc1074d5a1c193896bea335db8af",
      "created_at": "2025-09-23T13:28:04Z"
    },
    {
      "event": "commented",
      "id": 3324131315,
      "node_id": "IC_kwDOABII587GIjfz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3324131315",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-23T13:55:33Z",
      "updated_at": "2025-09-23T13:55:33Z",
      "author_association": "MEMBER",
      "body": "reACK 99e144778eeffc1074d5a1c193896bea335db8af \r\n\r\nvia `git range-diff master 66401148ddcba04c27751e39e53fc41e6deb5d14 99e144778eeffc1074d5a1c193896bea335db8af`",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3324131315",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "review_requested",
      "id": 19867282678,
      "node_id": "RRE_lADOABII587E8tJszwAAAASgLqz2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19867282678",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-23T13:55:38Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19868568187,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASgQkp7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19868568187",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "created_at": "2025-09-23T14:50:50Z"
    },
    {
      "event": "commented",
      "id": 3324395984,
      "node_id": "IC_kwDOABII587GJkHQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3324395984",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-23T14:58:53Z",
      "updated_at": "2025-09-23T14:58:53Z",
      "author_association": "MEMBER",
      "body": "reACK 5ac32aa441bf3ec1f1fa826f689405bc4a7b7354\r\n\r\njust a rebase",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3324395984",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "commented",
      "id": 3333198233,
      "node_id": "IC_kwDOABII587GrJGZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3333198233",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-25T09:58:45Z",
      "updated_at": "2025-09-25T09:58:45Z",
      "author_association": "MEMBER",
      "body": "reACK 5ac32aa441bf3ec1f1fa826f689405bc4a7b7354\r\n\r\nChanges since last ACK are nits fixes.",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3333198233",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "reviewed",
      "id": 3299619754,
      "node_id": "PRR_kwDOABII587ErDOq",
      "url": null,
      "actor": null,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-07T03:11:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "It's my first time diving into cluster mempool, and it seems like a solid implementation.\nI like the polymorphic split between `SingletonClusterImpl` and `GenericClusterImpl`.\n\nI've documented my review journey and left many comments. Some are tiny nits, but others appear to be leftovers from previous refactorings that should be corrected - I'm fine with doing them in a follow-up PR as well.\nIf you decide to apply any suggestions here, I've included a few commit reorganization tips that could make the changes clearer.\n\nKey suggestions include:\n- Fuzz test enhancements for more thorough coverage\n- Documentation fixes for stale references from previous refactorings  \n- Dead code removal after recent memory compaction changes\n- Comments highlighting surprising side-effects in certain methods\n\nI don't yet feel confident enough to fully approve, but this is definitely a strong Concept ACK for the change.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3299619754",
      "submitted_at": "2025-10-07T03:11:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "reviewed",
      "id": 3182210966,
      "node_id": "PRR_kwDOABII5869rK-W",
      "url": null,
      "actor": null,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-07T19:16:25Z",
      "author_association": "MEMBER",
      "body": "code review ACK 5ac32aa441b \r\n\r\nI focused on checking that all the dynamic memory is accounted for, places where `m_cluster_usage` is updated, and correctness of the `SingletonCluster` implementation. Feel free to ignore my nits.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3182210966",
      "submitted_at": "2025-10-07T19:16:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "review_requested",
      "id": 20147980334,
      "node_id": "RRE_lADOABII587E8tJszwAAAASw6cgu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20147980334",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T19:16:30Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20191457810,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASzgTIS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20191457810",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80485ae3277d087fc7789f77128b39db2be068ef",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/80485ae3277d087fc7789f77128b39db2be068ef",
      "created_at": "2025-10-09T18:20:13Z"
    },
    {
      "event": "commented",
      "id": 3387039466,
      "node_id": "IC_kwDOABII587J4h7q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3387039466",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-09T18:23:23Z",
      "updated_at": "2025-10-09T18:23:23Z",
      "author_association": "MEMBER",
      "body": "Addressed many comments, and made some bigger changes:\r\n* Restructured the commits to first make all abstractions, and then do the abstract class `Cluster` change cleanly.\r\n* Use `GetTxCount()` in more places, instead of `m_graph_index != GraphIndex(-1)`\r\n* Made `Compact()` and memory accounting work at the `TxGraphImpl::Merge` level rather than `Cluster::Merge`: the old code could be compacting O(n) times when merging n clusters together simultaneously.\r\n* Made the dealing with which implementations are valid for which ranges of transaction counts much cleaner.\r\n* Improved comments.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3387039466",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20193486666,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASzoCdK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20193486666",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d3ece431ffae270df78beaab723499807f0a5284",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/d3ece431ffae270df78beaab723499807f0a5284",
      "created_at": "2025-10-09T20:23:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20193953345,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAASzp0ZB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20193953345",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/7421e58dee402ee8b5b58a18684953a89ad350d7",
      "created_at": "2025-10-09T20:56:12Z"
    },
    {
      "event": "reviewed",
      "id": 3323336944,
      "node_id": "PRR_kwDOABII587GFhjw",
      "url": null,
      "actor": null,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-10T13:43:03Z",
      "author_association": "MEMBER",
      "body": "reACK 7421e58dee402ee8b5b58a18684953a89ad350d7\r\n\r\n`git range-diff master 5ac32aa441bf3ec1f1fa826f689405bc4a7b7354 7421e58dee402ee8b5b58a18684953a89ad350d7`",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3323336944",
      "submitted_at": "2025-10-10T13:43:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "review_requested",
      "id": 20208196710,
      "node_id": "RRE_lADOABII587E8tJszwAAAAS0gJxm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20208196710",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-10T13:43:11Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3393553555,
      "node_id": "IC_kwDOABII587KRYST",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3393553555",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-11T18:03:06Z",
      "updated_at": "2025-10-11T18:03:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for considering the suggestions, I find the new layout a lot easier to follow.\r\n\r\nI have left a few more nits, but I'm fine doing them in a follow-up.\r\nI like these memory optimizations, my only concern is that we're likely doing a lot heavier copying because of the regular compactions (especially since most move constructors seem unused based on previous fuzzing reports). As mentioned, in a follow-up we can experiment with leaving a tiny buffer.\r\n\r\nI have also added a few redundant assertions locally and ran a fuzzer for `FUZZ=clusterlin_depgraph_sim` and `FUZZ=txgraph` overnight (without sanitizers which I can't get to work on a Mac anyway) and they both passed 👍 \r\n\r\n<details>\r\n<summary>patch with extra assertions and other minor changes done during review</summary>\r\n\r\n```patch\r\ndiff --git a/src/txgraph.cpp b/src/txgraph.cpp\r\n--- a/src/txgraph.cpp\t(revision 262762bbb6f7157ba8c54972909c9214448c304b)\r\n+++ b/src/txgraph.cpp\t(date 1760202864002)\r\n@@ -99,6 +99,9 @@\r\n class Cluster\r\n {\r\n     friend class TxGraphImpl;\r\n+    /** Sequence number for this Cluster (for tie-breaking comparison between equal-chunk-feerate\r\n+        transactions in distinct clusters). */\r\n+    uint64_t m_sequence;\r\n \r\n protected:\r\n     using GraphIndex = TxGraph::GraphIndex;\r\n@@ -107,9 +110,6 @@\r\n     QualityLevel m_quality{QualityLevel::NONE};\r\n     /** Which position this Cluster has in TxGraphImpl::ClusterSet::m_clusters[m_quality]. */\r\n     ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\r\n-    /** Sequence number for this Cluster (for tie-breaking comparison between equal-chunk-feerate\r\n-        transactions in distinct clusters). */\r\n-    uint64_t m_sequence;\r\n \r\n     explicit Cluster(uint64_t sequence) noexcept : m_sequence(sequence) {}\r\n \r\n@@ -616,7 +616,7 @@\r\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\r\n     *   removed), return the Cluster it is in. Otherwise, return nullptr. */\r\n     Cluster* FindCluster(GraphIndex idx, int level) const noexcept { return FindClusterAndLevel(idx, level).first; }\r\n-    /** Like FindClusterAndLevel, but also return what level the match was found in (-1 if not found). */\r\n+    /** Like FindCluster, but also return what level the match was found in (-1 if not found). */\r\n     std::pair<Cluster*, int> FindClusterAndLevel(GraphIndex idx, int level) const noexcept;\r\n     /** Extract a Cluster from its ClusterSet, and set its quality to QualityLevel::NONE. */\r\n     std::unique_ptr<Cluster> ExtractCluster(int level, QualityLevel quality, ClusterSetIndex setindex) noexcept;\r\n@@ -663,8 +663,7 @@\r\n         if (tx_count >= GenericClusterImpl::MIN_INTENDED_TX_COUNT && tx_count <= GenericClusterImpl::MAX_TX_COUNT) {\r\n             return CreateEmptyGenericCluster();\r\n         }\r\n-        assert(false);\r\n-        return {};\r\n+        std::abort();\r\n     }\r\n \r\n     // Functions for handling Refs.\r\n@@ -722,7 +721,7 @@\r\n     /** If cluster is not in staging, copy it there, and return a pointer to it.\r\n     *   Staging must exist, and this modifies the locators of its\r\n     *   transactions from inherited (P,M) to explicit (P,P). */\r\n-    Cluster* PullIn(Cluster* cluster) noexcept;\r\n+    Cluster* PullIn(Cluster* cluster, int level) noexcept;\r\n     /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\r\n      *  NEEDS_SPLIT* QualityLevel) up to the specified level. */\r\n     void ApplyRemovals(int up_to_level) noexcept;\r\n@@ -896,22 +895,22 @@\r\n \r\n DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\r\n {\r\n-    Assume(m_graph_index == GraphIndex(-1));\r\n+    Assume(!GetTxCount());\r\n     m_graph_index = graph_idx;\r\n     m_feerate = feerate;\r\n     return 0;\r\n }\r\n \r\n-void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\r\n+void GenericClusterImpl::AddDependencies(SetType parents, DepGraphIndex child) noexcept\r\n {\r\n-    m_depgraph.AddDependencies(parent, child);\r\n+    m_depgraph.AddDependencies(parents, child);\r\n }\r\n \r\n-void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\r\n+void SingletonClusterImpl::AddDependencies(SetType parents, DepGraphIndex child) noexcept\r\n {\r\n     // Singletons cannot have any dependencies.\r\n     Assume(child == 0);\r\n-    Assume(parent == SetType{} || parent == SetType::Fill(0));\r\n+    Assume(parents == SetType{} || parents == SetType::Fill(0));\r\n }\r\n \r\n void GenericClusterImpl::ExtractTransactions(const std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)>& visit_fn) noexcept\r\n@@ -946,8 +945,7 @@\r\n     }\r\n     // Given that we started with an Entry that occurs in this Cluster, one of its Locators must\r\n     // point back to it.\r\n-    assert(false);\r\n-    return -1;\r\n+    std::abort();\r\n }\r\n \r\n int SingletonClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\r\n@@ -963,8 +961,7 @@\r\n     }\r\n     // Given that we started with an Entry that occurs in this Cluster, one of its Locators must\r\n     // point back to it.\r\n-    assert(false);\r\n-    return -1;\r\n+    std::abort();\r\n }\r\n \r\n void TxGraphImpl::ClearLocator(int level, GraphIndex idx, bool oversized_tx) noexcept\r\n@@ -981,6 +978,7 @@\r\n     }\r\n     // Update the transaction count.\r\n     --clusterset.m_txcount;\r\n+    Assert(clusterset.m_txcount_oversized >= oversized_tx);\r\n     clusterset.m_txcount_oversized -= oversized_tx;\r\n     // If clearing main, adjust the status of Locators of this transaction in staging, if it exists.\r\n     if (level == 0 && GetTopLevel() == 1) {\r\n@@ -988,6 +986,7 @@\r\n             entry.m_locator[1].SetMissing();\r\n         } else if (!entry.m_locator[1].IsPresent()) {\r\n             --m_staging_clusterset->m_txcount;\r\n+            Assert(m_staging_clusterset->m_txcount_oversized >= oversized_tx);\r\n             m_staging_clusterset->m_txcount_oversized -= oversized_tx;\r\n         }\r\n     }\r\n@@ -1091,7 +1090,7 @@\r\n std::vector<Cluster*> TxGraphImpl::GetConflicts() const noexcept\r\n {\r\n     Assume(GetTopLevel() == 1);\r\n-    auto& clusterset = GetClusterSet(1);\r\n+    auto& clusterset = GetClusterSet(/*level=*/1);\r\n     std::vector<Cluster*> ret;\r\n     // All main Clusters containing transactions in m_removed (so (P,R) ones) are conflicts.\r\n     for (auto i : clusterset.m_removed) {\r\n@@ -1140,11 +1139,11 @@\r\n     ptr->m_graph_index = m_graph_index;\r\n     ptr->m_feerate = m_feerate;\r\n     // Insert the new Cluster into the graph.\r\n-    graph.InsertCluster(1, std::move(ret), m_quality);\r\n+    graph.InsertCluster(/*level=*/1, std::move(ret), m_quality);\r\n     // Update its Locators.\r\n-    ptr->Updated(graph, 1);\r\n+    ptr->Updated(graph, /*level=*/1);\r\n     // Update memory usage.\r\n-    graph.GetClusterSet(1).m_cluster_usage += ptr->TotalMemoryUsage();\r\n+    graph.GetClusterSet(/*level=*/1).m_cluster_usage += ptr->TotalMemoryUsage();\r\n     return ptr;\r\n }\r\n \r\n@@ -1153,6 +1152,7 @@\r\n     // Iterate over the prefix of to_remove that applies to this cluster.\r\n     Assume(!to_remove.empty());\r\n     SetType todo;\r\n+    Assert(graph.GetClusterSet(level).m_cluster_usage >= TotalMemoryUsage());\r\n     graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\r\n     do {\r\n         GraphIndex idx = to_remove.front();\r\n@@ -1231,6 +1231,8 @@\r\n \r\n void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\r\n {\r\n+    Assume(GetTxCount());\r\n+    Assert(graph.GetClusterSet(level).m_cluster_usage >= TotalMemoryUsage());\r\n     graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\r\n     for (auto i : m_linearization) {\r\n         graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\r\n@@ -1243,6 +1245,7 @@\r\n void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\r\n {\r\n     Assume(GetTxCount());\r\n+    Assert(graph.GetClusterSet(level).m_cluster_usage >= TotalMemoryUsage());\r\n     graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\r\n     graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\r\n     m_graph_index = GraphIndex(-1);\r\n@@ -1257,10 +1260,11 @@\r\n     }\r\n     auto quality = m_quality;\r\n     // Subtract memory usage from staging and add it to main.\r\n+    Assert(graph.GetClusterSet(/*level=*/1).m_cluster_usage >= TotalMemoryUsage());\r\n     graph.GetClusterSet(/*level=*/1).m_cluster_usage -= TotalMemoryUsage();\r\n     graph.GetClusterSet(/*level=*/0).m_cluster_usage += TotalMemoryUsage();\r\n     // Remove cluster itself from staging and add it to main.\r\n-    auto cluster = graph.ExtractCluster(1, quality, m_setindex);\r\n+    auto cluster = graph.ExtractCluster(/*level=*/1, quality, m_setindex);\r\n     graph.InsertCluster(/*level=*/0, std::move(cluster), quality);\r\n     Updated(graph, /*level=*/0);\r\n }\r\n@@ -1272,10 +1276,11 @@\r\n         entry.m_locator[1].SetMissing();\r\n     }\r\n     auto quality = m_quality;\r\n-    graph.GetClusterSet(1).m_cluster_usage -= TotalMemoryUsage();\r\n-    auto cluster = graph.ExtractCluster(1, quality, m_setindex);\r\n-    graph.InsertCluster(0, std::move(cluster), quality);\r\n-    graph.GetClusterSet(0).m_cluster_usage += TotalMemoryUsage();\r\n+    Assert(graph.GetClusterSet(/*level=*/1).m_cluster_usage >= TotalMemoryUsage());\r\n+    graph.GetClusterSet(/*level=*/1).m_cluster_usage -= TotalMemoryUsage();\r\n+    auto cluster = graph.ExtractCluster(/*level=*/1, quality, m_setindex);\r\n+    graph.InsertCluster(/*level=*/0, std::move(cluster), quality);\r\n+    graph.GetClusterSet(/*level=*/0).m_cluster_usage += TotalMemoryUsage();\r\n     Updated(graph, 0);\r\n }\r\n \r\n@@ -1374,7 +1379,7 @@\r\n         auto component = m_depgraph.FindConnectedComponent(todo);\r\n         auto component_size = component.Count();\r\n         auto split_quality = component_size <= 2 ? QualityLevel::OPTIMAL : new_quality;\r\n-        if (first && component == todo && SetType::Fill(component_size) == component && component_size >= MIN_INTENDED_TX_COUNT) {\r\n+        if (first && component == todo && SetType::Fill(component_size) == component && component_size >= GetMinIntendedTxCount()) {\r\n             // The existing Cluster is an entire component, without holes. Leave it be, but update\r\n             // its quality. If there are holes, we continue, so that the Cluster is reconstructed\r\n             // without holes, reducing memory usage. If the component's size is below the intended\r\n@@ -1400,6 +1405,7 @@\r\n         todo -= component;\r\n     }\r\n     // We have to split the Cluster up. Remove accounting for the existing one first.\r\n+    Assert(graph.GetClusterSet(level).m_cluster_usage >= TotalMemoryUsage());\r\n     graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\r\n     // Redistribute the transactions.\r\n     for (auto i : m_linearization) {\r\n@@ -1435,6 +1441,7 @@\r\n     Assume(NeedsSplitting());\r\n     if (GetTxCount() == 0) {\r\n         // The cluster is now empty.\r\n+        Assert(graph.GetClusterSet(level).m_cluster_usage >= TotalMemoryUsage());\r\n         graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\r\n         return true;\r\n     } else {\r\n@@ -1453,10 +1460,10 @@\r\n     other.ExtractTransactions([&](DepGraphIndex pos, GraphIndex idx, FeePerWeight feerate, SetType other_parents) noexcept {\r\n         // Copy the transaction into this Cluster, and remember its position.\r\n         auto new_pos = m_depgraph.AddTransaction(feerate);\r\n-        remap[pos] = new_pos;\r\n         // Since this cluster must have been made hole-free before being merged into, all added\r\n         // transactions should appear at the end.\r\n         Assume(new_pos == m_mapping.size());\r\n+        remap[pos] = new_pos;\r\n         m_mapping.push_back(idx);\r\n         m_linearization.push_back(new_pos);\r\n         // Copy the transaction's dependencies, translating them using remap. Note that since\r\n@@ -1610,10 +1617,8 @@\r\n \r\n void TxGraphImpl::DeleteCluster(Cluster& cluster, int level) noexcept\r\n {\r\n-    // Extract the cluster from where it currently resides.\r\n-    auto cluster_ptr = ExtractCluster(level, cluster.m_quality, cluster.m_setindex);\r\n-    // And throw it away.\r\n-    cluster_ptr.reset();\r\n+    // Extract the cluster from where it currently resides and throw it away.\r\n+    ExtractCluster(level, cluster.m_quality, cluster.m_setindex);\r\n }\r\n \r\n std::pair<Cluster*, int> TxGraphImpl::FindClusterAndLevel(GraphIndex idx, int level) const noexcept\r\n@@ -1634,11 +1639,12 @@\r\n     return {nullptr, -1};\r\n }\r\n \r\n-Cluster* TxGraphImpl::PullIn(Cluster* cluster) noexcept\r\n+Cluster* TxGraphImpl::PullIn(Cluster* cluster, int cluster_level) noexcept\r\n {\r\n     int to_level = GetTopLevel();\r\n     Assume(to_level == 1);\r\n     int level = cluster->GetLevel(*this);\r\n+    Assert(level == cluster_level); // TODO use parent call calculations instead\r\n     Assume(level <= to_level);\r\n     // Copy the Cluster from main to staging, if it's not already there.\r\n     if (level == 0) {\r\n@@ -1661,8 +1667,8 @@\r\n         // Pull in all Clusters that are not in staging.\r\n         if (level == 1) {\r\n             for (GraphIndex index : to_remove) {\r\n-                auto cluster = FindCluster(index, level);\r\n-                if (cluster != nullptr) PullIn(cluster);\r\n+                auto [cluster, cluster_level] = FindClusterAndLevel(index, level);\r\n+                if (cluster != nullptr) PullIn(cluster, cluster_level);\r\n             }\r\n         }\r\n         // Group the set of to-be-removed entries by Cluster::m_sequence.\r\n@@ -2012,9 +2018,11 @@\r\n     // moves.\r\n     size_t max_size_pos{0};\r\n     DepGraphIndex max_size = to_merge[max_size_pos]->GetTxCount();\r\n+    Assert(GetClusterSet(level).m_cluster_usage >= to_merge[max_size_pos]->TotalMemoryUsage());\r\n     GetClusterSet(level).m_cluster_usage -= to_merge[max_size_pos]->TotalMemoryUsage();\r\n     DepGraphIndex total_size = max_size;\r\n     for (size_t i = 1; i < to_merge.size(); ++i) {\r\n+        Assert(GetClusterSet(level).m_cluster_usage >= to_merge[i]->TotalMemoryUsage());\r\n         GetClusterSet(level).m_cluster_usage -= to_merge[i]->TotalMemoryUsage();\r\n         DepGraphIndex size = to_merge[i]->GetTxCount();\r\n         total_size += size;\r\n@@ -2067,7 +2075,7 @@\r\n         // Pull in all the Clusters that contain dependencies.\r\n         if (level == 1) {\r\n             for (Cluster*& cluster : cluster_span) {\r\n-                cluster = PullIn(cluster);\r\n+                cluster = PullIn(cluster, cluster->GetLevel(*this));\r\n             }\r\n         }\r\n         // Invoke Merge() to merge them into a single Cluster.\r\n@@ -2925,7 +2933,7 @@\r\n \r\n                 // Check the sequence number.\r\n                 assert(cluster.m_sequence < m_next_sequence_counter);\r\n-                assert(sequences.count(cluster.m_sequence) == 0);\r\n+                assert(!sequences.contains(cluster.m_sequence));\r\n                 sequences.insert(cluster.m_sequence);\r\n                 // Remember we saw this Cluster (only if it is non-empty; empty Clusters aren't\r\n                 // expected to be referenced by the Entry vector).\r\ndiff --git a/src/test/fuzz/txgraph.cpp b/src/test/fuzz/txgraph.cpp\r\n--- a/src/test/fuzz/txgraph.cpp\t(revision 262762bbb6f7157ba8c54972909c9214448c304b)\r\n+++ b/src/test/fuzz/txgraph.cpp\t(date 1760204180327)\r\n@@ -462,6 +462,7 @@\r\n                 auto ref_loc = top_sim.AddTransaction(feerate);\r\n                 // Move it in place.\r\n                 *ref_loc = std::move(ref);\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if ((block_builders.empty() || sims.size() > 1) && top_sim.GetTransactionCount() + top_sim.removed.size() > 1 && command-- == 0) {\r\n                 // AddDependency.\r\n@@ -477,6 +478,7 @@\r\n                 top_sim.AddDependency(par, chl);\r\n                 top_sim.real_is_optimal = false;\r\n                 real->AddDependency(*par, *chl);\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if ((block_builders.empty() || sims.size() > 1) && top_sim.removed.size() < 100 && command-- == 0) {\r\n                 // RemoveTransaction. Either all its ancestors or all its descendants are also\r\n@@ -492,6 +494,7 @@\r\n                     real->RemoveTransaction(*ptr);\r\n                     top_sim.RemoveTransaction(ptr);\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (sel_sim.removed.size() > 0 && command-- == 0) {\r\n                 // ~Ref (of an already-removed transaction). Destroying a TxGraph::Ref has an\r\n@@ -507,6 +510,7 @@\r\n                     std::swap(sel_sim.removed[removed_pos], sel_sim.removed.back());\r\n                 }\r\n                 sel_sim.removed.pop_back();\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (block_builders.empty() && command-- == 0) {\r\n                 // ~Ref (of any transaction).\r\n@@ -529,6 +533,7 @@\r\n                         sims[level].DestroyTransaction(ptr, level == sims.size() - 1);\r\n                     }\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (block_builders.empty() && command-- == 0) {\r\n                 // SetTransactionFee.\r\n@@ -543,10 +548,12 @@\r\n                 for (auto& sim : sims) {\r\n                     sim.SetTransactionFee(ref, fee);\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (command-- == 0) {\r\n                 // GetTransactionCount.\r\n                 assert(real->GetTransactionCount(level_select) == sel_sim.GetTransactionCount());\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (command-- == 0) {\r\n                 // Exists.\r\n@@ -554,10 +561,12 @@\r\n                 bool exists = real->Exists(*ref, level_select);\r\n                 bool should_exist = sel_sim.Find(ref) != SimTxGraph::MISSING;\r\n                 assert(exists == should_exist);\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (command-- == 0) {\r\n                 // IsOversized.\r\n                 assert(sel_sim.IsOversized() == real->IsOversized(level_select));\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (command-- == 0) {\r\n                 // GetIndividualFeerate.\r\n@@ -572,6 +581,7 @@\r\n                     }\r\n                 }\r\n                 if (!found) assert(feerate.IsEmpty());\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!main_sim.IsOversized() && command-- == 0) {\r\n                 // GetMainChunkFeerate.\r\n@@ -586,6 +596,7 @@\r\n                     assert(feerate.size >= main_sim.graph.FeeRate(simpos).size);\r\n                     assert(feerate.size <= main_sim.SumAll().size);\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!sel_sim.IsOversized() && command-- == 0) {\r\n                 // GetAncestors/GetDescendants.\r\n@@ -597,6 +608,7 @@\r\n                 assert(result.size() == result_set.Count());\r\n                 auto expect_set = sel_sim.GetAncDesc(ref, alt);\r\n                 assert(result_set == expect_set);\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!sel_sim.IsOversized() && command-- == 0) {\r\n                 // GetAncestorsUnion/GetDescendantsUnion.\r\n@@ -619,6 +631,7 @@\r\n                 for (TxGraph::Ref* ref : refs) expect_set |= sel_sim.GetAncDesc(ref, alt);\r\n                 // Compare.\r\n                 assert(result_set == expect_set);\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!sel_sim.IsOversized() && command-- == 0) {\r\n                 // GetCluster.\r\n@@ -654,16 +667,19 @@\r\n                     assert(sel_sim.graph.Ancestors(i).IsSubsetOf(result_set));\r\n                     assert(sel_sim.graph.Descendants(i).IsSubsetOf(result_set));\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (command-- == 0) {\r\n                 // HaveStaging.\r\n                 assert((sims.size() == 2) == real->HaveStaging());\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (sims.size() < 2 && command-- == 0) {\r\n                 // StartStaging.\r\n                 sims.emplace_back(sims.back());\r\n                 sims.back().modified = SimTxGraph::SetType{};\r\n                 real->StartStaging();\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (block_builders.empty() && sims.size() > 1 && command-- == 0) {\r\n                 // CommitStaging.\r\n@@ -672,6 +688,7 @@\r\n                 const bool main_optimal = std::all_of(sims.cbegin(), sims.cend(), [](const auto &sim) { return sim.real_is_optimal; });\r\n                 sims.erase(sims.begin());\r\n                 sims.front().real_is_optimal = main_optimal;\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (sims.size() > 1 && command-- == 0) {\r\n                 // AbortStaging.\r\n@@ -681,6 +698,7 @@\r\n                 // removals of main transactions while staging was active, then aborting will\r\n                 // cause it to be re-evaluated in TxGraph).\r\n                 sims.back().oversized = std::nullopt;\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!main_sim.IsOversized() && command-- == 0) {\r\n                 // CompareMainOrder.\r\n@@ -699,6 +717,7 @@\r\n                 // Do not verify consistency with chunk feerates, as we cannot easily determine\r\n                 // these here without making more calls to real, which could affect its internal\r\n                 // state. A full comparison is done at the end.\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!sel_sim.IsOversized() && command-- == 0) {\r\n                 // CountDistinctClusters.\r\n@@ -730,6 +749,7 @@\r\n                 // Compare the number of deduplicated representatives with the value returned by\r\n                 // the real function.\r\n                 assert(result == sim_reps.Count());\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (command-- == 0) {\r\n                 // DoWork.\r\n@@ -767,6 +787,7 @@\r\n                     // allowed to touch.\r\n                     assert(iters <= iters_for_optimal);\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (sims.size() == 2 && !sims[0].IsOversized() && !sims[1].IsOversized() && command-- == 0) {\r\n                 // GetMainStagingDiagrams()\r\n@@ -786,14 +807,17 @@\r\n                 for (size_t i = 1; i < real_staged_diagram.size(); ++i) {\r\n                     assert(FeeRateCompare(real_staged_diagram[i], real_staged_diagram[i - 1]) <= 0);\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (block_builders.size() < 4 && !main_sim.IsOversized() && command-- == 0) {\r\n                 // GetBlockBuilder.\r\n                 block_builders.emplace_back(real->GetBlockBuilder());\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!block_builders.empty() && command-- == 0) {\r\n                 // ~BlockBuilder.\r\n                 block_builders.erase(block_builders.begin() + builder_idx);\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!block_builders.empty() && command-- == 0) {\r\n                 // BlockBuilder::GetCurrentChunk, followed by Include/Skip.\r\n@@ -845,6 +869,7 @@\r\n                     builder_data.included = new_included;\r\n                 }\r\n                 builder_data.done = new_done;\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (!main_sim.IsOversized() && command-- == 0) {\r\n                 // GetWorstMainChunk.\r\n@@ -871,6 +896,7 @@\r\n                     }\r\n                     assert(sum == worst_chunk_feerate);\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if ((block_builders.empty() || sims.size() > 1) && command-- == 0) {\r\n                 // Trim.\r\n@@ -895,6 +921,7 @@\r\n                     top_sim.RemoveTransaction(top_sim.GetRef(simpos));\r\n                 }\r\n                 assert(!top_sim.IsOversized());\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if ((block_builders.empty() || sims.size() > 1) &&\r\n                        top_sim.GetTransactionCount() > max_cluster_count && !top_sim.IsOversized() && command-- == 0) {\r\n@@ -932,6 +959,7 @@\r\n                         for (auto j : clusters[par_cl]) {\r\n                             if (par_idx == 0) {\r\n                                 par_pos = j;\r\n+                                real->SanityCheck();\r\n                                 break;\r\n                             }\r\n                             --par_idx;\r\n@@ -942,6 +970,7 @@\r\n                         for (auto j : clusters[chl_cl]) {\r\n                             if (chl_idx == 0) {\r\n                                 chl_pos = j;\r\n+                                real->SanityCheck();\r\n                                 break;\r\n                             }\r\n                             --chl_idx;\r\n@@ -1011,6 +1040,7 @@\r\n                     top_sim.RemoveTransaction(top_sim.GetRef(simpos));\r\n                 }\r\n                 assert(!top_sim.IsOversized());\r\n+                real->SanityCheck();\r\n                 break;\r\n             } else if (command-- == 0) {\r\n                 // GetMainMemoryUsage().\r\n@@ -1026,6 +1056,7 @@\r\n                 } else {\r\n                     assert(usage > 0);\r\n                 }\r\n+                real->SanityCheck();\r\n                 break;\r\n             }\r\n         }\r\ndiff --git a/src/test/fuzz/cluster_linearize.cpp b/src/test/fuzz/cluster_linearize.cpp\r\n--- a/src/test/fuzz/cluster_linearize.cpp\t(revision 262762bbb6f7157ba8c54972909c9214448c304b)\r\n+++ b/src/test/fuzz/cluster_linearize.cpp\t(date 1760155666348)\r\n@@ -453,7 +453,6 @@\r\n     };\r\n \r\n     auto last_compaction_pos{real.PositionRange()};\r\n-\r\n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\r\n         int command = provider.ConsumeIntegral<uint8_t>() % 4;\r\n         while (true) {\r\n@@ -476,6 +475,7 @@\r\n                 // Update sim.\r\n                 sim[idx] = {feerate, TestBitSet::Singleton(idx)};\r\n                 ++num_tx_sim;\r\n+                SanityCheck(real);\r\n                 break;\r\n             } else if (num_tx_sim > 0 && command-- == 0) {\r\n                 // AddDependencies.\r\n@@ -485,6 +485,7 @@\r\n                 real.AddDependencies(parents, child);\r\n                 // Apply to sim.\r\n                 sim[child]->second |= parents;\r\n+                SanityCheck(real);\r\n                 break;\r\n             } else if (num_tx_sim > 0 && command-- == 0) {\r\n                 // Remove transactions.\r\n@@ -507,6 +508,7 @@\r\n                         }\r\n                     }\r\n                 }\r\n+                SanityCheck(real);\r\n                 break;\r\n             } else if (command-- == 0) {\r\n                 // Compact.\r\n@@ -515,6 +517,7 @@\r\n                 const size_t mem_after{real.DynamicMemoryUsage()};\r\n                 assert(real.PositionRange() < last_compaction_pos ? mem_after < mem_before : mem_after <= mem_before);\r\n                 last_compaction_pos = real.PositionRange();\r\n+                SanityCheck(real);\r\n                 break;\r\n             }\r\n         }\r\ndiff --git a/src/cluster_linearize.h b/src/cluster_linearize.h\r\n--- a/src/cluster_linearize.h\t(revision 262762bbb6f7157ba8c54972909c9214448c304b)\r\n+++ b/src/cluster_linearize.h\t(date 1760204167676)\r\n@@ -165,9 +165,10 @@\r\n         // Remove the deleted transactions from ancestors/descendants of other transactions. Note\r\n         // that the deleted positions will retain old feerate and dependency information. This does\r\n         // not matter as they will be overwritten by AddTransaction if they get used again.\r\n-        for (auto& entry : entries) {\r\n-            entry.ancestors &= m_used;\r\n-            entry.descendants &= m_used;\r\n+        assert(entries.size() >= m_used.Count()); // TODO delete\r\n+        for (auto idx : m_used) {\r\n+            entries[idx].ancestors &= m_used;\r\n+            entries[idx].descendants &= m_used;\r\n         }\r\n     }\r\n ```\r\n\r\n</details>\r\n\r\ncode review ACK 7421e58dee402ee8b5b58a18684953a89ad350d7",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3393553555",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    },
    {
      "event": "reviewed",
      "id": 3326354774,
      "node_id": "PRR_kwDOABII587GRCVW",
      "url": null,
      "actor": null,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-11T18:03:23Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#pullrequestreview-3326354774",
      "submitted_at": "2025-10-11T18:03:23Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ0MDMwMmZiYWY0MWJjYjcwOTM5ZGI1MzQxMTFmNDkwZDdlZWQ1YzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d40302fbaf41bcb70939db534111f490d7eed5c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d40302fbaf41bcb70939db534111f490d7eed5c1",
      "tree": {
        "sha": "31a0218393df4947b20159466949e0960e096c72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31a0218393df4947b20159466949e0960e096c72"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2987102dd13f965c7a0bf1d5b8ee15bcf025398",
          "sha": "d2987102dd13f965c7a0bf1d5b8ee15bcf025398",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d2987102dd13f965c7a0bf1d5b8ee15bcf025398"
        }
      ],
      "message": "txgraph: Make level of Cluster implicit (optimization)\n\nThis reduces per-Cluster memory usage by making Clusters not aware of their\nown level. Instead, track it either in calling code, or infer it based on\nthe transactions in them.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:13:50Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-11-15T14:34:08Z"
      },
      "sha": "d40302fbaf41bcb70939db534111f490d7eed5c1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJiMWQzMDI1MDg3N2JhMjU3NmNmYzZkNTZmZTVhYTBkOWU3N2Y3MDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b1d30250877ba2576cfc6d56fe5aa0d9e77f706",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2b1d30250877ba2576cfc6d56fe5aa0d9e77f706",
      "tree": {
        "sha": "2c97b838e3b8696025032eaf41f41bc560b0d4dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c97b838e3b8696025032eaf41f41bc560b0d4dc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d40302fbaf41bcb70939db534111f490d7eed5c1",
          "sha": "d40302fbaf41bcb70939db534111f490d7eed5c1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d40302fbaf41bcb70939db534111f490d7eed5c1"
        }
      ],
      "message": "txgraph: move some sanity checks from Cluster to TxGraphImpl (refactor)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:16:05Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-09-17T14:42:31Z"
      },
      "sha": "2b1d30250877ba2576cfc6d56fe5aa0d9e77f706"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIxNjM3YTkwZGViODUyOGE2ODkyZGJjMTA2NTg3NjU4M2I1MDc1ZDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1637a90deb8528a6892dbc1065876583b5075d6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b1637a90deb8528a6892dbc1065876583b5075d6",
      "tree": {
        "sha": "41b88bfcf1f94b3baafcf867a92310a5727ea845",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41b88bfcf1f94b3baafcf867a92310a5727ea845"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b1d30250877ba2576cfc6d56fe5aa0d9e77f706",
          "sha": "2b1d30250877ba2576cfc6d56fe5aa0d9e77f706",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2b1d30250877ba2576cfc6d56fe5aa0d9e77f706"
        }
      ],
      "message": "txgraph: avoid holes in DepGraph positions (mem optimization)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:25:05Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-08-04T21:18:09Z"
      },
      "sha": "b1637a90deb8528a6892dbc1065876583b5075d6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJiNWNiMjIyYWU1NWE2MTY0NmNiNzIxZWQxOTYxOGVkMzMyZDM3ZmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb5cb222ae55a61646cb721ed19618ed332d37ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bb5cb222ae55a61646cb721ed19618ed332d37ff",
      "tree": {
        "sha": "2daea291a308dbf4424f88c1f6a7cdc56ed72d21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2daea291a308dbf4424f88c1f6a7cdc56ed72d21"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1637a90deb8528a6892dbc1065876583b5075d6",
          "sha": "b1637a90deb8528a6892dbc1065876583b5075d6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b1637a90deb8528a6892dbc1065876583b5075d6"
        }
      ],
      "message": "depgraph: add memory usage control (feature)\n\nCo-Authored-By: Lőrinc <pap.lorinc@gmail.com>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:25:09Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-08-04T22:01:05Z"
      },
      "sha": "bb5cb222ae55a61646cb721ed19618ed332d37ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRiYTU2MmU1ZjRlNGFhMmYzOTBlNmYzZTg3MWJlOWIwZDIxNjc5NGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ba562e5f4e4aa2f390e6f3e871be9b0d216794e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba562e5f4e4aa2f390e6f3e871be9b0d216794e",
      "tree": {
        "sha": "faad012e5c17201f34766640accb1f0307d99daf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faad012e5c17201f34766640accb1f0307d99daf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb5cb222ae55a61646cb721ed19618ed332d37ff",
          "sha": "bb5cb222ae55a61646cb721ed19618ed332d37ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bb5cb222ae55a61646cb721ed19618ed332d37ff"
        }
      ],
      "message": "txgraph: keep data structures compact (mem optimization)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:25:09Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-08-05T13:50:41Z"
      },
      "sha": "4ba562e5f4e4aa2f390e6f3e871be9b0d216794e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc2ODBiYjhmZDQ4ZDIzNTdkM2MxYTdiODEyMWE2YWQ4OGQyZjZjY2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7680bb8fd48d2357d3c1a7b8121a6ad88d2f6ccf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7680bb8fd48d2357d3c1a7b8121a6ad88d2f6ccf",
      "tree": {
        "sha": "ea17355136f40fe18add3ea8b3425dad7da1998a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea17355136f40fe18add3ea8b3425dad7da1998a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ba562e5f4e4aa2f390e6f3e871be9b0d216794e",
          "sha": "4ba562e5f4e4aa2f390e6f3e871be9b0d216794e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba562e5f4e4aa2f390e6f3e871be9b0d216794e"
        }
      ],
      "message": "txgraph: keep track of Cluster memory usage (preparation)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:25:09Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-08-05T13:50:54Z"
      },
      "sha": "7680bb8fd48d2357d3c1a7b8121a6ad88d2f6ccf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA0YzgwOGFjNGM0N2RjYmFmZmEwNjQ3NjQwM2RiNjQ5Yzc1NzQzNmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04c808ac4c47dcbaffa06476403db649c757436e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/04c808ac4c47dcbaffa06476403db649c757436e",
      "tree": {
        "sha": "5872a6ff71a2738d1e6d44c2e96179df16f2e03c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5872a6ff71a2738d1e6d44c2e96179df16f2e03c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7680bb8fd48d2357d3c1a7b8121a6ad88d2f6ccf",
          "sha": "7680bb8fd48d2357d3c1a7b8121a6ad88d2f6ccf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7680bb8fd48d2357d3c1a7b8121a6ad88d2f6ccf"
        }
      ],
      "message": "txgraph: expose memory usage estimate function (feature)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:25:09Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-08-05T15:06:15Z"
      },
      "sha": "04c808ac4c47dcbaffa06476403db649c757436e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI2MDJkODllZGQwNDY5M2QwZWJiYzZiM2M4N2E3YzNmZTkwZGNmNDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2602d89edd04693d0ebbc6b3c87a7c3fe90dcf40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2602d89edd04693d0ebbc6b3c87a7c3fe90dcf40",
      "tree": {
        "sha": "9ea6cf572bebbf2c257bd6c5160dc29d51e5fd81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ea6cf572bebbf2c257bd6c5160dc29d51e5fd81"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04c808ac4c47dcbaffa06476403db649c757436e",
          "sha": "04c808ac4c47dcbaffa06476403db649c757436e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/04c808ac4c47dcbaffa06476403db649c757436e"
        }
      ],
      "message": "txgraph: avoid accessing other Cluster internals (refactor)\n\nThis adds 4 functions to Cluster to help implement Merge() and Split() without\nneeding access to the internals of the other Cluster. This is a preparation for\na follow-up that will make Clusters a virtual class whose internals are abstracted\naway.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:26:39Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-09-05T15:12:23Z"
      },
      "sha": "2602d89edd04693d0ebbc6b3c87a7c3fe90dcf40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcyNmI5OTU3MzlhYjdiODhmYjVkMWM4NWEzM2U2YzY4YTRlMTQ2YmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/726b995739ab7b88fb5d1c85a33e6c68a4e146bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/726b995739ab7b88fb5d1c85a33e6c68a4e146bc",
      "tree": {
        "sha": "5419c34f07d5e78ec27398dbd2c7c020d5993e56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5419c34f07d5e78ec27398dbd2c7c020d5993e56"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2602d89edd04693d0ebbc6b3c87a7c3fe90dcf40",
          "sha": "2602d89edd04693d0ebbc6b3c87a7c3fe90dcf40",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2602d89edd04693d0ebbc6b3c87a7c3fe90dcf40"
        }
      ],
      "message": "txgraph: make Cluster an abstract class (refactor)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:32:32Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-08T20:41:08Z"
      },
      "sha": "726b995739ab7b88fb5d1c85a33e6c68a4e146bc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZiYWYxMjYyMWY2NmYxMjRjYWRmZmU0YmIwMGNkMTFiNzVhN2MzZWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6baf12621f66f124cadffe4bb00cd11b75a7c3ea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6baf12621f66f124cadffe4bb00cd11b75a7c3ea",
      "tree": {
        "sha": "e9d4832f2adbc7bff8f6702799274492b242ddda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9d4832f2adbc7bff8f6702799274492b242ddda"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/726b995739ab7b88fb5d1c85a33e6c68a4e146bc",
          "sha": "726b995739ab7b88fb5d1c85a33e6c68a4e146bc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/726b995739ab7b88fb5d1c85a33e6c68a4e146bc"
        }
      ],
      "message": "txgraph: comment fixes (doc fix)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:32:35Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-09T17:03:10Z"
      },
      "sha": "6baf12621f66f124cadffe4bb00cd11b75a7c3ea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU5M2IwZjA5Y2MyYWQ3Yjc0M2Y4OTZhMDljNDhkNTg0ZGZjYzI3ODc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e93b0f09cc2ad7b743f896a09c48d584dfcc2787",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e93b0f09cc2ad7b743f896a09c48d584dfcc2787",
      "tree": {
        "sha": "4fcb82372daa3be5d68e42142493be6bed6d947e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fcb82372daa3be5d68e42142493be6bed6d947e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6baf12621f66f124cadffe4bb00cd11b75a7c3ea",
          "sha": "6baf12621f66f124cadffe4bb00cd11b75a7c3ea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6baf12621f66f124cadffe4bb00cd11b75a7c3ea"
        }
      ],
      "message": "txgraph: abstract out creation of empty Clusters (refactor)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:32:35Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-09-07T14:12:36Z"
      },
      "sha": "e93b0f09cc2ad7b743f896a09c48d584dfcc2787"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUzNDYyNTA3MzI1MzEzMmM0YjcxMWIzYzMzZWU1MGJlNjAyOTBlMzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e34625073253132c4b711b3c33ee50be60290e35",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e34625073253132c4b711b3c33ee50be60290e35",
      "tree": {
        "sha": "32b2c8eaf3d2861ec8922d0feb5a15a1c79a84e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32b2c8eaf3d2861ec8922d0feb5a15a1c79a84e0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e93b0f09cc2ad7b743f896a09c48d584dfcc2787",
          "sha": "e93b0f09cc2ad7b743f896a09c48d584dfcc2787",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e93b0f09cc2ad7b743f896a09c48d584dfcc2787"
        }
      ],
      "message": "txgraph: give Clusters a range of intended tx counts (preparation)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:32:35Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-09T14:57:53Z"
      },
      "sha": "e34625073253132c4b711b3c33ee50be60290e35"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAyM2NkNWE1NDY5YWQ2MTIwNWJmN2JiMTEzNTg5NWYyYjRhMjBlYTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "tree": {
        "sha": "ab5b4d87db5457fdb6dc643043cfebc7a799b41c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab5b4d87db5457fdb6dc643043cfebc7a799b41c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e34625073253132c4b711b3c33ee50be60290e35",
          "sha": "e34625073253132c4b711b3c33ee50be60290e35",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e34625073253132c4b711b3c33ee50be60290e35"
        }
      ],
      "message": "txgraph: add SingletonClusterImpl (mem optimization)\n\nThis adds a specialized Cluster implementation for singleton clusters, saving\na significant amount of memory by avoiding the need for m_depgraph, m_mapping,\nand m_linearization, and their overheads.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-10-11T21:46:43Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-09-05T20:06:35Z"
      },
      "sha": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20227360020,
      "node_id": "HRFPE_lADOABII587E8tJszwAAAAS1pQUU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20227360020",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "created_at": "2025-10-11T22:12:21Z"
    },
    {
      "event": "commented",
      "id": 3393696660,
      "node_id": "IC_kwDOABII587KR7OU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3393696660",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-11T22:14:34Z",
      "updated_at": "2025-10-11T22:14:34Z",
      "author_association": "MEMBER",
      "body": "Not going to address any further nits, unless I need to repush for other reasons.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#issuecomment-3393696660",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33157"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2320034473",
      "pull_request_review_id": 3182210966,
      "id": 2320034473,
      "node_id": "PRRC_kwDOABII586KSOqp",
      "diff_hunk": "@@ -2906,6 +2975,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(0);\n+    ApplyDependencies(0);\n+    // Compute memory usage\n+    auto& clusterset = GetClusterSet(0);\n+    size_t usage = /* From clusters */\n+                   clusterset.m_cluster_usage +",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 949,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "754775357b15929aa51b0bc629231c96930039dd",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note to self/reviewers: since we've done `ApplyDependencies`, `ClusterSet.m_group_data`, `m_deps_to_add`, and `m_to_remove` are all empty so we don't need to add their dynamic memory usage. We also aren't counting `m_removed` since that'd be at staging level or an `m_unlinked` entry.",
      "created_at": "2025-09-03T19:56:02Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2320034473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2320034473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323216351",
      "pull_request_review_id": 3186772025,
      "id": 2323216351,
      "node_id": "PRRC_kwDOABII586KeXff",
      "diff_hunk": "@@ -484,12 +485,13 @@ class TxGraphImpl final : public TxGraph\n     /** Swap the Entry referred to by a and the one referred to by b. */\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n-    *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n+    *   removed), return the Cluster it is in and the level it has. Otherwise, return",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 71,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "15277c05a1e93ecac1d66470a5fe8bf9cba1f8ca",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```Suggestion\r\n    *   removed), return the Cluster it is in and the level the Cluster has. Otherwise, return\r\n```",
      "created_at": "2025-09-04T19:09:00Z",
      "updated_at": "2025-09-04T20:20:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2323216351",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323216351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323344088",
      "pull_request_review_id": 3186772025,
      "id": 2323344088,
      "node_id": "PRRC_kwDOABII586Ke2rY",
      "diff_hunk": "@@ -1001,8 +1001,9 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;\n-        if (first && component == todo) {\n-            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+        if (first && component == todo && SetType::Fill(component.Count()) == component) {\n+            // The existing Cluster is an entire component, without holes. Leave it be, but update\n+            // its quality.",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "c638faec3aa182c10025199d5a6f0105c021533c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "probably should be explicit in comments that this is a memory optimization, letting hole-having clusters be reconstructed without holes",
      "created_at": "2025-09-04T19:50:49Z",
      "updated_at": "2025-09-04T20:20:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2323344088",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323344088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323362751",
      "pull_request_review_id": 3186772025,
      "id": 2323362751,
      "node_id": "PRRC_kwDOABII586Ke7O_",
      "diff_hunk": "@@ -507,6 +507,11 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n             }\n             continue;\n         }\n+        if (command <= 3) {",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 33,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "614eefb7df517556bf929bb1d2be40a623b76e10",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this in unconditionally called I think",
      "created_at": "2025-09-04T19:56:33Z",
      "updated_at": "2025-09-04T20:20:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2323362751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323362751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323384935",
      "pull_request_review_id": 3186772025,
      "id": 2323384935,
      "node_id": "PRRC_kwDOABII586KfApn",
      "diff_hunk": "@@ -453,8 +453,8 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n     };\n \n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\n-        uint8_t command = provider.ConsumeIntegral<uint8_t>();\n-        if (num_tx_sim == 0 || ((command % 3) <= 0 && num_tx_sim < TestBitSet::Size())) {\n+        uint8_t command = provider.ConsumeIntegral<uint8_t>() % 4;\n+        if ((command <= 2 && num_tx_sim == 0) || (command <= 0 && num_tx_sim < TestBitSet::Size())) {",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "614eefb7df517556bf929bb1d2be40a623b76e10",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "not sure I track why the command values are being mapped to specific series of actions. Writing it out in case it ends up helpful:\r\n\r\n0: \r\na. AddTransaction if txns below set limit\r\nb. AddDependency if any txns exist\r\nc. RemoveTransactions if any txns exist\r\nd. Compact\r\n1:\r\na. AddTransaction if no transaction exists\r\nb. AddDependency (transaction will exist)\r\nc. RemoveTransactions (transaction will exist)\r\nd. Compact\r\n\r\n2:\r\na. AddTransaction if no transaction exists\r\nb. RemoveTransactions (transaction will exist)\r\nc. Compact\r\n\r\n3.\r\na. Compact",
      "created_at": "2025-09-04T20:03:54Z",
      "updated_at": "2025-09-04T20:20:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2323384935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323384935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2326001691",
      "pull_request_review_id": 3190723210,
      "id": 2326001691,
      "node_id": "PRRC_kwDOABII586Ko_gb",
      "diff_hunk": "@@ -484,12 +485,13 @@ class TxGraphImpl final : public TxGraph\n     /** Swap the Entry referred to by a and the one referred to by b. */\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n-    *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n+    *   removed), return the Cluster it is in and the level it has. Otherwise, return",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 71,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "15277c05a1e93ecac1d66470a5fe8bf9cba1f8ca",
      "in_reply_to_id": 2323216351,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-05T20:35:08Z",
      "updated_at": "2025-09-05T20:35:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2326001691",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2326001691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2326001953",
      "pull_request_review_id": 3190723538,
      "id": 2326001953,
      "node_id": "PRRC_kwDOABII586Ko_kh",
      "diff_hunk": "@@ -1001,8 +1001,9 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;\n-        if (first && component == todo) {\n-            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+        if (first && component == todo && SetType::Fill(component.Count()) == component) {\n+            // The existing Cluster is an entire component, without holes. Leave it be, but update\n+            // its quality.",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "c638faec3aa182c10025199d5a6f0105c021533c",
      "in_reply_to_id": 2323344088,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment to explain that.",
      "created_at": "2025-09-05T20:35:19Z",
      "updated_at": "2025-09-05T20:35:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2326001953",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2326001953"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2326002614",
      "pull_request_review_id": 3190724776,
      "id": 2326002614,
      "node_id": "PRRC_kwDOABII586Ko_u2",
      "diff_hunk": "@@ -507,6 +507,11 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n             }\n             continue;\n         }\n+        if (command <= 3) {",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 33,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "614eefb7df517556bf929bb1d2be40a623b76e10",
      "in_reply_to_id": 2323362751,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've rewritten this using the \"loop of comand-- approach\".",
      "created_at": "2025-09-05T20:35:45Z",
      "updated_at": "2025-09-05T20:35:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2326002614",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2326002614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 510,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2326002899",
      "pull_request_review_id": 3190725449,
      "id": 2326002899,
      "node_id": "PRRC_kwDOABII586Ko_zT",
      "diff_hunk": "@@ -453,8 +453,8 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n     };\n \n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\n-        uint8_t command = provider.ConsumeIntegral<uint8_t>();\n-        if (num_tx_sim == 0 || ((command % 3) <= 0 && num_tx_sim < TestBitSet::Size())) {\n+        uint8_t command = provider.ConsumeIntegral<uint8_t>() % 4;\n+        if ((command <= 2 && num_tx_sim == 0) || (command <= 0 && num_tx_sim < TestBitSet::Size())) {",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "614eefb7df517556bf929bb1d2be40a623b76e10",
      "in_reply_to_id": 2323384935,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have rewritten this.",
      "created_at": "2025-09-05T20:35:58Z",
      "updated_at": "2025-09-05T20:35:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2326002899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2326002899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 457,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352347809",
      "pull_request_review_id": 3229759456,
      "id": 2352347809,
      "node_id": "PRRC_kwDOABII586MNfqh",
      "diff_hunk": "@@ -113,8 +113,6 @@ class Cluster\n     QualityLevel m_quality{QualityLevel::NONE};",
      "path": "src/txgraph.cpp",
      "position": 35,
      "original_position": 1,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "22f5fe833fcf3da6a4180d181ff68d6da34f40db",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"txgraph: Make level of Cluster implicit (optimization)\"  22f5fe833fcf3da6a4180d181ff68d6da34f40db\r\n\r\nShould also add coverage for `GetLevel`\r\n```diff\r\ndiff --git a/src/txgraph.cpp b/src/txgraph.cpp\r\nindex ef7b6568107..0e7e5d22947 100644\r\n--- a/src/txgraph.cpp\r\n+++ b/src/txgraph.cpp\r\n@@ -2421,6 +2421,8 @@ void TxGraphImpl::SanityCheck() const\r\n                 if (cluster.GetTxCount() != 0) {\r\n                     actual_clusters.insert(&cluster);\r\n                 }\r\n+\r\n+                assert(cluster.GetLevel(*this) == level);\r\n                 // Sanity check the cluster, according to the Cluster's internal rules.\r\n                 cluster.SanityCheck(*this, level);\r\n                 // Check that the cluster's quality and setindex matches its position in the quality list\r\n```",
      "created_at": "2025-09-16T12:31:00Z",
      "updated_at": "2025-09-16T14:07:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2352347809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352347809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352500751",
      "pull_request_review_id": 3229759456,
      "id": 2352500751,
      "node_id": "PRRC_kwDOABII586MOFAP",
      "diff_hunk": "@@ -132,6 +132,20 @@ class Cluster\n \n     // Generic helper functions.\n \n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    size_t TotalMemoryUsage() const noexcept\n+    {\n+        return // Dynamic memory allocated in this Cluster.\n+               memusage::DynamicUsage(m_mapping) + memusage::DynamicUsage(m_linearization) +\n+               // Dynamic memory usage inside m_depgraph.\n+               m_depgraph.DynamicMemoryUsage() +\n+               // Memory usage of the allocated Cluster itself.\n+               memusage::MallocUsage(sizeof(Cluster)) +\n+               // Memory usage of the ClusterSet::m_clusters entry.\n+               sizeof(std::unique_ptr<Cluster>);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "7974ed311c1843d548d98e9eae8fed71a42a1026",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"txgraph: keep track of Cluster memory usage (preparation)\"  7974ed311c1843d548d98e9eae8fed71a42a1026\r\n\r\nShould also count the sequence number of the cluster?\r\n```suggestion\r\n               // Memory usage of the cluster m_sequence.\r\n               + sizeof(uint64_t);\r\n```",
      "created_at": "2025-09-16T13:22:58Z",
      "updated_at": "2025-09-16T14:07:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2352500751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352500751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352615744",
      "pull_request_review_id": 3229759456,
      "id": 2352615744,
      "node_id": "PRRC_kwDOABII586MOhFA",
      "diff_hunk": "@@ -161,10 +159,13 @@ class Cluster\n     uint64_t GetTotalTxSize() const noexcept;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n     GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n+     *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n+    int GetLevel(const TxGraphImpl& graph) const noexcept;\n     /** Only called by Graph::SwapIndexes. */\n     void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph) noexcept;\n+    void Updated(TxGraphImpl& graph, int level) noexcept;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "22f5fe833fcf3da6a4180d181ff68d6da34f40db",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"txgraph: Make level of Cluster implicit (optimization)\" https://github.com/bitcoin/bitcoin/commit/22f5fe833fcf3da6a4180d181ff68d6da34f40db\r\n\r\nInstead of using an int for level here, should we relax the `Level`  `enum` from a scoped `enum` to an unscoped one to allow implicit conversion and unified input? This would also apply in cases where we want to pass a specific `enum`  value, e.g. in  e.g  `CopyToStaging`",
      "created_at": "2025-09-16T13:58:28Z",
      "updated_at": "2025-09-16T14:07:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2352615744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352615744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355234167",
      "pull_request_review_id": 3234028945,
      "id": 2355234167,
      "node_id": "PRRC_kwDOABII586MYgV3",
      "diff_hunk": "@@ -132,6 +132,20 @@ class Cluster\n \n     // Generic helper functions.\n \n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    size_t TotalMemoryUsage() const noexcept\n+    {\n+        return // Dynamic memory allocated in this Cluster.\n+               memusage::DynamicUsage(m_mapping) + memusage::DynamicUsage(m_linearization) +\n+               // Dynamic memory usage inside m_depgraph.\n+               m_depgraph.DynamicMemoryUsage() +\n+               // Memory usage of the allocated Cluster itself.\n+               memusage::MallocUsage(sizeof(Cluster)) +\n+               // Memory usage of the ClusterSet::m_clusters entry.\n+               sizeof(std::unique_ptr<Cluster>);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "7974ed311c1843d548d98e9eae8fed71a42a1026",
      "in_reply_to_id": 2352500751,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No, that's included in `sizeof(Cluster)` above.",
      "created_at": "2025-09-17T11:42:07Z",
      "updated_at": "2025-09-17T11:42:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2355234167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355234167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355242458",
      "pull_request_review_id": 3234040540,
      "id": 2355242458,
      "node_id": "PRRC_kwDOABII586MYiXa",
      "diff_hunk": "@@ -161,10 +159,13 @@ class Cluster\n     uint64_t GetTotalTxSize() const noexcept;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n     GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n+     *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n+    int GetLevel(const TxGraphImpl& graph) const noexcept;\n     /** Only called by Graph::SwapIndexes. */\n     void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph) noexcept;\n+    void Updated(TxGraphImpl& graph, int level) noexcept;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "22f5fe833fcf3da6a4180d181ff68d6da34f40db",
      "in_reply_to_id": 2352615744,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd rather keep the external selector (`Level level`) and internal identifier (`int level`) separate, as it may allow adding more external ones later if need be (e.g. a `Level::SINGLE` which requires there to be only the main level and asserts otherwise, or a `Level::STAGING` which requires a staging level to exist). Also, if we'd add a third level (which may be needed to implement `testmempoolaccept` with package RBF) there may be even more level selectors to add.",
      "created_at": "2025-09-17T11:45:36Z",
      "updated_at": "2025-09-17T11:45:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2355242458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355242458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355828081",
      "pull_request_review_id": 3234915888,
      "id": 2355828081,
      "node_id": "PRRC_kwDOABII586MaxVx",
      "diff_hunk": "@@ -113,8 +113,6 @@ class Cluster\n     QualityLevel m_quality{QualityLevel::NONE};",
      "path": "src/txgraph.cpp",
      "position": 35,
      "original_position": 1,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "22f5fe833fcf3da6a4180d181ff68d6da34f40db",
      "in_reply_to_id": 2352347809,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. I've also refactored these asserts a bit, moving some of them from `*ClusterImpl::SanityCheck` to `TxGraphImpl::SanityCheck`, so duplication across the two implementations can be avoided.",
      "created_at": "2025-09-17T14:57:28Z",
      "updated_at": "2025-09-17T14:57:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2355828081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355828081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356456729",
      "pull_request_review_id": 3235819050,
      "id": 2356456729,
      "node_id": "PRRC_kwDOABII586MdK0Z",
      "diff_hunk": "@@ -161,10 +159,13 @@ class Cluster\n     uint64_t GetTotalTxSize() const noexcept;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n     GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n+     *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n+    int GetLevel(const TxGraphImpl& graph) const noexcept;\n     /** Only called by Graph::SwapIndexes. */\n     void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph) noexcept;\n+    void Updated(TxGraphImpl& graph, int level) noexcept;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "22f5fe833fcf3da6a4180d181ff68d6da34f40db",
      "in_reply_to_id": 2352615744,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for the context.\r\nFor anyone that wants to dig in, the `testmempoolaccept` third level was discussed here https://github.com/bitcoin/bitcoin/issues/32160",
      "created_at": "2025-09-17T18:51:34Z",
      "updated_at": "2025-09-17T18:51:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2356456729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356456729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2359361516",
      "pull_request_review_id": 3239814693,
      "id": 2359361516,
      "node_id": "PRRC_kwDOABII586MoP_s",
      "diff_hunk": "@@ -1213,23 +1227,23 @@ Cluster* TxGraphImpl::FindCluster(GraphIndex idx, int level) const noexcept\n         // If the locator has the entry marked as explicitly removed, stop.\n         if (entry.m_locator[l].IsRemoved()) break;\n         // Otherwise, we have found the topmost ClusterSet that contains this entry.\n-        return entry.m_locator[l].cluster;\n+        return {entry.m_locator[l].cluster, l};\n     }\n     // If no non-empty locator was found, or an explicitly removed was hit, return nothing.\n-    return nullptr;\n+    return {nullptr, -1};\n }\n \n Cluster* TxGraphImpl::PullIn(Cluster* cluster) noexcept\n {\n     int to_level = GetTopLevel();\n     Assume(to_level == 1);\n-    int level = cluster->m_level;\n+    int level = cluster->GetLevel(*this);\n     Assume(level <= to_level);\n     // Copy the Cluster from main to staging, if it's not already there.\n     if (level == 0) {\n         // Make the Cluster Acceptable before copying. This isn't strictly necessary, but doing it\n         // now avoids doing double work later.\n-        MakeAcceptable(*cluster);\n+        MakeAcceptable(*cluster, 0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 402,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "fdcb5f17bd100eb2c1765c13bbb8367d03fc7ea5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fdcb5f17bd100eb2c1765c13bbb8367d03fc7ea5\r\n\r\nmicro-nit for readability\r\n\r\n```Suggestion\r\n        MakeAcceptable(*cluster, level);\r\n```",
      "created_at": "2025-09-18T13:38:17Z",
      "updated_at": "2025-09-18T17:00:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2359361516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2359361516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2359472683",
      "pull_request_review_id": 3239814693,
      "id": 2359472683,
      "node_id": "PRRC_kwDOABII586MorIr",
      "diff_hunk": "@@ -2275,7 +2288,7 @@ void Cluster::SanityCheck(const TxGraphImpl& graph, int level) const\n     // The number of transactions in a Cluster cannot exceed m_max_cluster_count.\n     assert(m_linearization.size() <= graph.m_max_cluster_count);\n     // The level must match the level the Cluster occurs in.",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 792,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "fdcb5f17bd100eb2c1765c13bbb8367d03fc7ea5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n\r\n```Suggestion\r\n    // The level must match the level the Cluster occurs in (call only valid with non-empty cluster).\r\n```",
      "created_at": "2025-09-18T14:01:32Z",
      "updated_at": "2025-09-18T17:00:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2359472683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2359472683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2290,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2359625033",
      "pull_request_review_id": 3239814693,
      "id": 2359625033,
      "node_id": "PRRC_kwDOABII586MpQVJ",
      "diff_hunk": "@@ -2976,6 +2978,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept",
      "path": "src/txgraph.cpp",
      "position": 1668,
      "original_position": 13,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "a940e46bb06cf40f65772516d67f78cbd87c6b52",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a940e46bb06cf40f65772516d67f78cbd87c6b52\r\n\r\nnoting we aren't tracking BlockBuilderImpl memory usage which only has growth in `m_excluded_clusters`\r\n\r\n(N.B. I don't think we need ordered set for m_excluded_clusters)",
      "created_at": "2025-09-18T14:32:22Z",
      "updated_at": "2025-09-18T17:00:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2359625033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2359625033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3437,
      "original_line": 3437,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360179765",
      "pull_request_review_id": 3239814693,
      "id": 2360179765,
      "node_id": "PRRC_kwDOABII586MrXw1",
      "diff_hunk": "@@ -779,6 +791,30 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept",
      "path": "src/txgraph.cpp",
      "position": 428,
      "original_position": 77,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "89b7997e7414074da3b0a35a17d86a2dfe24f378",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "89b7997e7414074da3b0a35a17d86a2dfe24f378\r\n\r\nFor these functions(and the later singleton ones) can we `Assume(graph_idx >= 0)`",
      "created_at": "2025-09-18T16:28:11Z",
      "updated_at": "2025-09-18T17:00:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2360179765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360179765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 889,
      "original_line": 889,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360237618",
      "pull_request_review_id": 3239814693,
      "id": 2360237618,
      "node_id": "PRRC_kwDOABII586Mrl4y",
      "diff_hunk": "@@ -1745,18 +1993,33 @@ void TxGraphImpl::Merge(std::span<Cluster*> to_merge, int in_level) noexcept\n     // moves.\n     size_t max_size_pos{0};\n     DepGraphIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    DepGraphIndex tot_size = max_size;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 417,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "66401148ddcba04c27751e39e53fc41e6deb5d14\r\n\r\nmicro-nit: couldn't figure out what `tot` meant for a second... \"to t.... size?\"\r\n```Suggestion\r\n    DepGraphIndex total_size = max_size;\r\n```",
      "created_at": "2025-09-18T16:40:34Z",
      "updated_at": "2025-09-18T17:00:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2360237618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360237618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1996,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372295604",
      "pull_request_review_id": 3257965212,
      "id": 2372295604,
      "node_id": "PRRC_kwDOABII586NZlu0",
      "diff_hunk": "@@ -779,6 +791,30 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept",
      "path": "src/txgraph.cpp",
      "position": 428,
      "original_position": 77,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "89b7997e7414074da3b0a35a17d86a2dfe24f378",
      "in_reply_to_id": 2360179765,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`GraphIndex` is unsigned, so that would literally always be true?",
      "created_at": "2025-09-23T13:15:24Z",
      "updated_at": "2025-09-23T13:15:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2372295604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372295604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 889,
      "original_line": 889,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372314425",
      "pull_request_review_id": 3257994134,
      "id": 2372314425,
      "node_id": "PRRC_kwDOABII586NZqU5",
      "diff_hunk": "@@ -779,6 +791,30 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept",
      "path": "src/txgraph.cpp",
      "position": 428,
      "original_position": 77,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "89b7997e7414074da3b0a35a17d86a2dfe24f378",
      "in_reply_to_id": 2360179765,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "huh, huge reading comprehension issues. I distinctly recall checking, sad!",
      "created_at": "2025-09-23T13:20:12Z",
      "updated_at": "2025-09-23T13:20:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2372314425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372314425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 889,
      "original_line": 889,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372336256",
      "pull_request_review_id": 3258025503,
      "id": 2372336256,
      "node_id": "PRRC_kwDOABII586NZvqA",
      "diff_hunk": "@@ -1213,23 +1227,23 @@ Cluster* TxGraphImpl::FindCluster(GraphIndex idx, int level) const noexcept\n         // If the locator has the entry marked as explicitly removed, stop.\n         if (entry.m_locator[l].IsRemoved()) break;\n         // Otherwise, we have found the topmost ClusterSet that contains this entry.\n-        return entry.m_locator[l].cluster;\n+        return {entry.m_locator[l].cluster, l};\n     }\n     // If no non-empty locator was found, or an explicitly removed was hit, return nothing.\n-    return nullptr;\n+    return {nullptr, -1};\n }\n \n Cluster* TxGraphImpl::PullIn(Cluster* cluster) noexcept\n {\n     int to_level = GetTopLevel();\n     Assume(to_level == 1);\n-    int level = cluster->m_level;\n+    int level = cluster->GetLevel(*this);\n     Assume(level <= to_level);\n     // Copy the Cluster from main to staging, if it's not already there.\n     if (level == 0) {\n         // Make the Cluster Acceptable before copying. This isn't strictly necessary, but doing it\n         // now avoids doing double work later.\n-        MakeAcceptable(*cluster);\n+        MakeAcceptable(*cluster, 0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 402,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "fdcb5f17bd100eb2c1765c13bbb8367d03fc7ea5",
      "in_reply_to_id": 2359361516,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-23T13:26:30Z",
      "updated_at": "2025-09-23T13:26:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2372336256",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372336256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372336983",
      "pull_request_review_id": 3258026489,
      "id": 2372336983,
      "node_id": "PRRC_kwDOABII586NZv1X",
      "diff_hunk": "@@ -2275,7 +2288,7 @@ void Cluster::SanityCheck(const TxGraphImpl& graph, int level) const\n     // The number of transactions in a Cluster cannot exceed m_max_cluster_count.\n     assert(m_linearization.size() <= graph.m_max_cluster_count);\n     // The level must match the level the Cluster occurs in.",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 792,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "fdcb5f17bd100eb2c1765c13bbb8367d03fc7ea5",
      "in_reply_to_id": 2359472683,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done something like this.",
      "created_at": "2025-09-23T13:26:45Z",
      "updated_at": "2025-09-23T13:26:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2372336983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372336983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2290,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372342553",
      "pull_request_review_id": 3258034242,
      "id": 2372342553,
      "node_id": "PRRC_kwDOABII586NZxMZ",
      "diff_hunk": "@@ -2976,6 +2978,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept",
      "path": "src/txgraph.cpp",
      "position": 1668,
      "original_position": 13,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "a940e46bb06cf40f65772516d67f78cbd87c6b52",
      "in_reply_to_id": 2359625033,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment that `BlockBuilder`s are excluded from the memory usage.\r\n\r\nAgreed w.r.t `ordered_set`, but will leave for a follow-up.",
      "created_at": "2025-09-23T13:28:37Z",
      "updated_at": "2025-09-23T13:28:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2372342553",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372342553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3437,
      "original_line": 3437,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372343531",
      "pull_request_review_id": 3258035778,
      "id": 2372343531,
      "node_id": "PRRC_kwDOABII586NZxbr",
      "diff_hunk": "@@ -779,6 +791,30 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept",
      "path": "src/txgraph.cpp",
      "position": 428,
      "original_position": 77,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "89b7997e7414074da3b0a35a17d86a2dfe24f378",
      "in_reply_to_id": 2360179765,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added an `Assume(graph_idx != GraphIndex(-1));` here for extra safety.",
      "created_at": "2025-09-23T13:28:58Z",
      "updated_at": "2025-09-23T13:28:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2372343531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372343531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 889,
      "original_line": 889,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372343983",
      "pull_request_review_id": 3258036502,
      "id": 2372343983,
      "node_id": "PRRC_kwDOABII586NZxiv",
      "diff_hunk": "@@ -1745,18 +1993,33 @@ void TxGraphImpl::Merge(std::span<Cluster*> to_merge, int in_level) noexcept\n     // moves.\n     size_t max_size_pos{0};\n     DepGraphIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    DepGraphIndex tot_size = max_size;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 417,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "in_reply_to_id": 2360237618,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-23T13:29:05Z",
      "updated_at": "2025-09-23T13:29:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2372343983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372343983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1996,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402767616",
      "pull_request_review_id": 3299619754,
      "id": 2402767616,
      "node_id": "PRRC_kwDOABII586PN1MA",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n+    /** Append a transaction with given GraphIndex at the end of this Cluster and its\n+     *  linearization. Return the DepGraphIndex it was placed at. */\n+    virtual DepGraphIndex AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept = 0;\n+    /** Add dependencies to a given child in this cluster. */\n+    virtual void AddDependencies(SetType parents, DepGraphIndex child) noexcept = 0;\n+    /** Invoke visitor_fn for each transaction in the cluster, in linearization order, then wipe this Cluster. */\n+    virtual void ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept = 0;\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n+     *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n+    virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\n     /** Only called by Graph::SwapIndexes. */\n-    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    virtual void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept = 0;\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph) noexcept;\n+    virtual void Updated(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Create a copy of this Cluster in staging, returning a pointer to it (used by PullIn). */\n-    Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept;\n+    virtual Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept = 0;\n     /** Get the list of Clusters in main that conflict with this one (which is assumed to be in staging). */\n-    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    virtual void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept = 0;\n     /** Mark all the Entry objects belonging to this staging Cluster as missing. The Cluster must be\n      *  deleted immediately after. */\n-    void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    virtual void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept = 0;\n     /** Remove all transactions from a Cluster. */\n-    void Clear(TxGraphImpl& graph) noexcept;\n+    virtual void Clear(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Change a Cluster's level from 1 (staging) to 0 (main). */\n-    void MoveToMain(TxGraphImpl& graph) noexcept;\n+    virtual void MoveToMain(TxGraphImpl& graph) noexcept = 0;\n+    /** Minimize this Cluster's memory usage. */\n+    virtual void Compact() noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n \n     /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n-     *  off. These must be at least one such entry. */\n-    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+     *  off. There must be at least one such entry. */\n+    virtual void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept = 0;\n     /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n      *  Cluster afterwards. */\n-    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    [[nodiscard]] virtual bool Split(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Move all transactions from cluster to *this (as separate components). */\n-    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    virtual void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept = 0;\n     /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n-    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    virtual void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept = 0;\n     /** Improve the linearization of this Cluster. Returns how much work was performed and whether\n      *  the Cluster's QualityLevel improved as a result. */\n-    std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+    virtual std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept = 0;\n     /** For every chunk in the cluster, append its FeeFrac to ret. */\n-    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    virtual void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept = 0;\n     /** Add a TrimTxData entry (filling m_chunk_feerate, m_index, m_tx_size) for every\n      *  transaction in the Cluster to ret. Implicit dependencies between consecutive transactions\n      *  in the linearization are added to deps. Return the Cluster's total transaction size. */\n-    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+    virtual uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of public TxGraph functions.\n \n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their ancestors to output. */\n-    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their descendants to output. */\n-    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Populate range with refs for the transactions in this Cluster's linearization, from\n      *  position start_pos until start_pos+range.size()-1, inclusive. Returns whether that\n      *  range includes the last transaction in the linearization. */\n-    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    virtual bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept = 0;\n     /** Get the individual transaction feerate of a Cluster element. */\n-    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    virtual FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept = 0;\n     /** Modify the fee of a Cluster element. */\n-    void SetFee(TxGraphImpl& graph, DepGraphIndex idx, int64_t fee) noexcept;\n+    virtual void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept = 0;\n \n     // Debugging functions.\n \n-    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+    virtual void SanityCheck(const TxGraphImpl& graph, int level) const = 0;\n };\n \n+/** An implementation of Cluster that uses a DepGraph and vectors, to support arbitrary numbers of\n+ *  transactions up to MAX_CLUSTER_COUNT_LIMIT. */\n+class GenericClusterImpl final : public Cluster",
      "path": "src/txgraph.cpp",
      "position": 178,
      "original_position": 181,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I wonder if the new vtable pointer that was introduced by polymorphism is worth it or we could make a fake-inheritance by templates or macros or code generation instead or `std::variant<SingletonCluste, GenericCluster>` parameter types? For the std::variant we would likely need some tricks to save memory (grouping vectors or more pointers to reduce size of generic, not sure yet) and it would likely be a big refactor and not sure it would be smaller or more readable, just thinking out loud. I will experiment with regrouping things to see if we can get some additional savings. (edited)",
      "created_at": "2025-10-03T17:35:38Z",
      "updated_at": "2025-10-07T14:31:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2402767616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402767616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402810313",
      "pull_request_review_id": 3299619754,
      "id": 2402810313,
      "node_id": "PRRC_kwDOABII586PN_nJ",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.\n+    Assume(child == 0);\n+    Assume(parent == SetType{} || parent == SetType::Fill(0));\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    for (auto pos : m_linearization) {\n+        visit_fn(pos, m_mapping[pos], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(pos)), m_depgraph.GetReducedParents(pos));\n+    }\n+    // Purge this Cluster, now that everything has been moved.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_linearization.clear();\n+    m_mapping.clear();\n+}\n+\n+void SingletonClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        visit_fn(0, m_graph_index, m_feerate, SetType{});\n+        m_graph_index = GraphIndex(-1);\n+    }\n+}\n+\n+int GenericClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];\n+    // See if there is a level whose Locator matches this Cluster, if so return that level.\n+    for (int level = 0; level < MAX_LEVELS; ++level) {\n+        if (entry.m_locator[level].cluster == this) return level;\n+    }\n+    // Given that we started with an Entry that occurs in this Cluster, one of its Locators must\n+    // point back to it.\n+    assert(false);\n+    return -1;",
      "path": "src/txgraph.cpp",
      "position": 490,
      "original_position": 467,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that we'd already be failing in the parent call's `Assume(level <= to_level)` (and that `std::unreachable()` is not yet available in C++20) could we maybe use our own `NONFATAL_UNREACHABLE` here?",
      "created_at": "2025-10-03T17:48:19Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2402810313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402810313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 950,
      "original_start_line": 929,
      "start_side": "RIGHT",
      "line": 951,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402939151",
      "pull_request_review_id": 3299619754,
      "id": 2402939151,
      "node_id": "PRRC_kwDOABII586POfEP",
      "diff_hunk": "@@ -1586,7 +1983,7 @@ void TxGraphImpl::GroupClusters(int level) noexcept\n     Compact();\n }\n \n-void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge, int in_level) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1151,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: what's the difference between an `int level` and the `int in_level` here? It doesn't seem to be shadowing anything.",
      "created_at": "2025-10-03T18:29:33Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2402939151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2402939151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1986,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403014140",
      "pull_request_review_id": 3299619754,
      "id": 2403014140,
      "node_id": "PRRC_kwDOABII586POxX8",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.\n+    Assume(child == 0);\n+    Assume(parent == SetType{} || parent == SetType::Fill(0));\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    for (auto pos : m_linearization) {\n+        visit_fn(pos, m_mapping[pos], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(pos)), m_depgraph.GetReducedParents(pos));\n+    }\n+    // Purge this Cluster, now that everything has been moved.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_linearization.clear();\n+    m_mapping.clear();\n+}\n+\n+void SingletonClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        visit_fn(0, m_graph_index, m_feerate, SetType{});\n+        m_graph_index = GraphIndex(-1);\n+    }\n+}\n+\n+int GenericClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];\n+    // See if there is a level whose Locator matches this Cluster, if so return that level.\n+    for (int level = 0; level < MAX_LEVELS; ++level) {\n+        if (entry.m_locator[level].cluster == this) return level;",
      "path": "src/txgraph.cpp",
      "position": 485,
      "original_position": 462,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I noticed `m_locator` is a raw C-style array, was `std::array<Locator, MAX_LEVELS>` considered as a slightly safer alternative that may avoid pointer decay - given its tiny size we want to make sure we're not misindexing and it might make the iterations slightly more descriptive:\n```C++\nfor (int level{0}; level < entry.m_locator.size(); ++level) {\n```",
      "created_at": "2025-10-03T18:50:05Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403014140",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403014140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 946,
      "original_line": 946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403086164",
      "pull_request_review_id": 3182210966,
      "id": 2403086164,
      "node_id": "PRRC_kwDOABII586PPC9U",
      "diff_hunk": "@@ -891,42 +1183,106 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n+}\n+\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(m_graph_index != GraphIndex(-1));\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n {\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    if (m_graph_index == GraphIndex(-1)) return;\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+}\n+\n+void GenericClusterImpl::MoveToMain(TxGraphImpl& graph) noexcept\n {\n-    Assume(m_level == 1);\n     for (auto i : m_linearization) {\n         GraphIndex idx = m_mapping[i];\n         auto& entry = graph.m_entries[idx];\n         entry.m_locator[1].SetMissing();\n     }\n     auto quality = m_quality;\n+    graph.GetClusterSet(1).m_cluster_usage -= TotalMemoryUsage();\n     auto cluster = graph.ExtractCluster(1, quality, m_setindex);\n     graph.InsertCluster(0, std::move(cluster), quality);\n-    Updated(graph);\n+    graph.GetClusterSet(0).m_cluster_usage += TotalMemoryUsage();\n+    Updated(graph, 0);\n+}\n+\n+void SingletonClusterImpl::MoveToMain(TxGraphImpl& graph) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        auto& entry = graph.m_entries[m_graph_index];\n+        entry.m_locator[1].SetMissing();\n+    }\n+    auto quality = m_quality;\n+    graph.GetClusterSet(1).m_cluster_usage -= TotalMemoryUsage();\n+    auto cluster = graph.ExtractCluster(1, quality, m_setindex);\n+    graph.InsertCluster(0, std::move(cluster), quality);\n+    graph.GetClusterSet(0).m_cluster_usage += TotalMemoryUsage();\n+    Updated(graph, 0);\n+}\n+\n+void GenericClusterImpl::Compact() noexcept\n+{\n+    m_linearization.shrink_to_fit();\n+    m_mapping.shrink_to_fit();\n+    m_depgraph.Compact();",
      "path": "src/txgraph.cpp",
      "position": 758,
      "original_position": 743,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note to self/reviewers: `Depgraph::Compact()` also calls `shrink_to_fit()`, meaning positions do not change and the mapping is not invalidated.",
      "created_at": "2025-10-03T19:11:13Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403086164",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403086164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1288,
      "original_line": 1288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403274255",
      "pull_request_review_id": 3299619754,
      "id": 2403274255,
      "node_id": "PRRC_kwDOABII586PPw4P",
      "diff_hunk": "@@ -484,12 +621,13 @@ class TxGraphImpl final : public TxGraph\n     /** Swap the Entry referred to by a and the one referred to by b. */\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n-    *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n+    *   removed), return the Cluster it is in and the level the Cluster has. Otherwise, return\n+    *   {nullptr, -1}. */\n+    std::pair<Cluster*, int> FindCluster(GraphIndex idx, int level) const noexcept;\n     /** Extract a Cluster from its ClusterSet. */\n     std::unique_ptr<Cluster> ExtractCluster(int level, QualityLevel quality, ClusterSetIndex setindex) noexcept;\n     /** Delete a Cluster. */\n-    void DeleteCluster(Cluster& cluster) noexcept;\n+    void DeleteCluster(int level, Cluster& cluster) noexcept;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 333,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: in other cases the parameters are in a different order, e.g. `void Split(Cluster& cluster, int level) noexcept;`",
      "created_at": "2025-10-03T20:29:18Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403274255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403274255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 630,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403287914",
      "pull_request_review_id": 3299619754,
      "id": 2403287914,
      "node_id": "PRRC_kwDOABII586PP0Nq",
      "diff_hunk": "@@ -1499,8 +1896,8 @@ void TxGraphImpl::GroupClusters(int level) noexcept\n         PartitionData* last_partition{nullptr};\n         for (const auto& [dep, _] : an_deps) {\n             auto [par, chl] = dep;\n-            auto par_cluster = FindCluster(par, level);\n-            auto chl_cluster = FindCluster(chl, level);\n+            auto [par_cluster, _par_level] = FindCluster(par, level);\n+            auto [chl_cluster, _chl_level] = FindCluster(chl, level);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1133,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: we could minimize the diff slightly with:\n```suggestion\n            auto par_cluster = FindCluster(par, level).first;\n            auto chl_cluster = FindCluster(chl, level).first;\n```",
      "created_at": "2025-10-03T20:35:26Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403287914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403287914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1899,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1900,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403340639",
      "pull_request_review_id": 3299619754,
      "id": 2403340639,
      "node_id": "PRRC_kwDOABII586PQBFf",
      "diff_hunk": "@@ -2207,8 +2220,8 @@ std::strong_ordering TxGraphImpl::CompareMainOrder(const Ref& a, const Ref& b) n\n     const auto& locator_b = entry_b.m_locator[0];\n     Assume(locator_a.IsPresent());\n     Assume(locator_b.IsPresent());\n-    MakeAcceptable(*locator_a.cluster);\n-    MakeAcceptable(*locator_b.cluster);\n+    MakeAcceptable(*locator_a.cluster, 0);\n+    MakeAcceptable(*locator_b.cluster, 0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 776,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "cd6dadf53aa8a6c2837381b4262a7468e311e554",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find these new unnamed and unbounded primitive arguments quite confusing now",
      "created_at": "2025-10-03T21:01:13Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403340639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403340639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 2223,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403366988",
      "pull_request_review_id": 3299619754,
      "id": 2403366988,
      "node_id": "PRRC_kwDOABII586PQHhM",
      "diff_hunk": "@@ -1123,8 +1134,9 @@ bool GenericClusterImpl::Split(TxGraphImpl& graph, int level) noexcept\n     // Iterate over the connected components of this Cluster's m_depgraph.\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n+        auto component_size = component.Count();\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "fcf5e788d912cc465ad84ec75dabaf9941044314",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fcf5e788d912cc465ad84ec75dabaf9941044314:\nNow that we have `component_size` deduplicated in follow-ups, consider using it for the split quality as well:\n```suggestion\n        auto split_quality = component_size <= 2 ? QualityLevel::OPTIMAL : new_quality;\n```\n\n----\n\nquestion: doesn't this change the definition of `QualityLevel::NEEDS_SPLIT`, since not all components are necessarily `NEEDS_RELINEARIZE` (but I might have misunderstood what this means)",
      "created_at": "2025-10-03T21:14:54Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403366988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403366988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403454316",
      "pull_request_review_id": 3299619754,
      "id": 2403454316,
      "node_id": "PRRC_kwDOABII586PQc1s",
      "diff_hunk": "@@ -453,62 +453,65 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n     };\n \n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\n-        uint8_t command = provider.ConsumeIntegral<uint8_t>();\n-        if (num_tx_sim == 0 || ((command % 3) <= 0 && num_tx_sim < TestBitSet::Size())) {\n-            // AddTransaction.\n-            auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n-            auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n-            FeeFrac feerate{fee, size};\n-            // Apply to DepGraph.\n-            auto idx = real.AddTransaction(feerate);\n-            // Verify that the returned index is correct.\n-            assert(!sim[idx].has_value());\n-            for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n-                if (!sim[i].has_value()) {\n-                    assert(idx == i);\n-                    break;\n+        int command = provider.ConsumeIntegral<uint8_t>() % 4;\n+        while (true) {\n+            // Iterate decreasing command until an applicable branch is found.\n+            if (num_tx_sim < TestBitSet::Size() && command-- == 0) {\n+                // AddTransaction.\n+                auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n+                auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n+                FeeFrac feerate{fee, size};\n+                // Apply to DepGraph.\n+                auto idx = real.AddTransaction(feerate);\n+                // Verify that the returned index is correct.\n+                assert(!sim[idx].has_value());\n+                for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n+                    if (!sim[i].has_value()) {\n+                        assert(idx == i);\n+                        break;\n+                    }\n                 }\n-            }\n-            // Update sim.\n-            sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n-            ++num_tx_sim;\n-            continue;\n-        }\n-        if ((command % 3) <= 1 && num_tx_sim > 0) {\n-            // AddDependencies.\n-            DepGraphIndex child = idx_fn();\n-            auto parents = subset_fn();\n-            // Apply to DepGraph.\n-            real.AddDependencies(parents, child);\n-            // Apply to sim.\n-            sim[child]->second |= parents;\n-            continue;\n-        }\n-        if (num_tx_sim > 0) {\n-            // Remove transactions.\n-            auto del = set_fn();\n-            // Propagate all ancestry information before deleting anything in the simulation (as\n-            // intermediary transactions may be deleted which impact connectivity).\n-            anc_update_fn();\n-            // Compare the state of the transactions being deleted.\n-            for (auto i : del) check_fn(i);\n-            // Apply to DepGraph.\n-            real.RemoveTransactions(del);\n-            // Apply to sim.\n-            for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n-                if (sim[i].has_value()) {\n-                    if (del[i]) {\n-                        --num_tx_sim;\n-                        sim[i] = std::nullopt;\n-                    } else {\n-                        sim[i]->second -= del;\n+                // Update sim.\n+                sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n+                ++num_tx_sim;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // AddDependencies.\n+                DepGraphIndex child = idx_fn();\n+                auto parents = subset_fn();\n+                // Apply to DepGraph.\n+                real.AddDependencies(parents, child);\n+                // Apply to sim.\n+                sim[child]->second |= parents;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // Remove transactions.\n+                auto del = set_fn();\n+                // Propagate all ancestry information before deleting anything in the simulation (as\n+                // intermediary transactions may be deleted which impact connectivity).\n+                anc_update_fn();\n+                // Compare the state of the transactions being deleted.\n+                for (auto i : del) check_fn(i);\n+                // Apply to DepGraph.\n+                real.RemoveTransactions(del);\n+                // Apply to sim.\n+                for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n+                    if (sim[i].has_value()) {\n+                        if (del[i]) {\n+                            --num_tx_sim;\n+                            sim[i] = std::nullopt;\n+                        } else {\n+                            sim[i]->second -= del;\n+                        }\n                     }\n                 }\n+                break;\n+            } else if (command-- == 0) {\n+                // Compact.\n+                real.Compact();",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 107,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "7084d5faf1e2426f1c6318d35d43ac2f37970da1",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Based on https://en.cppreference.com/w/cpp/container/vector/shrink_to_fit this is just a hint, not guranteed to change anything\r\n> It depends on the implementation whether the request is fulfilled.\r\n\r\nBut maybe we could still test that the that after deletion the `DynamicMemoryUsage` is the same, but after calling compaction the memory shrinks?\r\n\r\nSomething like:\r\n```C++\r\nauto last_compaction_pos{real.PositionRange()};\r\n```\r\n...\r\n```C++\r\nconst size_t mem_before{real.DynamicMemoryUsage()};\r\nreal.Compact();\r\nconst size_t mem_after{real.DynamicMemoryUsage()};\r\n\r\nassert(real.PositionRange() < last_compaction_pos ? mem_after < mem_before : mem_after <= mem_before);\r\nlast_compaction_pos = real.PositionRange();\r\nbreak;\r\n```\r\n\r\nWhich fails for me if we remove `entries.shrink_to_fit()` in `Compact`, and passes with the current implementation.",
      "created_at": "2025-10-03T21:53:21Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403454316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403454316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 512,
      "original_start_line": 510,
      "start_side": "RIGHT",
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403456079",
      "pull_request_review_id": 3299619754,
      "id": 2403456079,
      "node_id": "PRRC_kwDOABII586PQdRP",
      "diff_hunk": "@@ -1001,8 +1001,10 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;\n-        if (first && component == todo) {\n-            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+        if (first && component == todo && SetType::Fill(component.Count()) == component) {",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "d9dbbf41b6458b11d9225fb436fc749bd30f9588",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "for the record, the `SanityCheck` below doesn't seem to fail without this change (i.e. build without fuzz passed if I have reverted this line for commit d9dbbf41b6458b11d9225fb436fc749bd30f9588). Not sure that's expected, it surprised me.",
      "created_at": "2025-10-03T21:55:03Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403456079",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403456079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403462546",
      "pull_request_review_id": 3299619754,
      "id": 2403462546,
      "node_id": "PRRC_kwDOABII586PQe2S",
      "diff_hunk": "@@ -453,62 +453,65 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n     };\n \n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\n-        uint8_t command = provider.ConsumeIntegral<uint8_t>();\n-        if (num_tx_sim == 0 || ((command % 3) <= 0 && num_tx_sim < TestBitSet::Size())) {\n-            // AddTransaction.\n-            auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n-            auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n-            FeeFrac feerate{fee, size};\n-            // Apply to DepGraph.\n-            auto idx = real.AddTransaction(feerate);\n-            // Verify that the returned index is correct.\n-            assert(!sim[idx].has_value());\n-            for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n-                if (!sim[i].has_value()) {\n-                    assert(idx == i);\n-                    break;\n+        int command = provider.ConsumeIntegral<uint8_t>() % 4;\n+        while (true) {\n+            // Iterate decreasing command until an applicable branch is found.\n+            if (num_tx_sim < TestBitSet::Size() && command-- == 0) {\n+                // AddTransaction.\n+                auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n+                auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n+                FeeFrac feerate{fee, size};\n+                // Apply to DepGraph.\n+                auto idx = real.AddTransaction(feerate);\n+                // Verify that the returned index is correct.\n+                assert(!sim[idx].has_value());\n+                for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n+                    if (!sim[i].has_value()) {\n+                        assert(idx == i);\n+                        break;\n+                    }\n                 }\n-            }\n-            // Update sim.\n-            sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n-            ++num_tx_sim;\n-            continue;\n-        }\n-        if ((command % 3) <= 1 && num_tx_sim > 0) {\n-            // AddDependencies.\n-            DepGraphIndex child = idx_fn();\n-            auto parents = subset_fn();\n-            // Apply to DepGraph.\n-            real.AddDependencies(parents, child);\n-            // Apply to sim.\n-            sim[child]->second |= parents;\n-            continue;\n-        }\n-        if (num_tx_sim > 0) {\n-            // Remove transactions.\n-            auto del = set_fn();\n-            // Propagate all ancestry information before deleting anything in the simulation (as\n-            // intermediary transactions may be deleted which impact connectivity).\n-            anc_update_fn();\n-            // Compare the state of the transactions being deleted.\n-            for (auto i : del) check_fn(i);\n-            // Apply to DepGraph.\n-            real.RemoveTransactions(del);\n-            // Apply to sim.\n-            for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n-                if (sim[i].has_value()) {\n-                    if (del[i]) {\n-                        --num_tx_sim;\n-                        sim[i] = std::nullopt;\n-                    } else {\n-                        sim[i]->second -= del;\n+                // Update sim.\n+                sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n+                ++num_tx_sim;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // AddDependencies.\n+                DepGraphIndex child = idx_fn();\n+                auto parents = subset_fn();\n+                // Apply to DepGraph.\n+                real.AddDependencies(parents, child);\n+                // Apply to sim.\n+                sim[child]->second |= parents;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // Remove transactions.\n+                auto del = set_fn();\n+                // Propagate all ancestry information before deleting anything in the simulation (as\n+                // intermediary transactions may be deleted which impact connectivity).\n+                anc_update_fn();\n+                // Compare the state of the transactions being deleted.\n+                for (auto i : del) check_fn(i);\n+                // Apply to DepGraph.\n+                real.RemoveTransactions(del);\n+                // Apply to sim.\n+                for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n+                    if (sim[i].has_value()) {\n+                        if (del[i]) {\n+                            --num_tx_sim;\n+                            sim[i] = std::nullopt;\n+                        } else {\n+                            sim[i]->second -= del;\n+                        }\n                     }\n                 }\n+                break;\n+            } else if (command-- == 0) {",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 108,
      "original_position": 105,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7084d5faf1e2426f1c6318d35d43ac2f37970da1",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is just for consistency over `} else {`, right?",
      "created_at": "2025-10-03T21:59:16Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2403462546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403462546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 511,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2404663515",
      "pull_request_review_id": 3299619754,
      "id": 2404663515,
      "node_id": "PRRC_kwDOABII586PVEDb",
      "diff_hunk": "@@ -332,6 +333,17 @@ class DepGraph\n         }\n         return true;\n     }\n+\n+    /** Reduce memory usage if possible. No observable effect. */\n+    void Compact() noexcept",
      "path": "src/cluster_linearize.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7084d5faf1e2426f1c6318d35d43ac2f37970da1",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "my understanding is that shrinking can throw on allocation error. Since the reallocation is optional in this case, we could catch it and ignore it, but we would likely fail on the very next allocation anyway, so it may not help a lot...\r\n",
      "created_at": "2025-10-05T20:53:48Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2404663515",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2404663515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 338,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2404663876",
      "pull_request_review_id": 3299619754,
      "id": 2404663876,
      "node_id": "PRRC_kwDOABII586PVEJE",
      "diff_hunk": "@@ -332,6 +333,17 @@ class DepGraph\n         }\n         return true;\n     }\n+\n+    /** Reduce memory usage if possible. No observable effect. */\n+    void Compact() noexcept\n+    {\n+        entries.shrink_to_fit();",
      "path": "src/cluster_linearize.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7084d5faf1e2426f1c6318d35d43ac2f37970da1",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would it make sense to add some minimal buffer to avoid shrinking if the capacity is very close to size - and to avoid having to realloc on the very next addition?",
      "created_at": "2025-10-05T20:54:52Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2404663876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2404663876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 340,
      "original_line": 340,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407496825",
      "pull_request_review_id": 3299619754,
      "id": 2407496825,
      "node_id": "PRRC_kwDOABII586Pf3x5",
      "diff_hunk": "@@ -909,6 +911,7 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n+    Compact();\n     graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n     Updated(graph, level);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "0f3331f8cb215b5b45e6a369ea989fe27d7a04af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "0f3331f8cb215b5b45e6a369ea989fe27d7a04af\r\nI mostly understand why we're calling `Compact` after the `Updated` in `GenericClusterImpl::Split` but wasn't sure why we're compacting before possible changes here in `GenericClusterImpl::ApplyRemovals`.\r\n\r\nBut adding:\r\n```C++\r\nauto mem_before{TotalMemoryUsage()};\r\nUpdated(graph, level);\r\nCompact();\r\nassert(mem_before == TotalMemoryUsage());\r\n```\r\nrevealed that there's no difference, since the `txgrap` fuzz always passes here - just want to confirm if it's deliberate.",
      "created_at": "2025-10-06T17:06:15Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407496825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407496825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 1208,
      "original_start_line": 914,
      "start_side": "RIGHT",
      "line": 1211,
      "original_line": 1211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407536386",
      "pull_request_review_id": 3299619754,
      "id": 2407536386,
      "node_id": "PRRC_kwDOABII586PgBcC",
      "diff_hunk": "@@ -936,6 +939,13 @@ void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n     Updated(graph, 0);\n }\n \n+void Cluster::Compact() noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "0f3331f8cb215b5b45e6a369ea989fe27d7a04af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "what if the compactions returned a boolean of whether they did any work, maybe that can help with testing `Compact` based on `TotalMemoryUsage` (or vice-versa), something like `if (c.Compact()) assert(mem_after < mem_before);`",
      "created_at": "2025-10-06T17:14:43Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407536386",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407536386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 942,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407594342",
      "pull_request_review_id": 3299619754,
      "id": 2407594342,
      "node_id": "PRRC_kwDOABII586PgPlm",
      "diff_hunk": "@@ -1071,6 +1099,8 @@ void Cluster::Merge(TxGraphImpl& graph, int level, Cluster& other) noexcept\n {\n     /** Vector to store the positions in this Cluster for each position in other. */\n     std::vector<DepGraphIndex> remap(other.m_depgraph.PositionRange());\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    graph.GetClusterSet(level).m_cluster_usage -= other.TotalMemoryUsage();",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 109,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "f891b3aff31622b288c3cc9bc747d1ceda34b86e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: maybe we could reduce duplication here:\r\n```suggestion\r\n    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage() + other.TotalMemoryUsage();\r\n```",
      "created_at": "2025-10-06T17:28:31Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407594342",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407594342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1102,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407610458",
      "pull_request_review_id": 3299619754,
      "id": 2407610458,
      "node_id": "PRRC_kwDOABII586PgTha",
      "diff_hunk": "@@ -2114,6 +2146,7 @@ void TxGraphImpl::StartStaging() noexcept\n     m_staging_clusterset->m_deps_to_add = m_main_clusterset.m_deps_to_add;\n     m_staging_clusterset->m_group_data = m_main_clusterset.m_group_data;\n     m_staging_clusterset->m_oversized = m_main_clusterset.m_oversized;\n+    m_staging_clusterset->m_cluster_usage = 0;\n     Assume(m_staging_clusterset->m_oversized.has_value());",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 134,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "f891b3aff31622b288c3cc9bc747d1ceda34b86e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The oversized Assume refers to a previous line and we're assigning the default value to a freshly created field. To group the oversized references and allow implicit values, maybe we could do:\n```C++\n    m_staging_clusterset->m_oversized = m_main_clusterset.m_oversized;\n    Assume(m_staging_clusterset->m_oversized.has_value());\n    Assume(m_staging_clusterset->m_cluster_usage == 0);\n```\nor\n```C++\n    Assume(m_main_clusterset.m_oversized.has_value());\n    m_staging_clusterset->m_oversized = m_main_clusterset.m_oversized;\n    Assume(m_staging_clusterset->m_cluster_usage == 0);\n    Assume(m_staging_clusterset->m_removed.empty());\n    Assume(m_staging_clusterset->m_to_remove.empty());\n```",
      "created_at": "2025-10-06T17:32:18Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407610458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407610458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 2149,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407628703",
      "pull_request_review_id": 3299619754,
      "id": 2407628703,
      "node_id": "PRRC_kwDOABII586PgX-f",
      "diff_hunk": "@@ -934,8 +957,10 @@ void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n         entry.m_locator[1].SetMissing();\n     }\n     auto quality = m_quality;\n+    graph.GetClusterSet(1).m_cluster_usage -= TotalMemoryUsage();",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 75,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "f891b3aff31622b288c3cc9bc747d1ceda34b86e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "While the method name hints at it, maybe a comment could be added to draw attention that we're removing from staging and adding to main.\r\nI have checked and `SanityCheck` via fuzzing correctly catches if we would have had a main cluster usage deduction here 👍 ",
      "created_at": "2025-10-06T17:36:39Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407628703",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407628703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407646775",
      "pull_request_review_id": 3299619754,
      "id": 2407646775,
      "node_id": "PRRC_kwDOABII586PgcY3",
      "diff_hunk": "@@ -2977,6 +2979,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "437e29cd8d4981f1f5451c438bf21c24c669bf22",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find these side-effects here to be [very confusing](https://en.wikipedia.org/wiki/Command%E2%80%93query_separation) in an apparent memory getter method (same for `Exists`)",
      "created_at": "2025-10-06T17:40:56Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407646775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407646775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407649490",
      "pull_request_review_id": 3299619754,
      "id": 2407649490,
      "node_id": "PRRC_kwDOABII586PgdDS",
      "diff_hunk": "@@ -2977,6 +2979,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(0);\n+    ApplyDependencies(0);\n+    // Compute memory usage\n+    auto& clusterset = GetClusterSet(0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "437e29cd8d4981f1f5451c438bf21c24c669bf22",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The method name already claims it's `main`, so we might as well use `m_main_clusterset` here directly + inline return value:\r\n```C++\r\n    return /* From clusters */\r\n           m_main_clusterset.m_cluster_usage +\r\n           /* From Entry objects. */\r\n           sizeof(Entry) * m_main_clusterset.m_txcount +\r\n           /* From the chunk index. */\r\n           memusage::DynamicUsage(m_main_chunkindex);\r\n```",
      "created_at": "2025-10-06T17:41:34Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407649490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407649490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2988,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407653715",
      "pull_request_review_id": 3299619754,
      "id": 2407653715,
      "node_id": "PRRC_kwDOABII586PgeFT",
      "diff_hunk": "@@ -202,6 +202,12 @@ class TxGraph\n      *  graph must not be oversized. If the graph is empty, {{}, FeePerWeight{}} is returned. */\n     virtual std::pair<std::vector<Ref*>, FeePerWeight> GetWorstMainChunk() noexcept = 0;\n \n+    /** Get the approximate memory usage for this object, just counting the main graph. If a\n+     *  staging graph is present, return a number corresponding to memory usage after\n+     *  AbortStaging() would be called. BlockBuilders' memory usage is not included here. Can\n+     *  always be called. */",
      "path": "src/txgraph.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "437e29cd8d4981f1f5451c438bf21c24c669bf22",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "what does \"can always be called\" refer to here? That it can be called even if the graph is oversized?",
      "created_at": "2025-10-06T17:42:33Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407653715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407653715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 207,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407669399",
      "pull_request_review_id": 3299619754,
      "id": 2407669399,
      "node_id": "PRRC_kwDOABII586Pgh6X",
      "diff_hunk": "@@ -94,21 +94,16 @@ struct TrimTxData\n     uint64_t m_uf_size;\n };\n \n+class Cluster;\n+class GenericClusterImpl;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm surprised by these forward declarations, a parent shouldn't have to know about the children (at least in programming) - but it seems we don't actually need these\r\n```suggestion\r\n```",
      "created_at": "2025-10-06T17:45:59Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407669399",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407669399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 97,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407673139",
      "pull_request_review_id": 3299619754,
      "id": 2407673139,
      "node_id": "PRRC_kwDOABII586Pgi0z",
      "diff_hunk": "@@ -94,21 +94,16 @@ struct TrimTxData\n     uint64_t m_uf_size;\n };\n \n+class Cluster;\n+class GenericClusterImpl;\n+\n /** A grouping of connected transactions inside a TxGraphImpl::ClusterSet. */\n class Cluster\n {\n     friend class TxGraphImpl;\n     using GraphIndex = TxGraph::GraphIndex;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we make this protected to avoid having to redefine it in every child class?",
      "created_at": "2025-10-06T17:46:47Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407673139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407673139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407682618",
      "pull_request_review_id": 3299619754,
      "id": 2407682618,
      "node_id": "PRRC_kwDOABII586PglI6",
      "diff_hunk": "@@ -167,75 +145,145 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n     /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n      *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n-    int GetLevel(const TxGraphImpl& graph) const noexcept;\n+    virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\n     /** Only called by Graph::SwapIndexes. */\n-    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    virtual void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept = 0;\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph, int level) noexcept;\n+    virtual void Updated(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Create a copy of this Cluster in staging, returning a pointer to it (used by PullIn). */\n-    Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept;\n+    virtual Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept = 0;\n     /** Get the list of Clusters in main that conflict with this one (which is assumed to be in staging). */\n-    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    virtual void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept = 0;\n     /** Mark all the Entry objects belonging to this staging Cluster as missing. The Cluster must be\n      *  deleted immediately after. */\n-    void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    virtual void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept = 0;\n     /** Remove all transactions from a Cluster. */\n-    void Clear(TxGraphImpl& graph, int level) noexcept;\n+    virtual void Clear(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Change a Cluster's level from 1 (staging) to 0 (main). */\n-    void MoveToMain(TxGraphImpl& graph) noexcept;\n+    virtual void MoveToMain(TxGraphImpl& graph) noexcept = 0;\n     /** Minimize this Cluster's memory usage. */\n-    void Compact() noexcept;\n+    virtual void Compact() noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n \n     /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n-     *  off. These must be at least one such entry. */\n-    void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept;\n+     *  off. There must be at least one such entry. */\n+    virtual void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept = 0;\n     /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n      *  Cluster afterwards. */\n-    [[nodiscard]] bool Split(TxGraphImpl& graph, int level) noexcept;\n+    [[nodiscard]] virtual bool Split(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Move all transactions from cluster to *this (as separate components). */\n-    void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept;\n+    virtual void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept = 0;\n     /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n-    void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    virtual void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept = 0;\n     /** Improve the linearization of this Cluster. Returns how much work was performed and whether\n      *  the Cluster's QualityLevel improved as a result. */\n-    std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept;\n+    virtual std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept = 0;\n     /** For every chunk in the cluster, append its FeeFrac to ret. */\n-    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    virtual void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept = 0;\n     /** Add a TrimTxData entry (filling m_chunk_feerate, m_index, m_tx_size) for every\n      *  transaction in the Cluster to ret. Implicit dependencies between consecutive transactions\n      *  in the linearization are added to deps. Return the Cluster's total transaction size. */\n-    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+    virtual uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of public TxGraph functions.\n \n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their ancestors to output. */\n-    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their descendants to output. */\n-    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Populate range with refs for the transactions in this Cluster's linearization, from\n      *  position start_pos until start_pos+range.size()-1, inclusive. Returns whether that\n      *  range includes the last transaction in the linearization. */\n-    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    virtual bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept = 0;\n     /** Get the individual transaction feerate of a Cluster element. */\n-    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    virtual FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept = 0;\n     /** Modify the fee of a Cluster element. */\n-    void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept;\n+    virtual void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept = 0;\n \n     // Debugging functions.\n \n-    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+    virtual void SanityCheck(const TxGraphImpl& graph, int level) const = 0;\n+};\n+\n+/** An implementation of Cluster that uses a DepGraph and vectors, to support arbitrary numbers of\n+ *  transactions up to MAX_CLUSTER_COUNT_LIMIT. */\n+class GenericClusterImpl final : public Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 180,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: This tripped me up a bit on first review, seeing the usages it made me think it's setter method for an internal type - maybe `BitsetType` or `ClusterPositions` or something similar could be more descriptive",
      "created_at": "2025-10-06T17:49:08Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407682618",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407682618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407686932",
      "pull_request_review_id": 3299619754,
      "id": 2407686932,
      "node_id": "PRRC_kwDOABII586PgmMU",
      "diff_hunk": "@@ -167,75 +145,145 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n     /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n      *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n-    int GetLevel(const TxGraphImpl& graph) const noexcept;\n+    virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\n     /** Only called by Graph::SwapIndexes. */\n-    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    virtual void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept = 0;\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph, int level) noexcept;\n+    virtual void Updated(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Create a copy of this Cluster in staging, returning a pointer to it (used by PullIn). */\n-    Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept;\n+    virtual Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept = 0;\n     /** Get the list of Clusters in main that conflict with this one (which is assumed to be in staging). */\n-    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    virtual void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept = 0;\n     /** Mark all the Entry objects belonging to this staging Cluster as missing. The Cluster must be\n      *  deleted immediately after. */\n-    void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    virtual void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept = 0;\n     /** Remove all transactions from a Cluster. */\n-    void Clear(TxGraphImpl& graph, int level) noexcept;\n+    virtual void Clear(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Change a Cluster's level from 1 (staging) to 0 (main). */\n-    void MoveToMain(TxGraphImpl& graph) noexcept;\n+    virtual void MoveToMain(TxGraphImpl& graph) noexcept = 0;\n     /** Minimize this Cluster's memory usage. */\n-    void Compact() noexcept;\n+    virtual void Compact() noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n \n     /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n-     *  off. These must be at least one such entry. */\n-    void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept;\n+     *  off. There must be at least one such entry. */\n+    virtual void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept = 0;\n     /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n      *  Cluster afterwards. */\n-    [[nodiscard]] bool Split(TxGraphImpl& graph, int level) noexcept;\n+    [[nodiscard]] virtual bool Split(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Move all transactions from cluster to *this (as separate components). */\n-    void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept;\n+    virtual void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept = 0;\n     /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n-    void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    virtual void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept = 0;\n     /** Improve the linearization of this Cluster. Returns how much work was performed and whether\n      *  the Cluster's QualityLevel improved as a result. */\n-    std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept;\n+    virtual std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept = 0;\n     /** For every chunk in the cluster, append its FeeFrac to ret. */\n-    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    virtual void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept = 0;\n     /** Add a TrimTxData entry (filling m_chunk_feerate, m_index, m_tx_size) for every\n      *  transaction in the Cluster to ret. Implicit dependencies between consecutive transactions\n      *  in the linearization are added to deps. Return the Cluster's total transaction size. */\n-    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+    virtual uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of public TxGraph functions.\n \n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their ancestors to output. */\n-    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their descendants to output. */\n-    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Populate range with refs for the transactions in this Cluster's linearization, from\n      *  position start_pos until start_pos+range.size()-1, inclusive. Returns whether that\n      *  range includes the last transaction in the linearization. */\n-    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    virtual bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept = 0;\n     /** Get the individual transaction feerate of a Cluster element. */\n-    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    virtual FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept = 0;\n     /** Modify the fee of a Cluster element. */\n-    void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept;\n+    virtual void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept = 0;\n \n     // Debugging functions.\n \n-    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+    virtual void SanityCheck(const TxGraphImpl& graph, int level) const = 0;\n+};\n+\n+/** An implementation of Cluster that uses a DepGraph and vectors, to support arbitrary numbers of\n+ *  transactions up to MAX_CLUSTER_COUNT_LIMIT. */\n+class GenericClusterImpl final : public Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n+     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n+     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. m_linearization.size() equals\n+     *  m_depgraph.TxCount(). This is always kept topological. */\n+    std::vector<DepGraphIndex> m_linearization;\n+\n+public:\n+    GenericClusterImpl() noexcept = delete;\n+    /** Construct an empty GenericClusterImpl. */\n+    explicit GenericClusterImpl(uint64_t sequence) noexcept;\n+    /** Construct a singleton GenericClusterImpl. */\n+    explicit GenericClusterImpl(uint64_t sequence, TxGraphImpl& graph, const FeePerWeight& feerate, GraphIndex graph_index) noexcept;\n+\n+\n+    size_t TotalMemoryUsage() const noexcept final",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 199,
      "commit_id": "d3ece431ffae270df78beaab723499807f0a5284",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "On a final class, [C.128](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c128-virtual-functions-should-specify-exactly-one-of-virtual-override-or-final) says either override or final can be used on virtual functions with no semantic difference. The current use of final is correct, but the guideline notes to 'use final on functions sparingly', so `override` might be descriptive here:\r\n```suggestion\r\n    size_t TotalMemoryUsage() const noexcept override\r\n```",
      "created_at": "2025-10-06T17:50:04Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407686932",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407686932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407732614",
      "pull_request_review_id": 3299619754,
      "id": 2407732614,
      "node_id": "PRRC_kwDOABII586PgxWG",
      "diff_hunk": "@@ -1066,7 +1115,8 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     // Redistribute the transactions.\n     for (auto i : m_linearization) {\n         /** The cluster which transaction originally in position i is moved to. */\n-        Cluster* new_cluster = remap[i].first;\n+        Cluster* new_abstract_cluster = remap[i].first;\n+        GenericClusterImpl* new_cluster = static_cast<GenericClusterImpl*>(new_abstract_cluster);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 379,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These casts bother me a bit, I think we could avoid these by adding the abstraction commit before the specialization commit, e.g.\r\n```patch\r\ndiff --git a/src/txgraph.cpp b/src/txgraph.cpp\r\n--- a/src/txgraph.cpp\t(revision 2ab1b802ad070853777a3c207a4fe49ef32bc978)\r\n+++ b/src/txgraph.cpp\t(date 1759773463470)\r\n@@ -104,6 +104,7 @@\r\n     using GraphIndex = TxGraph::GraphIndex;\r\n \r\n protected:\r\n+    using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\r\n     /** The quality level of m_linearization. */\r\n     QualityLevel m_quality{QualityLevel::NONE};\r\n     /** Which position this Cluster has in Graph::ClusterSet::m_clusters[m_quality]. */\r\n@@ -157,6 +158,8 @@\r\n     virtual uint64_t GetTotalTxSize() const noexcept = 0;\r\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\r\n     virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\r\n+    /** Add dependencies to a given child in this cluster. */\r\n+    virtual void AddDependencies(SetType parents, DepGraphIndex child) noexcept = 0;\r\n     /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\r\n      *  is known by the caller already (see all \"int level\" arguments below), but not always. */\r\n     virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\r\n@@ -262,6 +265,10 @@\r\n     LinearizationIndex GetTxCount() const noexcept final { return m_linearization.size(); }\r\n     uint64_t GetTotalTxSize() const noexcept final;\r\n     GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept final { return m_mapping[index]; }\r\n+    void AddDependencies(SetType parent, DepGraphIndex child) noexcept\r\n+    {\r\n+        m_depgraph.AddDependencies(parent, child);\r\n+    }\r\n     int GetLevel(const TxGraphImpl& graph) const noexcept final;\r\n     void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept final { m_mapping[cluster_idx] = graph_idx; }\r\n     void Updated(TxGraphImpl& graph, int level) noexcept final;\r\n@@ -1128,12 +1135,11 @@\r\n     // Redistribute the dependencies.\r\n     for (auto i : m_linearization) {\r\n         /** The cluster transaction in position i is moved to. */\r\n-        Cluster* new_abstract_cluster = remap[i].first;\r\n-        GenericClusterImpl* new_cluster = static_cast<GenericClusterImpl*>(new_abstract_cluster);\r\n+        Cluster* new_cluster = remap[i].first;\r\n         // Copy its parents, translating positions.\r\n         SetType new_parents;\r\n         for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\r\n-        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\r\n+        new_cluster->AddDependencies(new_parents, remap[i].second);\r\n     }\r\n     // Update all the Locators of moved transactions, and memory usage.\r\n     for (Cluster* new_cluster : new_clusters) {\r\n```\r\n\r\nThe difficulty of extracting it revealed a lack of abstraction that we could fix before doing the abstraction itself.",
      "created_at": "2025-10-06T17:59:33Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407732614",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407732614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407819423",
      "pull_request_review_id": 3299619754,
      "id": 2407819423,
      "node_id": "PRRC_kwDOABII586PhGif",
      "diff_hunk": "@@ -167,75 +145,145 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;",
      "path": "src/txgraph.cpp",
      "position": 69,
      "original_position": 76,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a9eeb7075954adaf74731160fbaa0ac9e4704c34\r\nnit: we're moving this method that we've introduced in a different commit. If you touch again, consider placing it here to minimize the diff",
      "created_at": "2025-10-06T18:19:02Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407819423",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407819423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 156,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407823401",
      "pull_request_review_id": 3299619754,
      "id": 2407823401,
      "node_id": "PRRC_kwDOABII586PhHgp",
      "diff_hunk": "",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a9eeb7075954adaf74731160fbaa0ac9e4704c34\r\nI have manually inlined the new class to see if it was abstracted correctly and I got very minimal diff 👍 ",
      "created_at": "2025-10-06T18:19:52Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407823401",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407823401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407834276",
      "pull_request_review_id": 3299619754,
      "id": 2407834276,
      "node_id": "PRRC_kwDOABII586PhKKk",
      "diff_hunk": "@@ -148,6 +150,8 @@ class Cluster\n \n     // Generic helper functions\n \n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;",
      "path": "src/txgraph.cpp",
      "position": 66,
      "original_position": 21,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e8355b2169555fbd66daba055a727fdb2dee390b\r\nas mentioned, I would do these changes before the abstraction attempt to make that cleaner (avoiding downcasts directly)",
      "created_at": "2025-10-06T18:22:22Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407834276",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407834276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 153,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407836988",
      "pull_request_review_id": 3299619754,
      "id": 2407836988,
      "node_id": "PRRC_kwDOABII586PhK08",
      "diff_hunk": "@@ -227,8 +238,8 @@ class Cluster\n class GenericClusterImpl final : public Cluster\n {\n     friend class TxGraphImpl;\n+    using SetType = Cluster::SetType;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 43,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems unused",
      "created_at": "2025-10-06T18:22:59Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407836988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407836988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407850203",
      "pull_request_review_id": 3299619754,
      "id": 2407850203,
      "node_id": "PRRC_kwDOABII586PhODb",
      "diff_hunk": "@@ -779,6 +791,31 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));",
      "path": "src/txgraph.cpp",
      "position": 430,
      "original_position": 79,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There are a lot of these sentinels spread around the code after the split. Could we document if slightly better with something like:\r\n```C++\r\nclass Cluster\r\n...\r\npublic:\r\n    static constexpr auto INVALID{GraphIndex(-1)};\r\n```\r\nand\r\n```C++\r\n    Assume(graph_idx != Cluster::INVALID);\r\n```",
      "created_at": "2025-10-06T18:25:33Z",
      "updated_at": "2025-10-07T03:11:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407850203",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407850203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 891,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407894226",
      "pull_request_review_id": 3299619754,
      "id": 2407894226,
      "node_id": "PRRC_kwDOABII586PhYzS",
      "diff_hunk": "@@ -779,6 +791,31 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 91,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems like a non-trivial lambda, given that it's called from a loop, please consider if it would make sense to avoid the copy:\r\n```C++\r\nvirtual void ExtractTransactions(const std::function<void (...)>& visit_fn) noexcept = 0;\r\n```",
      "created_at": "2025-10-06T18:34:50Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407894226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407894226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 808,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407919107",
      "pull_request_review_id": 3299619754,
      "id": 2407919107,
      "node_id": "PRRC_kwDOABII586Phe4D",
      "diff_hunk": "@@ -298,6 +299,60 @@ class GenericClusterImpl final : public Cluster\n     void SanityCheck(const TxGraphImpl& graph, int level) const final;\n };\n \n+/** An implementation of Cluster that only supports 1 transaction. */\n+class SingletonClusterImpl final : public Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+\n+    /** The feerate of the (singular) transaction in this Cluster. */\n+    FeePerWeight m_feerate;\n+    /** The GraphIndex of the transaction. GraphIndex(-1) if this Cluster is empty. */\n+    GraphIndex m_graph_index = GraphIndex(-1);\n+\n+public:\n+    SingletonClusterImpl() noexcept = delete;\n+    /** Construct an empty SingletonClusterImpl. */\n+    explicit SingletonClusterImpl(uint64_t sequence) noexcept : Cluster(sequence) {}\n+\n+    size_t TotalMemoryUsage() const noexcept final\n+    {\n+        return // Memory usage of the allocated SingletonClusterImpl itself.\n+               memusage::MallocUsage(sizeof(SingletonClusterImpl)) +\n+               // Memory usage of the ClusterSet::m_clusters entry.\n+               sizeof(std::unique_ptr<Cluster>);\n+    }\n+\n+    DepGraphIndex GetMaxTxCount() const noexcept final { return 1; }\n+    LinearizationIndex GetTxCount() const noexcept final { return m_graph_index != GraphIndex(-1); }",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now that this is extracted to a dedicated method, there are a few places we could reuse it:\r\n```C++\r\n    uint64_t GetTotalTxSize() const noexcept override { return GetTxCount() ? m_feerate.size : 0; }\r\n    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept override\r\n    { Assume(index == 0); Assume(GetTxCount()); return m_graph_index; }\r\n```\r\nand\r\n```C++\r\nDepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\r\n{\r\n    Assume(!GetTxCount());\r\n    ...\r\n```\r\n```C++\r\nvoid SingletonClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\r\n{\r\n    if (GetTxCount()) {\r\n```\r\netc",
      "created_at": "2025-10-06T18:39:43Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407919107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407919107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407936445",
      "pull_request_review_id": 3299619754,
      "id": 2407936445,
      "node_id": "PRRC_kwDOABII586PhjG9",
      "diff_hunk": "@@ -598,10 +654,16 @@ class TxGraphImpl final : public TxGraph\n     {\n         return std::make_unique<GenericClusterImpl>(m_next_sequence_counter++);\n     }\n+    /** Create an empty SingletonClusterImpl object. */\n+    std::unique_ptr<SingletonClusterImpl> CreateEmptySingletonCluster() noexcept\n+    {\n+        return std::make_unique<SingletonClusterImpl>(m_next_sequence_counter++);\n+    }\n     /** Create an empty Cluster object of the appropriate size. */",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 86,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The comment may need some clarification how an empty object can have a non-empty size\r\n```suggestion\r\n    /** Create an empty Cluster of the appropriate implementation. */\r\n```",
      "created_at": "2025-10-06T18:43:25Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407936445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407936445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407947978",
      "pull_request_review_id": 3299619754,
      "id": 2407947978,
      "node_id": "PRRC_kwDOABII586Phl7K",
      "diff_hunk": "@@ -1746,18 +1994,33 @@ void TxGraphImpl::Merge(std::span<Cluster*> to_merge, int in_level) noexcept\n     // moves.\n     size_t max_size_pos{0};\n     DepGraphIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    DepGraphIndex total_size = max_size;",
      "path": "src/txgraph.cpp",
      "position": 1136,
      "original_position": 417,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this strictly related to `SingletonClusterImpl` changes? If you modify again, could it be split out to a separate commit since that one is already quite complicated, maybe we can split it into two commits? But only if you need to touch again.",
      "created_at": "2025-10-06T18:46:00Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407947978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407947978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2017,
      "original_line": 2017,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407969372",
      "pull_request_review_id": 3299619754,
      "id": 2407969372,
      "node_id": "PRRC_kwDOABII586PhrJc",
      "diff_hunk": "@@ -2318,6 +2634,14 @@ void GenericClusterImpl::SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx\n     Updated(graph, level);\n }\n \n+void SingletonClusterImpl::SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept\n+{\n+    Assume(m_graph_index != GraphIndex(-1));\n+    Assume(idx == 0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 550,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: when is it `index` and when `idx`?",
      "created_at": "2025-10-06T18:50:27Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2407969372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2407969372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 2639,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408082839",
      "pull_request_review_id": 3299619754,
      "id": 2408082839,
      "node_id": "PRRC_kwDOABII586PiG2X",
      "diff_hunk": "@@ -1012,6 +1012,15 @@ FUZZ_TARGET(txgraph)\n                 }\n                 assert(!top_sim.IsOversized());\n                 break;\n+            } else if (command-- == 0) {\n+                // GetMainMemoryUsage().\n+                real->GetMainMemoryUsage();\n+                // There is nothing to test about this function, as it's very\n+                // implementation-specific, and can go up (even when transactions are removed) and",
      "path": "src/test/fuzz/txgraph.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "maybe we could check that calling it is stable and idempotent, something like:\r\n```C++\r\nassert(real->GetMainMemoryUsage() == real->GetMainMemoryUsage());\r\n\r\nif (real->GetTransactionCount(TxGraph::Level::MAIN) == 0) {\r\n    assert(real->GetMainMemoryUsage() == 0);\r\n} else {\r\n    assert(real->GetMainMemoryUsage() > 0);\r\n}\r\n\r\nreal->SanityCheck();\r\n```\r\n\r\nAnd given that `GetMainMemoryUsage` has some surprising side-effects (`SplitAll` & `ApplyDependencies`), we could also check that it's not changing counts or staging presence.",
      "created_at": "2025-10-06T19:17:34Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408082839",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408082839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1018,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1019,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408127980",
      "pull_request_review_id": 3299619754,
      "id": 2408127980,
      "node_id": "PRRC_kwDOABII586PiR3s",
      "diff_hunk": "@@ -161,10 +159,13 @@ class Cluster\n     uint64_t GetTotalTxSize() const noexcept;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n     GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n+     *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n+    int GetLevel(const TxGraphImpl& graph) const noexcept;\n     /** Only called by Graph::SwapIndexes. */\n     void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph) noexcept;\n+    void Updated(TxGraphImpl& graph, int level) noexcept;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "66401148ddcba04c27751e39e53fc41e6deb5d14",
      "original_commit_id": "22f5fe833fcf3da6a4180d181ff68d6da34f40db",
      "in_reply_to_id": 2352615744,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I also find the int levels to be quite error-prone, if enums are off the table, could we at least use some `MISSING` and `STAGING` and `MAIN` constants throughout?",
      "created_at": "2025-10-06T19:27:26Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408127980",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408127980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408164554",
      "pull_request_review_id": 3299619754,
      "id": 2408164554,
      "node_id": "PRRC_kwDOABII586PiazK",
      "diff_hunk": "",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Doing a single final sanity check ignores situations when we get temporarily out of sync - I know it can be expensive, but could we add it after each change? I tried and it did pass for me.",
      "created_at": "2025-10-06T19:36:41Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408164554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408164554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 528,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408186562",
      "pull_request_review_id": 3299619754,
      "id": 2408186562,
      "node_id": "PRRC_kwDOABII586PigLC",
      "diff_hunk": "@@ -957,7 +1313,17 @@ uint64_t Cluster::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::\n     return size;\n }\n \n-bool Cluster::Split(TxGraphImpl& graph) noexcept\n+uint64_t SingletonClusterImpl::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept\n+{\n+    if (m_graph_index  == GraphIndex(-1)) return 0;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 778,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "super-nit: formatting and repeated `GraphIndex(-1)` references",
      "created_at": "2025-10-06T19:41:05Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408186562",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408186562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408188738",
      "pull_request_review_id": 3299619754,
      "id": 2408188738,
      "node_id": "PRRC_kwDOABII586PigtC",
      "diff_hunk": "@@ -1037,15 +1406,32 @@ bool Cluster::Split(TxGraphImpl& graph) noexcept\n     return true;\n }\n \n-void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+bool SingletonClusterImpl::Split(TxGraphImpl& graph, int level) noexcept\n+{\n+    Assume(NeedsSplitting());\n+    if (m_graph_index == GraphIndex(-1)) {\n+        // The cluster is now empty.\n+        graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+        Updated(graph, level);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 874,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this necessary here? Seems like a noop",
      "created_at": "2025-10-06T19:41:34Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408188738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408188738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408191090",
      "pull_request_review_id": 3299619754,
      "id": 2408191090,
      "node_id": "PRRC_kwDOABII586PihRy",
      "diff_hunk": "@@ -1193,15 +1590,15 @@ void TxGraphImpl::SetClusterQuality(int level, QualityLevel old_quality, Cluster\n     InsertCluster(level, std::move(cluster_ptr), new_quality);\n }\n \n-void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+void TxGraphImpl::DeleteCluster(int level, Cluster& cluster) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1017,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: in other cases the `level` param is after the `cluster` one (reduces some diffs if we're consistent)",
      "created_at": "2025-10-06T19:42:09Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408191090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408191090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408429695",
      "pull_request_review_id": 3182210966,
      "id": 2408429695,
      "node_id": "PRRC_kwDOABII586Pjbh_",
      "diff_hunk": "@@ -707,6 +709,23 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+int Cluster::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];",
      "path": "src/txgraph.cpp",
      "position": 482,
      "original_position": 113,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "cd6dadf53aa8a6c2837381b4262a7468e311e554",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If the cluster is empty, then L718 will call `front()` on an empty vector. Should we `assert` instead of `Assume` that it's not empty?\r\n\r\nAlternatively, `if (!Assume(!m_linearization.empty()) return -1;`?",
      "created_at": "2025-10-06T20:32:44Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408429695",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408429695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 939,
      "original_start_line": 714,
      "start_side": "RIGHT",
      "line": 943,
      "original_line": 943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408971205",
      "pull_request_review_id": 3299619754,
      "id": 2408971205,
      "node_id": "PRRC_kwDOABII586PlfvF",
      "diff_hunk": "@@ -94,46 +95,38 @@ struct TrimTxData\n     uint64_t m_uf_size;\n };\n \n+class Cluster;\n+class GenericClusterImpl;\n+class SingletonClusterImpl;\n+\n /** A grouping of connected transactions inside a TxGraphImpl::ClusterSet. */\n class Cluster\n {\n     friend class TxGraphImpl;\n     using GraphIndex = TxGraph::GraphIndex;\n+\n+protected:\n     using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n-    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n-    DepGraph<SetType> m_depgraph;\n-    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n-     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n-     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n-    std::vector<GraphIndex> m_mapping;\n-    /** The current linearization of the cluster. m_linearization.size() equals\n-     *  m_depgraph.TxCount(). This is always kept topological. */\n-    std::vector<DepGraphIndex> m_linearization;\n     /** The quality level of m_linearization. */\n     QualityLevel m_quality{QualityLevel::NONE};\n     /** Which position this Cluster has in Graph::ClusterSet::m_clusters[m_quality]. */\n     ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n-    /** Which level this Cluster is at in the graph (-1=not inserted, 0=main, 1=staging). */\n-    int m_level{-1};\n     /** Sequence number for this Cluster (for tie-breaking comparison between equal-chunk-feerate\n         transactions in distinct clusters). */\n     uint64_t m_sequence;\n \n+    explicit Cluster(uint64_t sequence) noexcept : m_sequence(sequence) {}\n+\n public:\n-    Cluster() noexcept = delete;\n-    /** Construct an empty Cluster. */\n-    explicit Cluster(uint64_t sequence) noexcept;\n-    /** Construct a singleton Cluster. */\n-    explicit Cluster(uint64_t sequence, TxGraphImpl& graph, const FeePerWeight& feerate, GraphIndex graph_index) noexcept;\n+    // Provide virtual destructor, for safe polymorphic usage inside std::unique_ptr.\n+    virtual ~Cluster() = default;\n \n     // Cannot move or copy (would invalidate Cluster* in Locator and ClusterSet). */\n     Cluster(const Cluster&) = delete;\n     Cluster& operator=(const Cluster&) = delete;\n     Cluster(Cluster&&) = delete;\n     Cluster& operator=(Cluster&&) = delete;\n \n-    // Generic helper functions.\n-\n     /** Whether the linearization of this Cluster can be exposed. */\n     bool IsAcceptable(bool after_split = false) const noexcept\n     {",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 64,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "super-nit: `IsOptimal` could be used inside `IsAcceptable` (though it wouldn't be symmetric in that case)",
      "created_at": "2025-10-06T23:36:17Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408971205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408971205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408976265",
      "pull_request_review_id": 3299619754,
      "id": 2408976265,
      "node_id": "PRRC_kwDOABII586Plg-J",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n+    /** Append a transaction with given GraphIndex at the end of this Cluster and its\n+     *  linearization. Return the DepGraphIndex it was placed at. */\n+    virtual DepGraphIndex AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept = 0;\n+    /** Add dependencies to a given child in this cluster. */\n+    virtual void AddDependencies(SetType parents, DepGraphIndex child) noexcept = 0;\n+    /** Invoke visitor_fn for each transaction in the cluster, in linearization order, then wipe this Cluster. */\n+    virtual void ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept = 0;\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 93,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I can't find `Graph::m_clustersets`",
      "created_at": "2025-10-06T23:41:25Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408976265",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408976265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408979923",
      "pull_request_review_id": 3299619754,
      "id": 2408979923,
      "node_id": "PRRC_kwDOABII586Plh3T",
      "diff_hunk": "@@ -94,46 +95,38 @@ struct TrimTxData\n     uint64_t m_uf_size;\n };\n \n+class Cluster;\n+class GenericClusterImpl;\n+class SingletonClusterImpl;\n+\n /** A grouping of connected transactions inside a TxGraphImpl::ClusterSet. */\n class Cluster\n {\n     friend class TxGraphImpl;\n     using GraphIndex = TxGraph::GraphIndex;\n+\n+protected:\n     using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n-    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n-    DepGraph<SetType> m_depgraph;\n-    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n-     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n-     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n-    std::vector<GraphIndex> m_mapping;\n-    /** The current linearization of the cluster. m_linearization.size() equals\n-     *  m_depgraph.TxCount(). This is always kept topological. */\n-    std::vector<DepGraphIndex> m_linearization;\n     /** The quality level of m_linearization. */\n     QualityLevel m_quality{QualityLevel::NONE};\n     /** Which position this Cluster has in Graph::ClusterSet::m_clusters[m_quality]. */",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "the `Graph::` references seem to be leftovers, so maybe they can be updated to `TxGraphImpl::ClusterSet::m_clusters`",
      "created_at": "2025-10-06T23:44:40Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408979923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408979923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408987741",
      "pull_request_review_id": 3299619754,
      "id": 2408987741,
      "node_id": "PRRC_kwDOABII586Pljxd",
      "diff_hunk": "@@ -814,38 +1085,58 @@ std::vector<Cluster*> TxGraphImpl::GetConflicts() const noexcept\n             cluster->GetConflicts(*this, ret);\n         }\n     }\n-    // Deduplicate the result (the same Cluster may appear multiple times).\n+    // Deduplicate the result (the same GenericClusterImpl may appear multiple times).",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 572,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, but `SingletonClusterImpl` can also be in the duplicates:\r\n```C++\r\nassert(std::ranges::all_of(ret, [](auto* c){ return c->GetMaxTxCount() > 1; }));\r\n```\r\nfails the `txgraph` fuzzer, indicating that this should likely remain:\r\n\r\n```suggestion\r\n    // Deduplicate the result (the same Cluster may appear multiple times).\r\n```",
      "created_at": "2025-10-06T23:52:06Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2408987741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2408987741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1088,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409033412",
      "pull_request_review_id": 3299619754,
      "id": 2409033412,
      "node_id": "PRRC_kwDOABII586Plu7E",
      "diff_hunk": "@@ -891,42 +1183,106 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n+}\n+\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(m_graph_index != GraphIndex(-1));\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n {\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    if (m_graph_index == GraphIndex(-1)) return;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 703,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: there is likely no difference in accounting, but if we're already returning on the second line, we could avoid a noop usage call:\n```suggestion\n    if (m_graph_index == GraphIndex(-1)) return;\n    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n```",
      "created_at": "2025-10-07T00:35:16Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409033412",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409033412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1224,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409038947",
      "pull_request_review_id": 3299619754,
      "id": 2409038947,
      "node_id": "PRRC_kwDOABII586PlwRj",
      "diff_hunk": "@@ -891,42 +1183,106 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n+}\n+\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(m_graph_index != GraphIndex(-1));\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n {\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    if (m_graph_index == GraphIndex(-1)) return;\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+}\n+\n+void GenericClusterImpl::MoveToMain(TxGraphImpl& graph) noexcept\n {\n-    Assume(m_level == 1);\n     for (auto i : m_linearization) {\n         GraphIndex idx = m_mapping[i];\n         auto& entry = graph.m_entries[idx];\n         entry.m_locator[1].SetMissing();\n     }\n     auto quality = m_quality;",
      "path": "src/txgraph.cpp",
      "position": 728,
      "original_position": 716,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This innocent looking assignment also revealed that `ExtractCluster` modifies the object's `m_quality` - which I found surprising.\r\n\r\nInlined it to validate the above claim, fuzzing fails with: `txgraph.cpp:1566 InsertCluster: Assertion 'quality != QualityLevel::NONE' failed.`",
      "created_at": "2025-10-07T00:40:44Z",
      "updated_at": "2025-10-09T17:50:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409038947",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409038947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1260,
      "original_line": 1260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409044035",
      "pull_request_review_id": 3299619754,
      "id": 2409044035,
      "node_id": "PRRC_kwDOABII586PlxhD",
      "diff_hunk": "@@ -983,52 +1349,55 @@ bool Cluster::Split(TxGraphImpl& graph) noexcept\n     // Iterate over the connected components of this Cluster's m_depgraph.\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n+        auto component_size = component.Count();\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;\n-        if (first && component == todo) {\n-            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+        if (first && component == todo && component_size >= 2 && SetType::Fill(component_size) == component) {\n+            // The existing Cluster is an entire component, without holes. Leave it be, but update\n+            // its quality. If there are holes, we continue, so that the Cluster is reconstructed\n+            // without holes, reducing memory usage. If the component has size one, we also\n+            // continue, so that it gets converted to a SingletonClusterImpl.\n             Assume(todo == m_depgraph.Positions());\n-            graph.SetClusterQuality(m_level, m_quality, m_setindex, split_quality);\n+            graph.SetClusterQuality(level, m_quality, m_setindex, split_quality);\n             // If this made the quality ACCEPTABLE or OPTIMAL, we need to compute and cache its\n             // chunking.\n-            Updated(graph);\n+            Updated(graph, level);\n             return false;\n         }\n         first = false;\n         // Construct a new Cluster to hold the found component.\n-        auto new_cluster = std::make_unique<Cluster>(graph.m_next_sequence_counter++);\n+        auto new_cluster = graph.CreateEmptyCluster(component_size);\n         new_clusters.push_back(new_cluster.get());\n         // Remember that all the component's transactions go to this new Cluster. The positions\n         // will be determined below, so use -1 for now.\n         for (auto i : component) {\n             remap[i] = {new_cluster.get(), DepGraphIndex(-1)};\n         }\n-        graph.InsertCluster(m_level, std::move(new_cluster), split_quality);\n+        graph.InsertCluster(level, std::move(new_cluster), split_quality);\n         todo -= component;\n     }\n+    // We have to split the Cluster up. Remove accounting for the existing one first.\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     // Redistribute the transactions.\n     for (auto i : m_linearization) {\n         /** The cluster which transaction originally in position i is moved to. */\n-        Cluster* new_cluster = remap[i].first;\n+        Cluster* new_abstract_cluster = remap[i].first;\n         // Copy the transaction to the new cluster's depgraph, and remember the position.\n-        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n-        // Create new mapping entry.\n-        new_cluster->m_mapping.push_back(m_mapping[i]);\n-        // Create a new linearization entry. As we're only appending transactions, they equal the\n-        // DepGraphIndex.\n-        new_cluster->m_linearization.push_back(remap[i].second);\n+        remap[i].second = new_abstract_cluster->AppendTransaction(m_mapping[i], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(i)));\n     }\n     // Redistribute the dependencies.\n     for (auto i : m_linearization) {\n         /** The cluster transaction in position i is moved to. */\n-        Cluster* new_cluster = remap[i].first;\n+        Cluster* new_abstract_cluster = remap[i].first;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 846,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are we deliberately keeping the new name here (new_cluster -> new_abstract_cluster) or is this just a leftover from the temporary casting?",
      "created_at": "2025-10-07T00:43:46Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409044035",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409044035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409052428",
      "pull_request_review_id": 3299619754,
      "id": 2409052428,
      "node_id": "PRRC_kwDOABII586PlzkM",
      "diff_hunk": "@@ -1756,7 +2171,7 @@ void TxGraphImpl::RemoveTransaction(const Ref& arg) noexcept\n     Assume(m_main_chunkindex_observers == 0 || GetTopLevel() != 0);\n     // Find the Cluster the transaction is in, and stop if it isn't in any.\n     int level = GetTopLevel();\n-    auto cluster = FindCluster(GetRefIndex(arg), level);\n+    auto [cluster, cluster_level] = FindCluster(GetRefIndex(arg), level);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1304,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we don't seem to be using the new `cluster_level` value, to avoid confusion and minimize the diff, please consider:\n\n```suggestion\n    auto [cluster, _] = FindCluster(GetRefIndex(arg), level);\n```\nor\n\n```suggestion\n    auto cluster = FindCluster(GetRefIndex(arg), level).first;\n```\n\nor even:\n```C++\n    if (!FindCluster(GetRefIndex(arg), level).first) return;\n```",
      "created_at": "2025-10-07T00:52:12Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409052428",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409052428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409070180",
      "pull_request_review_id": 3299619754,
      "id": 2409070180,
      "node_id": "PRRC_kwDOABII586Pl35k",
      "diff_hunk": "@@ -1820,7 +2235,19 @@ void Cluster::GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Clus\n     }\n }\n \n-void Cluster::GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept\n+void SingletonClusterImpl::GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept\n+{\n+    Assume(m_graph_index != GraphIndex(-1));\n+    while (!args.empty()) {\n+        if (args.front().first != this) break;",
      "path": "src/txgraph.cpp",
      "position": 1301,
      "original_position": 1343,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "similarly to:\r\n* https://github.com/bitcoin/bitcoin/blob/86eaa4d6cd5c428f6635a8d44fa6b5a9545ea909/src/cluster_linearize.h#L440-L442\r\n```suggestion\r\n    while (!args.empty() && args.front().first == this) {\r\n```",
      "created_at": "2025-10-07T01:10:53Z",
      "updated_at": "2025-10-07T03:30:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409070180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409070180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 2262,
      "original_start_line": 2241,
      "start_side": "RIGHT",
      "line": 2263,
      "original_line": 2263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409092487",
      "pull_request_review_id": 3299619754,
      "id": 2409092487,
      "node_id": "PRRC_kwDOABII586Pl9WH",
      "diff_hunk": "@@ -484,12 +621,13 @@ class TxGraphImpl final : public TxGraph\n     /** Swap the Entry referred to by a and the one referred to by b. */\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n-    *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n+    *   removed), return the Cluster it is in and the level the Cluster has. Otherwise, return\n+    *   {nullptr, -1}. */\n+    std::pair<Cluster*, int> FindCluster(GraphIndex idx, int level) const noexcept;\n     /** Extract a Cluster from its ClusterSet. */",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 329,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we document here that its quality is also changed?\n```suggestion\n    /** Extract a Cluster from its ClusterSet and set its quality to NONE. */\n```",
      "created_at": "2025-10-07T01:34:15Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409092487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409092487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 627,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409097521",
      "pull_request_review_id": 3299619754,
      "id": 2409097521,
      "node_id": "PRRC_kwDOABII586Pl-kx",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.",
      "path": "src/txgraph.cpp",
      "position": 452,
      "original_position": 429,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "if that's the case, shouldn't this be an error instead?",
      "created_at": "2025-10-07T01:40:13Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409097521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409097521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 913,
      "original_line": 913,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409107437",
      "pull_request_review_id": 3299619754,
      "id": 2409107437,
      "node_id": "PRRC_kwDOABII586PmA_t",
      "diff_hunk": "",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Another surprise for me here is that a sanity check removes transactions",
      "created_at": "2025-10-07T01:45:45Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409107437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409107437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2791,
      "original_line": 2791,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409123553",
      "pull_request_review_id": 3299619754,
      "id": 2409123553,
      "node_id": "PRRC_kwDOABII586PmE7h",
      "diff_hunk": "@@ -1839,7 +2266,12 @@ void Cluster::GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cl\n     }\n }\n \n-bool Cluster::GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept\n+void SingletonClusterImpl::GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept\n+{\n+    GetAncestorRefs(graph, args, output);",
      "path": "src/txgraph.cpp",
      "position": 1321,
      "original_position": 1362,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we add a comment here explaining why a descendant is the same as an ancestor in this case? I'm not familiar enough with cluster mempool to understand that instantly - if you think it's trivial, ignore my comment",
      "created_at": "2025-10-07T01:58:45Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409123553",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409123553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2293,
      "original_line": 2293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409128894",
      "pull_request_review_id": 3299619754,
      "id": 2409128894,
      "node_id": "PRRC_kwDOABII586PmGO-",
      "diff_hunk": "",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "when do we expect this to be the case? My understand was that if the \"no holes\" invariant holds this should never be true. Adding a `throw \"\"` here for debugging indicates that this is never called.",
      "created_at": "2025-10-07T02:04:10Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409128894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409128894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1439,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409138316",
      "pull_request_review_id": 3299619754,
      "id": 2409138316,
      "node_id": "PRRC_kwDOABII586PmIiM",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;",
      "path": "src/txgraph.cpp",
      "position": 74,
      "original_position": 79,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "the comment states we're calculating the \"number of transactions\" but the return type claims it's a position within a `Cluster::m_linearization`. Given the calculations in `TxGraphImpl::Merge` I find this confusing.",
      "created_at": "2025-10-07T02:10:49Z",
      "updated_at": "2025-10-09T17:54:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409138316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409138316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409167491",
      "pull_request_review_id": 3299619754,
      "id": 2409167491,
      "node_id": "PRRC_kwDOABII586PmPqD",
      "diff_hunk": "@@ -983,52 +1349,55 @@ bool Cluster::Split(TxGraphImpl& graph) noexcept\n     // Iterate over the connected components of this Cluster's m_depgraph.\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n+        auto component_size = component.Count();\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;\n-        if (first && component == todo) {\n-            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+        if (first && component == todo && component_size >= 2 && SetType::Fill(component_size) == component) {",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 798,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `component_size >= 2` is basically what converts `GenericClusterImpl` back into a `SingletonClusterImpl`, right? And the opposite is `TxGraphImpl::Merge` in `total_size > into_cluster->GetMaxTxCount()`, right?\nThe `component_size >= 2` was a bit hidden here, if I understood it correctly, it might need some comment or refactoring.",
      "created_at": "2025-10-07T02:32:43Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409167491",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409167491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409180944",
      "pull_request_review_id": 3299619754,
      "id": 2409180944,
      "node_id": "PRRC_kwDOABII586PmS8Q",
      "diff_hunk": "@@ -2401,6 +2881,19 @@ void TxGraphImpl::SanityCheck() const\n             // ... for all clusters in them ...\n             for (ClusterSetIndex setindex = 0; setindex < quality_clusters.size(); ++setindex) {\n                 const auto& cluster = *quality_clusters[setindex];\n+                // The number of transactions in a Cluster cannot exceed m_max_cluster_count.\n+                assert(cluster.GetTxCount() <= m_max_cluster_count);",
      "path": "src/txgraph.cpp",
      "position": 1617,
      "original_position": 1671,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We could test the implementation-specific capacity as well here:\n\n```suggestion\n                assert(cluster.GetTxCount() <= cluster.GetMaxTxCount());\n```",
      "created_at": "2025-10-07T02:41:46Z",
      "updated_at": "2025-10-07T03:11:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2409180944",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2409180944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2907,
      "original_line": 2907,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2410975604",
      "pull_request_review_id": 3182210966,
      "id": 2410975604,
      "node_id": "PRRC_kwDOABII586PtJF0",
      "diff_hunk": "@@ -227,8 +238,8 @@ class Cluster\n class GenericClusterImpl final : public Cluster\n {\n     friend class TxGraphImpl;\n+    using SetType = Cluster::SetType;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 43,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": 2407836988,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`m_depgraph` is a `DepGraph<SetType>`",
      "created_at": "2025-10-07T15:08:04Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2410975604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2410975604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411448974",
      "pull_request_review_id": 3182210966,
      "id": 2411448974,
      "node_id": "PRRC_kwDOABII586Pu8qO",
      "diff_hunk": "@@ -1071,6 +1099,8 @@ void Cluster::Merge(TxGraphImpl& graph, int level, Cluster& other) noexcept\n {\n     /** Vector to store the positions in this Cluster for each position in other. */\n     std::vector<DepGraphIndex> remap(other.m_depgraph.PositionRange());\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    graph.GetClusterSet(level).m_cluster_usage -= other.TotalMemoryUsage();",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 109,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "f891b3aff31622b288c3cc9bc747d1ceda34b86e",
      "in_reply_to_id": 2407594342,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fwiw, I think the existing code is clearer.",
      "created_at": "2025-10-07T17:51:20Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2411448974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411448974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1102,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411539360",
      "pull_request_review_id": 3182210966,
      "id": 2411539360,
      "node_id": "PRRC_kwDOABII586PvSug",
      "diff_hunk": "@@ -779,6 +791,31 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));",
      "path": "src/txgraph.cpp",
      "position": 430,
      "original_position": 79,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": 2407850203,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Alternatively, both classes could implement an `IsEmpty()` function.",
      "created_at": "2025-10-07T18:30:00Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2411539360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411539360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 891,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411544659",
      "pull_request_review_id": 3182210966,
      "id": 2411544659,
      "node_id": "PRRC_kwDOABII586PvUBT",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.\n+    Assume(child == 0);\n+    Assume(parent == SetType{} || parent == SetType::Fill(0));\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    for (auto pos : m_linearization) {\n+        visit_fn(pos, m_mapping[pos], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(pos)), m_depgraph.GetReducedParents(pos));\n+    }\n+    // Purge this Cluster, now that everything has been moved.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_linearization.clear();\n+    m_mapping.clear();\n+}\n+\n+void SingletonClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        visit_fn(0, m_graph_index, m_feerate, SetType{});\n+        m_graph_index = GraphIndex(-1);\n+    }\n+}\n+\n+int GenericClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];\n+    // See if there is a level whose Locator matches this Cluster, if so return that level.\n+    for (int level = 0; level < MAX_LEVELS; ++level) {\n+        if (entry.m_locator[level].cluster == this) return level;\n+    }\n+    // Given that we started with an Entry that occurs in this Cluster, one of its Locators must\n+    // point back to it.\n+    assert(false);\n+    return -1;\n+}\n+\n+int SingletonClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(m_graph_index != GraphIndex(-1));\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 475,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: In the `SingletonClusterImpl` case, there is only 1 Entry\r\n```suggestion\r\n```",
      "created_at": "2025-10-07T18:32:31Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2411544659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411544659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 938,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411563912",
      "pull_request_review_id": 3182210966,
      "id": 2411563912,
      "node_id": "PRRC_kwDOABII586PvYuI",
      "diff_hunk": "@@ -782,9 +1022,27 @@ void Cluster::Updated(TxGraphImpl& graph) noexcept\n     }\n }\n \n-void Cluster::GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept\n+void SingletonClusterImpl::Updated(TxGraphImpl& graph, int level) noexcept\n+{\n+    // Don't do anything if this is empty.\n+    if (m_graph_index == GraphIndex(-1)) return;\n+\n+    auto& entry = graph.m_entries[m_graph_index];\n+    // Discard any potential ChunkData prior to modifying the Cluster (as that could\n+    // invalidate its ordering).\n+    if (level == 0) graph.ClearChunkData(entry);\n+    entry.m_locator[level].SetPresent(this, 0);\n+    // If this is for the main graph (level = 0), compute its chunking and store its information in\n+    // the Entry's m_main_lin_index and m_main_chunk_feerate.\n+    if (level == 0) {\n+        entry.m_main_lin_index = 0;\n+        entry.m_main_chunk_feerate = m_feerate;\n+        graph.CreateChunkData(m_graph_index, LinearizationIndex(-1));",
      "path": "src/txgraph.cpp",
      "position": 562,
      "original_position": 537,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: perhaps worth a comment that the special \"singleton at the end of the cluster\" `LinearizationIndex(-1)` is used here",
      "created_at": "2025-10-07T18:40:56Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2411563912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411563912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1063,
      "original_line": 1063,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411594625",
      "pull_request_review_id": 3182210966,
      "id": 2411594625,
      "node_id": "PRRC_kwDOABII586PvgOB",
      "diff_hunk": "@@ -782,9 +1022,27 @@ void Cluster::Updated(TxGraphImpl& graph) noexcept\n     }\n }\n \n-void Cluster::GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept\n+void SingletonClusterImpl::Updated(TxGraphImpl& graph, int level) noexcept\n+{\n+    // Don't do anything if this is empty.\n+    if (m_graph_index == GraphIndex(-1)) return;\n+\n+    auto& entry = graph.m_entries[m_graph_index];\n+    // Discard any potential ChunkData prior to modifying the Cluster (as that could\n+    // invalidate its ordering).\n+    if (level == 0) graph.ClearChunkData(entry);\n+    entry.m_locator[level].SetPresent(this, 0);\n+    // If this is for the main graph (level = 0), compute its chunking and store its information in\n+    // the Entry's m_main_lin_index and m_main_chunk_feerate.\n+    if (level == 0) {",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 534,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hm, should we be checking `m_quality` before adding to chunk index? Singletons are always \"linearized\" optimally of course, but `QualityLevel::OVERSIZED_SINGLETON` is also possible here (probably only theoretically).",
      "created_at": "2025-10-07T18:54:28Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2411594625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411594625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1037,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411624776",
      "pull_request_review_id": 3182210966,
      "id": 2411624776,
      "node_id": "PRRC_kwDOABII586PvnlI",
      "diff_hunk": "@@ -1673,22 +2085,32 @@ std::pair<uint64_t, bool> Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_\n     // Update the Cluster's quality.\n     bool improved = false;\n     if (optimal) {\n-        graph.SetClusterQuality(m_level, m_quality, m_setindex, QualityLevel::OPTIMAL);\n+        graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::OPTIMAL);\n         improved = true;\n     } else if (max_iters >= graph.m_acceptable_iters && !IsAcceptable()) {\n-        graph.SetClusterQuality(m_level, m_quality, m_setindex, QualityLevel::ACCEPTABLE);\n+        graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::ACCEPTABLE);\n         improved = true;\n     }\n     // Update the Entry objects.\n-    Updated(graph);\n+    Updated(graph, level);\n     return {cost, improved};\n }\n \n-void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+std::pair<uint64_t, bool> SingletonClusterImpl::Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1226,
      "original_position": 1240,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As far as I can tell, this function should never be called?",
      "created_at": "2025-10-07T19:08:12Z",
      "updated_at": "2025-10-07T19:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2411624776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411624776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2122,
      "original_line": 2122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411666783",
      "pull_request_review_id": 3311572643,
      "id": 2411666783,
      "node_id": "PRRC_kwDOABII586Pvx1f",
      "diff_hunk": "@@ -227,8 +238,8 @@ class Cluster\n class GenericClusterImpl final : public Cluster\n {\n     friend class TxGraphImpl;\n+    using SetType = Cluster::SetType;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 43,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": 2407836988,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're in `Cluster` so `SetType` should be available here, so I think it's redundant",
      "created_at": "2025-10-07T19:24:29Z",
      "updated_at": "2025-10-07T19:24:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2411666783",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411666783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411670504",
      "pull_request_review_id": 3311578151,
      "id": 2411670504,
      "node_id": "PRRC_kwDOABII586Pvyvo",
      "diff_hunk": "@@ -1071,6 +1099,8 @@ void Cluster::Merge(TxGraphImpl& graph, int level, Cluster& other) noexcept\n {\n     /** Vector to store the positions in this Cluster for each position in other. */\n     std::vector<DepGraphIndex> remap(other.m_depgraph.PositionRange());\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    graph.GetClusterSet(level).m_cluster_usage -= other.TotalMemoryUsage();",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 109,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "f891b3aff31622b288c3cc9bc747d1ceda34b86e",
      "in_reply_to_id": 2407594342,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm also fine with other ways of deduplication - or to leave as is.",
      "created_at": "2025-10-07T19:25:38Z",
      "updated_at": "2025-10-07T19:25:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2411670504",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2411670504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1102,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415021453",
      "pull_request_review_id": 3316504501,
      "id": 2415021453,
      "node_id": "PRRC_kwDOABII586P8k2N",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n+    /** Append a transaction with given GraphIndex at the end of this Cluster and its\n+     *  linearization. Return the DepGraphIndex it was placed at. */\n+    virtual DepGraphIndex AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept = 0;\n+    /** Add dependencies to a given child in this cluster. */\n+    virtual void AddDependencies(SetType parents, DepGraphIndex child) noexcept = 0;\n+    /** Invoke visitor_fn for each transaction in the cluster, in linearization order, then wipe this Cluster. */\n+    virtual void ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept = 0;\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n+     *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n+    virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\n     /** Only called by Graph::SwapIndexes. */\n-    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    virtual void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept = 0;\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph) noexcept;\n+    virtual void Updated(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Create a copy of this Cluster in staging, returning a pointer to it (used by PullIn). */\n-    Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept;\n+    virtual Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept = 0;\n     /** Get the list of Clusters in main that conflict with this one (which is assumed to be in staging). */\n-    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    virtual void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept = 0;\n     /** Mark all the Entry objects belonging to this staging Cluster as missing. The Cluster must be\n      *  deleted immediately after. */\n-    void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    virtual void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept = 0;\n     /** Remove all transactions from a Cluster. */\n-    void Clear(TxGraphImpl& graph) noexcept;\n+    virtual void Clear(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Change a Cluster's level from 1 (staging) to 0 (main). */\n-    void MoveToMain(TxGraphImpl& graph) noexcept;\n+    virtual void MoveToMain(TxGraphImpl& graph) noexcept = 0;\n+    /** Minimize this Cluster's memory usage. */\n+    virtual void Compact() noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n \n     /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n-     *  off. These must be at least one such entry. */\n-    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+     *  off. There must be at least one such entry. */\n+    virtual void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept = 0;\n     /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n      *  Cluster afterwards. */\n-    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    [[nodiscard]] virtual bool Split(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Move all transactions from cluster to *this (as separate components). */\n-    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    virtual void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept = 0;\n     /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n-    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    virtual void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept = 0;\n     /** Improve the linearization of this Cluster. Returns how much work was performed and whether\n      *  the Cluster's QualityLevel improved as a result. */\n-    std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+    virtual std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept = 0;\n     /** For every chunk in the cluster, append its FeeFrac to ret. */\n-    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    virtual void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept = 0;\n     /** Add a TrimTxData entry (filling m_chunk_feerate, m_index, m_tx_size) for every\n      *  transaction in the Cluster to ret. Implicit dependencies between consecutive transactions\n      *  in the linearization are added to deps. Return the Cluster's total transaction size. */\n-    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+    virtual uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of public TxGraph functions.\n \n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their ancestors to output. */\n-    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their descendants to output. */\n-    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Populate range with refs for the transactions in this Cluster's linearization, from\n      *  position start_pos until start_pos+range.size()-1, inclusive. Returns whether that\n      *  range includes the last transaction in the linearization. */\n-    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    virtual bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept = 0;\n     /** Get the individual transaction feerate of a Cluster element. */\n-    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    virtual FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept = 0;\n     /** Modify the fee of a Cluster element. */\n-    void SetFee(TxGraphImpl& graph, DepGraphIndex idx, int64_t fee) noexcept;\n+    virtual void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept = 0;\n \n     // Debugging functions.\n \n-    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+    virtual void SanityCheck(const TxGraphImpl& graph, int level) const = 0;\n };\n \n+/** An implementation of Cluster that uses a DepGraph and vectors, to support arbitrary numbers of\n+ *  transactions up to MAX_CLUSTER_COUNT_LIMIT. */\n+class GenericClusterImpl final : public Cluster",
      "path": "src/txgraph.cpp",
      "position": 178,
      "original_position": 181,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2402767616,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A variant has the same overhead as a vtable pointer (by adding a variant tag), but has the additional downside that the allocated memory will always have space for the larger of the member types. So in this case, that would boil down to always allocating as much memory as vtable-bearing `GenericClusterImpl`, even for singletons.",
      "created_at": "2025-10-08T20:58:07Z",
      "updated_at": "2025-10-08T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415021453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415021453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415028019",
      "pull_request_review_id": 3316512982,
      "id": 2415028019,
      "node_id": "PRRC_kwDOABII586P8mcz",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.\n+    Assume(child == 0);\n+    Assume(parent == SetType{} || parent == SetType::Fill(0));\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    for (auto pos : m_linearization) {\n+        visit_fn(pos, m_mapping[pos], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(pos)), m_depgraph.GetReducedParents(pos));\n+    }\n+    // Purge this Cluster, now that everything has been moved.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_linearization.clear();\n+    m_mapping.clear();\n+}\n+\n+void SingletonClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        visit_fn(0, m_graph_index, m_feerate, SetType{});\n+        m_graph_index = GraphIndex(-1);\n+    }\n+}\n+\n+int GenericClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];\n+    // See if there is a level whose Locator matches this Cluster, if so return that level.\n+    for (int level = 0; level < MAX_LEVELS; ++level) {\n+        if (entry.m_locator[level].cluster == this) return level;\n+    }\n+    // Given that we started with an Entry that occurs in this Cluster, one of its Locators must\n+    // point back to it.\n+    assert(false);\n+    return -1;",
      "path": "src/txgraph.cpp",
      "position": 490,
      "original_position": 467,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2402810313,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this should be fatal (as it will crash anyway later when the caller tries to access level -1).",
      "created_at": "2025-10-08T21:01:31Z",
      "updated_at": "2025-10-08T21:01:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415028019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415028019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 950,
      "original_start_line": 929,
      "start_side": "RIGHT",
      "line": 951,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415068153",
      "pull_request_review_id": 3316575321,
      "id": 2415068153,
      "node_id": "PRRC_kwDOABII586P8wP5",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.\n+    Assume(child == 0);\n+    Assume(parent == SetType{} || parent == SetType::Fill(0));\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    for (auto pos : m_linearization) {\n+        visit_fn(pos, m_mapping[pos], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(pos)), m_depgraph.GetReducedParents(pos));\n+    }\n+    // Purge this Cluster, now that everything has been moved.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_linearization.clear();\n+    m_mapping.clear();\n+}\n+\n+void SingletonClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        visit_fn(0, m_graph_index, m_feerate, SetType{});\n+        m_graph_index = GraphIndex(-1);\n+    }\n+}\n+\n+int GenericClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];\n+    // See if there is a level whose Locator matches this Cluster, if so return that level.\n+    for (int level = 0; level < MAX_LEVELS; ++level) {\n+        if (entry.m_locator[level].cluster == this) return level;",
      "path": "src/txgraph.cpp",
      "position": 485,
      "original_position": 462,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2403014140,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The code here is new, but the lay-out of `m_locator` predates this PR. Going to leave it for a follow-up if anyone cares.",
      "created_at": "2025-10-08T21:24:08Z",
      "updated_at": "2025-10-08T21:24:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415068153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415068153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 946,
      "original_line": 946,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415069320",
      "pull_request_review_id": 3316577352,
      "id": 2415069320,
      "node_id": "PRRC_kwDOABII586P8wiI",
      "diff_hunk": "@@ -484,12 +621,13 @@ class TxGraphImpl final : public TxGraph\n     /** Swap the Entry referred to by a and the one referred to by b. */\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n-    *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n+    *   removed), return the Cluster it is in and the level the Cluster has. Otherwise, return\n+    *   {nullptr, -1}. */\n+    std::pair<Cluster*, int> FindCluster(GraphIndex idx, int level) const noexcept;\n     /** Extract a Cluster from its ClusterSet. */\n     std::unique_ptr<Cluster> ExtractCluster(int level, QualityLevel quality, ClusterSetIndex setindex) noexcept;\n     /** Delete a Cluster. */\n-    void DeleteCluster(Cluster& cluster) noexcept;\n+    void DeleteCluster(int level, Cluster& cluster) noexcept;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 333,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2403274255,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not going to change that now.",
      "created_at": "2025-10-08T21:24:45Z",
      "updated_at": "2025-10-08T21:24:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415069320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415069320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 630,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415081345",
      "pull_request_review_id": 3316593840,
      "id": 2415081345,
      "node_id": "PRRC_kwDOABII586P8zeB",
      "diff_hunk": "@@ -1123,8 +1134,9 @@ bool GenericClusterImpl::Split(TxGraphImpl& graph, int level) noexcept\n     // Iterate over the connected components of this Cluster's m_depgraph.\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n+        auto component_size = component.Count();\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "fcf5e788d912cc465ad84ec75dabaf9941044314",
      "in_reply_to_id": 2403366988,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't understand the question. What change would affect the definition?",
      "created_at": "2025-10-08T21:32:15Z",
      "updated_at": "2025-10-08T21:32:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415081345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415081345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415090220",
      "pull_request_review_id": 3316604894,
      "id": 2415090220,
      "node_id": "PRRC_kwDOABII586P81os",
      "diff_hunk": "@@ -1001,8 +1001,10 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;\n-        if (first && component == todo) {\n-            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+        if (first && component == todo && SetType::Fill(component.Count()) == component) {",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "d9dbbf41b6458b11d9225fb436fc749bd30f9588",
      "in_reply_to_id": 2403456079,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This entire `if` branch is an optimization which could be commented out without breaking anything. It just avoids creating a new cluster when the old one could be reused.",
      "created_at": "2025-10-08T21:37:53Z",
      "updated_at": "2025-10-08T21:37:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415090220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415090220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415091446",
      "pull_request_review_id": 3316606412,
      "id": 2415091446,
      "node_id": "PRRC_kwDOABII586P8172",
      "diff_hunk": "@@ -453,62 +453,65 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n     };\n \n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\n-        uint8_t command = provider.ConsumeIntegral<uint8_t>();\n-        if (num_tx_sim == 0 || ((command % 3) <= 0 && num_tx_sim < TestBitSet::Size())) {\n-            // AddTransaction.\n-            auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n-            auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n-            FeeFrac feerate{fee, size};\n-            // Apply to DepGraph.\n-            auto idx = real.AddTransaction(feerate);\n-            // Verify that the returned index is correct.\n-            assert(!sim[idx].has_value());\n-            for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n-                if (!sim[i].has_value()) {\n-                    assert(idx == i);\n-                    break;\n+        int command = provider.ConsumeIntegral<uint8_t>() % 4;\n+        while (true) {\n+            // Iterate decreasing command until an applicable branch is found.\n+            if (num_tx_sim < TestBitSet::Size() && command-- == 0) {\n+                // AddTransaction.\n+                auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n+                auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n+                FeeFrac feerate{fee, size};\n+                // Apply to DepGraph.\n+                auto idx = real.AddTransaction(feerate);\n+                // Verify that the returned index is correct.\n+                assert(!sim[idx].has_value());\n+                for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n+                    if (!sim[i].has_value()) {\n+                        assert(idx == i);\n+                        break;\n+                    }\n                 }\n-            }\n-            // Update sim.\n-            sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n-            ++num_tx_sim;\n-            continue;\n-        }\n-        if ((command % 3) <= 1 && num_tx_sim > 0) {\n-            // AddDependencies.\n-            DepGraphIndex child = idx_fn();\n-            auto parents = subset_fn();\n-            // Apply to DepGraph.\n-            real.AddDependencies(parents, child);\n-            // Apply to sim.\n-            sim[child]->second |= parents;\n-            continue;\n-        }\n-        if (num_tx_sim > 0) {\n-            // Remove transactions.\n-            auto del = set_fn();\n-            // Propagate all ancestry information before deleting anything in the simulation (as\n-            // intermediary transactions may be deleted which impact connectivity).\n-            anc_update_fn();\n-            // Compare the state of the transactions being deleted.\n-            for (auto i : del) check_fn(i);\n-            // Apply to DepGraph.\n-            real.RemoveTransactions(del);\n-            // Apply to sim.\n-            for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n-                if (sim[i].has_value()) {\n-                    if (del[i]) {\n-                        --num_tx_sim;\n-                        sim[i] = std::nullopt;\n-                    } else {\n-                        sim[i]->second -= del;\n+                // Update sim.\n+                sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n+                ++num_tx_sim;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // AddDependencies.\n+                DepGraphIndex child = idx_fn();\n+                auto parents = subset_fn();\n+                // Apply to DepGraph.\n+                real.AddDependencies(parents, child);\n+                // Apply to sim.\n+                sim[child]->second |= parents;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // Remove transactions.\n+                auto del = set_fn();\n+                // Propagate all ancestry information before deleting anything in the simulation (as\n+                // intermediary transactions may be deleted which impact connectivity).\n+                anc_update_fn();\n+                // Compare the state of the transactions being deleted.\n+                for (auto i : del) check_fn(i);\n+                // Apply to DepGraph.\n+                real.RemoveTransactions(del);\n+                // Apply to sim.\n+                for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n+                    if (sim[i].has_value()) {\n+                        if (del[i]) {\n+                            --num_tx_sim;\n+                            sim[i] = std::nullopt;\n+                        } else {\n+                            sim[i]->second -= del;\n+                        }\n                     }\n                 }\n+                break;\n+            } else if (command-- == 0) {",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 108,
      "original_position": 105,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7084d5faf1e2426f1c6318d35d43ac2f37970da1",
      "in_reply_to_id": 2403462546,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "And extensibility, yes.",
      "created_at": "2025-10-08T21:38:42Z",
      "updated_at": "2025-10-08T21:38:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415091446",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415091446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 511,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415091933",
      "pull_request_review_id": 3316607007,
      "id": 2415091933,
      "node_id": "PRRC_kwDOABII586P82Dd",
      "diff_hunk": "@@ -332,6 +333,17 @@ class DepGraph\n         }\n         return true;\n     }\n+\n+    /** Reduce memory usage if possible. No observable effect. */\n+    void Compact() noexcept",
      "path": "src/cluster_linearize.h",
      "position": 14,
      "original_position": 14,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7084d5faf1e2426f1c6318d35d43ac2f37970da1",
      "in_reply_to_id": 2404663515,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We always treat allocation errors as fatal.",
      "created_at": "2025-10-08T21:39:01Z",
      "updated_at": "2025-10-08T21:39:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415091933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415091933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 338,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415092866",
      "pull_request_review_id": 3316608170,
      "id": 2415092866,
      "node_id": "PRRC_kwDOABII586P82SC",
      "diff_hunk": "@@ -332,6 +333,17 @@ class DepGraph\n         }\n         return true;\n     }\n+\n+    /** Reduce memory usage if possible. No observable effect. */\n+    void Compact() noexcept\n+    {\n+        entries.shrink_to_fit();",
      "path": "src/cluster_linearize.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7084d5faf1e2426f1c6318d35d43ac2f37970da1",
      "in_reply_to_id": 2404663876,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We could experiment with that in a follow-up.",
      "created_at": "2025-10-08T21:39:38Z",
      "updated_at": "2025-10-08T21:39:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415092866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415092866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 340,
      "original_line": 340,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415124751",
      "pull_request_review_id": 3316646802,
      "id": 2415124751,
      "node_id": "PRRC_kwDOABII586P8-EP",
      "diff_hunk": "@@ -909,6 +911,7 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n+    Compact();\n     graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n     Updated(graph, level);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "0f3331f8cb215b5b45e6a369ea989fe27d7a04af",
      "in_reply_to_id": 2407496825,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I do see fuzz failure if I remove the `Compact`; as for example it's possible that `m_linearization` is shrunk above, which will need to be accounted for.\r\n\r\nNow, it is true that we *technically* don't really care about minimizing memory usage here, as we'll always have a `Split()` that follows, which will either create new Clusters, or update the existing one. The Compact() and corresponding updating of memory usage could be moved there, but I find that a bit harder to reason about.",
      "created_at": "2025-10-08T22:01:04Z",
      "updated_at": "2025-10-08T22:01:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415124751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415124751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 1208,
      "original_start_line": 914,
      "start_side": "RIGHT",
      "line": 1211,
      "original_line": 1211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415125290",
      "pull_request_review_id": 3316647499,
      "id": 2415125290,
      "node_id": "PRRC_kwDOABII586P8-Mq",
      "diff_hunk": "@@ -936,6 +939,13 @@ void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n     Updated(graph, 0);\n }\n \n+void Cluster::Compact() noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "0f3331f8cb215b5b45e6a369ea989fe27d7a04af",
      "in_reply_to_id": 2407536386,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems overkill.",
      "created_at": "2025-10-08T22:01:27Z",
      "updated_at": "2025-10-08T22:01:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415125290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415125290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 942,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415125528",
      "pull_request_review_id": 3316647831,
      "id": 2415125528,
      "node_id": "PRRC_kwDOABII586P8-QY",
      "diff_hunk": "@@ -1071,6 +1099,8 @@ void Cluster::Merge(TxGraphImpl& graph, int level, Cluster& other) noexcept\n {\n     /** Vector to store the positions in this Cluster for each position in other. */\n     std::vector<DepGraphIndex> remap(other.m_depgraph.PositionRange());\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    graph.GetClusterSet(level).m_cluster_usage -= other.TotalMemoryUsage();",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 109,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "f891b3aff31622b288c3cc9bc747d1ceda34b86e",
      "in_reply_to_id": 2407594342,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I will leave as-is.",
      "created_at": "2025-10-08T22:01:39Z",
      "updated_at": "2025-10-08T22:01:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415125528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415125528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1102,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415131623",
      "pull_request_review_id": 3316655696,
      "id": 2415131623,
      "node_id": "PRRC_kwDOABII586P8_vn",
      "diff_hunk": "@@ -2977,6 +2979,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "437e29cd8d4981f1f5451c438bf21c24c669bf22",
      "in_reply_to_id": 2407646775,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "They are unobservable side-effects (from the perspective of a `TxGraph` interface user). The implementation is lazy, which means that at times it needs to apply queued-up mutations.",
      "created_at": "2025-10-08T22:06:10Z",
      "updated_at": "2025-10-08T22:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415131623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415131623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415133326",
      "pull_request_review_id": 3316658377,
      "id": 2415133326,
      "node_id": "PRRC_kwDOABII586P9AKO",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n+    /** Append a transaction with given GraphIndex at the end of this Cluster and its\n+     *  linearization. Return the DepGraphIndex it was placed at. */\n+    virtual DepGraphIndex AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept = 0;\n+    /** Add dependencies to a given child in this cluster. */\n+    virtual void AddDependencies(SetType parents, DepGraphIndex child) noexcept = 0;\n+    /** Invoke visitor_fn for each transaction in the cluster, in linearization order, then wipe this Cluster. */\n+    virtual void ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept = 0;\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n+     *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n+    virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\n     /** Only called by Graph::SwapIndexes. */\n-    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    virtual void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept = 0;\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph) noexcept;\n+    virtual void Updated(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Create a copy of this Cluster in staging, returning a pointer to it (used by PullIn). */\n-    Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept;\n+    virtual Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept = 0;\n     /** Get the list of Clusters in main that conflict with this one (which is assumed to be in staging). */\n-    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    virtual void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept = 0;\n     /** Mark all the Entry objects belonging to this staging Cluster as missing. The Cluster must be\n      *  deleted immediately after. */\n-    void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    virtual void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept = 0;\n     /** Remove all transactions from a Cluster. */\n-    void Clear(TxGraphImpl& graph) noexcept;\n+    virtual void Clear(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Change a Cluster's level from 1 (staging) to 0 (main). */\n-    void MoveToMain(TxGraphImpl& graph) noexcept;\n+    virtual void MoveToMain(TxGraphImpl& graph) noexcept = 0;\n+    /** Minimize this Cluster's memory usage. */\n+    virtual void Compact() noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n \n     /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n-     *  off. These must be at least one such entry. */\n-    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+     *  off. There must be at least one such entry. */\n+    virtual void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept = 0;\n     /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n      *  Cluster afterwards. */\n-    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    [[nodiscard]] virtual bool Split(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Move all transactions from cluster to *this (as separate components). */\n-    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    virtual void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept = 0;\n     /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n-    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    virtual void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept = 0;\n     /** Improve the linearization of this Cluster. Returns how much work was performed and whether\n      *  the Cluster's QualityLevel improved as a result. */\n-    std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+    virtual std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept = 0;\n     /** For every chunk in the cluster, append its FeeFrac to ret. */\n-    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    virtual void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept = 0;\n     /** Add a TrimTxData entry (filling m_chunk_feerate, m_index, m_tx_size) for every\n      *  transaction in the Cluster to ret. Implicit dependencies between consecutive transactions\n      *  in the linearization are added to deps. Return the Cluster's total transaction size. */\n-    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+    virtual uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of public TxGraph functions.\n \n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their ancestors to output. */\n-    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their descendants to output. */\n-    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Populate range with refs for the transactions in this Cluster's linearization, from\n      *  position start_pos until start_pos+range.size()-1, inclusive. Returns whether that\n      *  range includes the last transaction in the linearization. */\n-    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    virtual bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept = 0;\n     /** Get the individual transaction feerate of a Cluster element. */\n-    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    virtual FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept = 0;\n     /** Modify the fee of a Cluster element. */\n-    void SetFee(TxGraphImpl& graph, DepGraphIndex idx, int64_t fee) noexcept;\n+    virtual void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept = 0;\n \n     // Debugging functions.\n \n-    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+    virtual void SanityCheck(const TxGraphImpl& graph, int level) const = 0;\n };\n \n+/** An implementation of Cluster that uses a DepGraph and vectors, to support arbitrary numbers of\n+ *  transactions up to MAX_CLUSTER_COUNT_LIMIT. */\n+class GenericClusterImpl final : public Cluster",
      "path": "src/txgraph.cpp",
      "position": 178,
      "original_position": 181,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2402767616,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes, with current versions it would use the max size, it's why I wrote \"we would likely need some tricks to save memory\". I don't have a concrete better idea yet but will try to come up with something better.",
      "created_at": "2025-10-08T22:07:21Z",
      "updated_at": "2025-10-08T22:07:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415133326",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415133326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415139924",
      "pull_request_review_id": 3316666971,
      "id": 2415139924,
      "node_id": "PRRC_kwDOABII586P9BxU",
      "diff_hunk": "@@ -202,6 +202,12 @@ class TxGraph\n      *  graph must not be oversized. If the graph is empty, {{}, FeePerWeight{}} is returned. */\n     virtual std::pair<std::vector<Ref*>, FeePerWeight> GetWorstMainChunk() noexcept = 0;\n \n+    /** Get the approximate memory usage for this object, just counting the main graph. If a\n+     *  staging graph is present, return a number corresponding to memory usage after\n+     *  AbortStaging() would be called. BlockBuilders' memory usage is not included here. Can\n+     *  always be called. */",
      "path": "src/txgraph.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "437e29cd8d4981f1f5451c438bf21c24c669bf22",
      "in_reply_to_id": 2407653715,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, or when `BlockBuilder` objects exist. All functions in the `TxGraph` interface declare when they're allowed to be called.",
      "created_at": "2025-10-08T22:12:20Z",
      "updated_at": "2025-10-08T22:12:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415139924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415139924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 207,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415143034",
      "pull_request_review_id": 3316671049,
      "id": 2415143034,
      "node_id": "PRRC_kwDOABII586P9Ch6",
      "diff_hunk": "@@ -167,75 +145,145 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n     /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n      *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n-    int GetLevel(const TxGraphImpl& graph) const noexcept;\n+    virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\n     /** Only called by Graph::SwapIndexes. */\n-    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    virtual void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept = 0;\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph, int level) noexcept;\n+    virtual void Updated(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Create a copy of this Cluster in staging, returning a pointer to it (used by PullIn). */\n-    Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept;\n+    virtual Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept = 0;\n     /** Get the list of Clusters in main that conflict with this one (which is assumed to be in staging). */\n-    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    virtual void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept = 0;\n     /** Mark all the Entry objects belonging to this staging Cluster as missing. The Cluster must be\n      *  deleted immediately after. */\n-    void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    virtual void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept = 0;\n     /** Remove all transactions from a Cluster. */\n-    void Clear(TxGraphImpl& graph, int level) noexcept;\n+    virtual void Clear(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Change a Cluster's level from 1 (staging) to 0 (main). */\n-    void MoveToMain(TxGraphImpl& graph) noexcept;\n+    virtual void MoveToMain(TxGraphImpl& graph) noexcept = 0;\n     /** Minimize this Cluster's memory usage. */\n-    void Compact() noexcept;\n+    virtual void Compact() noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n \n     /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n-     *  off. These must be at least one such entry. */\n-    void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept;\n+     *  off. There must be at least one such entry. */\n+    virtual void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept = 0;\n     /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n      *  Cluster afterwards. */\n-    [[nodiscard]] bool Split(TxGraphImpl& graph, int level) noexcept;\n+    [[nodiscard]] virtual bool Split(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Move all transactions from cluster to *this (as separate components). */\n-    void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept;\n+    virtual void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept = 0;\n     /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n-    void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    virtual void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept = 0;\n     /** Improve the linearization of this Cluster. Returns how much work was performed and whether\n      *  the Cluster's QualityLevel improved as a result. */\n-    std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept;\n+    virtual std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept = 0;\n     /** For every chunk in the cluster, append its FeeFrac to ret. */\n-    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    virtual void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept = 0;\n     /** Add a TrimTxData entry (filling m_chunk_feerate, m_index, m_tx_size) for every\n      *  transaction in the Cluster to ret. Implicit dependencies between consecutive transactions\n      *  in the linearization are added to deps. Return the Cluster's total transaction size. */\n-    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+    virtual uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of public TxGraph functions.\n \n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their ancestors to output. */\n-    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their descendants to output. */\n-    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Populate range with refs for the transactions in this Cluster's linearization, from\n      *  position start_pos until start_pos+range.size()-1, inclusive. Returns whether that\n      *  range includes the last transaction in the linearization. */\n-    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    virtual bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept = 0;\n     /** Get the individual transaction feerate of a Cluster element. */\n-    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    virtual FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept = 0;\n     /** Modify the fee of a Cluster element. */\n-    void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept;\n+    virtual void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept = 0;\n \n     // Debugging functions.\n \n-    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+    virtual void SanityCheck(const TxGraphImpl& graph, int level) const = 0;\n+};\n+\n+/** An implementation of Cluster that uses a DepGraph and vectors, to support arbitrary numbers of\n+ *  transactions up to MAX_CLUSTER_COUNT_LIMIT. */\n+class GenericClusterImpl final : public Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 180,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": 2407682618,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're using the name `SetType` in many places in the cluster linearization code.",
      "created_at": "2025-10-08T22:14:52Z",
      "updated_at": "2025-10-08T22:14:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415143034",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415143034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415145512",
      "pull_request_review_id": 3316674228,
      "id": 2415145512,
      "node_id": "PRRC_kwDOABII586P9DIo",
      "diff_hunk": "@@ -167,75 +145,145 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n     /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n      *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n-    int GetLevel(const TxGraphImpl& graph) const noexcept;\n+    virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\n     /** Only called by Graph::SwapIndexes. */\n-    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    virtual void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept = 0;\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph, int level) noexcept;\n+    virtual void Updated(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Create a copy of this Cluster in staging, returning a pointer to it (used by PullIn). */\n-    Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept;\n+    virtual Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept = 0;\n     /** Get the list of Clusters in main that conflict with this one (which is assumed to be in staging). */\n-    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    virtual void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept = 0;\n     /** Mark all the Entry objects belonging to this staging Cluster as missing. The Cluster must be\n      *  deleted immediately after. */\n-    void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    virtual void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept = 0;\n     /** Remove all transactions from a Cluster. */\n-    void Clear(TxGraphImpl& graph, int level) noexcept;\n+    virtual void Clear(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Change a Cluster's level from 1 (staging) to 0 (main). */\n-    void MoveToMain(TxGraphImpl& graph) noexcept;\n+    virtual void MoveToMain(TxGraphImpl& graph) noexcept = 0;\n     /** Minimize this Cluster's memory usage. */\n-    void Compact() noexcept;\n+    virtual void Compact() noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n \n     /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n-     *  off. These must be at least one such entry. */\n-    void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept;\n+     *  off. There must be at least one such entry. */\n+    virtual void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept = 0;\n     /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n      *  Cluster afterwards. */\n-    [[nodiscard]] bool Split(TxGraphImpl& graph, int level) noexcept;\n+    [[nodiscard]] virtual bool Split(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Move all transactions from cluster to *this (as separate components). */\n-    void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept;\n+    virtual void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept = 0;\n     /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n-    void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    virtual void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept = 0;\n     /** Improve the linearization of this Cluster. Returns how much work was performed and whether\n      *  the Cluster's QualityLevel improved as a result. */\n-    std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept;\n+    virtual std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept = 0;\n     /** For every chunk in the cluster, append its FeeFrac to ret. */\n-    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    virtual void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept = 0;\n     /** Add a TrimTxData entry (filling m_chunk_feerate, m_index, m_tx_size) for every\n      *  transaction in the Cluster to ret. Implicit dependencies between consecutive transactions\n      *  in the linearization are added to deps. Return the Cluster's total transaction size. */\n-    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+    virtual uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of public TxGraph functions.\n \n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their ancestors to output. */\n-    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their descendants to output. */\n-    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Populate range with refs for the transactions in this Cluster's linearization, from\n      *  position start_pos until start_pos+range.size()-1, inclusive. Returns whether that\n      *  range includes the last transaction in the linearization. */\n-    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    virtual bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept = 0;\n     /** Get the individual transaction feerate of a Cluster element. */\n-    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    virtual FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept = 0;\n     /** Modify the fee of a Cluster element. */\n-    void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept;\n+    virtual void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept = 0;\n \n     // Debugging functions.\n \n-    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+    virtual void SanityCheck(const TxGraphImpl& graph, int level) const = 0;\n+};\n+\n+/** An implementation of Cluster that uses a DepGraph and vectors, to support arbitrary numbers of\n+ *  transactions up to MAX_CLUSTER_COUNT_LIMIT. */\n+class GenericClusterImpl final : public Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n+     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n+     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. m_linearization.size() equals\n+     *  m_depgraph.TxCount(). This is always kept topological. */\n+    std::vector<DepGraphIndex> m_linearization;\n+\n+public:\n+    GenericClusterImpl() noexcept = delete;\n+    /** Construct an empty GenericClusterImpl. */\n+    explicit GenericClusterImpl(uint64_t sequence) noexcept;\n+    /** Construct a singleton GenericClusterImpl. */\n+    explicit GenericClusterImpl(uint64_t sequence, TxGraphImpl& graph, const FeePerWeight& feerate, GraphIndex graph_index) noexcept;\n+\n+\n+    size_t TotalMemoryUsage() const noexcept final",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 199,
      "commit_id": "d3ece431ffae270df78beaab723499807f0a5284",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": 2407686932,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The code already uses `final` on all of the `TxGraphImpl` functions. Will leave for a follow-up.",
      "created_at": "2025-10-08T22:16:51Z",
      "updated_at": "2025-10-08T22:16:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415145512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415145512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415235592",
      "pull_request_review_id": 3316806130,
      "id": 2415235592,
      "node_id": "PRRC_kwDOABII586P9ZII",
      "diff_hunk": "@@ -1123,8 +1134,9 @@ bool GenericClusterImpl::Split(TxGraphImpl& graph, int level) noexcept\n     // Iterate over the connected components of this Cluster's m_depgraph.\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n+        auto component_size = component.Count();\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "fcf5e788d912cc465ad84ec75dabaf9941044314",
      "in_reply_to_id": 2403366988,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The question was referring to the documentation of `NEEDS_SPLIT`\r\n```\r\n/** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\r\n```\r\nand was asking if this still holds in every case (even for small clusters)",
      "created_at": "2025-10-08T23:34:01Z",
      "updated_at": "2025-10-08T23:34:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415235592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415235592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415494808",
      "pull_request_review_id": 3317132140,
      "id": 2415494808,
      "node_id": "PRRC_kwDOABII586P-YaY",
      "diff_hunk": "@@ -1123,8 +1134,9 @@ bool GenericClusterImpl::Split(TxGraphImpl& graph, int level) noexcept\n     // Iterate over the connected components of this Cluster's m_depgraph.\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n+        auto component_size = component.Count();\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "fcf5e788d912cc465ad84ec75dabaf9941044314",
      "in_reply_to_id": 2403366988,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe it could say \"which will all be made NEEDS_RELINEARIZE\". It's always possible (even for non-tiny clusters) that nothing really needs to be done with it anymore.",
      "created_at": "2025-10-09T03:46:35Z",
      "updated_at": "2025-10-09T03:46:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2415494808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2415494808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1137,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417108154",
      "pull_request_review_id": 3319453887,
      "id": 2417108154,
      "node_id": "PRRC_kwDOABII586QEiS6",
      "diff_hunk": "@@ -2318,6 +2634,14 @@ void GenericClusterImpl::SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx\n     Updated(graph, level);\n }\n \n+void SingletonClusterImpl::SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept\n+{\n+    Assume(m_graph_index != GraphIndex(-1));\n+    Assume(idx == 0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 550,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2407969372,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I've mostly used \"idx\" in function arguments, and \"index\" in member/local variable names, but it's probably not entirely consistent.",
      "created_at": "2025-10-09T15:17:34Z",
      "updated_at": "2025-10-09T15:17:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417108154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417108154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 2639,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417268131",
      "pull_request_review_id": 3319664433,
      "id": 2417268131,
      "node_id": "PRRC_kwDOABII586QFJWj",
      "diff_hunk": "",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408164554,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think that's worth the slowdown.\r\n\r\nMy thinking around this is that whenever the fuzzer hits a particular level of complication, it's reasonable to assume it has already explored most less-complicated cases too, through other runs of the harness. That applies to prefixes of the same seed too.\r\n",
      "created_at": "2025-10-09T16:08:12Z",
      "updated_at": "2025-10-09T16:08:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417268131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417268131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 528,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417305579",
      "pull_request_review_id": 3319717796,
      "id": 2417305579,
      "node_id": "PRRC_kwDOABII586QFSfr",
      "diff_hunk": "@@ -94,46 +95,38 @@ struct TrimTxData\n     uint64_t m_uf_size;\n };\n \n+class Cluster;\n+class GenericClusterImpl;\n+class SingletonClusterImpl;\n+\n /** A grouping of connected transactions inside a TxGraphImpl::ClusterSet. */\n class Cluster\n {\n     friend class TxGraphImpl;\n     using GraphIndex = TxGraph::GraphIndex;\n+\n+protected:\n     using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n-    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n-    DepGraph<SetType> m_depgraph;\n-    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n-     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n-     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n-    std::vector<GraphIndex> m_mapping;\n-    /** The current linearization of the cluster. m_linearization.size() equals\n-     *  m_depgraph.TxCount(). This is always kept topological. */\n-    std::vector<DepGraphIndex> m_linearization;\n     /** The quality level of m_linearization. */\n     QualityLevel m_quality{QualityLevel::NONE};\n     /** Which position this Cluster has in Graph::ClusterSet::m_clusters[m_quality]. */\n     ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n-    /** Which level this Cluster is at in the graph (-1=not inserted, 0=main, 1=staging). */\n-    int m_level{-1};\n     /** Sequence number for this Cluster (for tie-breaking comparison between equal-chunk-feerate\n         transactions in distinct clusters). */\n     uint64_t m_sequence;\n \n+    explicit Cluster(uint64_t sequence) noexcept : m_sequence(sequence) {}\n+\n public:\n-    Cluster() noexcept = delete;\n-    /** Construct an empty Cluster. */\n-    explicit Cluster(uint64_t sequence) noexcept;\n-    /** Construct a singleton Cluster. */\n-    explicit Cluster(uint64_t sequence, TxGraphImpl& graph, const FeePerWeight& feerate, GraphIndex graph_index) noexcept;\n+    // Provide virtual destructor, for safe polymorphic usage inside std::unique_ptr.\n+    virtual ~Cluster() = default;\n \n     // Cannot move or copy (would invalidate Cluster* in Locator and ClusterSet). */\n     Cluster(const Cluster&) = delete;\n     Cluster& operator=(const Cluster&) = delete;\n     Cluster(Cluster&&) = delete;\n     Cluster& operator=(Cluster&&) = delete;\n \n-    // Generic helper functions.\n-\n     /** Whether the linearization of this Cluster can be exposed. */\n     bool IsAcceptable(bool after_split = false) const noexcept\n     {",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 64,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408971205,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems unrelated to this PR.",
      "created_at": "2025-10-09T16:20:28Z",
      "updated_at": "2025-10-09T16:20:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417305579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417305579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417370157",
      "pull_request_review_id": 3319812620,
      "id": 2417370157,
      "node_id": "PRRC_kwDOABII586QFiQt",
      "diff_hunk": "@@ -891,42 +1183,106 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n+}\n+\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(m_graph_index != GraphIndex(-1));\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n {\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    if (m_graph_index == GraphIndex(-1)) return;\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+}\n+\n+void GenericClusterImpl::MoveToMain(TxGraphImpl& graph) noexcept\n {\n-    Assume(m_level == 1);\n     for (auto i : m_linearization) {\n         GraphIndex idx = m_mapping[i];\n         auto& entry = graph.m_entries[idx];\n         entry.m_locator[1].SetMissing();\n     }\n     auto quality = m_quality;",
      "path": "src/txgraph.cpp",
      "position": 728,
      "original_position": 716,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409038947,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, extracting is seen as moving to the \"none\" quality level.",
      "created_at": "2025-10-09T16:47:15Z",
      "updated_at": "2025-10-09T16:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417370157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417370157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1260,
      "original_line": 1260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417374122",
      "pull_request_review_id": 3319818947,
      "id": 2417374122,
      "node_id": "PRRC_kwDOABII586QFjOq",
      "diff_hunk": "@@ -1820,7 +2235,19 @@ void Cluster::GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Clus\n     }\n }\n \n-void Cluster::GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept\n+void SingletonClusterImpl::GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept\n+{\n+    Assume(m_graph_index != GraphIndex(-1));\n+    while (!args.empty()) {\n+        if (args.front().first != this) break;",
      "path": "src/txgraph.cpp",
      "position": 1301,
      "original_position": 1343,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409070180,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This matches the code that's already in GenericClusterImpl.",
      "created_at": "2025-10-09T16:48:57Z",
      "updated_at": "2025-10-09T16:48:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417374122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417374122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 2262,
      "original_start_line": 2241,
      "start_side": "RIGHT",
      "line": 2263,
      "original_line": 2263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417413809",
      "pull_request_review_id": 3319875858,
      "id": 2417413809,
      "node_id": "PRRC_kwDOABII586QFs6x",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.",
      "path": "src/txgraph.cpp",
      "position": 452,
      "original_position": 429,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409097521,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Adding a dependency from a transaction to itself is a no-op. I don't think we rely on that, but it doesn't hurt to support.",
      "created_at": "2025-10-09T17:07:19Z",
      "updated_at": "2025-10-09T17:07:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417413809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417413809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 913,
      "original_line": 913,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417449859",
      "pull_request_review_id": 3319932148,
      "id": 2417449859,
      "node_id": "PRRC_kwDOABII586QF1uD",
      "diff_hunk": "",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409107437,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It only modifies the `linchunking` object, which is local inside `SanityCheck()`.",
      "created_at": "2025-10-09T17:22:29Z",
      "updated_at": "2025-10-09T17:22:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417449859",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417449859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2791,
      "original_line": 2791,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417528472",
      "pull_request_review_id": 3320038389,
      "id": 2417528472,
      "node_id": "PRRC_kwDOABII586QGI6Y",
      "diff_hunk": "",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409107437,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "you're right, my mistake",
      "created_at": "2025-10-09T17:53:17Z",
      "updated_at": "2025-10-09T17:53:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417528472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417528472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2791,
      "original_line": 2791,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417529982",
      "pull_request_review_id": 3320040446,
      "id": 2417529982,
      "node_id": "PRRC_kwDOABII586QGJR-",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;",
      "path": "src/txgraph.cpp",
      "position": 74,
      "original_position": 79,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409138316,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Every transaction in a cluster will end up in its linearization, so the transaction count can at most be 1 more than the largest possible linearization index. This makes it fairly appropriate as a type, I think.\r\n\r\nDepGraphIndex could work too (and I use that elsewhere for transaction counts in a cluster), do you think that's more clear? It's a bit misleading too, because not every cluster actually uses a depgraph internally (singletons don't).",
      "created_at": "2025-10-09T17:53:37Z",
      "updated_at": "2025-10-09T17:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417529982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417529982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417532341",
      "pull_request_review_id": 3320043683,
      "id": 2417532341,
      "node_id": "PRRC_kwDOABII586QGJ21",
      "diff_hunk": "@@ -2906,6 +2975,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(0);\n+    ApplyDependencies(0);\n+    // Compute memory usage\n+    auto& clusterset = GetClusterSet(0);\n+    size_t usage = /* From clusters */\n+                   clusterset.m_cluster_usage +",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 949,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "754775357b15929aa51b0bc629231c96930039dd",
      "in_reply_to_id": 2320034473,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed!",
      "created_at": "2025-10-09T17:54:05Z",
      "updated_at": "2025-10-09T17:54:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417532341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417532341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417685776",
      "pull_request_review_id": 3320252729,
      "id": 2417685776,
      "node_id": "PRRC_kwDOABII586QGvUQ",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n+    /** Append a transaction with given GraphIndex at the end of this Cluster and its\n+     *  linearization. Return the DepGraphIndex it was placed at. */\n+    virtual DepGraphIndex AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept = 0;\n+    /** Add dependencies to a given child in this cluster. */\n+    virtual void AddDependencies(SetType parents, DepGraphIndex child) noexcept = 0;\n+    /** Invoke visitor_fn for each transaction in the cluster, in linearization order, then wipe this Cluster. */\n+    virtual void ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept = 0;\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this\n+     *  is known by the caller already (see all \"int level\" arguments below), but not always. */\n+    virtual int GetLevel(const TxGraphImpl& graph) const noexcept = 0;\n     /** Only called by Graph::SwapIndexes. */\n-    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    virtual void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept = 0;\n     /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n-    void Updated(TxGraphImpl& graph) noexcept;\n+    virtual void Updated(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Create a copy of this Cluster in staging, returning a pointer to it (used by PullIn). */\n-    Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept;\n+    virtual Cluster* CopyToStaging(TxGraphImpl& graph) const noexcept = 0;\n     /** Get the list of Clusters in main that conflict with this one (which is assumed to be in staging). */\n-    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    virtual void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept = 0;\n     /** Mark all the Entry objects belonging to this staging Cluster as missing. The Cluster must be\n      *  deleted immediately after. */\n-    void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    virtual void MakeStagingTransactionsMissing(TxGraphImpl& graph) noexcept = 0;\n     /** Remove all transactions from a Cluster. */\n-    void Clear(TxGraphImpl& graph) noexcept;\n+    virtual void Clear(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Change a Cluster's level from 1 (staging) to 0 (main). */\n-    void MoveToMain(TxGraphImpl& graph) noexcept;\n+    virtual void MoveToMain(TxGraphImpl& graph) noexcept = 0;\n+    /** Minimize this Cluster's memory usage. */\n+    virtual void Compact() noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n \n     /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n-     *  off. These must be at least one such entry. */\n-    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+     *  off. There must be at least one such entry. */\n+    virtual void ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept = 0;\n     /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n      *  Cluster afterwards. */\n-    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    [[nodiscard]] virtual bool Split(TxGraphImpl& graph, int level) noexcept = 0;\n     /** Move all transactions from cluster to *this (as separate components). */\n-    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    virtual void Merge(TxGraphImpl& graph, int level, Cluster& cluster) noexcept = 0;\n     /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n-    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    virtual void ApplyDependencies(TxGraphImpl& graph, int level, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept = 0;\n     /** Improve the linearization of this Cluster. Returns how much work was performed and whether\n      *  the Cluster's QualityLevel improved as a result. */\n-    std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+    virtual std::pair<uint64_t, bool> Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept = 0;\n     /** For every chunk in the cluster, append its FeeFrac to ret. */\n-    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    virtual void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept = 0;\n     /** Add a TrimTxData entry (filling m_chunk_feerate, m_index, m_tx_size) for every\n      *  transaction in the Cluster to ret. Implicit dependencies between consecutive transactions\n      *  in the linearization are added to deps. Return the Cluster's total transaction size. */\n-    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+    virtual uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept = 0;\n \n     // Functions that implement the Cluster-specific side of public TxGraph functions.\n \n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their ancestors to output. */\n-    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Process elements from the front of args that apply to this cluster, and append Refs for the\n      *  union of their descendants to output. */\n-    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    virtual void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept = 0;\n     /** Populate range with refs for the transactions in this Cluster's linearization, from\n      *  position start_pos until start_pos+range.size()-1, inclusive. Returns whether that\n      *  range includes the last transaction in the linearization. */\n-    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    virtual bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept = 0;\n     /** Get the individual transaction feerate of a Cluster element. */\n-    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    virtual FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept = 0;\n     /** Modify the fee of a Cluster element. */\n-    void SetFee(TxGraphImpl& graph, DepGraphIndex idx, int64_t fee) noexcept;\n+    virtual void SetFee(TxGraphImpl& graph, int level, DepGraphIndex idx, int64_t fee) noexcept = 0;\n \n     // Debugging functions.\n \n-    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+    virtual void SanityCheck(const TxGraphImpl& graph, int level) const = 0;\n };\n \n+/** An implementation of Cluster that uses a DepGraph and vectors, to support arbitrary numbers of\n+ *  transactions up to MAX_CLUSTER_COUNT_LIMIT. */\n+class GenericClusterImpl final : public Cluster",
      "path": "src/txgraph.cpp",
      "position": 178,
      "original_position": 181,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2402767616,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There are certainly possibilities, like storing the clusters in two vectors (one for each implementation), and using positions within that vector + some marker to identify the implementation as \"identifier\" for the cluster. The difficulty is that you now need to deal with holes in those vectors, or swapping to compact them, meaning you need to go find and update all places where those cluster identifiers are used.\n\nAbsent something like that, I think the current approach is close to ideal. It incurs a per-Cluster allocation cost, but in return gets a stable Cluster* to use as identifier. And given that cost already, the polymorphism is nearly free (a single vtable pointer per object).",
      "created_at": "2025-10-09T18:50:01Z",
      "updated_at": "2025-10-09T18:50:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417685776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417685776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417686261",
      "pull_request_review_id": 3320253412,
      "id": 2417686261,
      "node_id": "PRRC_kwDOABII586QGvb1",
      "diff_hunk": "@@ -1586,7 +1983,7 @@ void TxGraphImpl::GroupClusters(int level) noexcept\n     Compact();\n }\n \n-void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge, int in_level) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1151,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2402939151,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-10-09T18:50:17Z",
      "updated_at": "2025-10-09T18:50:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417686261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417686261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1986,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417689081",
      "pull_request_review_id": 3320256957,
      "id": 2417689081,
      "node_id": "PRRC_kwDOABII586QGwH5",
      "diff_hunk": "@@ -1499,8 +1896,8 @@ void TxGraphImpl::GroupClusters(int level) noexcept\n         PartitionData* last_partition{nullptr};\n         for (const auto& [dep, _] : an_deps) {\n             auto [par, chl] = dep;\n-            auto par_cluster = FindCluster(par, level);\n-            auto chl_cluster = FindCluster(chl, level);\n+            auto [par_cluster, _par_level] = FindCluster(par, level);\n+            auto [chl_cluster, _chl_level] = FindCluster(chl, level);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1133,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2403287914,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed by creating separate FindCluster and FindClusterAndLevel functions. In most call sites, FindCluster can remain unchanged.",
      "created_at": "2025-10-09T18:51:38Z",
      "updated_at": "2025-10-09T18:51:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417689081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417689081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1899,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1900,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417690581",
      "pull_request_review_id": 3320258925,
      "id": 2417690581,
      "node_id": "PRRC_kwDOABII586QGwfV",
      "diff_hunk": "@@ -2207,8 +2220,8 @@ std::strong_ordering TxGraphImpl::CompareMainOrder(const Ref& a, const Ref& b) n\n     const auto& locator_b = entry_b.m_locator[0];\n     Assume(locator_a.IsPresent());\n     Assume(locator_b.IsPresent());\n-    MakeAcceptable(*locator_a.cluster);\n-    MakeAcceptable(*locator_b.cluster);\n+    MakeAcceptable(*locator_a.cluster, 0);\n+    MakeAcceptable(*locator_b.cluster, 0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 776,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "cd6dadf53aa8a6c2837381b4262a7468e311e554",
      "in_reply_to_id": 2403340639,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have added a few `/*level=*/0` etc. as arguments. Does that help?",
      "created_at": "2025-10-09T18:52:23Z",
      "updated_at": "2025-10-09T18:52:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417690581",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417690581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 2223,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417692771",
      "pull_request_review_id": 3320261974,
      "id": 2417692771,
      "node_id": "PRRC_kwDOABII586QGxBj",
      "diff_hunk": "@@ -453,62 +453,65 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n     };\n \n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\n-        uint8_t command = provider.ConsumeIntegral<uint8_t>();\n-        if (num_tx_sim == 0 || ((command % 3) <= 0 && num_tx_sim < TestBitSet::Size())) {\n-            // AddTransaction.\n-            auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n-            auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n-            FeeFrac feerate{fee, size};\n-            // Apply to DepGraph.\n-            auto idx = real.AddTransaction(feerate);\n-            // Verify that the returned index is correct.\n-            assert(!sim[idx].has_value());\n-            for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n-                if (!sim[i].has_value()) {\n-                    assert(idx == i);\n-                    break;\n+        int command = provider.ConsumeIntegral<uint8_t>() % 4;\n+        while (true) {\n+            // Iterate decreasing command until an applicable branch is found.\n+            if (num_tx_sim < TestBitSet::Size() && command-- == 0) {\n+                // AddTransaction.\n+                auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n+                auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n+                FeeFrac feerate{fee, size};\n+                // Apply to DepGraph.\n+                auto idx = real.AddTransaction(feerate);\n+                // Verify that the returned index is correct.\n+                assert(!sim[idx].has_value());\n+                for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n+                    if (!sim[i].has_value()) {\n+                        assert(idx == i);\n+                        break;\n+                    }\n                 }\n-            }\n-            // Update sim.\n-            sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n-            ++num_tx_sim;\n-            continue;\n-        }\n-        if ((command % 3) <= 1 && num_tx_sim > 0) {\n-            // AddDependencies.\n-            DepGraphIndex child = idx_fn();\n-            auto parents = subset_fn();\n-            // Apply to DepGraph.\n-            real.AddDependencies(parents, child);\n-            // Apply to sim.\n-            sim[child]->second |= parents;\n-            continue;\n-        }\n-        if (num_tx_sim > 0) {\n-            // Remove transactions.\n-            auto del = set_fn();\n-            // Propagate all ancestry information before deleting anything in the simulation (as\n-            // intermediary transactions may be deleted which impact connectivity).\n-            anc_update_fn();\n-            // Compare the state of the transactions being deleted.\n-            for (auto i : del) check_fn(i);\n-            // Apply to DepGraph.\n-            real.RemoveTransactions(del);\n-            // Apply to sim.\n-            for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n-                if (sim[i].has_value()) {\n-                    if (del[i]) {\n-                        --num_tx_sim;\n-                        sim[i] = std::nullopt;\n-                    } else {\n-                        sim[i]->second -= del;\n+                // Update sim.\n+                sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n+                ++num_tx_sim;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // AddDependencies.\n+                DepGraphIndex child = idx_fn();\n+                auto parents = subset_fn();\n+                // Apply to DepGraph.\n+                real.AddDependencies(parents, child);\n+                // Apply to sim.\n+                sim[child]->second |= parents;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // Remove transactions.\n+                auto del = set_fn();\n+                // Propagate all ancestry information before deleting anything in the simulation (as\n+                // intermediary transactions may be deleted which impact connectivity).\n+                anc_update_fn();\n+                // Compare the state of the transactions being deleted.\n+                for (auto i : del) check_fn(i);\n+                // Apply to DepGraph.\n+                real.RemoveTransactions(del);\n+                // Apply to sim.\n+                for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n+                    if (sim[i].has_value()) {\n+                        if (del[i]) {\n+                            --num_tx_sim;\n+                            sim[i] = std::nullopt;\n+                        } else {\n+                            sim[i]->second -= del;\n+                        }\n                     }\n                 }\n+                break;\n+            } else if (command-- == 0) {\n+                // Compact.\n+                real.Compact();",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 107,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "7084d5faf1e2426f1c6318d35d43ac2f37970da1",
      "in_reply_to_id": 2403454316,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have incorporated this, and added you as co-author.",
      "created_at": "2025-10-09T18:53:33Z",
      "updated_at": "2025-10-09T18:53:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417692771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417692771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 512,
      "original_start_line": 510,
      "start_side": "RIGHT",
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417694634",
      "pull_request_review_id": 3320264514,
      "id": 2417694634,
      "node_id": "PRRC_kwDOABII586QGxeq",
      "diff_hunk": "@@ -2114,6 +2146,7 @@ void TxGraphImpl::StartStaging() noexcept\n     m_staging_clusterset->m_deps_to_add = m_main_clusterset.m_deps_to_add;\n     m_staging_clusterset->m_group_data = m_main_clusterset.m_group_data;\n     m_staging_clusterset->m_oversized = m_main_clusterset.m_oversized;\n+    m_staging_clusterset->m_cluster_usage = 0;\n     Assume(m_staging_clusterset->m_oversized.has_value());",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 134,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "f891b3aff31622b288c3cc9bc747d1ceda34b86e",
      "in_reply_to_id": 2407610458,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have reordered the statements.",
      "created_at": "2025-10-09T18:54:31Z",
      "updated_at": "2025-10-09T18:54:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417694634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417694634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 2149,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417695849",
      "pull_request_review_id": 3320266078,
      "id": 2417695849,
      "node_id": "PRRC_kwDOABII586QGxxp",
      "diff_hunk": "@@ -934,8 +957,10 @@ void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n         entry.m_locator[1].SetMissing();\n     }\n     auto quality = m_quality;\n+    graph.GetClusterSet(1).m_cluster_usage -= TotalMemoryUsage();",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 75,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "f891b3aff31622b288c3cc9bc747d1ceda34b86e",
      "in_reply_to_id": 2407628703,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have reordered these statements and added comments.",
      "created_at": "2025-10-09T18:55:07Z",
      "updated_at": "2025-10-09T18:55:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417695849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417695849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417696402",
      "pull_request_review_id": 3320266784,
      "id": 2417696402,
      "node_id": "PRRC_kwDOABII586QGx6S",
      "diff_hunk": "@@ -2977,6 +2979,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(0);\n+    ApplyDependencies(0);\n+    // Compute memory usage\n+    auto& clusterset = GetClusterSet(0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "437e29cd8d4981f1f5451c438bf21c24c669bf22",
      "in_reply_to_id": 2407649490,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-09T18:55:22Z",
      "updated_at": "2025-10-09T18:55:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417696402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417696402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2988,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417696760",
      "pull_request_review_id": 3320267379,
      "id": 2417696760,
      "node_id": "PRRC_kwDOABII586QGx_4",
      "diff_hunk": "@@ -94,21 +94,16 @@ struct TrimTxData\n     uint64_t m_uf_size;\n };\n \n+class Cluster;\n+class GenericClusterImpl;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": 2407669399,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-09T18:55:35Z",
      "updated_at": "2025-10-09T18:55:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417696760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417696760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 97,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417697174",
      "pull_request_review_id": 3320267919,
      "id": 2417697174,
      "node_id": "PRRC_kwDOABII586QGyGW",
      "diff_hunk": "@@ -94,21 +94,16 @@ struct TrimTxData\n     uint64_t m_uf_size;\n };\n \n+class Cluster;\n+class GenericClusterImpl;\n+\n /** A grouping of connected transactions inside a TxGraphImpl::ClusterSet. */\n class Cluster\n {\n     friend class TxGraphImpl;\n     using GraphIndex = TxGraph::GraphIndex;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": 2407673139,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-09T18:55:49Z",
      "updated_at": "2025-10-09T18:55:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417697174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417697174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417699157",
      "pull_request_review_id": 3320271718,
      "id": 2417699157,
      "node_id": "PRRC_kwDOABII586QGylV",
      "diff_hunk": "@@ -1066,7 +1115,8 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     // Redistribute the transactions.\n     for (auto i : m_linearization) {\n         /** The cluster which transaction originally in position i is moved to. */\n-        Cluster* new_cluster = remap[i].first;\n+        Cluster* new_abstract_cluster = remap[i].first;\n+        GenericClusterImpl* new_cluster = static_cast<GenericClusterImpl*>(new_abstract_cluster);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 379,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": 2407732614,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed by doing the introduction of abstraction functions first, before making Cluster an abstract class.",
      "created_at": "2025-10-09T18:56:47Z",
      "updated_at": "2025-10-09T18:56:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417699157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417699157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417700024",
      "pull_request_review_id": 3320273536,
      "id": 2417700024,
      "node_id": "PRRC_kwDOABII586QGyy4",
      "diff_hunk": "@@ -148,6 +150,8 @@ class Cluster\n \n     // Generic helper functions\n \n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;",
      "path": "src/txgraph.cpp",
      "position": 66,
      "original_position": 21,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": 2407834276,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-09T18:57:13Z",
      "updated_at": "2025-10-09T18:57:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417700024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417700024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 153,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417700578",
      "pull_request_review_id": 3320274585,
      "id": 2417700578,
      "node_id": "PRRC_kwDOABII586QGy7i",
      "diff_hunk": "@@ -227,8 +238,8 @@ class Cluster\n class GenericClusterImpl final : public Cluster\n {\n     friend class TxGraphImpl;\n+    using SetType = Cluster::SetType;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 43,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": 2407836988,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed, fixed.",
      "created_at": "2025-10-09T18:57:29Z",
      "updated_at": "2025-10-09T18:57:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417700578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417700578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417702683",
      "pull_request_review_id": 3320277929,
      "id": 2417702683,
      "node_id": "PRRC_kwDOABII586QGzcb",
      "diff_hunk": "@@ -779,6 +791,31 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));",
      "path": "src/txgraph.cpp",
      "position": 430,
      "original_position": 79,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": 2407850203,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Instead of adding an `IsEmpty()`, I ended up using the added `GetTxCount()` virtual function in many places.",
      "created_at": "2025-10-09T18:58:28Z",
      "updated_at": "2025-10-09T18:58:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417702683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417702683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 891,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417703204",
      "pull_request_review_id": 3320278663,
      "id": 2417703204,
      "node_id": "PRRC_kwDOABII586QGzkk",
      "diff_hunk": "@@ -779,6 +791,31 @@ uint64_t GenericClusterImpl::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 91,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "e8355b2169555fbd66daba055a727fdb2dee390b",
      "in_reply_to_id": 2407894226,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-09T18:58:44Z",
      "updated_at": "2025-10-09T18:58:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417703204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417703204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 808,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417703623",
      "pull_request_review_id": 3320279278,
      "id": 2417703623,
      "node_id": "PRRC_kwDOABII586QGzrH",
      "diff_hunk": "@@ -298,6 +299,60 @@ class GenericClusterImpl final : public Cluster\n     void SanityCheck(const TxGraphImpl& graph, int level) const final;\n };\n \n+/** An implementation of Cluster that only supports 1 transaction. */\n+class SingletonClusterImpl final : public Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+\n+    /** The feerate of the (singular) transaction in this Cluster. */\n+    FeePerWeight m_feerate;\n+    /** The GraphIndex of the transaction. GraphIndex(-1) if this Cluster is empty. */\n+    GraphIndex m_graph_index = GraphIndex(-1);\n+\n+public:\n+    SingletonClusterImpl() noexcept = delete;\n+    /** Construct an empty SingletonClusterImpl. */\n+    explicit SingletonClusterImpl(uint64_t sequence) noexcept : Cluster(sequence) {}\n+\n+    size_t TotalMemoryUsage() const noexcept final\n+    {\n+        return // Memory usage of the allocated SingletonClusterImpl itself.\n+               memusage::MallocUsage(sizeof(SingletonClusterImpl)) +\n+               // Memory usage of the ClusterSet::m_clusters entry.\n+               sizeof(std::unique_ptr<Cluster>);\n+    }\n+\n+    DepGraphIndex GetMaxTxCount() const noexcept final { return 1; }\n+    LinearizationIndex GetTxCount() const noexcept final { return m_graph_index != GraphIndex(-1); }",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2407919107,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-09T18:58:58Z",
      "updated_at": "2025-10-09T18:58:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417703623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417703623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417705281",
      "pull_request_review_id": 3320281423,
      "id": 2417705281,
      "node_id": "PRRC_kwDOABII586QG0FB",
      "diff_hunk": "@@ -598,10 +654,16 @@ class TxGraphImpl final : public TxGraph\n     {\n         return std::make_unique<GenericClusterImpl>(m_next_sequence_counter++);\n     }\n+    /** Create an empty SingletonClusterImpl object. */\n+    std::unique_ptr<SingletonClusterImpl> CreateEmptySingletonCluster() noexcept\n+    {\n+        return std::make_unique<SingletonClusterImpl>(m_next_sequence_counter++);\n+    }\n     /** Create an empty Cluster object of the appropriate size. */",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 86,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2407936445,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did rephrase a bit more elaborately.",
      "created_at": "2025-10-09T18:59:47Z",
      "updated_at": "2025-10-09T18:59:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417705281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417705281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417706361",
      "pull_request_review_id": 3320283109,
      "id": 2417706361,
      "node_id": "PRRC_kwDOABII586QG0V5",
      "diff_hunk": "@@ -1746,18 +1994,33 @@ void TxGraphImpl::Merge(std::span<Cluster*> to_merge, int in_level) noexcept\n     // moves.\n     size_t max_size_pos{0};\n     DepGraphIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    DepGraphIndex total_size = max_size;",
      "path": "src/txgraph.cpp",
      "position": 1136,
      "original_position": 417,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2407947978,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have moved these changes to a separate commit, introducing the notion of intended ranges of transaction counts for each Cluster implementation.",
      "created_at": "2025-10-09T19:00:25Z",
      "updated_at": "2025-10-09T19:00:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417706361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417706361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2017,
      "original_line": 2017,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417943637",
      "pull_request_review_id": 3320620083,
      "id": 2417943637,
      "node_id": "PRRC_kwDOABII586QHuRV",
      "diff_hunk": "@@ -167,75 +145,145 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;",
      "path": "src/txgraph.cpp",
      "position": 69,
      "original_position": 76,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": 2407819423,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've moved the implementation out of the class definition, so that it doesn't need to move when the abstraction is added.",
      "created_at": "2025-10-09T20:57:47Z",
      "updated_at": "2025-10-09T20:57:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417943637",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417943637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 156,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417947258",
      "pull_request_review_id": 3320625237,
      "id": 2417947258,
      "node_id": "PRRC_kwDOABII586QHvJ6",
      "diff_hunk": "@@ -1012,6 +1012,15 @@ FUZZ_TARGET(txgraph)\n                 }\n                 assert(!top_sim.IsOversized());\n                 break;\n+            } else if (command-- == 0) {\n+                // GetMainMemoryUsage().\n+                real->GetMainMemoryUsage();\n+                // There is nothing to test about this function, as it's very\n+                // implementation-specific, and can go up (even when transactions are removed) and",
      "path": "src/test/fuzz/txgraph.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408082839,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good idea, I've done something like this (with the repetition made optional).\r\n\r\n\r\n\r\n> And given that `GetMainMemoryUsage` has some surprising side-effects (`SplitAll` & `ApplyDependencies`), we could also check that it's not changing counts or staging presence.\r\n\r\nThere is no need for that; comparing with the simulation will catch that as those are well-defined properties we check (either when invoking inspector methods in the simulation, or in the full comparison at the end).",
      "created_at": "2025-10-09T20:59:42Z",
      "updated_at": "2025-10-09T20:59:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417947258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417947258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1018,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1019,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417948078",
      "pull_request_review_id": 3320626399,
      "id": 2417948078,
      "node_id": "PRRC_kwDOABII586QHvWu",
      "diff_hunk": "@@ -957,7 +1313,17 @@ uint64_t Cluster::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::\n     return size;\n }\n \n-bool Cluster::Split(TxGraphImpl& graph) noexcept\n+uint64_t SingletonClusterImpl::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept\n+{\n+    if (m_graph_index  == GraphIndex(-1)) return 0;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 778,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408186562,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have removed some of them through use of `GetTxCount()` as suggested elsewhere.",
      "created_at": "2025-10-09T21:00:04Z",
      "updated_at": "2025-10-09T21:00:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417948078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417948078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417948453",
      "pull_request_review_id": 3320626882,
      "id": 2417948453,
      "node_id": "PRRC_kwDOABII586QHvcl",
      "diff_hunk": "@@ -1037,15 +1406,32 @@ bool Cluster::Split(TxGraphImpl& graph) noexcept\n     return true;\n }\n \n-void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+bool SingletonClusterImpl::Split(TxGraphImpl& graph, int level) noexcept\n+{\n+    Assume(NeedsSplitting());\n+    if (m_graph_index == GraphIndex(-1)) {\n+        // The cluster is now empty.\n+        graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+        Updated(graph, level);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 874,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408188738,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice catch. Removed.",
      "created_at": "2025-10-09T21:00:16Z",
      "updated_at": "2025-10-09T21:00:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417948453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417948453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417948776",
      "pull_request_review_id": 3320627563,
      "id": 2417948776,
      "node_id": "PRRC_kwDOABII586QHvho",
      "diff_hunk": "@@ -1193,15 +1590,15 @@ void TxGraphImpl::SetClusterQuality(int level, QualityLevel old_quality, Cluster\n     InsertCluster(level, std::move(cluster_ptr), new_quality);\n }\n \n-void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+void TxGraphImpl::DeleteCluster(int level, Cluster& cluster) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1017,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408191090,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Moved it.",
      "created_at": "2025-10-09T21:00:26Z",
      "updated_at": "2025-10-09T21:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417948776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417948776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417949550",
      "pull_request_review_id": 3320628696,
      "id": 2417949550,
      "node_id": "PRRC_kwDOABII586QHvtu",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;\n     /** Get the total size of the transactions in this Cluster. */\n-    uint64_t GetTotalTxSize() const noexcept;\n+    virtual uint64_t GetTotalTxSize() const noexcept = 0;\n     /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n-    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    virtual GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept = 0;\n+    /** Append a transaction with given GraphIndex at the end of this Cluster and its\n+     *  linearization. Return the DepGraphIndex it was placed at. */\n+    virtual DepGraphIndex AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept = 0;\n+    /** Add dependencies to a given child in this cluster. */\n+    virtual void AddDependencies(SetType parents, DepGraphIndex child) noexcept = 0;\n+    /** Invoke visitor_fn for each transaction in the cluster, in linearization order, then wipe this Cluster. */\n+    virtual void ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept = 0;\n+    /** Figure out what level this Cluster exists at in Graph::m_clustersets. In most cases this",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 93,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408976265,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a commit that fixes some outdated comments.",
      "created_at": "2025-10-09T21:00:51Z",
      "updated_at": "2025-10-09T21:00:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417949550",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417949550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417950481",
      "pull_request_review_id": 3320629985,
      "id": 2417950481,
      "node_id": "PRRC_kwDOABII586QHv8R",
      "diff_hunk": "@@ -94,46 +95,38 @@ struct TrimTxData\n     uint64_t m_uf_size;\n };\n \n+class Cluster;\n+class GenericClusterImpl;\n+class SingletonClusterImpl;\n+\n /** A grouping of connected transactions inside a TxGraphImpl::ClusterSet. */\n class Cluster\n {\n     friend class TxGraphImpl;\n     using GraphIndex = TxGraph::GraphIndex;\n+\n+protected:\n     using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n-    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n-    DepGraph<SetType> m_depgraph;\n-    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n-     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n-     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n-    std::vector<GraphIndex> m_mapping;\n-    /** The current linearization of the cluster. m_linearization.size() equals\n-     *  m_depgraph.TxCount(). This is always kept topological. */\n-    std::vector<DepGraphIndex> m_linearization;\n     /** The quality level of m_linearization. */\n     QualityLevel m_quality{QualityLevel::NONE};\n     /** Which position this Cluster has in Graph::ClusterSet::m_clusters[m_quality]. */",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408979923,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed in a commit that fixes some outdated comments.",
      "created_at": "2025-10-09T21:01:07Z",
      "updated_at": "2025-10-09T21:01:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417950481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417950481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417951078",
      "pull_request_review_id": 3320630822,
      "id": 2417951078,
      "node_id": "PRRC_kwDOABII586QHwFm",
      "diff_hunk": "@@ -814,38 +1085,58 @@ std::vector<Cluster*> TxGraphImpl::GetConflicts() const noexcept\n             cluster->GetConflicts(*this, ret);\n         }\n     }\n-    // Deduplicate the result (the same Cluster may appear multiple times).\n+    // Deduplicate the result (the same GenericClusterImpl may appear multiple times).",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 572,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408987741,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed, fixed.",
      "created_at": "2025-10-09T21:01:23Z",
      "updated_at": "2025-10-09T21:01:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417951078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417951078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1088,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417952778",
      "pull_request_review_id": 3320633099,
      "id": 2417952778,
      "node_id": "PRRC_kwDOABII586QHwgK",
      "diff_hunk": "@@ -891,42 +1183,106 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n+}\n+\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(m_graph_index != GraphIndex(-1));\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n {\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    if (m_graph_index == GraphIndex(-1)) return;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 703,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409033412,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice catch.\r\n\r\nEven better: the fact that this was possible indicated that the function was never called on empty clusters (because `TotalMemoryUsage()` is not 0, even for empty clusters). I've thus changed it to an `Assume()` for non-emptiness.",
      "created_at": "2025-10-09T21:02:17Z",
      "updated_at": "2025-10-09T21:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417952778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417952778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": 1224,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417953257",
      "pull_request_review_id": 3320633723,
      "id": 2417953257,
      "node_id": "PRRC_kwDOABII586QHwnp",
      "diff_hunk": "@@ -983,52 +1349,55 @@ bool Cluster::Split(TxGraphImpl& graph) noexcept\n     // Iterate over the connected components of this Cluster's m_depgraph.\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n+        auto component_size = component.Count();\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;\n-        if (first && component == todo) {\n-            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+        if (first && component == todo && component_size >= 2 && SetType::Fill(component_size) == component) {\n+            // The existing Cluster is an entire component, without holes. Leave it be, but update\n+            // its quality. If there are holes, we continue, so that the Cluster is reconstructed\n+            // without holes, reducing memory usage. If the component has size one, we also\n+            // continue, so that it gets converted to a SingletonClusterImpl.\n             Assume(todo == m_depgraph.Positions());\n-            graph.SetClusterQuality(m_level, m_quality, m_setindex, split_quality);\n+            graph.SetClusterQuality(level, m_quality, m_setindex, split_quality);\n             // If this made the quality ACCEPTABLE or OPTIMAL, we need to compute and cache its\n             // chunking.\n-            Updated(graph);\n+            Updated(graph, level);\n             return false;\n         }\n         first = false;\n         // Construct a new Cluster to hold the found component.\n-        auto new_cluster = std::make_unique<Cluster>(graph.m_next_sequence_counter++);\n+        auto new_cluster = graph.CreateEmptyCluster(component_size);\n         new_clusters.push_back(new_cluster.get());\n         // Remember that all the component's transactions go to this new Cluster. The positions\n         // will be determined below, so use -1 for now.\n         for (auto i : component) {\n             remap[i] = {new_cluster.get(), DepGraphIndex(-1)};\n         }\n-        graph.InsertCluster(m_level, std::move(new_cluster), split_quality);\n+        graph.InsertCluster(level, std::move(new_cluster), split_quality);\n         todo -= component;\n     }\n+    // We have to split the Cluster up. Remove accounting for the existing one first.\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     // Redistribute the transactions.\n     for (auto i : m_linearization) {\n         /** The cluster which transaction originally in position i is moved to. */\n-        Cluster* new_cluster = remap[i].first;\n+        Cluster* new_abstract_cluster = remap[i].first;\n         // Copy the transaction to the new cluster's depgraph, and remember the position.\n-        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n-        // Create new mapping entry.\n-        new_cluster->m_mapping.push_back(m_mapping[i]);\n-        // Create a new linearization entry. As we're only appending transactions, they equal the\n-        // DepGraphIndex.\n-        new_cluster->m_linearization.push_back(remap[i].second);\n+        remap[i].second = new_abstract_cluster->AppendTransaction(m_mapping[i], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(i)));\n     }\n     // Redistribute the dependencies.\n     for (auto i : m_linearization) {\n         /** The cluster transaction in position i is moved to. */\n-        Cluster* new_cluster = remap[i].first;\n+        Cluster* new_abstract_cluster = remap[i].first;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 846,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409044035,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This was a leftover, gone.",
      "created_at": "2025-10-09T21:02:32Z",
      "updated_at": "2025-10-09T21:02:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417953257",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417953257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417954153",
      "pull_request_review_id": 3320634875,
      "id": 2417954153,
      "node_id": "PRRC_kwDOABII586QHw1p",
      "diff_hunk": "@@ -1756,7 +2171,7 @@ void TxGraphImpl::RemoveTransaction(const Ref& arg) noexcept\n     Assume(m_main_chunkindex_observers == 0 || GetTopLevel() != 0);\n     // Find the Cluster the transaction is in, and stop if it isn't in any.\n     int level = GetTopLevel();\n-    auto cluster = FindCluster(GetRefIndex(arg), level);\n+    auto [cluster, cluster_level] = FindCluster(GetRefIndex(arg), level);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1304,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409052428,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed by introducing a separate `FindCluster` and `FindClusterAndLevel` function.",
      "created_at": "2025-10-09T21:02:59Z",
      "updated_at": "2025-10-09T21:03:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417954153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417954153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417954576",
      "pull_request_review_id": 3320635483,
      "id": 2417954576,
      "node_id": "PRRC_kwDOABII586QHw8Q",
      "diff_hunk": "@@ -484,12 +621,13 @@ class TxGraphImpl final : public TxGraph\n     /** Swap the Entry referred to by a and the one referred to by b. */\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n-    *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n+    *   removed), return the Cluster it is in and the level the Cluster has. Otherwise, return\n+    *   {nullptr, -1}. */\n+    std::pair<Cluster*, int> FindCluster(GraphIndex idx, int level) const noexcept;\n     /** Extract a Cluster from its ClusterSet. */",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 329,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409092487,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, in a new comment-fixing commit.",
      "created_at": "2025-10-09T21:03:14Z",
      "updated_at": "2025-10-09T21:03:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417954576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417954576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 627,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417955778",
      "pull_request_review_id": 3320637106,
      "id": 2417955778,
      "node_id": "PRRC_kwDOABII586QHxPC",
      "diff_hunk": "@@ -1839,7 +2266,12 @@ void Cluster::GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cl\n     }\n }\n \n-bool Cluster::GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept\n+void SingletonClusterImpl::GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept\n+{\n+    GetAncestorRefs(graph, args, output);",
      "path": "src/txgraph.cpp",
      "position": 1321,
      "original_position": 1362,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409123553,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.\r\n\r\nIt's simply that in a singleton cluster, the ancestors of a transaction, the descendants of a transaction, and in fact the entire cluster are always just the same single element.",
      "created_at": "2025-10-09T21:03:58Z",
      "updated_at": "2025-10-09T21:03:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417955778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417955778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2293,
      "original_line": 2293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417958188",
      "pull_request_review_id": 3320640722,
      "id": 2417958188,
      "node_id": "PRRC_kwDOABII586QHx0s",
      "diff_hunk": "",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409128894,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice. I've replaced it with an `Assume` that the adding always happens at the end.\r\n\r\nThis made me realize that there is probably a more efficient `GenericClusterImpl::Merge` implementation possible (which just translates the indices in the old cluster to the new one by appending an offset to all). It's pretty nontrivial to do, so I'm leaving that for a potential follow-up if anyone cares.",
      "created_at": "2025-10-09T21:05:27Z",
      "updated_at": "2025-10-09T21:05:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417958188",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417958188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1439,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417959306",
      "pull_request_review_id": 3320642523,
      "id": 2417959306,
      "node_id": "PRRC_kwDOABII586QHyGK",
      "diff_hunk": "@@ -983,52 +1349,55 @@ bool Cluster::Split(TxGraphImpl& graph) noexcept\n     // Iterate over the connected components of this Cluster's m_depgraph.\n     while (todo.Any()) {\n         auto component = m_depgraph.FindConnectedComponent(todo);\n+        auto component_size = component.Count();\n         auto split_quality = component.Count() <= 2 ? QualityLevel::OPTIMAL : new_quality;\n-        if (first && component == todo) {\n-            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+        if (first && component == todo && component_size >= 2 && SetType::Fill(component_size) == component) {",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 798,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409167491,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is now dealt with more consistently in a new commit that introduces a range of valid transaction counts for each `Cluster` implementation.",
      "created_at": "2025-10-09T21:06:02Z",
      "updated_at": "2025-10-09T21:06:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417959306",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417959306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417961019",
      "pull_request_review_id": 3320645186,
      "id": 2417961019,
      "node_id": "PRRC_kwDOABII586QHyg7",
      "diff_hunk": "@@ -2401,6 +2881,19 @@ void TxGraphImpl::SanityCheck() const\n             // ... for all clusters in them ...\n             for (ClusterSetIndex setindex = 0; setindex < quality_clusters.size(); ++setindex) {\n                 const auto& cluster = *quality_clusters[setindex];\n+                // The number of transactions in a Cluster cannot exceed m_max_cluster_count.\n+                assert(cluster.GetTxCount() <= m_max_cluster_count);",
      "path": "src/txgraph.cpp",
      "position": 1617,
      "original_position": 1671,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409180944,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why not both?\r\n\r\nThey're independent notions: one is a policy-configurable per-TxGraph maximum cluster count, and the other is a Cluster-implementation dependent limit.\r\n\r\nDone.",
      "created_at": "2025-10-09T21:07:04Z",
      "updated_at": "2025-10-09T21:07:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417961019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417961019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2907,
      "original_line": 2907,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417961661",
      "pull_request_review_id": 3320646085,
      "id": 2417961661,
      "node_id": "PRRC_kwDOABII586QHyq9",
      "diff_hunk": "@@ -891,42 +1183,106 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n+}\n+\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(m_graph_index != GraphIndex(-1));\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n {\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    if (m_graph_index == GraphIndex(-1)) return;\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+}\n+\n+void GenericClusterImpl::MoveToMain(TxGraphImpl& graph) noexcept\n {\n-    Assume(m_level == 1);\n     for (auto i : m_linearization) {\n         GraphIndex idx = m_mapping[i];\n         auto& entry = graph.m_entries[idx];\n         entry.m_locator[1].SetMissing();\n     }\n     auto quality = m_quality;\n+    graph.GetClusterSet(1).m_cluster_usage -= TotalMemoryUsage();\n     auto cluster = graph.ExtractCluster(1, quality, m_setindex);\n     graph.InsertCluster(0, std::move(cluster), quality);\n-    Updated(graph);\n+    graph.GetClusterSet(0).m_cluster_usage += TotalMemoryUsage();\n+    Updated(graph, 0);\n+}\n+\n+void SingletonClusterImpl::MoveToMain(TxGraphImpl& graph) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        auto& entry = graph.m_entries[m_graph_index];\n+        entry.m_locator[1].SetMissing();\n+    }\n+    auto quality = m_quality;\n+    graph.GetClusterSet(1).m_cluster_usage -= TotalMemoryUsage();\n+    auto cluster = graph.ExtractCluster(1, quality, m_setindex);\n+    graph.InsertCluster(0, std::move(cluster), quality);\n+    graph.GetClusterSet(0).m_cluster_usage += TotalMemoryUsage();\n+    Updated(graph, 0);\n+}\n+\n+void GenericClusterImpl::Compact() noexcept\n+{\n+    m_linearization.shrink_to_fit();\n+    m_mapping.shrink_to_fit();\n+    m_depgraph.Compact();",
      "path": "src/txgraph.cpp",
      "position": 758,
      "original_position": 743,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2403086164,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right.",
      "created_at": "2025-10-09T21:07:28Z",
      "updated_at": "2025-10-09T21:07:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417961661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417961661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1288,
      "original_line": 1288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417961927",
      "pull_request_review_id": 3320646400,
      "id": 2417961927,
      "node_id": "PRRC_kwDOABII586QHyvH",
      "diff_hunk": "@@ -707,6 +709,23 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+int Cluster::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];",
      "path": "src/txgraph.cpp",
      "position": 482,
      "original_position": 113,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "cd6dadf53aa8a6c2837381b4262a7468e311e554",
      "in_reply_to_id": 2408429695,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-09T21:07:36Z",
      "updated_at": "2025-10-09T21:07:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417961927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417961927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 939,
      "original_start_line": 714,
      "start_side": "RIGHT",
      "line": 943,
      "original_line": 943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417962125",
      "pull_request_review_id": 3320646713,
      "id": 2417962125,
      "node_id": "PRRC_kwDOABII586QHyyN",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.\n+    Assume(child == 0);\n+    Assume(parent == SetType{} || parent == SetType::Fill(0));\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    for (auto pos : m_linearization) {\n+        visit_fn(pos, m_mapping[pos], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(pos)), m_depgraph.GetReducedParents(pos));\n+    }\n+    // Purge this Cluster, now that everything has been moved.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_linearization.clear();\n+    m_mapping.clear();\n+}\n+\n+void SingletonClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        visit_fn(0, m_graph_index, m_feerate, SetType{});\n+        m_graph_index = GraphIndex(-1);\n+    }\n+}\n+\n+int GenericClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];\n+    // See if there is a level whose Locator matches this Cluster, if so return that level.\n+    for (int level = 0; level < MAX_LEVELS; ++level) {\n+        if (entry.m_locator[level].cluster == this) return level;\n+    }\n+    // Given that we started with an Entry that occurs in this Cluster, one of its Locators must\n+    // point back to it.\n+    assert(false);\n+    return -1;\n+}\n+\n+int SingletonClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(m_graph_index != GraphIndex(-1));\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 475,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2411544659,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-10-09T21:07:44Z",
      "updated_at": "2025-10-09T21:07:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417962125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417962125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 938,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417962445",
      "pull_request_review_id": 3320647165,
      "id": 2417962445,
      "node_id": "PRRC_kwDOABII586QHy3N",
      "diff_hunk": "@@ -782,9 +1022,27 @@ void Cluster::Updated(TxGraphImpl& graph) noexcept\n     }\n }\n \n-void Cluster::GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept\n+void SingletonClusterImpl::Updated(TxGraphImpl& graph, int level) noexcept\n+{\n+    // Don't do anything if this is empty.\n+    if (m_graph_index == GraphIndex(-1)) return;\n+\n+    auto& entry = graph.m_entries[m_graph_index];\n+    // Discard any potential ChunkData prior to modifying the Cluster (as that could\n+    // invalidate its ordering).\n+    if (level == 0) graph.ClearChunkData(entry);\n+    entry.m_locator[level].SetPresent(this, 0);\n+    // If this is for the main graph (level = 0), compute its chunking and store its information in\n+    // the Entry's m_main_lin_index and m_main_chunk_feerate.\n+    if (level == 0) {\n+        entry.m_main_lin_index = 0;\n+        entry.m_main_chunk_feerate = m_feerate;\n+        graph.CreateChunkData(m_graph_index, LinearizationIndex(-1));",
      "path": "src/txgraph.cpp",
      "position": 562,
      "original_position": 537,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2411563912,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good idea, done.",
      "created_at": "2025-10-09T21:07:56Z",
      "updated_at": "2025-10-09T21:07:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417962445",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417962445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1063,
      "original_line": 1063,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417963146",
      "pull_request_review_id": 3320648152,
      "id": 2417963146,
      "node_id": "PRRC_kwDOABII586QHzCK",
      "diff_hunk": "@@ -782,9 +1022,27 @@ void Cluster::Updated(TxGraphImpl& graph) noexcept\n     }\n }\n \n-void Cluster::GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept\n+void SingletonClusterImpl::Updated(TxGraphImpl& graph, int level) noexcept\n+{\n+    // Don't do anything if this is empty.\n+    if (m_graph_index == GraphIndex(-1)) return;\n+\n+    auto& entry = graph.m_entries[m_graph_index];\n+    // Discard any potential ChunkData prior to modifying the Cluster (as that could\n+    // invalidate its ordering).\n+    if (level == 0) graph.ClearChunkData(entry);\n+    entry.m_locator[level].SetPresent(this, 0);\n+    // If this is for the main graph (level = 0), compute its chunking and store its information in\n+    // the Entry's m_main_lin_index and m_main_chunk_feerate.\n+    if (level == 0) {",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 534,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2411594625,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fair point, done.",
      "created_at": "2025-10-09T21:08:15Z",
      "updated_at": "2025-10-09T21:08:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417963146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417963146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1037,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417964329",
      "pull_request_review_id": 3320649658,
      "id": 2417964329,
      "node_id": "PRRC_kwDOABII586QHzUp",
      "diff_hunk": "@@ -1673,22 +2085,32 @@ std::pair<uint64_t, bool> Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_\n     // Update the Cluster's quality.\n     bool improved = false;\n     if (optimal) {\n-        graph.SetClusterQuality(m_level, m_quality, m_setindex, QualityLevel::OPTIMAL);\n+        graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::OPTIMAL);\n         improved = true;\n     } else if (max_iters >= graph.m_acceptable_iters && !IsAcceptable()) {\n-        graph.SetClusterQuality(m_level, m_quality, m_setindex, QualityLevel::ACCEPTABLE);\n+        graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::ACCEPTABLE);\n         improved = true;\n     }\n     // Update the Entry objects.\n-    Updated(graph);\n+    Updated(graph, level);\n     return {cost, improved};\n }\n \n-void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+std::pair<uint64_t, bool> SingletonClusterImpl::Relinearize(TxGraphImpl& graph, int level, uint64_t max_iters) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1226,
      "original_position": 1240,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2411624776,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed. Changed into an `assert(false);`, plus a comment explaining why, and a `SingletonClusterImpl::SanityCheck()` check to verify that claim.",
      "created_at": "2025-10-09T21:08:50Z",
      "updated_at": "2025-10-09T21:08:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2417964329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2417964329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2122,
      "original_line": 2122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2419905179",
      "pull_request_review_id": 3323141971,
      "id": 2419905179,
      "node_id": "PRRC_kwDOABII586QPNKb",
      "diff_hunk": "@@ -707,6 +709,23 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+int Cluster::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];",
      "path": "src/txgraph.cpp",
      "position": 482,
      "original_position": 113,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "cd6dadf53aa8a6c2837381b4262a7468e311e554",
      "in_reply_to_id": 2408429695,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "not going to nag any but until now in TxGraph we haven't been using conditionals to \"save\" us in release builds when these assumptions are violated",
      "created_at": "2025-10-10T12:36:04Z",
      "updated_at": "2025-10-10T12:36:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2419905179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2419905179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 939,
      "original_start_line": 714,
      "start_side": "RIGHT",
      "line": 943,
      "original_line": 943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2419946561",
      "pull_request_review_id": 3323190202,
      "id": 2419946561,
      "node_id": "PRRC_kwDOABII586QPXRB",
      "diff_hunk": "@@ -707,6 +709,23 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+int Cluster::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];",
      "path": "src/txgraph.cpp",
      "position": 482,
      "original_position": 113,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "cd6dadf53aa8a6c2837381b4262a7468e311e554",
      "in_reply_to_id": 2408429695,
      "user": {
        "login": "GrayHatGuy",
        "id": 64990378,
        "node_id": "MDQ6VXNlcjY0OTkwMzc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/64990378?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/GrayHatGuy",
        "html_url": "https://github.com/GrayHatGuy",
        "followers_url": "https://api.github.com/users/GrayHatGuy/followers",
        "following_url": "https://api.github.com/users/GrayHatGuy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/GrayHatGuy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/GrayHatGuy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/GrayHatGuy/subscriptions",
        "organizations_url": "https://api.github.com/users/GrayHatGuy/orgs",
        "repos_url": "https://api.github.com/users/GrayHatGuy/repos",
        "events_url": "https://api.github.com/users/GrayHatGuy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/GrayHatGuy/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A proper risk analysis would have vetted this ",
      "created_at": "2025-10-10T12:43:44Z",
      "updated_at": "2025-10-10T12:43:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2419946561",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2419946561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 939,
      "original_start_line": 714,
      "start_side": "RIGHT",
      "line": 943,
      "original_line": 943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2420073068",
      "pull_request_review_id": 3323336944,
      "id": 2420073068,
      "node_id": "PRRC_kwDOABII586QP2Js",
      "diff_hunk": "@@ -1050,6 +1060,7 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     // Update all the Locators of moved transactions.\n     for (Cluster* new_cluster : new_clusters) {\n         new_cluster->Updated(graph, level);\n+        new_cluster->Compact();",
      "path": "src/txgraph.cpp",
      "position": 872,
      "original_position": 35,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "de8ebdd795e35644435c7b68b2c2bc5f54ea9d7c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "de8ebdd795e35644435c7b68b2c2bc5f54ea9d7c\r\n\r\nNot immediately clear this is necessary. These are all freshly generated, and shouldn't have holes, and capacities should be proportional?\r\n\r\n",
      "created_at": "2025-10-10T13:05:25Z",
      "updated_at": "2025-10-10T13:43:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2420073068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2420073068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1425,
      "original_line": 1425,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2420320280",
      "pull_request_review_id": 3323682436,
      "id": 2420320280,
      "node_id": "PRRC_kwDOABII586QQygY",
      "diff_hunk": "@@ -1050,6 +1060,7 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     // Update all the Locators of moved transactions.\n     for (Cluster* new_cluster : new_clusters) {\n         new_cluster->Updated(graph, level);\n+        new_cluster->Compact();",
      "path": "src/txgraph.cpp",
      "position": 872,
      "original_position": 35,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "de8ebdd795e35644435c7b68b2c2bc5f54ea9d7c",
      "in_reply_to_id": 2420073068,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No holes, indeed. But the capacities may be higher than needed, because transactions have been added one by one through `vector::push_back` in `m_mapping`, `m_linearization`, and `m_depgraph.entries`. When vector addition causes capacity to be exceeded, most C++ stdlibs use some exponential growing (e.g. doubling the capacity every time).",
      "created_at": "2025-10-10T13:50:23Z",
      "updated_at": "2025-10-10T13:50:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2420320280",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2420320280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1425,
      "original_line": 1425,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2420365990",
      "pull_request_review_id": 3323732765,
      "id": 2420365990,
      "node_id": "PRRC_kwDOABII586QQ9qm",
      "diff_hunk": "@@ -1050,6 +1060,7 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     // Update all the Locators of moved transactions.\n     for (Cluster* new_cluster : new_clusters) {\n         new_cluster->Updated(graph, level);\n+        new_cluster->Compact();",
      "path": "src/txgraph.cpp",
      "position": 872,
      "original_position": 35,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "de8ebdd795e35644435c7b68b2c2bc5f54ea9d7c",
      "in_reply_to_id": 2420073068,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yep, just noting",
      "created_at": "2025-10-10T13:56:37Z",
      "updated_at": "2025-10-10T13:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2420365990",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2420365990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1425,
      "original_line": 1425,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2420487300",
      "pull_request_review_id": 3323876882,
      "id": 2420487300,
      "node_id": "PRRC_kwDOABII586QRbSE",
      "diff_hunk": "@@ -1050,6 +1060,7 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     // Update all the Locators of moved transactions.\n     for (Cluster* new_cluster : new_clusters) {\n         new_cluster->Updated(graph, level);\n+        new_cluster->Compact();",
      "path": "src/txgraph.cpp",
      "position": 872,
      "original_position": 35,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "de8ebdd795e35644435c7b68b2c2bc5f54ea9d7c",
      "in_reply_to_id": 2420073068,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I just noticed you said \"proportional\". Indeed, they are, but still off by a factor of up to 2, and 1.5 on average.",
      "created_at": "2025-10-10T14:19:49Z",
      "updated_at": "2025-10-10T14:19:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2420487300",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2420487300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1425,
      "original_line": 1425,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422338701",
      "pull_request_review_id": 3326354774,
      "id": 2422338701,
      "node_id": "PRRC_kwDOABII586QYfSN",
      "diff_hunk": "@@ -1213,23 +1628,23 @@ Cluster* TxGraphImpl::FindCluster(GraphIndex idx, int level) const noexcept\n         // If the locator has the entry marked as explicitly removed, stop.\n         if (entry.m_locator[l].IsRemoved()) break;\n         // Otherwise, we have found the topmost ClusterSet that contains this entry.\n-        return entry.m_locator[l].cluster;\n+        return {entry.m_locator[l].cluster, l};\n     }\n     // If no non-empty locator was found, or an explicitly removed was hit, return nothing.\n-    return nullptr;\n+    return {nullptr, -1};\n }\n \n Cluster* TxGraphImpl::PullIn(Cluster* cluster) noexcept\n {\n     int to_level = GetTopLevel();\n     Assume(to_level == 1);\n-    int level = cluster->m_level;\n+    int level = cluster->GetLevel(*this);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1052,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This method is called from two places, one of which is dropping the pre-cacululated cluster level that we could access through `FindClusterAndLevel` - the other call doesn't seem to, I guess that's why you decided to always recalculate.\nIt seems to me it wouldn't complicate much to provide it when it's available and recalculate when it's not, something like:\n```patch\ndiff --git a/src/txgraph.cpp b/src/txgraph.cpp\n--- a/src/txgraph.cpp\t(revision 262762bbb6f7157ba8c54972909c9214448c304b)\n+++ b/src/txgraph.cpp\t(date 1760144001634)\n@@ -722,7 +722,7 @@\n     /** If cluster is not in staging, copy it there, and return a pointer to it.\n     *   Staging must exist, and this modifies the locators of its\n     *   transactions from inherited (P,M) to explicit (P,P). */\n-    Cluster* PullIn(Cluster* cluster) noexcept;\n+    Cluster* PullIn(Cluster* cluster, int level) noexcept;\n     /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n      *  NEEDS_SPLIT* QualityLevel) up to the specified level. */\n     void ApplyRemovals(int up_to_level) noexcept;\n@@ -1634,11 +1634,12 @@\n     return {nullptr, -1};\n }\n \n-Cluster* TxGraphImpl::PullIn(Cluster* cluster) noexcept\n+Cluster* TxGraphImpl::PullIn(Cluster* cluster, int cluster_level) noexcept\n {\n     int to_level = GetTopLevel();\n     Assume(to_level == 1);\n     int level = cluster->GetLevel(*this);\n+    Assert(level == cluster_level); // TODO use parent call calculations instead\n     Assume(level <= to_level);\n     // Copy the Cluster from main to staging, if it's not already there.\n     if (level == 0) {\n@@ -1661,8 +1662,8 @@\n         // Pull in all Clusters that are not in staging.\n         if (level == 1) {\n             for (GraphIndex index : to_remove) {\n-                auto cluster = FindCluster(index, level);\n-                if (cluster != nullptr) PullIn(cluster);\n+                auto [cluster, cluster_level] = FindClusterAndLevel(index, level);\n+                if (cluster != nullptr) PullIn(cluster, cluster_level);\n             }\n         }\n         // Group the set of to-be-removed entries by Cluster::m_sequence.\n@@ -2067,7 +2068,7 @@\n         // Pull in all the Clusters that contain dependencies.\n         if (level == 1) {\n             for (Cluster*& cluster : cluster_span) {\n-                cluster = PullIn(cluster);\n+                cluster = PullIn(cluster, cluster->GetLevel(*this));\n             }\n         }\n         // Invoke Merge() to merge them into a single Cluster.\n```\n\nNote that this would move the only remaing non-sanity-check call of `GetLevel` higher up.",
      "created_at": "2025-10-11T00:57:30Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422338701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422338701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422360601",
      "pull_request_review_id": 3326354774,
      "id": 2422360601,
      "node_id": "PRRC_kwDOABII586QYkoZ",
      "diff_hunk": "@@ -2906,6 +3433,21 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(/*up_to_level=*/0);\n+    ApplyDependencies(/*level=*/0);\n+    // Compute memory usage",
      "path": "src/txgraph.cpp",
      "position": 1673,
      "original_position": 1647,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This might have been mentioned before, but I couldn't find the comment.\r\n\r\nI noticed `m_main_chunkindex_discarded` isn't included in the `GetMainMemoryUsage` calculation. \r\nIs my understanding correct that this was intentionally skipped because it's not part of the stable state being measured or that it would pollute the measurements?\r\n\r\nTo check if it was simply empty at this point (like the other vectors mentioned by @glozow), I tried \r\n```patch\r\ndiff --git a/src/txgraph.cpp b/src/txgraph.cpp\r\n--- a/src/txgraph.cpp\t(revision 262762bbb6f7157ba8c54972909c9214448c304b)\r\n+++ b/src/txgraph.cpp\t(date 1760146686230)\r\n@@ -3445,6 +3445,7 @@\r\n                    sizeof(Entry) * m_main_clusterset.m_txcount +\r\n                    /* From the chunk index. */\r\n                    memusage::DynamicUsage(m_main_chunkindex);\r\n+    assert(m_main_chunkindex_discarded.empty());\r\n     return usage;\r\n }\r\n ```\r\nbut it fails fuzz testing with\r\n> Assertion failed: (m_main_chunkindex_discarded.empty()), function GetMainMemoryUsage, file txgraph.cpp, line 3449.\r\n \r\nMaybe a brief comment explaining why this cache is not included would be helpful.\r\n",
      "created_at": "2025-10-11T01:32:21Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422360601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422360601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3442,
      "original_line": 3442,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422371348",
      "pull_request_review_id": 3326354774,
      "id": 2422371348,
      "node_id": "PRRC_kwDOABII586QYnQU",
      "diff_hunk": "@@ -707,6 +884,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 432,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: for consistency:\n```suggestion\n    Assume(!GetTxCount());\n```",
      "created_at": "2025-10-11T02:03:51Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422371348",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422371348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 899,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422371564",
      "pull_request_review_id": 3326354774,
      "id": 2422371564,
      "node_id": "PRRC_kwDOABII586QYnTs",
      "diff_hunk": "@@ -957,7 +1336,17 @@ uint64_t Cluster::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::\n     return size;\n }\n \n-bool Cluster::Split(TxGraphImpl& graph) noexcept\n+uint64_t SingletonClusterImpl::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept\n+{\n+    if (m_graph_index  == GraphIndex(-1)) return 0;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 783,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: likely missed because of the extra space\n```suggestion\n    if (!GetTxCount()) return 0;\n```",
      "created_at": "2025-10-11T02:04:40Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422371564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422371564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422374209",
      "pull_request_review_id": 3326354774,
      "id": 2422374209,
      "node_id": "PRRC_kwDOABII586QYn9B",
      "diff_hunk": "@@ -1037,46 +1430,62 @@ bool Cluster::Split(TxGraphImpl& graph) noexcept\n     return true;\n }\n \n-void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+bool SingletonClusterImpl::Split(TxGraphImpl& graph, int level) noexcept\n+{\n+    Assume(NeedsSplitting());\n+    if (GetTxCount() == 0) {\n+        // The cluster is now empty.\n+        graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+        return true;\n+    } else {\n+        // Nothing changed.\n+        graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::OPTIMAL);\n+        Updated(graph, level);\n+        return false;\n+    }\n+}\n+\n+void GenericClusterImpl::Merge(TxGraphImpl& graph, int level, Cluster& other) noexcept\n {\n     /** Vector to store the positions in this Cluster for each position in other. */\n-    std::vector<DepGraphIndex> remap(other.m_depgraph.PositionRange());\n+    std::vector<DepGraphIndex> remap(other.GetDepGraphIndexRange());\n     // Iterate over all transactions in the other Cluster (the one being absorbed).\n-    for (auto pos : other.m_linearization) {\n-        auto idx = other.m_mapping[pos];\n+    other.ExtractTransactions([&](DepGraphIndex pos, GraphIndex idx, FeePerWeight feerate, SetType other_parents) noexcept {\n         // Copy the transaction into this Cluster, and remember its position.\n-        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        auto new_pos = m_depgraph.AddTransaction(feerate);\n         remap[pos] = new_pos;\n-        if (new_pos == m_mapping.size()) {\n-            m_mapping.push_back(idx);\n-        } else {\n-            m_mapping[new_pos] = idx;\n-        }\n+        // Since this cluster must have been made hole-free before being merged into, all added\n+        // transactions should appear at the end.\n+        Assume(new_pos == m_mapping.size());",
      "path": "src/txgraph.cpp",
      "position": 911,
      "original_position": 907,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I'd put the assume before the first usage of the validated value",
      "created_at": "2025-10-11T02:12:31Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422374209",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422374209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1460,
      "original_line": 1460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422453665",
      "pull_request_review_id": 3326354774,
      "id": 2422453665,
      "node_id": "PRRC_kwDOABII586QY7Wh",
      "diff_hunk": "@@ -820,32 +1113,52 @@ std::vector<Cluster*> TxGraphImpl::GetConflicts() const noexcept\n     return ret;\n }\n \n-Cluster* Cluster::CopyToStaging(TxGraphImpl& graph) const noexcept\n+Cluster* GenericClusterImpl::CopyToStaging(TxGraphImpl& graph) const noexcept\n {\n     // Construct an empty Cluster.\n-    auto ret = std::make_unique<Cluster>(graph.m_next_sequence_counter++);\n+    auto ret = graph.CreateEmptyGenericCluster();\n     auto ptr = ret.get();\n-    // Copy depgraph, mapping, and linearization/\n+    // Copy depgraph, mapping, and linearization.\n     ptr->m_depgraph = m_depgraph;\n     ptr->m_mapping = m_mapping;\n     ptr->m_linearization = m_linearization;\n     // Insert the new Cluster into the graph.\n+    graph.InsertCluster(/*level=*/1, std::move(ret), m_quality);\n+    // Update its Locators.\n+    ptr->Updated(graph, /*level=*/1);\n+    // Update memory usage.\n+    graph.GetClusterSet(/*level=*/1).m_cluster_usage += ptr->TotalMemoryUsage();\n+    return ptr;\n+}\n+\n+Cluster* SingletonClusterImpl::CopyToStaging(TxGraphImpl& graph) const noexcept\n+{\n+    // Construct an empty Cluster.\n+    auto ret = graph.CreateEmptySingletonCluster();\n+    auto ptr = ret.get();\n+    // Copy data.\n+    ptr->m_graph_index = m_graph_index;\n+    ptr->m_feerate = m_feerate;\n+    // Insert the new Cluster into the graph.\n     graph.InsertCluster(1, std::move(ret), m_quality);\n     // Update its Locators.\n-    ptr->Updated(graph);\n+    ptr->Updated(graph, 1);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 622,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: for consistency we could add the name hints here as well",
      "created_at": "2025-10-11T03:54:52Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422453665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422453665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422454996",
      "pull_request_review_id": 3326354774,
      "id": 2422454996,
      "node_id": "PRRC_kwDOABII586QY7rU",
      "diff_hunk": "@@ -707,6 +884,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 438,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: \n```suggestion\nvoid GenericClusterImpl::AddDependencies(SetType parents, DepGraphIndex child) noexcept\n```",
      "created_at": "2025-10-11T03:57:58Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422454996",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422454996"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 905,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422456625",
      "pull_request_review_id": 3326354774,
      "id": 2422456625,
      "node_id": "PRRC_kwDOABII586QY8Ex",
      "diff_hunk": "@@ -707,6 +864,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    m_depgraph.AddDependencies(parent, child);\n+}\n+\n+void SingletonClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept\n+{\n+    // Singletons cannot have any dependencies.\n+    Assume(child == 0);\n+    Assume(parent == SetType{} || parent == SetType::Fill(0));\n+}\n+\n+void GenericClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    for (auto pos : m_linearization) {\n+        visit_fn(pos, m_mapping[pos], FeePerWeight::FromFeeFrac(m_depgraph.FeeRate(pos)), m_depgraph.GetReducedParents(pos));\n+    }\n+    // Purge this Cluster, now that everything has been moved.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_linearization.clear();\n+    m_mapping.clear();\n+}\n+\n+void SingletonClusterImpl::ExtractTransactions(std::function<void (DepGraphIndex, GraphIndex, FeePerWeight, SetType)> visit_fn) noexcept\n+{\n+    if (m_graph_index != GraphIndex(-1)) {\n+        visit_fn(0, m_graph_index, m_feerate, SetType{});\n+        m_graph_index = GraphIndex(-1);\n+    }\n+}\n+\n+int GenericClusterImpl::GetLevel(const TxGraphImpl& graph) const noexcept\n+{\n+    // GetLevel() does not work for empty Clusters.\n+    Assume(!m_linearization.empty());\n+\n+    // Pick an arbitrary Entry that occurs in this Cluster.\n+    const auto& entry = graph.m_entries[m_mapping[m_linearization.front()]];\n+    // See if there is a level whose Locator matches this Cluster, if so return that level.\n+    for (int level = 0; level < MAX_LEVELS; ++level) {\n+        if (entry.m_locator[level].cluster == this) return level;\n+    }\n+    // Given that we started with an Entry that occurs in this Cluster, one of its Locators must\n+    // point back to it.\n+    assert(false);\n+    return -1;",
      "path": "src/txgraph.cpp",
      "position": 490,
      "original_position": 467,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2402810313,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "And we're not throwing because of `noexcept`? What about a single `std::abort()` instead of the two?",
      "created_at": "2025-10-11T04:04:11Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422456625",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422456625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 950,
      "original_start_line": 929,
      "start_side": "RIGHT",
      "line": 951,
      "original_line": 951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422457512",
      "pull_request_review_id": 3326354774,
      "id": 2422457512,
      "node_id": "PRRC_kwDOABII586QY8So",
      "diff_hunk": "@@ -248,6 +373,8 @@ class Cluster\n class TxGraphImpl final : public TxGraph\n {\n     friend class Cluster;\n+    friend class SingletonClusterImpl;\n+    friend class GenericClusterImpl;\n     friend class BlockBuilderImpl;",
      "path": "src/txgraph.cpp",
      "position": 299,
      "original_position": 297,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: kinda' unrelated but my linter is complaining here that `Member 'm_known_end_of_cluster' is not initialized in this constructor`.",
      "created_at": "2025-10-11T04:08:30Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422457512",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422457512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422459512",
      "pull_request_review_id": 3326354774,
      "id": 2422459512,
      "node_id": "PRRC_kwDOABII586QY8x4",
      "diff_hunk": "@@ -485,11 +615,13 @@ class TxGraphImpl final : public TxGraph\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n     *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n-    /** Extract a Cluster from its ClusterSet. */\n+    Cluster* FindCluster(GraphIndex idx, int level) const noexcept { return FindClusterAndLevel(idx, level).first; }\n+    /** Like FindClusterAndLevel, but also return what level the match was found in (-1 if not found). */",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 317,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\n    /** Like FindCluster, but also return what level the match was found in (-1 if not found). */\n```",
      "created_at": "2025-10-11T04:16:17Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422459512",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422459512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422889784",
      "pull_request_review_id": 3326354774,
      "id": 2422889784,
      "node_id": "PRRC_kwDOABII586Qal04",
      "diff_hunk": "@@ -2401,6 +2902,27 @@ void TxGraphImpl::SanityCheck() const\n             // ... for all clusters in them ...\n             for (ClusterSetIndex setindex = 0; setindex < quality_clusters.size(); ++setindex) {\n                 const auto& cluster = *quality_clusters[setindex];\n+                // The number of transactions in a Cluster cannot exceed m_max_cluster_count.\n+                assert(cluster.GetTxCount() <= m_max_cluster_count);\n+                // The level must match the Cluster's own idea of what level it is in (but GetLevel\n+                // can only be called for non-empty Clusters).\n+                assert(cluster.GetTxCount() == 0 || level == cluster.GetLevel(*this));\n+                // The sum of their sizes cannot exceed m_max_cluster_size, unless it is an\n+                // individually oversized transaction singleton. Note that groups of to-be-merged\n+                // clusters which would exceed this limit are marked oversized, which means they\n+                // are never applied.\n+                assert(cluster.IsOversized() || cluster.GetTotalTxSize() <= m_max_cluster_size);\n+                // OVERSIZED clusters are singletons.\n+                assert(!cluster.IsOversized() || cluster.GetTxCount() == 1);\n+                // Transaction counts cannot exceed the Cluster implementation's maximum\n+                // supported transactions count.\n+                assert(cluster.GetTxCount() <= cluster.GetMaxTxCount());\n+                // Unless a Split is yet to be applied, the number of transactions must not be\n+                // below the Cluster implementation's intended transaction count.\n+                if (!cluster.NeedsSplitting()) {\n+                    assert(cluster.GetTxCount() >= cluster.GetMinIntendedTxCount());\n+                }\n+\n                 // Check the sequence number.\n                 assert(cluster.m_sequence < m_next_sequence_counter);\n                 assert(sequences.count(cluster.m_sequence) == 0);",
      "path": "src/txgraph.cpp",
      "position": 1639,
      "original_position": 1613,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: in a follow-up we could make this: `assert(!sequences.contains(cluster.m_sequence));`",
      "created_at": "2025-10-11T14:09:43Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422889784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422889784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2929,
      "original_line": 2929,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422890998",
      "pull_request_review_id": 3326354774,
      "id": 2422890998,
      "node_id": "PRRC_kwDOABII586QamH2",
      "diff_hunk": "@@ -98,33 +99,23 @@ struct TrimTxData\n class Cluster\n {\n     friend class TxGraphImpl;\n+\n+protected:\n     using GraphIndex = TxGraph::GraphIndex;\n     using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n-    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n-    DepGraph<SetType> m_depgraph;\n-    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n-     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n-     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n-    std::vector<GraphIndex> m_mapping;\n-    /** The current linearization of the cluster. m_linearization.size() equals\n-     *  m_depgraph.TxCount(). This is always kept topological. */\n-    std::vector<DepGraphIndex> m_linearization;\n     /** The quality level of m_linearization. */\n     QualityLevel m_quality{QualityLevel::NONE};\n-    /** Which position this Cluster has in Graph::ClusterSet::m_clusters[m_quality]. */\n+    /** Which position this Cluster has in TxGraphImpl::ClusterSet::m_clusters[m_quality]. */\n     ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n-    /** Which level this Cluster is at in the graph (-1=not inserted, 0=main, 1=staging). */\n-    int m_level{-1};\n     /** Sequence number for this Cluster (for tie-breaking comparison between equal-chunk-feerate\n         transactions in distinct clusters). */\n     uint64_t m_sequence;",
      "path": "src/txgraph.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: it seems to me this can now be private",
      "created_at": "2025-10-11T14:11:04Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422890998",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422890998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 110,
      "original_start_line": 110,
      "start_side": "RIGHT",
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422894948",
      "pull_request_review_id": 3326354774,
      "id": 2422894948,
      "node_id": "PRRC_kwDOABII586QanFk",
      "diff_hunk": "@@ -1193,15 +1608,15 @@ void TxGraphImpl::SetClusterQuality(int level, QualityLevel old_quality, Cluster\n     InsertCluster(level, std::move(cluster_ptr), new_quality);\n }\n \n-void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+void TxGraphImpl::DeleteCluster(Cluster& cluster, int level) noexcept\n {\n     // Extract the cluster from where it currently resides.\n-    auto cluster_ptr = ExtractCluster(cluster.m_level, cluster.m_quality, cluster.m_setindex);\n+    auto cluster_ptr = ExtractCluster(level, cluster.m_quality, cluster.m_setindex);\n     // And throw it away.\n     cluster_ptr.reset();",
      "path": "src/txgraph.cpp",
      "position": 1037,
      "original_position": 1027,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is the explicit reset meant for clarity here instead of\n```C++\nvoid TxGraphImpl::DeleteCluster(Cluster& cluster, int level) noexcept\n{\n    // Extract the cluster from where it currently resides and throw it away.\n    ExtractCluster(level, cluster.m_quality, cluster.m_setindex);\n}\n```",
      "created_at": "2025-10-11T14:16:20Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422894948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422894948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 1615,
      "original_start_line": 1613,
      "start_side": "RIGHT",
      "line": 1618,
      "original_line": 1618,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422903361",
      "pull_request_review_id": 3326354774,
      "id": 2422903361,
      "node_id": "PRRC_kwDOABII586QapJB",
      "diff_hunk": "@@ -891,42 +1204,108 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n {\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(GetTxCount());\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n+}\n+\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    Assume(GetTxCount());",
      "path": "src/txgraph.cpp",
      "position": 714,
      "original_position": 705,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The doc states `/** Remove all transactions from a (non-empty) Cluster. */` but we're only asserting that here - I know it might not matter much, but for symmetry consider adding the assuption to `GenericClusterImpl::Clear` as well",
      "created_at": "2025-10-11T14:24:53Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422903361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422903361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1247,
      "original_line": 1247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422904353",
      "pull_request_review_id": 3326354774,
      "id": 2422904353,
      "node_id": "PRRC_kwDOABII586QapYh",
      "diff_hunk": "@@ -891,42 +1204,108 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n {\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(GetTxCount());\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n+}\n+\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    Assume(GetTxCount());\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+}\n+\n+void GenericClusterImpl::MoveToMain(TxGraphImpl& graph) noexcept\n {\n-    Assume(m_level == 1);\n     for (auto i : m_linearization) {\n         GraphIndex idx = m_mapping[i];\n         auto& entry = graph.m_entries[idx];\n         entry.m_locator[1].SetMissing();\n     }\n     auto quality = m_quality;\n+    // Subtract memory usage from staging and add it to main.",
      "path": "src/txgraph.cpp",
      "position": 729,
      "original_position": 720,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find this a lot more intuitive, thanks",
      "created_at": "2025-10-11T14:26:36Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422904353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422904353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1261,
      "original_line": 1261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422907481",
      "pull_request_review_id": 3326354774,
      "id": 2422907481,
      "node_id": "PRRC_kwDOABII586QaqJZ",
      "diff_hunk": "@@ -452,63 +452,72 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n         }\n     };\n \n+    auto last_compaction_pos{real.PositionRange()};\n+\n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\n-        uint8_t command = provider.ConsumeIntegral<uint8_t>();\n-        if (num_tx_sim == 0 || ((command % 3) <= 0 && num_tx_sim < TestBitSet::Size())) {\n-            // AddTransaction.\n-            auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n-            auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n-            FeeFrac feerate{fee, size};\n-            // Apply to DepGraph.\n-            auto idx = real.AddTransaction(feerate);\n-            // Verify that the returned index is correct.\n-            assert(!sim[idx].has_value());\n-            for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n-                if (!sim[i].has_value()) {\n-                    assert(idx == i);\n-                    break;\n+        int command = provider.ConsumeIntegral<uint8_t>() % 4;\n+        while (true) {\n+            // Iterate decreasing command until an applicable branch is found.\n+            if (num_tx_sim < TestBitSet::Size() && command-- == 0) {\n+                // AddTransaction.\n+                auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n+                auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n+                FeeFrac feerate{fee, size};\n+                // Apply to DepGraph.\n+                auto idx = real.AddTransaction(feerate);\n+                // Verify that the returned index is correct.\n+                assert(!sim[idx].has_value());\n+                for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n+                    if (!sim[i].has_value()) {\n+                        assert(idx == i);\n+                        break;\n+                    }\n                 }\n-            }\n-            // Update sim.\n-            sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n-            ++num_tx_sim;\n-            continue;\n-        }\n-        if ((command % 3) <= 1 && num_tx_sim > 0) {\n-            // AddDependencies.\n-            DepGraphIndex child = idx_fn();\n-            auto parents = subset_fn();\n-            // Apply to DepGraph.\n-            real.AddDependencies(parents, child);\n-            // Apply to sim.\n-            sim[child]->second |= parents;\n-            continue;\n-        }\n-        if (num_tx_sim > 0) {\n-            // Remove transactions.\n-            auto del = set_fn();\n-            // Propagate all ancestry information before deleting anything in the simulation (as\n-            // intermediary transactions may be deleted which impact connectivity).\n-            anc_update_fn();\n-            // Compare the state of the transactions being deleted.\n-            for (auto i : del) check_fn(i);\n-            // Apply to DepGraph.\n-            real.RemoveTransactions(del);\n-            // Apply to sim.\n-            for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n-                if (sim[i].has_value()) {\n-                    if (del[i]) {\n-                        --num_tx_sim;\n-                        sim[i] = std::nullopt;\n-                    } else {\n-                        sim[i]->second -= del;\n+                // Update sim.\n+                sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n+                ++num_tx_sim;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // AddDependencies.\n+                DepGraphIndex child = idx_fn();\n+                auto parents = subset_fn();\n+                // Apply to DepGraph.\n+                real.AddDependencies(parents, child);\n+                // Apply to sim.\n+                sim[child]->second |= parents;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // Remove transactions.\n+                auto del = set_fn();\n+                // Propagate all ancestry information before deleting anything in the simulation (as\n+                // intermediary transactions may be deleted which impact connectivity).\n+                anc_update_fn();\n+                // Compare the state of the transactions being deleted.\n+                for (auto i : del) check_fn(i);\n+                // Apply to DepGraph.\n+                real.RemoveTransactions(del);",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 95,
      "original_position": 95,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "slightly unrelated nit: it seems to me that `RemoveTransactions` iterates over unused positions as well.\r\n```C++\r\nassert(entries.size() > m_used.Count()); // TODO fails fuzzing, indicating that entries can have holes\r\nfor (auto& entry : entries) {\r\n```\r\n\r\nIn a follow-up maybe we could check how many sparse graphs we have and whether iterating over the valid positions only would perform better.\r\n```C++\r\nassert(entries.size() >= m_used.Count()); // TODO m_used is never worse\r\nfor (auto idx : m_used) {\r\n    entries[idx].ancestors &= m_used;\r\n    entries[idx].descendants &= m_used;\r\n}\r\n```\r\n\r\n",
      "created_at": "2025-10-11T14:33:37Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422907481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422907481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 498,
      "original_line": 498,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422929107",
      "pull_request_review_id": 3326354774,
      "id": 2422929107,
      "node_id": "PRRC_kwDOABII586QavbT",
      "diff_hunk": "@@ -511,6 +643,29 @@ class TxGraphImpl final : public TxGraph\n     void ClearChunkData(Entry& entry) noexcept;\n     /** Give an Entry a ChunkData object. */\n     void CreateChunkData(GraphIndex idx, LinearizationIndex chunk_count) noexcept;\n+    /** Create an empty GenericClusterImpl object. */\n+    std::unique_ptr<GenericClusterImpl> CreateEmptyGenericCluster() noexcept\n+    {\n+        return std::make_unique<GenericClusterImpl>(m_next_sequence_counter++);\n+    }\n+    /** Create an empty SingletonClusterImpl object. */\n+    std::unique_ptr<SingletonClusterImpl> CreateEmptySingletonCluster() noexcept\n+    {\n+        return std::make_unique<SingletonClusterImpl>(m_next_sequence_counter++);\n+    }\n+    /** Create an empty Cluster of the appropriate implementation for the specified (maximum) tx\n+     *  count. */\n+    std::unique_ptr<Cluster> CreateEmptyCluster(DepGraphIndex tx_count) noexcept\n+    {\n+        if (tx_count >= SingletonClusterImpl::MIN_INTENDED_TX_COUNT && tx_count <= SingletonClusterImpl::MAX_TX_COUNT) {",
      "path": "src/txgraph.cpp",
      "position": 347,
      "original_position": 345,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this feels a bit like a lack of abstraction, especially since now we have multiple ways of getting the min and max. If a few places we can use the getter methods, but here maybe we could add a higher-level abstraction to the impls, maybe something like\n```C++\nstatic bool IsIntendedFor(DepGraphIndex tx_count) noexcept {\n    return MIN_INTENDED_TX_COUNT <= tx_count && tx_count <= MAX_TX_COUNT\n}\n```\nor maybe even\n```C++\nstatic bool IsIntendedFor(DepGraphIndex tx_count) noexcept {\n    return std::clamp(tx_count, MIN_INTENDED_TX_COUNT, MAX_TX_COUNT) == tx_count;\n}\n```\nso that here we're not leaking internals:\n```C++\nstd::unique_ptr<Cluster> TxGraphImpl::CreateEmptyCluster(DepGraphIndex tx_count) noexcept\n{\n    if (SingletonClusterImpl::IsIntendedFor(tx_count)) return CreateEmptySingletonCluster();\n    Assert(GenericClusterImpl::IsIntendedFor(tx_count));\n    return CreateEmptyGenericCluster();\n}\n```\n\nni2: the format `min <= value && value <= max` may be more intuitive to signal a strict ordering relation",
      "created_at": "2025-10-11T15:02:50Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2422929107",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2422929107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 662,
      "original_line": 662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423058928",
      "pull_request_review_id": 3326354774,
      "id": 2423058928,
      "node_id": "PRRC_kwDOABII586QbPHw",
      "diff_hunk": "",
      "path": "src/cluster_linearize.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Mostly unrelated, but I have checked the fuzz coverage of these files, there are a few missing areas that we might want to follow-up on later:\n* https://storage.googleapis.com/oss-fuzz-coverage/bitcoin-core/reports/20251011/linux/src/bitcoin-core/src/cluster_linearize.h.html#L867\n* https://storage.googleapis.com/oss-fuzz-coverage/bitcoin-core/reports/20251011/linux/src/bitcoin-core/src/cluster_linearize.h.html#L1096\n* https://storage.googleapis.com/oss-fuzz-coverage/bitcoin-core/reports/20251011/linux/src/bitcoin-core/src/txgraph.cpp.html#L2923",
      "created_at": "2025-10-11T17:24:40Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423058928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423058928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423059650",
      "pull_request_review_id": 3326354774,
      "id": 2423059650,
      "node_id": "PRRC_kwDOABII586QbPTC",
      "diff_hunk": "",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409128894,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there anything trivial from that idea that we could already do now, without making the code more complicated? Merge is quite complicated currently, seems there may be a few independent operations lurking inside. But I admit I don't fully understand it yet, so ignore if not relevant.",
      "created_at": "2025-10-11T17:27:14Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423059650",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423059650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1439,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423059849",
      "pull_request_review_id": 3326354774,
      "id": 2423059849,
      "node_id": "PRRC_kwDOABII586QbPWJ",
      "diff_hunk": "@@ -484,12 +621,13 @@ class TxGraphImpl final : public TxGraph\n     /** Swap the Entry referred to by a and the one referred to by b. */\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n-    *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n+    *   removed), return the Cluster it is in and the level the Cluster has. Otherwise, return\n+    *   {nullptr, -1}. */\n+    std::pair<Cluster*, int> FindCluster(GraphIndex idx, int level) const noexcept;\n     /** Extract a Cluster from its ClusterSet. */\n     std::unique_ptr<Cluster> ExtractCluster(int level, QualityLevel quality, ClusterSetIndex setindex) noexcept;\n     /** Delete a Cluster. */\n-    void DeleteCluster(Cluster& cluster) noexcept;\n+    void DeleteCluster(int level, Cluster& cluster) noexcept;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 333,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2403274255,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for doing it anyway :)",
      "created_at": "2025-10-11T17:27:54Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423059849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423059849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 630,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423061151",
      "pull_request_review_id": 3326354774,
      "id": 2423061151,
      "node_id": "PRRC_kwDOABII586QbPqf",
      "diff_hunk": "@@ -2977,6 +2979,22 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(0);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "437e29cd8d4981f1f5451c438bf21c24c669bf22",
      "in_reply_to_id": 2407646775,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now that you've added the stability fuzz tests, I'm fine with the side-effects, thanks",
      "created_at": "2025-10-11T17:31:57Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423061151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423061151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423061494",
      "pull_request_review_id": 3326354774,
      "id": 2423061494,
      "node_id": "PRRC_kwDOABII586QbPv2",
      "diff_hunk": "@@ -1066,7 +1115,8 @@ bool Cluster::Split(TxGraphImpl& graph, int level) noexcept\n     // Redistribute the transactions.\n     for (auto i : m_linearization) {\n         /** The cluster which transaction originally in position i is moved to. */\n-        Cluster* new_cluster = remap[i].first;\n+        Cluster* new_abstract_cluster = remap[i].first;\n+        GenericClusterImpl* new_cluster = static_cast<GenericClusterImpl*>(new_abstract_cluster);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 379,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "a9eeb7075954adaf74731160fbaa0ac9e4704c34",
      "in_reply_to_id": 2407732614,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, it's a lot cleaner this way",
      "created_at": "2025-10-11T17:32:42Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423061494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423061494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423062366",
      "pull_request_review_id": 3326354774,
      "id": 2423062366,
      "node_id": "PRRC_kwDOABII586QbP9e",
      "diff_hunk": "",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408164554,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have tested with them added and the fuzzers are passing",
      "created_at": "2025-10-11T17:35:44Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423062366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423062366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 528,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423064003",
      "pull_request_review_id": 3326354774,
      "id": 2423064003,
      "node_id": "PRRC_kwDOABII586QbQXD",
      "diff_hunk": "@@ -957,7 +1313,17 @@ uint64_t Cluster::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::\n     return size;\n }\n \n-bool Cluster::Split(TxGraphImpl& graph) noexcept\n+uint64_t SingletonClusterImpl::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept\n+{\n+    if (m_graph_index  == GraphIndex(-1)) return 0;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 778,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2408186562,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Except this one",
      "created_at": "2025-10-11T17:40:02Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423064003",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423064003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423065768",
      "pull_request_review_id": 3326354774,
      "id": 2423065768,
      "node_id": "PRRC_kwDOABII586QbQyo",
      "diff_hunk": "@@ -1839,7 +2266,12 @@ void Cluster::GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cl\n     }\n }\n \n-bool Cluster::GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept\n+void SingletonClusterImpl::GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept\n+{\n+    GetAncestorRefs(graph, args, output);",
      "path": "src/txgraph.cpp",
      "position": 1321,
      "original_position": 1362,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409123553,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you",
      "created_at": "2025-10-11T17:43:56Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423065768",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423065768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2293,
      "original_line": 2293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423066499",
      "pull_request_review_id": 3326354774,
      "id": 2423066499,
      "node_id": "PRRC_kwDOABII586QbQ-D",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;",
      "path": "src/txgraph.cpp",
      "position": 74,
      "original_position": 79,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409138316,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure, will let you decide, feel free to resolve the comment",
      "created_at": "2025-10-11T17:45:45Z",
      "updated_at": "2025-10-11T18:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423066499",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423066499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423143691",
      "pull_request_review_id": 3327599228,
      "id": 2423143691,
      "node_id": "PRRC_kwDOABII586Qbj0L",
      "diff_hunk": "@@ -1193,15 +1608,15 @@ void TxGraphImpl::SetClusterQuality(int level, QualityLevel old_quality, Cluster\n     InsertCluster(level, std::move(cluster_ptr), new_quality);\n }\n \n-void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+void TxGraphImpl::DeleteCluster(Cluster& cluster, int level) noexcept\n {\n     // Extract the cluster from where it currently resides.\n-    auto cluster_ptr = ExtractCluster(cluster.m_level, cluster.m_quality, cluster.m_setindex);\n+    auto cluster_ptr = ExtractCluster(level, cluster.m_quality, cluster.m_setindex);\n     // And throw it away.\n     cluster_ptr.reset();",
      "path": "src/txgraph.cpp",
      "position": 1037,
      "original_position": 1027,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422894948,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes.",
      "created_at": "2025-10-11T21:37:58Z",
      "updated_at": "2025-10-11T21:37:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423143691",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423143691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 1615,
      "original_start_line": 1613,
      "start_side": "RIGHT",
      "line": 1618,
      "original_line": 1618,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423144701",
      "pull_request_review_id": 3327600804,
      "id": 2423144701,
      "node_id": "PRRC_kwDOABII586QbkD9",
      "diff_hunk": "@@ -248,6 +373,8 @@ class Cluster\n class TxGraphImpl final : public TxGraph\n {\n     friend class Cluster;\n+    friend class SingletonClusterImpl;\n+    friend class GenericClusterImpl;\n     friend class BlockBuilderImpl;",
      "path": "src/txgraph.cpp",
      "position": 299,
      "original_position": 297,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422457512,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed unrelated.",
      "created_at": "2025-10-11T21:40:01Z",
      "updated_at": "2025-10-11T21:40:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423144701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423144701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423148286",
      "pull_request_review_id": 3327605389,
      "id": 2423148286,
      "node_id": "PRRC_kwDOABII586Qbk7-",
      "diff_hunk": "@@ -98,33 +99,23 @@ struct TrimTxData\n class Cluster\n {\n     friend class TxGraphImpl;\n+\n+protected:\n     using GraphIndex = TxGraph::GraphIndex;\n     using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n-    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n-    DepGraph<SetType> m_depgraph;\n-    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n-     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n-     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n-    std::vector<GraphIndex> m_mapping;\n-    /** The current linearization of the cluster. m_linearization.size() equals\n-     *  m_depgraph.TxCount(). This is always kept topological. */\n-    std::vector<DepGraphIndex> m_linearization;\n     /** The quality level of m_linearization. */\n     QualityLevel m_quality{QualityLevel::NONE};\n-    /** Which position this Cluster has in Graph::ClusterSet::m_clusters[m_quality]. */\n+    /** Which position this Cluster has in TxGraphImpl::ClusterSet::m_clusters[m_quality]. */\n     ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n-    /** Which level this Cluster is at in the graph (-1=not inserted, 0=main, 1=staging). */\n-    int m_level{-1};\n     /** Sequence number for this Cluster (for tie-breaking comparison between equal-chunk-feerate\n         transactions in distinct clusters). */\n     uint64_t m_sequence;",
      "path": "src/txgraph.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422890998,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Without `m_quality` and `m_setindex` private, I think this would be confusing. They feel like they belong together.",
      "created_at": "2025-10-11T21:45:05Z",
      "updated_at": "2025-10-11T21:45:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423148286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423148286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": 110,
      "original_start_line": 110,
      "start_side": "RIGHT",
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423151243",
      "pull_request_review_id": 3327609195,
      "id": 2423151243,
      "node_id": "PRRC_kwDOABII586QblqL",
      "diff_hunk": "@@ -452,63 +452,72 @@ FUZZ_TARGET(clusterlin_depgraph_sim)\n         }\n     };\n \n+    auto last_compaction_pos{real.PositionRange()};\n+\n     LIMITED_WHILE(provider.remaining_bytes() > 0, 1000) {\n-        uint8_t command = provider.ConsumeIntegral<uint8_t>();\n-        if (num_tx_sim == 0 || ((command % 3) <= 0 && num_tx_sim < TestBitSet::Size())) {\n-            // AddTransaction.\n-            auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n-            auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n-            FeeFrac feerate{fee, size};\n-            // Apply to DepGraph.\n-            auto idx = real.AddTransaction(feerate);\n-            // Verify that the returned index is correct.\n-            assert(!sim[idx].has_value());\n-            for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n-                if (!sim[i].has_value()) {\n-                    assert(idx == i);\n-                    break;\n+        int command = provider.ConsumeIntegral<uint8_t>() % 4;\n+        while (true) {\n+            // Iterate decreasing command until an applicable branch is found.\n+            if (num_tx_sim < TestBitSet::Size() && command-- == 0) {\n+                // AddTransaction.\n+                auto fee = provider.ConsumeIntegralInRange<int64_t>(-0x8000000000000, 0x7ffffffffffff);\n+                auto size = provider.ConsumeIntegralInRange<int32_t>(1, 0x3fffff);\n+                FeeFrac feerate{fee, size};\n+                // Apply to DepGraph.\n+                auto idx = real.AddTransaction(feerate);\n+                // Verify that the returned index is correct.\n+                assert(!sim[idx].has_value());\n+                for (DepGraphIndex i = 0; i < TestBitSet::Size(); ++i) {\n+                    if (!sim[i].has_value()) {\n+                        assert(idx == i);\n+                        break;\n+                    }\n                 }\n-            }\n-            // Update sim.\n-            sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n-            ++num_tx_sim;\n-            continue;\n-        }\n-        if ((command % 3) <= 1 && num_tx_sim > 0) {\n-            // AddDependencies.\n-            DepGraphIndex child = idx_fn();\n-            auto parents = subset_fn();\n-            // Apply to DepGraph.\n-            real.AddDependencies(parents, child);\n-            // Apply to sim.\n-            sim[child]->second |= parents;\n-            continue;\n-        }\n-        if (num_tx_sim > 0) {\n-            // Remove transactions.\n-            auto del = set_fn();\n-            // Propagate all ancestry information before deleting anything in the simulation (as\n-            // intermediary transactions may be deleted which impact connectivity).\n-            anc_update_fn();\n-            // Compare the state of the transactions being deleted.\n-            for (auto i : del) check_fn(i);\n-            // Apply to DepGraph.\n-            real.RemoveTransactions(del);\n-            // Apply to sim.\n-            for (DepGraphIndex i = 0; i < sim.size(); ++i) {\n-                if (sim[i].has_value()) {\n-                    if (del[i]) {\n-                        --num_tx_sim;\n-                        sim[i] = std::nullopt;\n-                    } else {\n-                        sim[i]->second -= del;\n+                // Update sim.\n+                sim[idx] = {feerate, TestBitSet::Singleton(idx)};\n+                ++num_tx_sim;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // AddDependencies.\n+                DepGraphIndex child = idx_fn();\n+                auto parents = subset_fn();\n+                // Apply to DepGraph.\n+                real.AddDependencies(parents, child);\n+                // Apply to sim.\n+                sim[child]->second |= parents;\n+                break;\n+            } else if (num_tx_sim > 0 && command-- == 0) {\n+                // Remove transactions.\n+                auto del = set_fn();\n+                // Propagate all ancestry information before deleting anything in the simulation (as\n+                // intermediary transactions may be deleted which impact connectivity).\n+                anc_update_fn();\n+                // Compare the state of the transactions being deleted.\n+                for (auto i : del) check_fn(i);\n+                // Apply to DepGraph.\n+                real.RemoveTransactions(del);",
      "path": "src/test/fuzz/cluster_linearize.cpp",
      "position": 95,
      "original_position": 95,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422907481,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unrelated, indeed.\r\n\r\nAlso, I wouldn't be surprised if the cost of a CTZ to find the next set bit, and the less predictable access pattern, is greater than the cost of performing two ANDs on unused positions. In either case, I don't think this matters.",
      "created_at": "2025-10-11T21:51:11Z",
      "updated_at": "2025-10-11T21:51:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423151243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423151243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 498,
      "original_line": 498,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423153015",
      "pull_request_review_id": 3327610937,
      "id": 2423153015,
      "node_id": "PRRC_kwDOABII586QbmF3",
      "diff_hunk": "@@ -511,6 +643,29 @@ class TxGraphImpl final : public TxGraph\n     void ClearChunkData(Entry& entry) noexcept;\n     /** Give an Entry a ChunkData object. */\n     void CreateChunkData(GraphIndex idx, LinearizationIndex chunk_count) noexcept;\n+    /** Create an empty GenericClusterImpl object. */\n+    std::unique_ptr<GenericClusterImpl> CreateEmptyGenericCluster() noexcept\n+    {\n+        return std::make_unique<GenericClusterImpl>(m_next_sequence_counter++);\n+    }\n+    /** Create an empty SingletonClusterImpl object. */\n+    std::unique_ptr<SingletonClusterImpl> CreateEmptySingletonCluster() noexcept\n+    {\n+        return std::make_unique<SingletonClusterImpl>(m_next_sequence_counter++);\n+    }\n+    /** Create an empty Cluster of the appropriate implementation for the specified (maximum) tx\n+     *  count. */\n+    std::unique_ptr<Cluster> CreateEmptyCluster(DepGraphIndex tx_count) noexcept\n+    {\n+        if (tx_count >= SingletonClusterImpl::MIN_INTENDED_TX_COUNT && tx_count <= SingletonClusterImpl::MAX_TX_COUNT) {",
      "path": "src/txgraph.cpp",
      "position": 347,
      "original_position": 345,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422929107,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think of the `MIN_INTENDED_TX_COUNT` and `MAX_TX_COUNT` as the best emulation of having `static` versions of `MinIntendedTxCount()` and `MaxTxCount()` (because in C++, class methods cannot be virtual, so they can't be made part of the `Cluster` formal interface). So we're stuck with two versions: a polymorphic instance member function, and a non-polymorphic class member variable.",
      "created_at": "2025-10-11T21:56:46Z",
      "updated_at": "2025-10-11T21:56:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423153015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423153015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 662,
      "original_line": 662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423159000",
      "pull_request_review_id": 3327619186,
      "id": 2423159000,
      "node_id": "PRRC_kwDOABII586QbnjY",
      "diff_hunk": "",
      "path": "src/cluster_linearize.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2423058928,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The first two here are sort of expected, as they're only in instantiations with the MultiIntBitSet as set type. There is another fuzz test that verifies the behavior of that instance as correct, and specifically, equivalent to IntBitSet. At higher levels `IntBitSet` is the only one used in actual production code, while `MultiIntBitSet` is only used in tests (for example, in the txgraph fuzz simulation).",
      "created_at": "2025-10-11T22:01:27Z",
      "updated_at": "2025-10-11T22:01:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423159000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423159000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423160407",
      "pull_request_review_id": 3327621122,
      "id": 2423160407,
      "node_id": "PRRC_kwDOABII586Qbn5X",
      "diff_hunk": "",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409128894,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think so; it needs a different approach.\r\n\r\nThe current approach copies in linearization order. A faster approach (which would need additional logic in `DepGraph` too) would return the DepGraphIndex order of transactions, and applies offsets.\r\n\r\nI'll consider this in my (not yet pushed) updates to #32545, which introduce a substantial change: allowing linearizations to be non-topological. That currently requires merging in two phases (first copy all transactions, then all dependencies). An offset approach may be simpler there.",
      "created_at": "2025-10-11T22:04:42Z",
      "updated_at": "2025-10-11T22:04:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423160407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423160407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1439,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423160627",
      "pull_request_review_id": 3327621316,
      "id": 2423160627,
      "node_id": "PRRC_kwDOABII586Qbn8z",
      "diff_hunk": "@@ -155,72 +148,211 @@ class Cluster\n         return m_quality == QualityLevel::NEEDS_SPLIT ||\n                m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n     }\n+\n+    // Generic helper functions\n+\n+    /** Determine the maximum number of transactions this cluster can hold. */\n+    virtual DepGraphIndex GetMaxTxCount() const noexcept = 0;\n+    /** Total memory usage currently for this Cluster, including all its dynamic memory, plus Cluster\n+     *  structure itself, and ClusterSet::m_clusters entry. */\n+    virtual size_t TotalMemoryUsage() const noexcept = 0;\n     /** Get the number of transactions in this Cluster. */\n-    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    virtual LinearizationIndex GetTxCount() const noexcept = 0;",
      "path": "src/txgraph.cpp",
      "position": 74,
      "original_position": 79,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "5ac32aa441bf3ec1f1fa826f689405bc4a7b7354",
      "in_reply_to_id": 2409138316,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, resolving.",
      "created_at": "2025-10-11T22:05:25Z",
      "updated_at": "2025-10-11T22:05:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423160627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423160627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423166549",
      "pull_request_review_id": 3327630105,
      "id": 2423166549,
      "node_id": "PRRC_kwDOABII586QbpZV",
      "diff_hunk": "@@ -1213,23 +1628,23 @@ Cluster* TxGraphImpl::FindCluster(GraphIndex idx, int level) const noexcept\n         // If the locator has the entry marked as explicitly removed, stop.\n         if (entry.m_locator[l].IsRemoved()) break;\n         // Otherwise, we have found the topmost ClusterSet that contains this entry.\n-        return entry.m_locator[l].cluster;\n+        return {entry.m_locator[l].cluster, l};\n     }\n     // If no non-empty locator was found, or an explicitly removed was hit, return nothing.\n-    return nullptr;\n+    return {nullptr, -1};\n }\n \n Cluster* TxGraphImpl::PullIn(Cluster* cluster) noexcept\n {\n     int to_level = GetTopLevel();\n     Assume(to_level == 1);\n-    int level = cluster->m_level;\n+    int level = cluster->GetLevel(*this);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 1052,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422338701,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-11T22:12:43Z",
      "updated_at": "2025-10-11T22:12:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423166549",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423166549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423166682",
      "pull_request_review_id": 3327630234,
      "id": 2423166682,
      "node_id": "PRRC_kwDOABII586Qbpba",
      "diff_hunk": "@@ -2906,6 +3433,21 @@ std::vector<TxGraph::Ref*> TxGraphImpl::Trim() noexcept\n     return ret;\n }\n \n+size_t TxGraphImpl::GetMainMemoryUsage() noexcept\n+{\n+    // Make sure splits/merges are applied, as memory usage may not be representative otherwise.\n+    SplitAll(/*up_to_level=*/0);\n+    ApplyDependencies(/*level=*/0);\n+    // Compute memory usage",
      "path": "src/txgraph.cpp",
      "position": 1673,
      "original_position": 1647,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422360601,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment in the txgraph.h definition of the function.",
      "created_at": "2025-10-11T22:13:01Z",
      "updated_at": "2025-10-11T22:13:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423166682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423166682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3442,
      "original_line": 3442,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423166756",
      "pull_request_review_id": 3327630282,
      "id": 2423166756,
      "node_id": "PRRC_kwDOABII586Qbpck",
      "diff_hunk": "@@ -707,6 +884,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 432,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422371348,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-11T22:13:08Z",
      "updated_at": "2025-10-11T22:13:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423166756",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423166756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 899,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423166844",
      "pull_request_review_id": 3327630497,
      "id": 2423166844,
      "node_id": "PRRC_kwDOABII586Qbpd8",
      "diff_hunk": "@@ -957,7 +1336,17 @@ uint64_t Cluster::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::\n     return size;\n }\n \n-bool Cluster::Split(TxGraphImpl& graph) noexcept\n+uint64_t SingletonClusterImpl::AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept\n+{\n+    if (m_graph_index  == GraphIndex(-1)) return 0;",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 783,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422371564,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-11T22:13:14Z",
      "updated_at": "2025-10-11T22:13:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423166844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423166844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423167152",
      "pull_request_review_id": 3327631129,
      "id": 2423167152,
      "node_id": "PRRC_kwDOABII586Qbpiw",
      "diff_hunk": "@@ -1037,46 +1430,62 @@ bool Cluster::Split(TxGraphImpl& graph) noexcept\n     return true;\n }\n \n-void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+bool SingletonClusterImpl::Split(TxGraphImpl& graph, int level) noexcept\n+{\n+    Assume(NeedsSplitting());\n+    if (GetTxCount() == 0) {\n+        // The cluster is now empty.\n+        graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n+        return true;\n+    } else {\n+        // Nothing changed.\n+        graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::OPTIMAL);\n+        Updated(graph, level);\n+        return false;\n+    }\n+}\n+\n+void GenericClusterImpl::Merge(TxGraphImpl& graph, int level, Cluster& other) noexcept\n {\n     /** Vector to store the positions in this Cluster for each position in other. */\n-    std::vector<DepGraphIndex> remap(other.m_depgraph.PositionRange());\n+    std::vector<DepGraphIndex> remap(other.GetDepGraphIndexRange());\n     // Iterate over all transactions in the other Cluster (the one being absorbed).\n-    for (auto pos : other.m_linearization) {\n-        auto idx = other.m_mapping[pos];\n+    other.ExtractTransactions([&](DepGraphIndex pos, GraphIndex idx, FeePerWeight feerate, SetType other_parents) noexcept {\n         // Copy the transaction into this Cluster, and remember its position.\n-        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        auto new_pos = m_depgraph.AddTransaction(feerate);\n         remap[pos] = new_pos;\n-        if (new_pos == m_mapping.size()) {\n-            m_mapping.push_back(idx);\n-        } else {\n-            m_mapping[new_pos] = idx;\n-        }\n+        // Since this cluster must have been made hole-free before being merged into, all added\n+        // transactions should appear at the end.\n+        Assume(new_pos == m_mapping.size());",
      "path": "src/txgraph.cpp",
      "position": 911,
      "original_position": 907,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422374209,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-11T22:13:20Z",
      "updated_at": "2025-10-11T22:13:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423167152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423167152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1460,
      "original_line": 1460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423167564",
      "pull_request_review_id": 3327631703,
      "id": 2423167564,
      "node_id": "PRRC_kwDOABII586QbppM",
      "diff_hunk": "@@ -820,32 +1113,52 @@ std::vector<Cluster*> TxGraphImpl::GetConflicts() const noexcept\n     return ret;\n }\n \n-Cluster* Cluster::CopyToStaging(TxGraphImpl& graph) const noexcept\n+Cluster* GenericClusterImpl::CopyToStaging(TxGraphImpl& graph) const noexcept\n {\n     // Construct an empty Cluster.\n-    auto ret = std::make_unique<Cluster>(graph.m_next_sequence_counter++);\n+    auto ret = graph.CreateEmptyGenericCluster();\n     auto ptr = ret.get();\n-    // Copy depgraph, mapping, and linearization/\n+    // Copy depgraph, mapping, and linearization.\n     ptr->m_depgraph = m_depgraph;\n     ptr->m_mapping = m_mapping;\n     ptr->m_linearization = m_linearization;\n     // Insert the new Cluster into the graph.\n+    graph.InsertCluster(/*level=*/1, std::move(ret), m_quality);\n+    // Update its Locators.\n+    ptr->Updated(graph, /*level=*/1);\n+    // Update memory usage.\n+    graph.GetClusterSet(/*level=*/1).m_cluster_usage += ptr->TotalMemoryUsage();\n+    return ptr;\n+}\n+\n+Cluster* SingletonClusterImpl::CopyToStaging(TxGraphImpl& graph) const noexcept\n+{\n+    // Construct an empty Cluster.\n+    auto ret = graph.CreateEmptySingletonCluster();\n+    auto ptr = ret.get();\n+    // Copy data.\n+    ptr->m_graph_index = m_graph_index;\n+    ptr->m_feerate = m_feerate;\n+    // Insert the new Cluster into the graph.\n     graph.InsertCluster(1, std::move(ret), m_quality);\n     // Update its Locators.\n-    ptr->Updated(graph);\n+    ptr->Updated(graph, 1);",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 622,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422453665,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-11T22:13:26Z",
      "updated_at": "2025-10-11T22:13:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423167564",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423167564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423167919",
      "pull_request_review_id": 3327632159,
      "id": 2423167919,
      "node_id": "PRRC_kwDOABII586Qbpuv",
      "diff_hunk": "@@ -707,6 +884,89 @@ uint64_t Cluster::GetTotalTxSize() const noexcept\n     return ret;\n }\n \n+DepGraphIndex GenericClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(graph_idx != GraphIndex(-1));\n+    auto ret = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_idx);\n+    m_linearization.push_back(ret);\n+    return ret;\n+}\n+\n+\n+DepGraphIndex SingletonClusterImpl::AppendTransaction(GraphIndex graph_idx, FeePerWeight feerate) noexcept\n+{\n+    Assume(m_graph_index == GraphIndex(-1));\n+    m_graph_index = graph_idx;\n+    m_feerate = feerate;\n+    return 0;\n+}\n+\n+void GenericClusterImpl::AddDependencies(SetType parent, DepGraphIndex child) noexcept",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 438,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422454996,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-11T22:13:32Z",
      "updated_at": "2025-10-11T22:13:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423167919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423167919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 905,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423168296",
      "pull_request_review_id": 3327632591,
      "id": 2423168296,
      "node_id": "PRRC_kwDOABII586Qbp0o",
      "diff_hunk": "@@ -485,11 +615,13 @@ class TxGraphImpl final : public TxGraph\n     void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n     /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n     *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n-    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n-    /** Extract a Cluster from its ClusterSet. */\n+    Cluster* FindCluster(GraphIndex idx, int level) const noexcept { return FindClusterAndLevel(idx, level).first; }\n+    /** Like FindClusterAndLevel, but also return what level the match was found in (-1 if not found). */",
      "path": "src/txgraph.cpp",
      "position": 1,
      "original_position": 317,
      "commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422459512,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-11T22:13:41Z",
      "updated_at": "2025-10-11T22:13:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423168296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423168296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 619,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423169215",
      "pull_request_review_id": 3327634086,
      "id": 2423169215,
      "node_id": "PRRC_kwDOABII586QbqC_",
      "diff_hunk": "@@ -891,42 +1204,108 @@ void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove\n             [&](auto pos) { return todo[pos]; }), m_linearization.end());\n         quality = QualityLevel::NEEDS_SPLIT;\n     }\n-    graph.SetClusterQuality(m_level, m_quality, m_setindex, quality);\n-    Updated(graph);\n+    Compact();\n+    graph.GetClusterSet(level).m_cluster_usage += TotalMemoryUsage();\n+    graph.SetClusterQuality(level, m_quality, m_setindex, quality);\n+    Updated(graph, level);\n }\n \n-void Cluster::Clear(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::ApplyRemovals(TxGraphImpl& graph, int level, std::span<GraphIndex>& to_remove) noexcept\n {\n+    // We can only remove the one transaction this Cluster has.\n+    Assume(!to_remove.empty());\n+    Assume(GetTxCount());\n+    Assume(to_remove.front() == m_graph_index);\n+    // Pop all copies of m_graph_index from the front of to_remove (at least one, but there may be\n+    // multiple).\n+    do {\n+        to_remove = to_remove.subspan(1);\n+    } while (!to_remove.empty() && to_remove.front() == m_graph_index);\n+    // Clear this cluster.\n+    graph.ClearLocator(level, m_graph_index, m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+    m_graph_index = GraphIndex(-1);\n+    graph.SetClusterQuality(level, m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    // No need to account for m_cluster_usage changes here, as SingletonClusterImpl has constant\n+    // memory usage.\n+}\n+\n+void GenericClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    graph.GetClusterSet(level).m_cluster_usage -= TotalMemoryUsage();\n     for (auto i : m_linearization) {\n-        graph.ClearLocator(m_level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n+        graph.ClearLocator(level, m_mapping[i], m_quality == QualityLevel::OVERSIZED_SINGLETON);\n     }\n     m_depgraph = {};\n     m_linearization.clear();\n     m_mapping.clear();\n }\n \n-void Cluster::MoveToMain(TxGraphImpl& graph) noexcept\n+void SingletonClusterImpl::Clear(TxGraphImpl& graph, int level) noexcept\n+{\n+    Assume(GetTxCount());",
      "path": "src/txgraph.cpp",
      "position": 714,
      "original_position": 705,
      "commit_id": "023cd5a5469ad61205bf7bb1135895f2b4a20ea9",
      "original_commit_id": "7421e58dee402ee8b5b58a18684953a89ad350d7",
      "in_reply_to_id": 2422903361,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-10-11T22:13:54Z",
      "updated_at": "2025-10-11T22:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33157#discussion_r2423169215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2423169215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33157"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1247,
      "original_line": 1247,
      "side": "RIGHT"
    }
  ]
}
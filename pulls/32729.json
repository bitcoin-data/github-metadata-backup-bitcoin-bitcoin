{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729",
    "id": 2584507258,
    "node_id": "PR_kwDOABII586aDHN6",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32729",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32729.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32729.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/3219b59c47d5a487a1129f702602f58ca9285342",
    "number": 32729,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "test,refactor: extract script template helpers & widen sigop count coverage",
    "user": {
      "login": "l0rinc",
      "id": 1841944,
      "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l0rinc",
      "html_url": "https://github.com/l0rinc",
      "followers_url": "https://api.github.com/users/l0rinc/followers",
      "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
      "organizations_url": "https://api.github.com/users/l0rinc/orgs",
      "repos_url": "https://api.github.com/users/l0rinc/repos",
      "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/l0rinc/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "### Summary\r\n\r\nThis PR extracts a set of cheap, inline helpers for recognizing the most common script templates, clarifies the definition of valid op-codes for pre-Taproot scripts, and splits the existing \"deserialize + check-block\" benchmark into three orthogonal micro-benchmarks.  \r\nThe change is behavior-neutral for consensus and policy - every modified call-site performs the same checks as before, just through clearer helper functions.\r\n\r\n### Context\r\n\r\nWhile working on [`GetSigOpCount` optimizations for known script templates](https://github.com/bitcoin/bitcoin/pull/32532) I noticed that feature-test coverage was [thin for this code path](https://maflcko.github.io/b-c-cov/total.coverage/src/script/script.cpp.gcov.html).  \r\nThis PR therefore adds tests for error cases (malformed push-data encodings) and for the expected sigop totals of the various script templates (including edge cases like a sigop after an `OP_RETURN`).\r\n\r\nGiven the difficulty of reviewing the [original optimizations themselves](https://github.com/bitcoin/bitcoin/pull/32532#issuecomment-2950665350), I split all test / benchmark work into this standalone PR.  \r\nThe recent burst of sigops related refactor activity ([#31624](https://github.com/bitcoin/bitcoin/pull/31624), [#32521](https://github.com/bitcoin/bitcoin/pull/32521), [#32533](https://github.com/bitcoin/bitcoin/pull/32533)) underlines the need for extra safety.\r\n\r\nThe refactors here eliminate magic numbers, deduplicate template checks, and lay groundwork for future performance work.\r\n\r\n### Structure\r\n\r\n* **Benchmarks** - first commits separate deserialization+hashing, validation, and sigop counting so each cost can be measured independently.  \r\n* **Template helpers** - tiny, mechanical commits move each script-template check into `script.h`, replace all ad-hoc byte-checks, and add tests where necessary.  \r\n* **Tests** - a full script-test suite covering malformed `PUSHDATA` sequences and the pre-taproot / accurate sigop totals for every standard template.  \r\n* **pre-taproot opcode ceiling** - documents, enforces, and tests that `OP_CHECKSIGADD` > `MAX_OPCODE`.\r\n* **Extra fuzzing** - enabled all possible opcodes in `ConsumeOpcodeType`",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2025-06-11T14:44:28Z",
    "updated_at": "2025-10-25T02:43:57Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "9ffaba5b08d821066c5b85531a861edf0be44ddb",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "l0rinc:l0rinc/sigop-testing",
      "ref": "l0rinc/sigop-testing",
      "sha": "3219b59c47d5a487a1129f702602f58ca9285342",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 674169038,
        "node_id": "R_kgDOKC8Azg",
        "name": "bitcoin",
        "full_name": "l0rinc/bitcoin",
        "owner": {
          "login": "l0rinc",
          "id": 1841944,
          "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/l0rinc",
          "html_url": "https://github.com/l0rinc",
          "followers_url": "https://api.github.com/users/l0rinc/followers",
          "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
          "organizations_url": "https://api.github.com/users/l0rinc/orgs",
          "repos_url": "https://api.github.com/users/l0rinc/repos",
          "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/l0rinc/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/l0rinc/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/l0rinc/bitcoin",
        "archive_url": "https://api.github.com/repos/l0rinc/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/l0rinc/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/l0rinc/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/l0rinc/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/l0rinc/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/l0rinc/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/l0rinc/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/l0rinc/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/l0rinc/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/l0rinc/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/l0rinc/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/l0rinc/bitcoin/events",
        "forks_url": "https://api.github.com/repos/l0rinc/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/l0rinc/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/l0rinc/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/l0rinc/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/l0rinc/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/l0rinc/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/l0rinc/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/l0rinc/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/l0rinc/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/l0rinc/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/l0rinc/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/l0rinc/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/l0rinc/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:l0rinc/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/l0rinc/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/l0rinc/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/l0rinc/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/l0rinc/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/l0rinc/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/l0rinc/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/l0rinc/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/l0rinc/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/l0rinc/bitcoin/hooks",
        "svn_url": "https://github.com/l0rinc/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 274611,
        "default_branch": "master",
        "open_issues_count": 12,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-24T19:09:20Z",
        "created_at": "2023-08-03T09:49:12Z",
        "updated_at": "2025-10-22T15:57:00Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "dadf15f88cbad37538d85415ae5da12d4f0f1721",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38073,
        "stargazers_count": 86391,
        "watchers_count": 86391,
        "size": 295240,
        "default_branch": "master",
        "open_issues_count": 741,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-24T20:25:13Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-25T01:34:57Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 504,
    "deletions": 204,
    "changed_files": 26,
    "commits": 17,
    "review_comments": 127,
    "comments": 9
  },
  "events": [
    {
      "event": "commented",
      "id": 2963122620,
      "node_id": "IC_kwDOABII586wnam8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2963122620",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T14:44:32Z",
      "updated_at": "2025-10-25T02:43:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32729.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3115365742), [hodlinator](https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3117474040) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#33645](https://github.com/bitcoin/bitcoin/pull/33645) (refactor: optimize: avoid allocations in script & policy verification by Raimo33)\n* [#32554](https://github.com/bitcoin/bitcoin/pull/32554) (bench: replace embedded raw block with configurable block generator by l0rinc)\n* [#32317](https://github.com/bitcoin/bitcoin/pull/32317) (kernel: Separate UTXO set access from validation functions by TheCharlatan)\n* [#31868](https://github.com/bitcoin/bitcoin/pull/31868) ([IBD] specialize block serialization by l0rinc)\n* [#31682](https://github.com/bitcoin/bitcoin/pull/31682) ([IBD] specialize CheckBlock's input & coinbase checks by l0rinc)\n* [#29060](https://github.com/bitcoin/bitcoin/pull/29060) (Policy: Report debug message why inputs are non standard by ismaelsadeeq)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-2963122620",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "renamed",
      "id": 18096108144,
      "node_id": "RTE_lADOABII5866_H3nzwAAAAQ2nLJw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18096108144",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T14:46:14Z",
      "rename": {
        "from": "test,refactor: sigops",
        "to": "test: extract script template helpers & widen sigop count coverage"
      }
    },
    {
      "event": "labeled",
      "id": 18096109274,
      "node_id": "LE_lADOABII5866_H3nzwAAAAQ2nLba",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18096109274",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T14:46:17Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "renamed",
      "id": 18096453480,
      "node_id": "RTE_lADOABII5866_H3nzwAAAAQ2ofdo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18096453480",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T15:02:25Z",
      "rename": {
        "from": "test: extract script template helpers & widen sigop count coverage",
        "to": "test,refactor: extract script template helpers & widen sigop count coverage"
      }
    },
    {
      "event": "ready_for_review",
      "id": 18099752595,
      "node_id": "RFRE_lADOABII5866_H3nzwAAAAQ21E6T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18099752595",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T18:21:25Z"
    },
    {
      "event": "labeled",
      "id": 18102627041,
      "node_id": "LE_lADOABII5866_H3nzwAAAAQ3ACrh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18102627041",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T22:14:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18113104532,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAAQ3oAqU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18113104532",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0582b630d7b61108bc37eaa91e9761e9923f5aed",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/0582b630d7b61108bc37eaa91e9761e9923f5aed",
      "created_at": "2025-06-12T11:12:47Z"
    },
    {
      "event": "unlabeled",
      "id": 18115228099,
      "node_id": "UNLE_lADOABII5866_H3nzwAAAAQ3wHHD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18115228099",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-12T13:07:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18725479148,
      "node_id": "LE_lADOABII5866_H3nzwAAAARcICLs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18725479148",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T10:23:38Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3096072785,
      "node_id": "IC_kwDOABII5864ilJR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3096072785",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T10:23:40Z",
      "updated_at": "2025-07-21T10:23:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/43965124848</sub>\n<sub>LLM reason (✨ experimental): The failure is caused by a compilation error in policy.cpp where a boolean value is incorrectly passed to a function expecting a CScript reference.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-3096072785",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18736001025,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARcwLAB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18736001025",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5d29ce5c441656a3116d7151e78cd800ace6288e",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/5d29ce5c441656a3116d7151e78cd800ace6288e",
      "created_at": "2025-07-21T19:57:44Z"
    },
    {
      "event": "commented",
      "id": 3098376004,
      "node_id": "IC_kwDOABII5864rXdE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3098376004",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T19:58:48Z",
      "updated_at": "2025-07-21T19:58:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased after https://github.com/bitcoin/bitcoin/pull/32521/files#diff-ea6d307faa4ec9dfa5abcf6858bc19603079f2b8e110e1d62da4df98f4bdb9c0R184",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-3098376004",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "unlabeled",
      "id": 18739438037,
      "node_id": "UNLE_lADOABII5866_H3nzwAAAARc9SHV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18739438037",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-22T00:17:02Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18864273057,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARkZfah",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18864273057",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6bf4c8d48f61089254532b065d9ca8e1c2bf6868",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/6bf4c8d48f61089254532b065d9ca8e1c2bf6868",
      "created_at": "2025-07-28T20:40:17Z"
    },
    {
      "event": "commented",
      "id": 3129749041,
      "node_id": "IC_kwDOABII5866jC4x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3129749041",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T20:42:00Z",
      "updated_at": "2025-07-28T20:42:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased after https://github.com/bitcoin/bitcoin/pull/32279 - updating the tests with the new convenience template helpers instead of using `Solver` for them. Ready for review again.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-3129749041",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "reviewed",
      "id": 3086147229,
      "node_id": "PRR_kwDOABII58638t6d",
      "url": null,
      "actor": null,
      "commit_id": "06cb252c8285746737e3385886da2efd1ab41f5a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-05T00:22:14Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3086147229",
      "submitted_at": "2025-08-05T00:22:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18981662008,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARrZS04",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18981662008",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1d49b3b3bd93b246dd70e26145735653a4baf45e",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/1d49b3b3bd93b246dd70e26145735653a4baf45e",
      "created_at": "2025-08-05T02:21:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18981691594,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARrZaDK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18981691594",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "db4bf84c87bc27f10c0ca393469ec13e61b64fd1",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/db4bf84c87bc27f10c0ca393469ec13e61b64fd1",
      "created_at": "2025-08-05T02:25:20Z"
    },
    {
      "event": "labeled",
      "id": 18981814355,
      "node_id": "LE_lADOABII5866_H3nzwAAAARrZ4BT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18981814355",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T02:39:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3153073760,
      "node_id": "IC_kwDOABII58678BZg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3153073760",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T02:39:18Z",
      "updated_at": "2025-08-05T02:39:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `MSan, depends`: https://github.com/bitcoin/bitcoin/runs/47383324322</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a compilation error in script_ops.cpp: 'GetSigOpCount' is missing in 'CScript'.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-3153073760",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18982513382,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARrcirm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18982513382",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/f8208e92bd103359f8c3ceb3361eb7904099e994",
      "created_at": "2025-08-05T03:56:58Z"
    },
    {
      "event": "unlabeled",
      "id": 18983160358,
      "node_id": "UNLE_lADOABII5866_H3nzwAAAARrfAom",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18983160358",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T05:04:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3087824321,
      "node_id": "PRR_kwDOABII5864DHXB",
      "url": null,
      "actor": null,
      "commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-05T12:34:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review f8208e92bd103359f8c3ceb3361eb7904099e994. Thanks for the updates, and I started reviewing the next chunk of this. Overall the changes seem helpful and well-considered and the extra test and benchmark coverage seem like they should be useful.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3087824321",
      "submitted_at": "2025-08-05T12:34:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "reviewed",
      "id": 3088705783,
      "node_id": "PRR_kwDOABII5864Gej3",
      "url": null,
      "actor": null,
      "commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-05T16:02:27Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3088705783",
      "submitted_at": "2025-08-05T16:02:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "reviewed",
      "id": 3089148272,
      "node_id": "PRR_kwDOABII5864IKlw",
      "url": null,
      "actor": null,
      "commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-05T18:41:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK f8208e92bd103359f8c3ceb3361eb7904099e994. I finished reviewing this and didn't see any problems, just left various suggestions. The changes overall seem nice for making this code less confusing and adding better test & benchmark coverage.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3089148272",
      "submitted_at": "2025-08-05T18:41:55Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19002879870,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARsqO9-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19002879870",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dbf0a6791474efd8a498eb4e1ea15319f159ab14",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/dbf0a6791474efd8a498eb4e1ea15319f159ab14",
      "created_at": "2025-08-06T02:13:33Z"
    },
    {
      "event": "commented",
      "id": 3157187483,
      "node_id": "IC_kwDOABII5868Ltub",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3157187483",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T02:15:59Z",
      "updated_at": "2025-08-06T02:31:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Addressed or responded to all concerns, thanks for spending the time to review this.\r\nI've extended the fuzzer to use the whole range of possible opcodes, I'm curious to see if it reveals any new failures.\r\nThe change consists of tiny, simple changes, other reviewers are welcome.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-3157187483",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "review_requested",
      "id": 19002913873,
      "node_id": "RRE_lADOABII5866_H3nzwAAAARsqXRR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19002913873",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T02:17:52Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19003011827,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARsqvLz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19003011827",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dd1a7ab428a7c7f87b2a02580aca0d593c2de68a",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/dd1a7ab428a7c7f87b2a02580aca0d593c2de68a",
      "created_at": "2025-08-06T02:30:44Z"
    },
    {
      "event": "labeled",
      "id": 19003017614,
      "node_id": "LE_lADOABII5866_H3nzwAAAARsqwmO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19003017614",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T02:31:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3157208110,
      "node_id": "IC_kwDOABII5868Lywu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3157208110",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T02:31:37Z",
      "updated_at": "2025-08-06T02:31:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/47470624304</sub>\n<sub>LLM reason (✨ experimental): Lint check failed due to locale-dependent code usage in src/test/sigopcount_tests.cpp.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-3157208110",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "unlabeled",
      "id": 19003591687,
      "node_id": "UNLE_lADOABII5866_H3nzwAAAARss8wH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19003591687",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T03:41:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3097866742,
      "node_id": "PRR_kwDOABII5864pbH2",
      "url": null,
      "actor": null,
      "commit_id": "dd1a7ab428a7c7f87b2a02580aca0d593c2de68a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-07T19:26:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK dd1a7ab428a7c7f87b2a02580aca0d593c2de68a. Thanks for the updates! I left a few more suggestions, but nothing important.\r\n\r\nI think it might be good to link directly to your optimization commit d76d7531dfcc7ef2d104b8977a2239cb1fc89119 in the PR description since it helps explain the changes here and bring them together.\r\n\r\nOn style changes in the CScript methods I think they are an improvement overall, though personally I'd try to avoid front/back methods and magic numbers and write them more like:\r\n\r\n```c++\r\n        return size() == (5 + HASH160_SIZE) &&\r\n               (*this)[0] == OP_DUP &&\r\n               (*this)[1] == OP_HASH160 &&\r\n               (*this)[2] == HASH160_SIZE &&\r\n               (*this)[3 + HASH160_SIZE] == OP_EQUALVERIFY &&\r\n               (*this)[4 + HASH160_SIZE] == OP_CHECKSIG;\r\n```\r\n\r\nBut no need to bikeshed and whatever you or other reviewers prefer seems fine. Existing style also is fine.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3097866742",
      "submitted_at": "2025-08-07T19:26:23Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19044587138,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARvJVaC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19044587138",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "54c2a4cb47959a109580c45dc835949819436f8f",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/54c2a4cb47959a109580c45dc835949819436f8f",
      "created_at": "2025-08-07T22:32:03Z"
    },
    {
      "event": "reviewed",
      "id": 3098836449,
      "node_id": "PRR_kwDOABII5864tH3h",
      "url": null,
      "actor": null,
      "commit_id": "54c2a4cb47959a109580c45dc835949819436f8f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-07T22:33:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pushed a new set of smaller, mostly test fixes - thanks for detailed review again!\r\n\r\n> though personally I'd try to avoid front/back methods\r\n\r\nDone, they're more uniform this way. I left the hard-coded indexes for redundancy.\r\n\r\n",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3098836449",
      "submitted_at": "2025-08-07T22:33:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "labeled",
      "id": 19044821767,
      "node_id": "LE_lADOABII5866_H3nzwAAAARvKOsH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19044821767",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T23:00:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3166075721,
      "node_id": "IC_kwDOABII5868tntJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3166075721",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T23:00:10Z",
      "updated_at": "2025-08-07T23:00:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `no wallet, libbitcoinkernel`: https://github.com/bitcoin/bitcoin/runs/47636996984</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a compilation error due to calling CountP2SHSigOps with one argument instead of the required two.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-3166075721",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19044901755,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARvKiN7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19044901755",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/748b10bbe864191ef49c32e0963e048b939f6088",
      "created_at": "2025-08-07T23:10:58Z"
    },
    {
      "event": "unlabeled",
      "id": 19045459122,
      "node_id": "UNLE_lADOABII5866_H3nzwAAAARvMqSy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19045459122",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T00:28:22Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3094123250,
      "node_id": "PRR_kwDOABII5864bJLy",
      "url": null,
      "actor": null,
      "commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-08T13:35:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK 748b10bbe864191ef49c32e0963e048b939f6088\r\n\r\nOverall incremental improvements, good to add more coverage of sigop-counting considering it is in vogue.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3094123250",
      "submitted_at": "2025-08-08T13:35:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "reviewed",
      "id": 3101158381,
      "node_id": "PRR_kwDOABII58641-vt",
      "url": null,
      "actor": null,
      "commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-08T15:24:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 748b10bbe864191ef49c32e0963e048b939f6088. Just small cleanups and suggested changes since last review. Thanks for the updates!",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3101158381",
      "submitted_at": "2025-08-08T15:24:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "review_requested",
      "id": 19057451388,
      "node_id": "RRE_lADOABII5866_H3nzwAAAARv6aF8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19057451388",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T15:24:36Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19080610552,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARxSwL4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19080610552",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cf8f476ef25e4fe43e67970ee2ec6a265d49e763",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/cf8f476ef25e4fe43e67970ee2ec6a265d49e763",
      "created_at": "2025-08-11T06:02:11Z"
    },
    {
      "event": "reviewed",
      "id": 3103702427,
      "node_id": "PRR_kwDOABII5864_r2b",
      "url": null,
      "actor": null,
      "commit_id": "cf8f476ef25e4fe43e67970ee2ec6a265d49e763",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-11T06:03:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews, addressed all concerns - either by applying it or explaining my take. Let me know if I left out something.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3103702427",
      "submitted_at": "2025-08-11T06:03:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "reviewed",
      "id": 3104559199,
      "node_id": "PRR_kwDOABII5865C9Bf",
      "url": null,
      "actor": null,
      "commit_id": "cf8f476ef25e4fe43e67970ee2ec6a265d49e763",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T13:15:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed cf8f476ef25e4fe43e67970ee2ec6a265d49e763\r\n\r\nMain thing remaining is question about motivation behind moving methods (see inline comment).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3104559199",
      "submitted_at": "2025-08-12T13:15:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "commented",
      "id": 3179315792,
      "node_id": "IC_kwDOABII5869gIJQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3179315792",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T13:19:41Z",
      "updated_at": "2025-08-12T13:19:41Z",
      "author_association": "MEMBER",
      "body": "https://github.com/bitcoin/bitcoin/actions/runs/16872143934/job/47788785406?pr=32729#step:6:4338:\r\n```bash\r\n test/script_tests.cpp(1620): Entering test case \"GetOpName_no_missing_mnemonics\"\r\n/home/runner/work/_temp/src/test/script_tests.cpp:1622:25: runtime error: load of value 256, which is not a valid value for type 'opcodetype'\r\n    #0 0x559b4df3e847 in script_tests::GetOpName_no_missing_mnemonics::test_method() /home/runner/work/_temp/build-asan/src/test/./test/script_tests.cpp:1622:25\r\n    #1 0x559b4df3ba1b in script_tests::GetOpName_no_missing_mnemonics_invoker() /home/runner/work/_temp/build-asan/src/test/./test/script_tests.cpp:1620:1\r\n    #2 0x559b4d0f360d in boost::function0<void>::operator()() const /usr/include/boost/function/function_template.hpp:771:14\r\n    #3 0x559b4d174328 in boost::detail::forward::operator()() /usr/include/boost/test/impl/execution_monitor.ipp:1395:32\r\n    #4 0x559b4d174328 in boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) /usr/include/boost/function/function_template.hpp:137:18\r\n    #5 0x559b4d16de2d in boost::function0<int>::operator()() const /usr/include/boost/function/function_template.hpp:771:14\r\n    #6 0x559b4d0598fc in int boost::detail::do_invoke<boost::shared_ptr<boost::detail::translator_holder_base>, boost::function<int ()>>(boost::shared_ptr<boost::detail::translator_holder_base> const&, boost::function<int ()> const&) /usr/include/boost/test/impl/execution_monitor.ipp:308:30\r\n    #7 0x559b4d0598fc in boost::execution_monitor::catch_signals(boost::function<int ()> const&) /usr/include/boost/test/impl/execution_monitor.ipp:910:16\r\n    #8 0x559b4d059e0d in boost::execution_monitor::execute(boost::function<int ()> const&) /usr/include/boost/test/impl/execution_monitor.ipp:1308:16\r\n    #9 0x559b4d052498 in boost::execution_monitor::vexecute(boost::function<void ()> const&) /usr/include/boost/test/impl/execution_monitor.ipp:1404:5\r\n    #10 0x559b4d052498 in boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::function<void ()> const&, unsigned long) /usr/include/boost/test/impl/unit_test_monitor.ipp:49:9\r\n    #11 0x559b4d0b5fd4 in boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /usr/include/boost/test/impl/framework.ipp:815:44\r\n    #12 0x559b4d0b4e9b in boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /usr/include/boost/test/impl/framework.ipp:784:58\r\n    #13 0x559b4d0b4e9b in boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned long, boost::unit_test::framework::state::random_generator_helper const*) /usr/include/boost/test/impl/framework.ipp:784:58\r\n    #14 0x559b4d0508eb in boost::unit_test::framework::run(unsigned long, bool) /usr/include/boost/test/impl/framework.ipp:1722:29\r\n    #15 0x559b4d07f350 in boost::unit_test::unit_test_main(boost::unit_test::test_suite* (*)(int, char**), int, char**) /usr/include/boost/test/impl/unit_test_main.ipp:250:9\r\n    #16 0x7f2c01d841c9  (/lib/x86_64-linux-gnu/libc.so.6+0x2a1c9) (BuildId: 282c2c16e7b6600b0b22ea0c99010d2795752b5f)\r\n    #17 0x7f2c01d8428a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2a28a) (BuildId: 282c2c16e7b6600b0b22ea0c99010d2795752b5f)\r\n    #18 0x559b4cf44984 in _start (/home/runner/work/_temp/build-asan/bin/test_bitcoin+0x12c5984) (BuildId: 536afe9665aa0f1665ca9d21723b3d0c1c5aa9a6)\r\n\r\nSUMMARY: UndefinedBehaviorSanitizer: invalid-enum-load /home/runner/work/_temp/src/test/script_tests.cpp:1622:25 \r\n```",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#issuecomment-3179315792",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32729"
    },
    {
      "event": "comment_deleted",
      "id": 19114139097,
      "node_id": "CDE_lADOABII5866_H3nzwAAAARzSp3Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19114139097",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T14:24:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19117078835,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARzd3kz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19117078835",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "738b620f314780751c4db3af87c9f22792723125",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/738b620f314780751c4db3af87c9f22792723125",
      "created_at": "2025-08-12T16:25:23Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU5MzM1NGM0NTczOGIxMzZkYTg5ZjJmYzZkN2FlNmVhNmUwMzgzZmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/593354c45738b136da89f2fc6d7ae6ea6e0383fd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/593354c45738b136da89f2fc6d7ae6ea6e0383fd",
      "tree": {
        "sha": "8227e92cdc5166112df4c021351ec1e68bfa2df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8227e92cdc5166112df4c021351ec1e68bfa2df0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec484bd5ce437bde29f35a77d23c771468828e25",
          "sha": "ec484bd5ce437bde29f35a77d23c771468828e25",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ec484bd5ce437bde29f35a77d23c771468828e25"
        }
      ],
      "message": "bench: measure `CheckBlock` speed separately from serialization\n\nTo measure CheckBlock performance in isolation from deserialization overhead, a ResetChecked() method was introduced to re-enable the block's validation state, allowing repeated validation of the same block instance.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-01-18T10:43:26Z"
      },
      "sha": "593354c45738b136da89f2fc6d7ae6ea6e0383fd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxNzNkYjE3ZDFlNDg0MmJhMDFkZWM1NTRiNzg0ZWY0OTEzNzNjN2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3173db17d1e4842ba01dec554b784ef491373c7d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3173db17d1e4842ba01dec554b784ef491373c7d",
      "tree": {
        "sha": "25e1a10e597ca471598842f8a8dd2bcb3c500ad0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25e1a10e597ca471598842f8a8dd2bcb3c500ad0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/593354c45738b136da89f2fc6d7ae6ea6e0383fd",
          "sha": "593354c45738b136da89f2fc6d7ae6ea6e0383fd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/593354c45738b136da89f2fc6d7ae6ea6e0383fd"
        }
      ],
      "message": "bench: measure `SigOpsBlock` speed separately\n\nAdd benchmark to measure the performance of counting legacy signature operations in a block, independent of other validation steps.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-01-18T10:43:26Z"
      },
      "sha": "3173db17d1e4842ba01dec554b784ef491373c7d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc0ZDM1MDhjYmUwNmQyMjc2ZjhjODcxMjYyYWJiMDg2ZTliMmU0MjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74d3508cbe06d2276f8c871262abb086e9b2e421",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/74d3508cbe06d2276f8c871262abb086e9b2e421",
      "tree": {
        "sha": "f7f8487e62fe2b1f6df6286d6125ceb125226cac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7f8487e62fe2b1f6df6286d6125ceb125226cac"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3173db17d1e4842ba01dec554b784ef491373c7d",
          "sha": "3173db17d1e4842ba01dec554b784ef491373c7d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3173db17d1e4842ba01dec554b784ef491373c7d"
        }
      ],
      "message": "refactor: rename `GetSigOpCount` to `CountSigOps`\n\nPrevious `GetSigOpCount` method was overloaded to take either a `bool` or `scriptSig` as a parameter, without an explanation of when to call each overload.\nNew `CountSigOps` method avoids the overloading and documents how it should be called. The name was chosen to be clearer and consistent with the newer `CountWitnessSigOps` function.\nBesides the renames, also added primitive argument name reminders to the call sites to highlight the meaning of the call.\n\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-05-14T14:05:05Z"
      },
      "sha": "74d3508cbe06d2276f8c871262abb086e9b2e421"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVmMGUzODU2ZGVhYzVjMmNiNTExMDFkYzkxODUyZGU4MTgyNWM0MzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef0e3856deac5c2cb51101dc91852de81825c431",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0e3856deac5c2cb51101dc91852de81825c431",
      "tree": {
        "sha": "ae54b250aeeef50688035eb956cd4045b5a1264e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae54b250aeeef50688035eb956cd4045b5a1264e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74d3508cbe06d2276f8c871262abb086e9b2e421",
          "sha": "74d3508cbe06d2276f8c871262abb086e9b2e421",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/74d3508cbe06d2276f8c871262abb086e9b2e421"
        }
      ],
      "message": "refactor: split off `P2SH` from `GetSigOpCount`\n\nThe name `CountP2SHSigOps` was chosen to match `CountWitnessSigOps`, since the two functions are counterparts for handling `P2SH` and `SegWit` scripts.\nAlso, it's called by `GetP2SHSigOpCount` in consensus, so the new name clarifies its significance.\n\nA goal of this change is to make the `CheckSigopsBIP54` function match the BIP54 specification which says \"For each input in the transaction, count the number of CHECKSIG and CHECKMULTISIG in the input scriptSig and previous output's scriptPubKey, including the P2SH redeemScript.\"\n\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-05T01:34:22Z"
      },
      "sha": "ef0e3856deac5c2cb51101dc91852de81825c431"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY0ODBhNTdlYzJiMjViOTM5OWM5YWI3ZGU4Y2E1MDkxZDMyOWNkYjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f480a57ec2b25b9399c9ab7de8ca5091d329cdb4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f480a57ec2b25b9399c9ab7de8ca5091d329cdb4",
      "tree": {
        "sha": "5c93b0dc53ef71e2a611e3e07dd7423376b2535d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c93b0dc53ef71e2a611e3e07dd7423376b2535d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef0e3856deac5c2cb51101dc91852de81825c431",
          "sha": "ef0e3856deac5c2cb51101dc91852de81825c431",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0e3856deac5c2cb51101dc91852de81825c431"
        }
      ],
      "message": "refactor: move the script-hash-size constants to `script.h`\n\nThis enables using these constants in script.h definitions in upcoming commits. No naming conflicts exist with these constant names.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:15:17Z"
      },
      "sha": "f480a57ec2b25b9399c9ab7de8ca5091d329cdb4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE0N2Q0ZjY3N2JmNTBmNDllOWFjMjZkZjJhM2I3NjhkMjE2NTNkNDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a47d4f677bf50f49e9ac26df2a3b768d21653d42",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a47d4f677bf50f49e9ac26df2a3b768d21653d42",
      "tree": {
        "sha": "09d1153472c4b239ba34c0600555f8b8a5fe07cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09d1153472c4b239ba34c0600555f8b8a5fe07cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f480a57ec2b25b9399c9ab7de8ca5091d329cdb4",
          "sha": "f480a57ec2b25b9399c9ab7de8ca5091d329cdb4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f480a57ec2b25b9399c9ab7de8ca5091d329cdb4"
        }
      ],
      "message": "refactor: move `IsPayToScriptHash` to header\n\nMoved the implementation to the header (implicitly inline + noexcept), removed redundant `this` and parentheses and changed the `0x14`/`20` magic constants to descriptive `HASH160_OUTPUT_SIZE`.\nSee: https://learnmeabitcoin.com/technical/script/p2sh/#scriptpubkey",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:25:30Z"
      },
      "sha": "a47d4f677bf50f49e9ac26df2a3b768d21653d42"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEwYmZmNThjNzE4YWE0ZjBmNzgwNDE3NTE1Mjg3Nzk4NmEzNTgwMzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10bff58c718aa4f0f7804175152877986a358034",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/10bff58c718aa4f0f7804175152877986a358034",
      "tree": {
        "sha": "fce6129aa713ff5331bbaf97d772993400fefe67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fce6129aa713ff5331bbaf97d772993400fefe67"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a47d4f677bf50f49e9ac26df2a3b768d21653d42",
          "sha": "a47d4f677bf50f49e9ac26df2a3b768d21653d42",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a47d4f677bf50f49e9ac26df2a3b768d21653d42"
        }
      ],
      "message": "refactor: move `IsPayToWitnessScriptHash` to header\n\nMoved the implementation to the header (implicitly inline + noexcept), removed redundant `this` and parentheses, and changed the `0x20` magic constant to descriptive `WITNESS_V0_SCRIPTHASH_SIZE`.\nSee: https://learnmeabitcoin.com/technical/script/p2wsh/#scriptpubkey",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:26:16Z"
      },
      "sha": "10bff58c718aa4f0f7804175152877986a358034"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE3YzI5ZmVkODMzM2Y0YWRiMTUxZmRlM2U3ZDU0MWRjM2JkNWE5YzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7c29fed8333f4adb151fde3e7d541dc3bd5a9c6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a7c29fed8333f4adb151fde3e7d541dc3bd5a9c6",
      "tree": {
        "sha": "22daf68cb384847af6a15479742c9b4acaf8a919",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22daf68cb384847af6a15479742c9b4acaf8a919"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10bff58c718aa4f0f7804175152877986a358034",
          "sha": "10bff58c718aa4f0f7804175152877986a358034",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/10bff58c718aa4f0f7804175152877986a358034"
        }
      ],
      "message": "refactor: move `IsPayToAnchor` to header\n\nMoved the implementation to the header (implicitly inline + noexcept), removed redundant `this` and parentheses.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:30:35Z"
      },
      "sha": "a7c29fed8333f4adb151fde3e7d541dc3bd5a9c6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc1YWYzZTYyODVkNWUzNTI0ZmQ5MWQ2MWY3MGNmODRlZmQ1MzUzNmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75af3e6285d5e3524fd91d61f70cf84efd53536c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/75af3e6285d5e3524fd91d61f70cf84efd53536c",
      "tree": {
        "sha": "e7d1b1e5dab00eb1ac6f6cdac05e4a284207a80c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7d1b1e5dab00eb1ac6f6cdac05e4a284207a80c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7c29fed8333f4adb151fde3e7d541dc3bd5a9c6",
          "sha": "a7c29fed8333f4adb151fde3e7d541dc3bd5a9c6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a7c29fed8333f4adb151fde3e7d541dc3bd5a9c6"
        }
      ],
      "message": "refactor: move `IsPayToTaproot` to header\n\nMoved the implementation to the header (implicitly inline + noexcept), removed redundant `this` and parentheses, and changed the `0x20` magic constant to descriptive `WITNESS_V1_TAPROOT_SIZE`.\nSee: https://learnmeabitcoin.com/technical/script/p2tr/#scriptpubkey",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:31:25Z"
      },
      "sha": "75af3e6285d5e3524fd91d61f70cf84efd53536c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI5ZTI5NTU4NTUwZWUzZjNjNDJiNjAzYzVlNzcxNzdjMWIyYzYzYWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9e29558550ee3f3c42b603c5e77177c1b2c63af",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e29558550ee3f3c42b603c5e77177c1b2c63af",
      "tree": {
        "sha": "a7253a5518e29f7522303a6a9de1ee6c359ac309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7253a5518e29f7522303a6a9de1ee6c359ac309"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75af3e6285d5e3524fd91d61f70cf84efd53536c",
          "sha": "75af3e6285d5e3524fd91d61f70cf84efd53536c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/75af3e6285d5e3524fd91d61f70cf84efd53536c"
        }
      ],
      "message": "refactor: extract `IsPayToPubKeyHash` helper to script.h\n\nThe usages in `compressor.cpp` and `solver.cpp` were also updated to use the new method.\nSee: https://learnmeabitcoin.com/technical/script/p2pkh/#scriptpubkey",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:16:19Z"
      },
      "sha": "b9e29558550ee3f3c42b603c5e77177c1b2c63af"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRkZWEzN2I0MGZjMWIwOWQ1Yzc2YTI0ZWFiZmJjNDc1YjY0Zjk4OGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dea37b40fc1b09d5c76a24eabfbc475b64f988e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4dea37b40fc1b09d5c76a24eabfbc475b64f988e",
      "tree": {
        "sha": "95747156c4e29eab77e78d9cb6b9170e1683db8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95747156c4e29eab77e78d9cb6b9170e1683db8f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9e29558550ee3f3c42b603c5e77177c1b2c63af",
          "sha": "b9e29558550ee3f3c42b603c5e77177c1b2c63af",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e29558550ee3f3c42b603c5e77177c1b2c63af"
        }
      ],
      "message": "refactor: extract `IsCompressedPayToPubKey` helper to script.h\n\nThe usages in `compressor.cpp` and `solver.cpp` were also updated to use the new method.\nNote that compressor has additional prefix checks as well, which are not properly exercised by the `compressed_p2pk` unit test.\nSee: https://learnmeabitcoin.com/technical/script/p2pk/#scriptpubkey and https://learnmeabitcoin.com/technical/keys/public-key/#compressed",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:19:53Z"
      },
      "sha": "4dea37b40fc1b09d5c76a24eabfbc475b64f988e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhlM2M4YWZjZTQ0MzU3ZTUwYWUwMmNkZTBlNzgzMjllM2UwMTRjYTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e3c8afce44357e50ae02cde0e78329e3e014ca6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8e3c8afce44357e50ae02cde0e78329e3e014ca6",
      "tree": {
        "sha": "6dfcd63157d8c867687218bee09af282c2e15559",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dfcd63157d8c867687218bee09af282c2e15559"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dea37b40fc1b09d5c76a24eabfbc475b64f988e",
          "sha": "4dea37b40fc1b09d5c76a24eabfbc475b64f988e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4dea37b40fc1b09d5c76a24eabfbc475b64f988e"
        }
      ],
      "message": "refactor: extract `IsUncompressedPayToPubKey` helper to script.h\n\nThe usages in `compressor.cpp` and `solver.cpp` were also updated to use the new method.\nNote that compressor has additional prefix checks as well, which are not properly exercised by the `uncompressed_p2pk` unit test.\nSee: https://learnmeabitcoin.com/technical/script/p2pk/#scriptpubkey and https://learnmeabitcoin.com/technical/keys/public-key/#uncompressed",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T16:25:26Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:20:02Z"
      },
      "sha": "8e3c8afce44357e50ae02cde0e78329e3e014ca6"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19117083950,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARzd40u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19117083950",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8ec20fbe3fe476e44a60bba2ed90f8bff39fc4db",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/8ec20fbe3fe476e44a60bba2ed90f8bff39fc4db",
      "created_at": "2025-08-12T16:25:40Z"
    },
    {
      "event": "reviewed",
      "id": 3111519834,
      "node_id": "PRR_kwDOABII5865dgZa",
      "url": null,
      "actor": null,
      "commit_id": "8ec20fbe3fe476e44a60bba2ed90f8bff39fc4db",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T16:26:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, addresses remaining nits + fixed test opcode name iteration boundary failure: https://github.com/bitcoin/bitcoin/compare/cf8f476ef25e4fe43e67970ee2ec6a265d49e763..738b620f314780751c4db3af87c9f22792723125\r\n(rebased in a separate push)",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3111519834",
      "submitted_at": "2025-08-12T16:26:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA0NWRhYTk3M2NlM2Q5OTcxY2E4ZThlYjE2ZTM2MWQwYmFkMDFhODY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/045daa973ce3d9971ca8e8eb16e361d0bad01a86",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/045daa973ce3d9971ca8e8eb16e361d0bad01a86",
      "tree": {
        "sha": "4c2548e016ee498163d57123de8a66f8f2eea02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c2548e016ee498163d57123de8a66f8f2eea02a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e3c8afce44357e50ae02cde0e78329e3e014ca6",
          "sha": "8e3c8afce44357e50ae02cde0e78329e3e014ca6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8e3c8afce44357e50ae02cde0e78329e3e014ca6"
        }
      ],
      "message": "refactor: add `IsPayToWitnessPubKeyHash` helper to script.h\n\nThis template helper isn't used outside of tests yet, but for the sake of completeness - and since we're planning on using this for upcoming optimizations -, it's added as a last step.\n\nSee: https://learnmeabitcoin.com/technical/script/p2wpkh/#scriptpubkey",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T22:19:09Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-06-04T19:21:43Z"
      },
      "sha": "045daa973ce3d9971ca8e8eb16e361d0bad01a86"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAzMjRiOWVkMjNiNDdiNzQzYmVmNzQ4YzcwZTExZGY1ZDg5MjhkZjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0324b9ed23b47b743bef748c70e11df5d8928df5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0324b9ed23b47b743bef748c70e11df5d8928df5",
      "tree": {
        "sha": "c99a65c520a6fbe59cf8cb6cf679371f2b51f8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c99a65c520a6fbe59cf8cb6cf679371f2b51f8f2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/045daa973ce3d9971ca8e8eb16e361d0bad01a86",
          "sha": "045daa973ce3d9971ca8e8eb16e361d0bad01a86",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/045daa973ce3d9971ca8e8eb16e361d0bad01a86"
        }
      ],
      "message": "test: add `CountSigOps` edge-cases & known-template coverage\n\n* `CountSigOpsKnownTemplates` asserts the expected legacy/accurate sig-op totals for all common known script templates (P2PKH, P2SH, P2WPKH/WSH, P2TR, compressed & uncompressed P2PK, OP_RETURN, multisig).\n* `CountSigOpsErrors` feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n* `GetOpName_no_missing_mnemonics` checks all opcode names by category.\n\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T22:19:10Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-05-14T14:41:02Z"
      },
      "sha": "0324b9ed23b47b743bef748c70e11df5d8928df5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMyZjdjNTVlYWMyMzI1ZTI1N2VmOGI1YjVmMWNkZGNkODdhYjY5ZDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32f7c55eac2325e257ef8b5b5f1cddcd87ab69d4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/32f7c55eac2325e257ef8b5b5f1cddcd87ab69d4",
      "tree": {
        "sha": "2c157a52c8eee7ad38259fb87a564e132fc61298",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c157a52c8eee7ad38259fb87a564e132fc61298"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0324b9ed23b47b743bef748c70e11df5d8928df5",
          "sha": "0324b9ed23b47b743bef748c70e11df5d8928df5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0324b9ed23b47b743bef748c70e11df5d8928df5"
        }
      ],
      "message": "refactor: distinguish pre-Taproot opcodes from all opcodes in script validation\n\nRenames `HasValidOps()` to `HasValidBaseOps()` and `MAX_OPCODE` to `MAX_BASE_OPCODE` to clarify that pre-Taproot script validation should only accept opcodes up to OP_NOP10 (0xb9).\n\nThis prevents Tapscript-only opcodes like OP_CHECKSIGADD (0xba) from being considered valid in scriptPubKey and scriptSig contexts, where only pre-Taproot opcodes should be allowed.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T22:19:10Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-05T23:07:59Z"
      },
      "sha": "32f7c55eac2325e257ef8b5b5f1cddcd87ab69d4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcwNzA2ZDkxMTk3ZjAwMTU3MzIzZjZjNTMwMTFkODFiYzYwNzQ2NWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70706d91197f00157323f6c53011d81bc607465b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/70706d91197f00157323f6c53011d81bc607465b",
      "tree": {
        "sha": "b7b1ad9d204e78b3a17f2852ca4612c25c8d2f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7b1ad9d204e78b3a17f2852ca4612c25c8d2f8a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32f7c55eac2325e257ef8b5b5f1cddcd87ab69d4",
          "sha": "32f7c55eac2325e257ef8b5b5f1cddcd87ab69d4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/32f7c55eac2325e257ef8b5b5f1cddcd87ab69d4"
        }
      ],
      "message": "test: exercise the `HasValidBaseOps` functionality\n\nAdd explicit test case checking that OP_CHECKSIGADD > MAX_BASE_OPCODE (i.e. that we have opcodes bigger than the max).\nThe other changes in the test are just inlines to reduce scope.\n\nAlso note that `OpCodeParser` deliberately skips `OP_CHECKSIGADD`, see: `script_parse_tests/parse_script`.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T22:19:10Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-05T23:09:36Z"
      },
      "sha": "70706d91197f00157323f6c53011d81bc607465b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMyMTliNTljNDdkNWE0ODdhMTEyOWY3MDI2MDJmNThjYTkyODUzNDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3219b59c47d5a487a1129f702602f58ca9285342",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3219b59c47d5a487a1129f702602f58ca9285342",
      "tree": {
        "sha": "abd37a093fcd14b7df7e1a6696947ed38ed32ba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abd37a093fcd14b7df7e1a6696947ed38ed32ba4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70706d91197f00157323f6c53011d81bc607465b",
          "sha": "70706d91197f00157323f6c53011d81bc607465b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/70706d91197f00157323f6c53011d81bc607465b"
        }
      ],
      "message": "fuzz: Extend `ConsumeOpcodeType` to cover all possible ops\n\n`OP_CHECKSIGADD` wasn't tested this way at all, but we should fuzz all possible values anyway.",
      "committer": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-12T22:19:10Z"
      },
      "author": {
        "name": "Lőrinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-08-06T01:47:12Z"
      },
      "sha": "3219b59c47d5a487a1129f702602f58ca9285342"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19123705145,
      "node_id": "HRFPE_lADOABII5866_H3nzwAAAARz3JU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19123705145",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/3219b59c47d5a487a1129f702602f58ca9285342",
      "created_at": "2025-08-12T22:21:11Z"
    },
    {
      "event": "reviewed",
      "id": 3115365742,
      "node_id": "PRR_kwDOABII5865sLVu",
      "url": null,
      "actor": null,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T12:12:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 3219b59c47d5a487a1129f702602f58ca9285342. A lot of test improvements since last review, only comment and whitespace changes in non-test code. I think I'm caught up on the discussion now too\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3115365742",
      "submitted_at": "2025-08-13T12:12:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    },
    {
      "event": "review_requested",
      "id": 19135948300,
      "node_id": "RRE_lADOABII5866_H3nzwAAAAR0l2YM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19135948300",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T12:12:39Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3117474040,
      "node_id": "PRR_kwDOABII58650OD4",
      "url": null,
      "actor": null,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T19:49:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 3219b59c47d5a487a1129f702602f58ca9285342\r\n\r\nRenaming the sigop-counting functions while changing behavior of `CScript::GetSigOpCount(const CScript& scriptSig)`/`CountP2SHSigOps(const CScript& scriptSig, const CScript& scriptPubKey)` makes it relatively easy to verify the change, as no lingering `GetSigOpCount` overloads remain.\r\n\r\nRenaming `HasValidOps()` -> `HasValidBaseOps()` makes one paranoid that we haven't been supporting Tapscript op codes everywhere, but the function is not used in those contexts.\r\n\r\nI disagree with moving `IsPayToTaproot()` etc from *.CPP* to *.H*, but it's not blocking.\r\n\r\nStay humble and stack commits! :)\r\n(Not advocating for merging commits, it is helpful to keep similar transforms applied to different areas in separate commits, **other reviewers shouldn't be scared by the high count of them**).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3117474040",
      "submitted_at": "2025-08-13T19:49:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252835441",
      "pull_request_review_id": 3086147229,
      "id": 2252835441,
      "node_id": "PRRC_kwDOABII586GR4px",
      "diff_hunk": "@@ -534,7 +534,7 @@ class CScript : public CScriptBase\n      * counted more accurately, assuming they are of the form\n      *  ... OP_N CHECKMULTISIG ...\n      */\n-    unsigned int GetSigOpCount(bool fAccurate) const;\n+    unsigned int GetLegacySigOpCount(bool fAccurate) const;",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "06cb252c8285746737e3385886da2efd1ab41f5a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: rename `GetSigOpCount` to `GetLegacySigOpCount`\" (06cb252c8285746737e3385886da2efd1ab41f5a)\r\n\r\nI like getting rid of this overload, but I found the code here very confusing before this change, and I think renaming this to `GetLegacySigOpCount` makes the confusion worse because this method is not acting like a legacy function when it's called with fAccurate = true. At first I though you might have been using legacy here to mean \"pre-segwit\" which is different than the way the `GetLegacySigOpCount(CTransaction)` uses legacy to mean \"pre-p2sh\". But after noticing this is also called by the segwit `WitnessSigOps` function, I don't see how the term \"legacy\" even applies here at all.\r\n\r\nI think I would suggest renaming this to `CountSigOps` to be consistent with the `CountWitnessSigOps` function, and giving it better documentation. I also think the other overload should be a standalone function not a CScript method because it is not really using the CScript.\r\n\r\nI think a change like the one below could be a lot clearer:\r\n\r\n<details><summary>diff</summary>\r\n<p>\r\n\r\n```diff\r\n--- a/src/consensus/tx_verify.cpp\r\n+++ b/src/consensus/tx_verify.cpp\r\n@@ -113,10 +113,10 @@ unsigned int GetLegacySigOpCount(const CTransaction& tx)\r\n {\r\n     unsigned int nSigOps = 0;\r\n     for (const auto& txin : tx.vin) {\r\n-        nSigOps += txin.scriptSig.GetLegacySigOpCount(/*fAccurate=*/false);\r\n+        nSigOps += txin.scriptSig.CountSigOps(/*fAccurate=*/false);\r\n     }\r\n     for (const auto& txout : tx.vout) {\r\n-        nSigOps += txout.scriptPubKey.GetLegacySigOpCount(/*fAccurate=*/false);\r\n+        nSigOps += txout.scriptPubKey.CountSigOps(/*fAccurate=*/false);\r\n     }\r\n     return nSigOps;\r\n }\r\n@@ -133,7 +133,7 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\r\n         assert(!coin.IsSpent());\r\n         const CTxOut &prevout = coin.out;\r\n         if (prevout.scriptPubKey.IsPayToScriptHash())\r\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\r\n+            nSigOps += CountP2SHSigOps(tx.vin[i].scriptSig);\r\n     }\r\n     return nSigOps;\r\n }\r\n--- a/src/policy/policy.cpp\r\n+++ b/src/policy/policy.cpp\r\n@@ -181,8 +181,11 @@ static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inpu\r\n         // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs(VERIFY) with 16 pubkeys\r\n         // or fewer. This method of accounting was introduced by BIP16, and BIP54 reuses it.\r\n         // The GetSigOpCount call on the previous scriptPubKey counts both bare and P2SH sigops.\r\n-        sigops += txin.scriptSig.GetLegacySigOpCount(/*fAccurate=*/true);\r\n-        sigops += prev_txo.scriptPubKey.GetSigOpCount(txin.scriptSig);\r\n+        sigops += txin.scriptSig.CountSigOps(/*fAccurate=*/true);\r\n+        sigops += prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\r\n+        if (prev_txo.scriptPubKey.IsPayToScriptHash()) {\r\n+           sigops += CountP2SHSigOps(txin.scriptSig);\r\n+        }\r\n \r\n         if (sigops > MAX_TX_LEGACY_SIGOPS) {\r\n             return false;\r\n@@ -239,7 +242,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\r\n             if (stack.empty())\r\n                 return false;\r\n             CScript subscript(stack.back().begin(), stack.back().end());\r\n-            if (subscript.GetLegacySigOpCount(/*fAccurate=*/true) > MAX_P2SH_SIGOPS) {\r\n+            if (subscript.CountSigOps(/*fAccurate=*/true) > MAX_P2SH_SIGOPS) {\r\n                 return false;\r\n             }\r\n         }\r\n--- a/src/script/interpreter.cpp\r\n+++ b/src/script/interpreter.cpp\r\n@@ -2084,7 +2084,7 @@ size_t static WitnessSigOps(int witversion, const std::vector<unsigned char>& wi\r\n \r\n         if (witprogram.size() == WITNESS_V0_SCRIPTHASH_SIZE && witness.stack.size() > 0) {\r\n             CScript subscript(witness.stack.back().begin(), witness.stack.back().end());\r\n-            return subscript.GetLegacySigOpCount(/*fAccurate=*/true);\r\n+            return subscript.CountSigOps(/*fAccurate=*/true);\r\n         }\r\n     }\r\n \r\n--- a/src/script/script.cpp\r\n+++ b/src/script/script.cpp\r\n@@ -156,7 +156,7 @@ std::string GetOpName(opcodetype opcode)\r\n     }\r\n }\r\n \r\n-unsigned int CScript::GetLegacySigOpCount(bool fAccurate) const\r\n+unsigned int CScript::CountSigOps(bool fAccurate) const\r\n {\r\n     unsigned int n = 0;\r\n     const_iterator pc = begin();\r\n@@ -180,15 +180,12 @@ unsigned int CScript::GetLegacySigOpCount(bool fAccurate) const\r\n     return n;\r\n }\r\n \r\n-unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\r\n+unsigned int CountP2SHSigOps(const CScript& scriptSig)\r\n {\r\n-    if (!IsPayToScriptHash())\r\n-        return GetLegacySigOpCount(/*fAccurate=*/true);\r\n-\r\n     // This is a pay-to-script-hash scriptPubKey;\r\n     // get the last item that the scriptSig\r\n     // pushes onto the stack:\r\n-    const_iterator pc = scriptSig.begin();\r\n+    CScript::const_iterator pc = scriptSig.begin();\r\n     std::vector<unsigned char> vData;\r\n     while (pc < scriptSig.end())\r\n     {\r\n@@ -201,7 +198,7 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\r\n \r\n     /// ... and return its opcount:\r\n     CScript subscript(vData.begin(), vData.end());\r\n-    return subscript.GetLegacySigOpCount(/*fAccurate=*/true);\r\n+    return subscript.CountSigOps(/*fAccurate=*/true);\r\n }\r\n \r\n bool CScript::IsPayToAnchor() const\r\n--- a/src/script/script.h\r\n+++ b/src/script/script.h\r\n@@ -528,19 +528,20 @@ public:\r\n     }\r\n \r\n     /**\r\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\r\n-     * as 20 sigops. With pay-to-script-hash, that changed:\r\n-     * CHECKMULTISIGs serialized in scriptSigs are\r\n-     * counted more accurately, assuming they are of the form\r\n-     *  ... OP_N CHECKMULTISIG ...\r\n-     */\r\n-    unsigned int GetLegacySigOpCount(bool fAccurate) const;\r\n-\r\n-    /**\r\n-     * Accurately count sigOps, including sigOps in\r\n-     * pay-to-script-hash transactions:\r\n-     */\r\n-    unsigned int GetSigOpCount(const CScript& scriptSig) const;\r\n+    * Count the number of signature operations (sigops) in this script.\r\n+    *\r\n+    * The fAccurate parameter controls how sigops are counted for CHECKMULTISIG\r\n+    * operations. Set fAccurate = true when analyzing P2SH redeem scripts or\r\n+    * SegWit witness scripts, and false when analyzing scriptPubKeys or\r\n+    * scriptSigs.\r\n+    *\r\n+    * Historically, Bitcoin always counted each CHECKMULTISIG as 20 sigops\r\n+    * (MAX_PUBKEYS_PER_MULTISIG), regardless of the number of pubkeys. Starting\r\n+    * with P2SH in version 0.6, CHECKMULTISIG operations inside wrapped scripts\r\n+    * began to be counted more precisely, using the preceding OP_N opcode to\r\n+    * determine the number of pubkeys and thus the number of sigops.\r\n+    */\r\n+    unsigned int CountSigOps(bool fAccurate) const;\r\n \r\n     /*\r\n      * OP_1 <0x4e73>\r\n@@ -606,6 +607,15 @@ public:\r\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\r\n };\r\n \r\n+/**\r\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\r\n+ *\r\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or\r\n+ * P2SH-P2WSH script), this function counts only the non-SegWit sigops.\r\n+ * To count SegWit sigops in such cases, use CountWitnessSigOps.\r\n+ */\r\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);unsigned int CountP2SHSigOps(const CScript& scriptSig);\r\n+\r\n /** Test for OP_SUCCESSx opcodes as defined by BIP342. */\r\n bool IsOpSuccess(const opcodetype& opcode);\r\n \r\n```\r\n</p>\r\n</details>",
      "created_at": "2025-08-05T00:22:13Z",
      "updated_at": "2025-08-05T00:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2252835441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252835441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252952435",
      "pull_request_review_id": 3086297101,
      "id": 2252952435,
      "node_id": "PRRC_kwDOABII586GSVNz",
      "diff_hunk": "@@ -534,7 +534,7 @@ class CScript : public CScriptBase\n      * counted more accurately, assuming they are of the form\n      *  ... OP_N CHECKMULTISIG ...\n      */\n-    unsigned int GetSigOpCount(bool fAccurate) const;\n+    unsigned int GetLegacySigOpCount(bool fAccurate) const;",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "06cb252c8285746737e3385886da2efd1ab41f5a",
      "in_reply_to_id": 2252835441,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, love the inlining of `GetSigOpCount` (bothered me, too - it's a lot clearer this way), and the new `CountSigOps` name as well.\r\nAdded your comments (+ you as co-author, of course) and adjusted all the tests, now that `CountSigOps` is separated from `CountP2SHSigOps`: https://github.com/bitcoin/bitcoin/compare/6bf4c8d48f61089254532b065d9ca8e1c2bf6868..f8208e92bd103359f8c3ceb3361eb7904099e994\r\n\r\nEdit: note, that instead of\r\n```patch\r\n-        sigops += prev_txo.scriptPubKey.GetSigOpCount(txin.scriptSig);\r\n+        sigops += prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\r\n+        if (prev_txo.scriptPubKey.IsPayToScriptHash()) {\r\n+           sigops += CountP2SHSigOps(txin.scriptSig);\r\n+        }\r\n```\r\nI did:\r\n```patch\r\n-        sigops += prev_txo.scriptPubKey.GetSigOpCount(txin.scriptSig);\r\n+        sigops += prev_txo.scriptPubKey.IsPayToScriptHash() ?\r\n+                      CountP2SHSigOps(txin.scriptSig) :\r\n+                      prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\r\n```\r\n\r\nsince I don't think `CountSigOps` should always be applied (even if always `0`)",
      "created_at": "2025-08-05T02:22:54Z",
      "updated_at": "2025-08-05T03:57:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2252952435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252952435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254023250",
      "pull_request_review_id": 3087824321,
      "id": 2254023250,
      "node_id": "PRRC_kwDOABII586GWapS",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,\n+     * and to `false` when analyzing scriptPubKeys or scriptSigs.\n+     *\n+     * Historically, Bitcoin always counted each `CHECKMULTISIG` as\n+     * 20 sigops (`MAX_PUBKEYS_PER_MULTISIG`), regardless of the number of pubkeys.\n+     * Starting with P2SH in version 0.6, `CHECKMULTISIG` operations inside wrapped scripts\n+     * began to be counted more precisely, using the preceding OP_N opcode to determine\n+     * the number of pubkeys and thus the number of sigops.\n      */\n-    unsigned int GetSigOpCount(bool fAccurate) const;\n+    unsigned int CountSigOps(bool fAccurate) const;",
      "path": "src/script/script.h",
      "position": 63,
      "original_position": 22,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "4cbd303ddd7ae500683a7a595f38c5b8ff2de31e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: rename `GetSigOpCount` to `CountSigOps`\" (4cbd303ddd7ae500683a7a595f38c5b8ff2de31e)\r\n\r\nIt's not obvious from commit message why this rename is being done. I think it might help to add some explanation like:\r\n\r\n- Previous `GetSigOpCount` method was overloaded to take either a bool or scriptSig as a parameter, without an explanation of when to call each overload. New `CountSigOps` method avoids the overloading and documents how it should be called. The name was chosen to be clearer and consistent with the newer `CountWitnessSigOps` function.\r\n\r\nI also think it would be reasonable to keep the current method name and just document the method better without renaming it, but I do like the current approach.",
      "created_at": "2025-08-05T11:14:15Z",
      "updated_at": "2025-08-05T12:34:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254023250",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254023250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 553,
      "original_line": 553,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254092329",
      "pull_request_review_id": 3087824321,
      "id": 2254092329,
      "node_id": "PRRC_kwDOABII586GWrgp",
      "diff_hunk": "@@ -612,6 +606,15 @@ class CScriptID : public BaseHash<uint160>\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\n };\n \n+/**\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\n+ *\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or P2SH-P2WSH script),\n+ * this function counts only the non-SegWit sigops.\n+ * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\n+ */\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: split off `P2SH` from `GetSigOpCount`\" (37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935)\r\n\r\nMight be helpful to say what is motivating this change in the commit message. Maybe add:\r\n\r\n- The name `CountP2SHSigOps` was chosen to match `CountWitnessSigOps`, since the two functions are counterparts for handling P2SH and SegWit scripts.",
      "created_at": "2025-08-05T11:42:03Z",
      "updated_at": "2025-08-05T12:34:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254092329",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254092329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254180036",
      "pull_request_review_id": 3087824321,
      "id": 2254180036,
      "node_id": "PRRC_kwDOABII586GXA7E",
      "diff_hunk": "@@ -555,7 +555,13 @@ class CScript : public CScriptBase\n      */\n     static bool IsPayToAnchor(int version, const std::vector<unsigned char>& program);\n \n-    bool IsPayToScriptHash() const;\n+    bool IsPayToScriptHash() const noexcept\n+    {\n+        return size() == 23 &&\n+               front() == OP_HASH160 &&\n+               (*this)[1] == WITNESS_V0_KEYHASH_SIZE &&",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "0d51088d1daa15ade3bf3c57410a0c12df235615",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: pull `IsPayToScriptHash` to header\" (0d51088d1daa15ade3bf3c57410a0c12df235615)\r\n\r\nIt doesn't seem like WITNESS_V0_KEYHASH_SIZE is really the right constant to use for a p2sh script. Maybe should introduce a SCRIPT_HASH_SIZE or similar constant instead? Could also make sense to use the same constant for the memcpy in IsToScriptID",
      "created_at": "2025-08-05T12:21:05Z",
      "updated_at": "2025-08-05T12:34:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254180036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254180036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 562,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254194990",
      "pull_request_review_id": 3087824321,
      "id": 2254194990,
      "node_id": "PRRC_kwDOABII586GXEku",
      "diff_hunk": "@@ -1222,7 +1222,7 @@ BOOST_AUTO_TEST_CASE(script_size_and_capacity_test)\n     // P2TR has direct allocation\n     {\n         const auto script{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey{dummy_pubkey}})};\n-        BOOST_CHECK_EQUAL(GetTxoutType(script), TxoutType::WITNESS_V1_TAPROOT);\n+        BOOST_CHECK(script.IsPayToTaproot());",
      "path": "src/test/script_tests.cpp",
      "position": 44,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "38e89f646221ec0c15158b6ef0007336fec008e3",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: pull `IsPayToTaproot` to header\" (38e89f646221ec0c15158b6ef0007336fec008e3)\r\n\r\nCan commit message explain reason for other changes in this commit, like this test check and the IsWitnessProgram reordering above (assuming they are intentional)",
      "created_at": "2025-08-05T12:27:34Z",
      "updated_at": "2025-08-05T12:34:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254194990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254194990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1229,
      "original_line": 1229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254641829",
      "pull_request_review_id": 3088705783,
      "id": 2254641829,
      "node_id": "PRRC_kwDOABII586GYxql",
      "diff_hunk": "@@ -612,6 +606,15 @@ class CScriptID : public BaseHash<uint160>\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\n };\n \n+/**\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\n+ *\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or P2SH-P2WSH script),\n+ * this function counts only the non-SegWit sigops.\n+ * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\n+ */\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: split off `P2SH` from `GetSigOpCount`\" (37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935)\r\n\r\nTwo things:\r\n\r\n- It might be nice to make `CountP2SHSigOps` function more similar to `CountWitnessSigOps` and accept a `scriptPubKey` argument. It looks like this change also makes call sites simpler.\r\n- I noticed with BIP54 the `CScript::CountSigOps` comment when to use `fAccurate=false` will not be right anymore. Would suggest qualifying the comment with \"When enforcing the `MAX_BLOCK_SIGOPS_COST` limit\".\r\n\r\nBoth changes are included in the diff below. Feel free to use, or keep the current code, or do something different if you prefer\r\n\r\n<details><summary>diff</summary>\r\n<p>\r\n\r\n```diff\r\n--- a/src/consensus/tx_verify.cpp\r\n+++ b/src/consensus/tx_verify.cpp\r\n@@ -131,9 +131,7 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\r\n     {\r\n         const Coin& coin = inputs.AccessCoin(tx.vin[i].prevout);\r\n         assert(!coin.IsSpent());\r\n-        if (coin.out.scriptPubKey.IsPayToScriptHash()) {\r\n-            nSigOps += CountP2SHSigOps(tx.vin[i].scriptSig);\r\n-        }\r\n+        nSigOps += CountP2SHSigOps(tx.vin[i].scriptSig, coin.out.scriptPubKey);\r\n     }\r\n     return nSigOps;\r\n }\r\n--- a/src/policy/policy.cpp\r\n+++ b/src/policy/policy.cpp\r\n@@ -180,10 +180,9 @@ static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inpu\r\n         // This means sigops in the spent scriptPubKey count toward the limit.\r\n         // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs(VERIFY) with 16 pubkeys\r\n         // or fewer. This method of accounting was introduced by BIP16, and BIP54 reuses it.\r\n+        sigops += prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\r\n         sigops += txin.scriptSig.CountSigOps(/*fAccurate=*/true);\r\n-        sigops += prev_txo.scriptPubKey.IsPayToScriptHash() ?\r\n-                      CountP2SHSigOps(txin.scriptSig) :\r\n-                      prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\r\n+        sigops += CountP2SHSigOps(txin.scriptSig, prev_txo.scriptPubKey);\r\n \r\n         if (sigops > MAX_TX_LEGACY_SIGOPS) {\r\n             return false;\r\n--- a/src/script/script.cpp\r\n+++ b/src/script/script.cpp\r\n@@ -180,8 +180,12 @@ unsigned int CScript::CountSigOps(bool fAccurate) const\r\n     return n;\r\n }\r\n \r\n-unsigned int CountP2SHSigOps(const CScript& scriptSig)\r\n+unsigned int CountP2SHSigOps(const CScript& scriptSig, const CScript& scriptPubKey)\r\n {\r\n+    if (!scriptPubKey.IsPayToScriptHash()) {\r\n+        return 0;\r\n+    }\r\n+\r\n     // This is a pay-to-script-hash scriptPubKey;\r\n     // get the last item that the scriptSig\r\n     // pushes onto the stack:\r\n--- a/src/script/script.h\r\n+++ b/src/script/script.h\r\n@@ -531,8 +531,9 @@ public:\r\n      * Count the number of signature operations (sigops) in this script.\r\n      *\r\n      * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\r\n-     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,\r\n-     * and to `false` when analyzing scriptPubKeys or scriptSigs.\r\n+     * When enforcing the `MAX_BLOCK_SIGOPS_COST` limit, set `fAccurate` to `true` when\r\n+     * analyzing P2SH redeem scripts or SegWit witness scripts, and to `false` when analyzing\r\n+     * scriptPubKeys or scriptSigs.\r\n      *\r\n      * Historically, Bitcoin always counted each `CHECKMULTISIG` as\r\n      * 20 sigops (`MAX_PUBKEYS_PER_MULTISIG`), regardless of the number of pubkeys.\r\n@@ -613,7 +614,7 @@ public:\r\n  * this function counts only the non-SegWit sigops.\r\n  * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\r\n  */\r\n-unsigned int CountP2SHSigOps(const CScript& scriptSig);\r\n+unsigned int CountP2SHSigOps(const CScript& scriptSig, const CScript& scriptPubKey);\r\n \r\n /** Test for OP_SUCCESSx opcodes as defined by BIP342. */\r\n bool IsOpSuccess(const opcodetype& opcode);\r\n--- a/src/test/sigopcount_tests.cpp\r\n+++ b/src/test/sigopcount_tests.cpp\r\n@@ -44,7 +44,7 @@ BOOST_AUTO_TEST_CASE(CountSigOps)\r\n     CScript p2sh = GetScriptForDestination(ScriptHash(s1));\r\n     CScript scriptSig;\r\n     scriptSig << OP_0 << Serialize(s1);\r\n-    BOOST_CHECK_EQUAL(CountP2SHSigOps(scriptSig), 3U);\r\n+    BOOST_CHECK_EQUAL(CountP2SHSigOps(scriptSig, p2sh), 3U);\r\n \r\n     std::vector<CPubKey> keys;\r\n     for (int i = 0; i < 3; i++)\r\n@@ -61,7 +61,7 @@ BOOST_AUTO_TEST_CASE(CountSigOps)\r\n     BOOST_CHECK_EQUAL(p2sh.CountSigOps(/*fAccurate=*/false), 0U);\r\n     CScript scriptSig2;\r\n     scriptSig2 << OP_1 << ToByteVector(dummy) << ToByteVector(dummy) << Serialize(s2);\r\n-    BOOST_CHECK_EQUAL(CountP2SHSigOps(scriptSig2), 3U);\r\n+    BOOST_CHECK_EQUAL(CountP2SHSigOps(scriptSig2, p2sh), 3U);\r\n }\r\n \r\n /**\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nEDIT: Simplified GetP2SHSigOpCount after earlier post",
      "created_at": "2025-08-05T15:07:05Z",
      "updated_at": "2025-08-05T18:51:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254641829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254641829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254675962",
      "pull_request_review_id": 3088705783,
      "id": 2254675962,
      "node_id": "PRRC_kwDOABII586GY5_6",
      "diff_hunk": "@@ -562,7 +562,14 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V0_KEYHASH_SIZE &&\n                back() == OP_EQUAL;\n     }\n-    bool IsPayToWitnessScriptHash() const;\n+\n+    bool IsPayToWitnessScriptHash() const noexcept\n+    {\n+        return size() == 34 &&",
      "path": "src/script/script.h",
      "position": 113,
      "original_position": 8,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "3c800a72b6520d94bc3996fa31ecded0f6fab22d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: pull `IsPayToWitnessScriptHash` to header\" (3c800a72b6520d94bc3996fa31ecded0f6fab22d)\r\n\r\nChanging `34` to `WITNESS_V0_SCRIPTHASH_SIZE + 2` might make this a little more self-documenting.\r\n\r\n(I don't mean to bikeshed on use of literals vs constants and front/back in these functions though. I could imagine other developers preferring the literals for concreteness even if I like the constants, and I don't have a strong preference.)",
      "created_at": "2025-08-05T15:20:15Z",
      "updated_at": "2025-08-05T16:02:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254675962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254675962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 595,
      "original_line": 595,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254692162",
      "pull_request_review_id": 3088705783,
      "id": 2254692162,
      "node_id": "PRRC_kwDOABII586GY99C",
      "diff_hunk": "@@ -575,9 +575,14 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V0_SCRIPTHASH_SIZE;\n     }\n \n-    bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;\n+    bool IsPayToTaproot() const noexcept\n+    {\n+        return size() == 34 &&",
      "path": "src/script/script.h",
      "position": 120,
      "original_position": 7,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "38e89f646221ec0c15158b6ef0007336fec008e3",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: pull `IsPayToTaproot` to header\" (38e89f646221ec0c15158b6ef0007336fec008e3)\r\n\r\nSimilar to previous, could replace `34` with `WITNESS_V1_TAPROOT_SIZE + 2` but no strong preference",
      "created_at": "2025-08-05T15:26:16Z",
      "updated_at": "2025-08-05T16:02:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254692162",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254692162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 602,
      "original_line": 602,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254707312",
      "pull_request_review_id": 3088705783,
      "id": 2254707312,
      "node_id": "PRRC_kwDOABII586GZBpw",
      "diff_hunk": "@@ -560,6 +560,16 @@ class CScript : public CScriptBase\n                back() == 0x73;\n     }\n \n+    bool IsPayToPubKeyHash() const noexcept\n+    {\n+        return size() == 25 &&\n+               front() == OP_DUP &&\n+               (*this)[1] == OP_HASH160 &&\n+               (*this)[2] == WITNESS_V0_KEYHASH_SIZE &&",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "5d23e9a4c6fa4aab530889c54565954486572afd",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add `IsPayToPubKeyHash` helper to script.h\" (5d23e9a4c6fa4aab530889c54565954486572afd)\r\n\r\nAgain it seems a little off to use a segwit constant in pre-segwit output. Might be better to stick with literal 20 or maybe introduce a HASH160_SIZE or PUBKEY_HASH_SIZE constant. No strong preference though and technically this should be ok.",
      "created_at": "2025-08-05T15:32:27Z",
      "updated_at": "2025-08-05T16:02:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254707312",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254707312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254716286",
      "pull_request_review_id": 3088705783,
      "id": 2254716286,
      "node_id": "PRRC_kwDOABII586GZD1-",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept\n+    {\n+        return size() == 35 &&",
      "path": "src/script/script.h",
      "position": 128,
      "original_position": 14,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add `IsCompressedPayToPubKey` helper to script.h\" (017f58821fe857a2bb7ac14f2b00b349936391d8)\r\n\r\nI guess it is intentional to replace `CPubKey::COMPRESSED_SIZE + 2` with 35 here?",
      "created_at": "2025-08-05T15:38:37Z",
      "updated_at": "2025-08-05T16:02:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254716286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254716286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254731153",
      "pull_request_review_id": 3088705783,
      "id": 2254731153,
      "node_id": "PRRC_kwDOABII586GZHeR",
      "diff_hunk": "@@ -9,6 +9,7 @@\n #include <attributes.h>\n #include <crypto/common.h>\n #include <prevector.h> // IWYU pragma: export\n+#include <pubkey.h>",
      "path": "src/script/script.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add `IsCompressedPayToPubKey` helper to script.h\" (017f58821fe857a2bb7ac14f2b00b349936391d8)\r\n\r\nSeems reasonable to include pubkey.h but since we are only using constants, it might be better to move constants somewhere.",
      "created_at": "2025-08-05T15:59:54Z",
      "updated_at": "2025-08-05T16:02:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254731153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254731153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254732750",
      "pull_request_review_id": 3088705783,
      "id": 2254732750,
      "node_id": "PRRC_kwDOABII586GZH3O",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept",
      "path": "src/script/script.h",
      "position": 126,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add `IsCompressedPayToPubKey` helper to script.h\" (017f58821fe857a2bb7ac14f2b00b349936391d8)\r\n\r\nMight be good to document that this method does not check the pubkey prefix (even/odd/uncompressed) and verify this is even or odd.",
      "created_at": "2025-08-05T16:02:04Z",
      "updated_at": "2025-08-05T16:02:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254732750",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254732750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 608,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254943653",
      "pull_request_review_id": 3089148272,
      "id": 2254943653,
      "node_id": "PRRC_kwDOABII586GZ7Wl",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey;\n+    dummyKey.MakeNewKey(true);",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 86,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: add `CountSigOps` edge-cases & known-template coverage\" (c194618bb587a2e15ed11f268898599c74f1aa74)\r\n\r\nMaybe add document boolean parameter with `/*fCompressed=*/` here and below",
      "created_at": "2025-08-05T17:36:52Z",
      "updated_at": "2025-08-05T18:41:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254943653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254943653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254951939",
      "pull_request_review_id": 3089148272,
      "id": 2254951939,
      "node_id": "PRRC_kwDOABII586GZ9YD",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 15,
      "original_position": 83,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: add `CountSigOps` edge-cases & known-template coverage\" (c194618bb587a2e15ed11f268898599c74f1aa74)\r\n\r\nMaybe reorder the CountSigOpsKnownTemplates before CountSigOpsErrors to make it easier to understand how the fake scripts differ from real scripts.",
      "created_at": "2025-08-05T17:41:18Z",
      "updated_at": "2025-08-05T18:41:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254951939",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254951939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254970939",
      "pull_request_review_id": 3089148272,
      "id": 2254970939,
      "node_id": "PRRC_kwDOABII586GaCA7",
      "diff_hunk": "@@ -218,8 +218,8 @@ enum opcodetype\n     OP_INVALIDOPCODE = 0xff,\n };\n \n-// Maximum value that an opcode can be\n-static const unsigned int MAX_OPCODE = OP_NOP10;\n+// Highest opcode allowed in pre-Taproot scripts",
      "path": "src/script/script.h",
      "position": 29,
      "original_position": 6,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: make sure OP_CHECKSIGADD isn't considered valid (legacy) sigop\" (f8208e92bd103359f8c3ceb3361eb7904099e994)\r\n\r\nWould suggest dropping \"test:\" prefix from this commit since it is changing non-test code. Could also split this up into a renaming and a test commit.\r\n\r\nAlso I'm not sure it is good to use LEGACY to mean pre-taproot here. In the OutputType enum, legacy seems to means \"pre-segwit\" and in GetLegacySigOpCount legacy seems to mean \"pre-p2sh\", so adding a third definition of \"legacy\" here would be nice to avoid. Maybe call it something like MAX_PRE_TAPSCRIPT_OPCODE or MAX_BASE_OPCODE?",
      "created_at": "2025-08-05T17:50:47Z",
      "updated_at": "2025-08-05T18:41:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254970939",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254970939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254983086",
      "pull_request_review_id": 3089148272,
      "id": 2254983086,
      "node_id": "PRRC_kwDOABII586GaE-u",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey;\n+    dummyKey.MakeNewKey(true);\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript() << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 27,
      "original_position": 96,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: add `CountSigOps` edge-cases & known-template coverage\" (c194618bb587a2e15ed11f268898599c74f1aa74)\r\n\r\nForgot to check sigops here?",
      "created_at": "2025-08-05T17:56:56Z",
      "updated_at": "2025-08-05T18:41:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254983086",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254983086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255009999",
      "pull_request_review_id": 3089148272,
      "id": 2255009999,
      "node_id": "PRRC_kwDOABII586GaLjP",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey;\n+    dummyKey.MakeNewKey(true);\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript() << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript() << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript() << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(script), 0);\n+            const auto single_sigop{CScript() << ToByteVector(CScript() << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript() << OP_PUSHDATA1), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript() << OP_CHECKSIGADD), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript() << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey;\n+            uncompressedKey.MakeNewKey(false);\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+BOOST_AUTO_TEST_CASE(GetOpName_no_missing_mnemonics)\n+{\n+    for (auto op{OP_0}; op < OP_INVALIDOPCODE; op = opcodetype(op + 1)) {\n+        const auto op_name{GetOpName(op)};\n+        BOOST_CHECK(!op_name.empty());\n+        if (op >= OP_PUSHDATA1 && !IsOpSuccess(op)) {",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 172,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: add `CountSigOps` edge-cases & known-template coverage\" (c194618bb587a2e15ed11f268898599c74f1aa74)\r\n\r\nMaybe it would make sense to check that some (most?) of these opcodes actually do satisfy `op_name == \"OP_UNKNOWN\"`, if that is the case.",
      "created_at": "2025-08-05T18:10:46Z",
      "updated_at": "2025-08-05T18:41:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255009999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255009999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255016916",
      "pull_request_review_id": 3089148272,
      "id": 2255016916,
      "node_id": "PRRC_kwDOABII586GaNPU",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: add `CountSigOps` edge-cases & known-template coverage\" (c194618bb587a2e15ed11f268898599c74f1aa74)\r\n\r\nMaybe use `CScript{}` instead of `CScript()` since already using braced initialization for the variable",
      "created_at": "2025-08-05T18:14:36Z",
      "updated_at": "2025-08-05T18:41:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255016916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255016916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255022936",
      "pull_request_review_id": 3089148272,
      "id": 2255022936,
      "node_id": "PRRC_kwDOABII586GaOtY",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: add `CountSigOps` edge-cases & known-template coverage\" (c194618bb587a2e15ed11f268898599c74f1aa74)\r\n\r\nThe checks in this test are very repetitive. You might be able to make it easier understand and maintain by building a `std::vector<CScript>` of invalid scripts and looping over it.",
      "created_at": "2025-08-05T18:17:50Z",
      "updated_at": "2025-08-05T18:41:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255022936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255022936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255054508",
      "pull_request_review_id": 3089148272,
      "id": 2255054508,
      "node_id": "PRRC_kwDOABII586GaWas",
      "diff_hunk": "@@ -27,7 +27,7 @@ class OpCodeParser\n public:\n     OpCodeParser()\n     {\n-        for (unsigned int op = 0; op <= MAX_OPCODE; ++op) {\n+        for (unsigned int op = 0; op <= MAX_LEGACY_OPCODE; ++op) {",
      "path": "src/core_read.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: make sure OP_CHECKSIGADD isn't considered valid (legacy) sigop\" (f8208e92bd103359f8c3ceb3361eb7904099e994)\r\n\r\nI'm confused about whether code that changes in this commit is actually doing the right thing currently, of if some of it should be improved to support taproot opcodes. Would be helpful if commit message could clarify.",
      "created_at": "2025-08-05T18:34:26Z",
      "updated_at": "2025-08-05T18:53:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255054508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255054508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255351551",
      "pull_request_review_id": 3089736417,
      "id": 2255351551,
      "node_id": "PRRC_kwDOABII586Gbe7_",
      "diff_hunk": "@@ -27,7 +27,7 @@ class OpCodeParser\n public:\n     OpCodeParser()\n     {\n-        for (unsigned int op = 0; op <= MAX_OPCODE; ++op) {\n+        for (unsigned int op = 0; op <= MAX_LEGACY_OPCODE; ++op) {",
      "path": "src/core_read.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "in_reply_to_id": 2255054508,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I also found this confusing, it's why I have renamed the max in the first place and why I added tests for `GetOpName`.\r\nBut given that we already had a test making sure that:\r\n```C++\r\nBOOST_CHECK_EXCEPTION(ParseScript(\"OP_CHECKSIGADD\"), std::runtime_error, HasReason(\"script parse error: unknown opcode\"));\r\n```\r\nit seems to be the expected behavior.\r\nAdded a short explanation to the commit message.\r\n\r\n---\r\n\r\nHowever, the fuzz usage in `ConsumeOpcodeType` didn't make sense to me, so I've extended that to test any kind of opcode - done in a separate commit at the end.\r\n\r\n<details>\r\n<summary>awkward fuzzing on my Mac</summary>\r\n\r\n```bash\r\nrm -rfd build_fuzz && \\\r\ncmake --preset=libfuzzer \\\r\n -DCMAKE_C_COMPILER=\"$(brew --prefix llvm)/bin/clang\" \\\r\n -DCMAKE_CXX_COMPILER=\"$(brew --prefix llvm)/bin/clang++\" \\\r\n -DCMAKE_OSX_SYSROOT=\"$(xcrun --show-sdk-path)\" \\\r\n -DCMAKE_C_FLAGS=\"-target arm64-apple-macos11\" \\\r\n -DCMAKE_CXX_FLAGS=\"-target arm64-apple-macos11\" \\\r\n -DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=lld\" && \\\r\ncmake --build build_fuzz -j$(nproc) && \\\r\nFUZZ=script_ops build_fuzz/bin/fuzz\r\n```\r\n\r\n</details>\r\n",
      "created_at": "2025-08-05T21:11:24Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255351551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255351551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255352640",
      "pull_request_review_id": 3089736417,
      "id": 2255352640,
      "node_id": "PRRC_kwDOABII586GbfNA",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,\n+     * and to `false` when analyzing scriptPubKeys or scriptSigs.\n+     *\n+     * Historically, Bitcoin always counted each `CHECKMULTISIG` as\n+     * 20 sigops (`MAX_PUBKEYS_PER_MULTISIG`), regardless of the number of pubkeys.\n+     * Starting with P2SH in version 0.6, `CHECKMULTISIG` operations inside wrapped scripts\n+     * began to be counted more precisely, using the preceding OP_N opcode to determine\n+     * the number of pubkeys and thus the number of sigops.\n      */\n-    unsigned int GetSigOpCount(bool fAccurate) const;\n+    unsigned int CountSigOps(bool fAccurate) const;",
      "path": "src/script/script.h",
      "position": 63,
      "original_position": 22,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "4cbd303ddd7ae500683a7a595f38c5b8ff2de31e",
      "in_reply_to_id": 2254023250,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks, kept the rename and added you as a co-author",
      "created_at": "2025-08-05T21:11:44Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255352640",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255352640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 553,
      "original_line": 553,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255358039",
      "pull_request_review_id": 3089736417,
      "id": 2255358039,
      "node_id": "PRRC_kwDOABII586GbghX",
      "diff_hunk": "@@ -612,6 +606,15 @@ class CScriptID : public BaseHash<uint160>\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\n };\n \n+/**\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\n+ *\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or P2SH-P2WSH script),\n+ * this function counts only the non-SegWit sigops.\n+ * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\n+ */\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935",
      "in_reply_to_id": 2254092329,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added your explanation to the commit message - even though the changes themselves made that obvious, since we've added new comments to the methods",
      "created_at": "2025-08-05T21:13:40Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255358039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255358039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255418199",
      "pull_request_review_id": 3089736417,
      "id": 2255418199,
      "node_id": "PRRC_kwDOABII586GbvNX",
      "diff_hunk": "@@ -555,7 +555,13 @@ class CScript : public CScriptBase\n      */\n     static bool IsPayToAnchor(int version, const std::vector<unsigned char>& program);\n \n-    bool IsPayToScriptHash() const;\n+    bool IsPayToScriptHash() const noexcept\n+    {\n+        return size() == 23 &&\n+               front() == OP_HASH160 &&\n+               (*this)[1] == WITNESS_V0_KEYHASH_SIZE &&",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "0d51088d1daa15ade3bf3c57410a0c12df235615",
      "in_reply_to_id": 2254180036,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Subtle, thanks, extracted it to:\r\n```C++\r\nstatic constexpr size_t HASH160_OUTPUT_SIZE{20};\r\nstatic constexpr size_t WITNESS_V0_KEYHASH_SIZE{HASH160_OUTPUT_SIZE};\r\n```\r\nand used these where it explains the magic number better",
      "created_at": "2025-08-05T21:50:36Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255418199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255418199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 562,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255448800",
      "pull_request_review_id": 3089736417,
      "id": 2255448800,
      "node_id": "PRRC_kwDOABII586Gb2rg",
      "diff_hunk": "@@ -1222,7 +1222,7 @@ BOOST_AUTO_TEST_CASE(script_size_and_capacity_test)\n     // P2TR has direct allocation\n     {\n         const auto script{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey{dummy_pubkey}})};\n-        BOOST_CHECK_EQUAL(GetTxoutType(script), TxoutType::WITNESS_V1_TAPROOT);\n+        BOOST_CHECK(script.IsPayToTaproot());",
      "path": "src/test/script_tests.cpp",
      "position": 44,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "38e89f646221ec0c15158b6ef0007336fec008e3",
      "in_reply_to_id": 2254194990,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There was no reordering, it was just inserted after the other helper, `IsPayToWitnessScriptHash` (looks like GitHub got confused).\r\nThe `BOOST_CHECK_EQUAL` to `BOOST_CHECK` change is just to test the new helper method in a simpler way, now that we don't have to use `Solver`.\r\nYou still think it needs additional explanations?",
      "created_at": "2025-08-05T22:13:45Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255448800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255448800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1229,
      "original_line": 1229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255456847",
      "pull_request_review_id": 3089736417,
      "id": 2255456847,
      "node_id": "PRRC_kwDOABII586Gb4pP",
      "diff_hunk": "@@ -562,7 +562,14 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V0_KEYHASH_SIZE &&\n                back() == OP_EQUAL;\n     }\n-    bool IsPayToWitnessScriptHash() const;\n+\n+    bool IsPayToWitnessScriptHash() const noexcept\n+    {\n+        return size() == 34 &&",
      "path": "src/script/script.h",
      "position": 113,
      "original_position": 8,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "3c800a72b6520d94bc3996fa31ecded0f6fab22d",
      "in_reply_to_id": 2254675962,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In most other cases I used constants, but for the sizes I prefer redundancy and clarity, to make absolutely sure we're not accidentally changing anything here",
      "created_at": "2025-08-05T22:20:22Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255456847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255456847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 595,
      "original_line": 595,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255457272",
      "pull_request_review_id": 3089736417,
      "id": 2255457272,
      "node_id": "PRRC_kwDOABII586Gb4v4",
      "diff_hunk": "@@ -575,9 +575,14 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V0_SCRIPTHASH_SIZE;\n     }\n \n-    bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;\n+    bool IsPayToTaproot() const noexcept\n+    {\n+        return size() == 34 &&",
      "path": "src/script/script.h",
      "position": 120,
      "original_position": 7,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "38e89f646221ec0c15158b6ef0007336fec008e3",
      "in_reply_to_id": 2254692162,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I prefer the constant here for redundancy",
      "created_at": "2025-08-05T22:20:40Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255457272",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255457272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 602,
      "original_line": 602,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255459207",
      "pull_request_review_id": 3089736417,
      "id": 2255459207,
      "node_id": "PRRC_kwDOABII586Gb5OH",
      "diff_hunk": "@@ -560,6 +560,16 @@ class CScript : public CScriptBase\n                back() == 0x73;\n     }\n \n+    bool IsPayToPubKeyHash() const noexcept\n+    {\n+        return size() == 25 &&\n+               front() == OP_DUP &&\n+               (*this)[1] == OP_HASH160 &&\n+               (*this)[2] == WITNESS_V0_KEYHASH_SIZE &&",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "5d23e9a4c6fa4aab530889c54565954486572afd",
      "in_reply_to_id": 2254707312,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, good point, already did that as part of the other similar comment you had.",
      "created_at": "2025-08-05T22:22:18Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255459207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255459207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 568,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255462973",
      "pull_request_review_id": 3089736417,
      "id": 2255462973,
      "node_id": "PRRC_kwDOABII586Gb6I9",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept\n+    {\n+        return size() == 35 &&",
      "path": "src/script/script.h",
      "position": 128,
      "original_position": 14,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254716286,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, same reasoning as before - normally I'm all for deduplication, so that the reason is clear + if we change it, we don't have to touch multiple places. But here I want a bit of extra redundancy to make sure that we **do** have to change in multiple places if we **really** want to change this value.",
      "created_at": "2025-08-05T22:25:37Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255462973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255462973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255465558",
      "pull_request_review_id": 3089736417,
      "id": 2255465558,
      "node_id": "PRRC_kwDOABII586Gb6xW",
      "diff_hunk": "@@ -9,6 +9,7 @@\n #include <attributes.h>\n #include <crypto/common.h>\n #include <prevector.h> // IWYU pragma: export\n+#include <pubkey.h>",
      "path": "src/script/script.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254731153,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We kinda' depend on pubkey here - if you have a more concrete suggestion, please let me know, all other ones I thought of were uglier than this.",
      "created_at": "2025-08-05T22:28:02Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255465558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255465558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255500828",
      "pull_request_review_id": 3089736417,
      "id": 2255500828,
      "node_id": "PRRC_kwDOABII586GcDYc",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey;\n+    dummyKey.MakeNewKey(true);",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 86,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": 2254943653,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Even better, I used `CKey dummyKey{GenerateRandomKey(/*compressed=*/true)}`",
      "created_at": "2025-08-05T22:59:39Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255500828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255500828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255502272",
      "pull_request_review_id": 3089736417,
      "id": 2255502272,
      "node_id": "PRRC_kwDOABII586GcDvA",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 15,
      "original_position": 83,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": 2254951939,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, changed the order in the commit message as well.",
      "created_at": "2025-08-05T23:01:02Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255502272",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255502272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255512307",
      "pull_request_review_id": 3089736417,
      "id": 2255512307,
      "node_id": "PRRC_kwDOABII586GcGLz",
      "diff_hunk": "@@ -218,8 +218,8 @@ enum opcodetype\n     OP_INVALIDOPCODE = 0xff,\n };\n \n-// Maximum value that an opcode can be\n-static const unsigned int MAX_OPCODE = OP_NOP10;\n+// Highest opcode allowed in pre-Taproot scripts",
      "path": "src/script/script.h",
      "position": 29,
      "original_position": 6,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "in_reply_to_id": 2254970939,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for the new name suggestion, I didn't like the `legacy` here, was hoping you will have a better suggestion!\r\n\r\nAlso extracted the test with explanations.",
      "created_at": "2025-08-05T23:09:57Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255512307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255512307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255514505",
      "pull_request_review_id": 3089736417,
      "id": 2255514505,
      "node_id": "PRRC_kwDOABII586GcGuJ",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey;\n+    dummyKey.MakeNewKey(true);\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript() << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 27,
      "original_position": 96,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": 2254983086,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Overzealous merge conflict resolution - thanks, added it back.",
      "created_at": "2025-08-05T23:12:00Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255514505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255514505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255568913",
      "pull_request_review_id": 3089736417,
      "id": 2255568913,
      "node_id": "PRRC_kwDOABII586GcUAR",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey;\n+    dummyKey.MakeNewKey(true);\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript() << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript() << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript() << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(script), 0);\n+            const auto single_sigop{CScript() << ToByteVector(CScript() << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript() << OP_PUSHDATA1), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript() << OP_CHECKSIGADD), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript() << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey;\n+            uncompressedKey.MakeNewKey(false);\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+BOOST_AUTO_TEST_CASE(GetOpName_no_missing_mnemonics)\n+{\n+    for (auto op{OP_0}; op < OP_INVALIDOPCODE; op = opcodetype(op + 1)) {\n+        const auto op_name{GetOpName(op)};\n+        BOOST_CHECK(!op_name.empty());\n+        if (op >= OP_PUSHDATA1 && !IsOpSuccess(op)) {",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 172,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": 2255009999,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, I just implemented all of them instead - thanks for the push.",
      "created_at": "2025-08-06T00:06:07Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255568913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255568913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255571368",
      "pull_request_review_id": 3089736417,
      "id": 2255571368,
      "node_id": "PRRC_kwDOABII586GcUmo",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": 2255016916,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-06T00:09:19Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255571368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255571368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255573983",
      "pull_request_review_id": 3089736417,
      "id": 2255573983,
      "node_id": "PRRC_kwDOABII586GcVPf",
      "diff_hunk": "@@ -28,6 +30,172 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript() << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 19,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "c194618bb587a2e15ed11f268898599c74f1aa74",
      "in_reply_to_id": 2255022936,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, I thought of deduplicating them, but in that case they're not so explicit. I expect people to be interested in the behavior of a given template and see its behavior directly. If you insist, let me know and I'll think of something.",
      "created_at": "2025-08-06T00:11:41Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255573983",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255573983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255644392",
      "pull_request_review_id": 3089736417,
      "id": 2255644392,
      "node_id": "PRRC_kwDOABII586Gcmbo",
      "diff_hunk": "@@ -612,6 +606,15 @@ class CScriptID : public BaseHash<uint160>\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\n };\n \n+/**\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\n+ *\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or P2SH-P2WSH script),\n+ * this function counts only the non-SegWit sigops.\n+ * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\n+ */\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935",
      "in_reply_to_id": 2254641829,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I played with this, but really dislike the new version, mostly for how awkward `CheckSigopsBIP54` has become after it.\r\nBut I have kept your comment update and change the ternary, let me know what you think of this instead:\r\n```C++\r\nif (prev_txo.scriptPubKey.IsPayToScriptHash()) {\r\n    Assert(prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true) == 0);\r\n    sigops += CountP2SHSigOps(txin.scriptSig);\r\n} else {\r\n    sigops += prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\r\n}\r\n```\r\n\r\nIf we get to my original proposal which optimizes `CountSigOps` for the templates, I don't mind always executing it, even when `IsPayToScriptHash() == true`.\r\nBut it seems more logical to me to have two sigop updates here, like before.",
      "created_at": "2025-08-06T01:17:27Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255644392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255644392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255655601",
      "pull_request_review_id": 3089736417,
      "id": 2255655601,
      "node_id": "PRRC_kwDOABII586GcpKx",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept",
      "path": "src/script/script.h",
      "position": 126,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254732750,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure, would we not consider it a `P2PK` without a valid prefix? Otherwise that's just an extra validation step that should be done elsewhere. We're not always checking the prefixes (see: `MatchPayToPubkey`), and we don't have extra info for other such quick checks - let me know if you have strong preferences here.",
      "created_at": "2025-08-06T01:28:42Z",
      "updated_at": "2025-08-06T02:16:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255655601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255655601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 608,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258199840",
      "pull_request_review_id": 3094123250,
      "id": 2258199840,
      "node_id": "PRRC_kwDOABII586GmWUg",
      "diff_hunk": "@@ -218,8 +218,8 @@ enum opcodetype\n     OP_INVALIDOPCODE = 0xff,\n };\n \n-// Maximum value that an opcode can be\n-static const unsigned int MAX_OPCODE = OP_NOP10;\n+// Highest opcode allowed in pre-Taproot scripts",
      "path": "src/script/script.h",
      "position": 29,
      "original_position": 6,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "in_reply_to_id": 2254970939,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Related: @itornaza's rename attempt in #30953. To me \"legacy script\" vs \"tapscript\" seems quite an established nomenclature, but \"base\" is acceptable and minimally more specific than his \"script\".\r\n\r\nYour PR description still states: \"Legacy opcode ceiling - final commit documents, enforces, and tests that OP_CHECKSIGADD > MAX_OPCODE.\" - I believe it is no longer the **final** commit.",
      "created_at": "2025-08-06T20:18:44Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2258199840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258199840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258225300",
      "pull_request_review_id": 3094123250,
      "id": 2258225300,
      "node_id": "PRRC_kwDOABII586GmciU",
      "diff_hunk": "@@ -39,26 +39,18 @@ static void DeserializeBlockTest(benchmark::Bench& bench)\n     });\n }\n \n-static void DeserializeAndCheckBlockTest(benchmark::Bench& bench)\n+static void CheckBlockBench(benchmark::Bench& bench)\n {\n-    DataStream stream(benchmark::data::block413567);\n-    std::byte a{0};\n-    stream.write({&a, 1}); // Prevent compaction",
      "path": "src/bench/checkblock.cpp",
      "position": 39,
      "original_position": 18,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "0abbad2de413b2894a10a4dad773f3cf0a562518",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1. nit: Could remove that part from the benchmark-code above too?\r\n2. reflection: Seems like `DataStream::Compact()` is no longer called by anything.",
      "created_at": "2025-08-06T20:30:01Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2258225300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258225300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": 44,
      "original_start_line": 44,
      "start_side": "LEFT",
      "line": 46,
      "original_line": 46,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258254151",
      "pull_request_review_id": 3094123250,
      "id": 2258254151,
      "node_id": "PRRC_kwDOABII586GmjlH",
      "diff_hunk": "@@ -52,5 +50,21 @@ static void CheckBlockBench(benchmark::Bench& bench)\n     });\n }\n \n+static void SigOpsBlockBench(benchmark::Bench& bench)\n+{\n+    CBlock block;\n+    DataStream(benchmark::data::block413567) >> TX_WITH_WITNESS(block);\n+\n+    constexpr auto expected_sigops{2841};\n+    bench.batch(expected_sigops).unit(\"sigops\").run([&] {\n+        auto nSigOps{0};",
      "path": "src/bench/checkblock.cpp",
      "position": 69,
      "original_position": 36,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37f72340f95c45e718594b75c231a694f42ead40",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`nSigOps` => `sig_op_count`?",
      "created_at": "2025-08-06T20:43:52Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2258254151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258254151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258271345",
      "pull_request_review_id": 3094123250,
      "id": 2258271345,
      "node_id": "PRRC_kwDOABII586Gmnxx",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,\n+     * and to `false` when analyzing scriptPubKeys or scriptSigs.\n+     *\n+     * Historically, Bitcoin always counted each `CHECKMULTISIG` as\n+     * 20 sigops (`MAX_PUBKEYS_PER_MULTISIG`), regardless of the number of pubkeys.\n+     * Starting with P2SH in version 0.6, `CHECKMULTISIG` operations inside wrapped scripts",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 17,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "006a428613710dde24866cf4f6efd7b68b6ee294",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why is the *wrapped*-property worth calling out in a P2SH context? Do you mean in contrast to bare multisig? I'm not super clear on this area, so feel a bit uncomfortable reviewing this comment (easier to verify code changes).",
      "created_at": "2025-08-06T20:52:02Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2258271345",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258271345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258280308",
      "pull_request_review_id": 3094123250,
      "id": 2258280308,
      "node_id": "PRRC_kwDOABII586Gmp90",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,\n+     * and to `false` when analyzing scriptPubKeys or scriptSigs.",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "006a428613710dde24866cf4f6efd7b68b6ee294",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Follow-up idea: Instead of having these kinds of booleans, it might be cool to explore subclassing `CScript` into something like `WitnessScript`/`LockScript`/`UnlockScript`/`TapScript` someday. That could also prevent mixing up the parameter order for `CountP2SHSigOps(UnlockScript, LockScript)`.",
      "created_at": "2025-08-06T20:56:23Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2258280308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258280308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 533,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258374237",
      "pull_request_review_id": 3094123250,
      "id": 2258374237,
      "node_id": "PRRC_kwDOABII586GnA5d",
      "diff_hunk": "@@ -556,7 +559,13 @@ class CScript : public CScriptBase\n      */\n     static bool IsPayToAnchor(int version, const std::vector<unsigned char>& program);\n \n-    bool IsPayToScriptHash() const;\n+    bool IsPayToScriptHash() const noexcept",
      "path": "src/script/script.h",
      "position": 95,
      "original_position": 22,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "4df5614c4613c3cb17ae1303b66ec0dda0b08a9a",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re `noexcept`: The base, `prevector`, is a header-only type, so compiler sees all and should be able to infer `noexcept`, so seems like noise to me? Same for `IsPayToWitnessScriptHash()` and others.",
      "created_at": "2025-08-06T21:37:19Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2258374237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258374237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 578,
      "original_line": 578,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260317113",
      "pull_request_review_id": 3094123250,
      "id": 2260317113,
      "node_id": "PRRC_kwDOABII586GubO5",
      "diff_hunk": "@@ -4,10 +4,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <compressor.h>\n-",
      "path": "src/compressor.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "2b48b562478405cf114c5816946d827fc525d5f7",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "meganit: This empty line is intentional and IMO preferable; increases the chance that the corresponding header doesn't become alphabetically sorted after another header. Having the corresponding header first ensures missing #include's inside it get caught.",
      "created_at": "2025-08-07T13:20:24Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260317113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260317113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260350800",
      "pull_request_review_id": 3094123250,
      "id": 2260350800,
      "node_id": "PRRC_kwDOABII586GujdQ",
      "diff_hunk": "@@ -164,4 +164,31 @@ BOOST_AUTO_TEST_CASE(compress_p2pk_scripts_not_on_curve)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(compressed_p2pk)\n+{\n+    // Valid Compressed P2PK\n+    {\n+        auto key{ToByteVector(GenerateRandomKey(/*compressed=*/true).GetPubKey())};\n+        const auto script{CScript() << key << OP_CHECKSIG};\n+        BOOST_CHECK(script.IsCompressedPayToPubKey());\n+\n+        CompressedScript compressed_script;\n+        BOOST_CHECK(CompressScript(script, compressed_script));\n+        BOOST_CHECK_EQUAL(compressed_script.size(), 33U);\n+    }\n+\n+    // Compressed P2PK with an invalid prefix\n+    {\n+        auto key{ToByteVector(GenerateRandomKey(/*compressed=*/true).GetPubKey())};\n+        key[0] = 0x06; // 0x02/0x03 would be valid prefixes\n+\n+        const auto script{CScript() << key << OP_CHECKSIG};\n+        BOOST_CHECK(script.IsCompressedPayToPubKey());",
      "path": "src/test/compress_tests.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "2b48b562478405cf114c5816946d827fc525d5f7",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could add a comments about this check not catching invalid prefixes here and below, unless you alter the name to highlight that prefixes are not checked (see other comment in *script.h*).",
      "created_at": "2025-08-07T13:30:54Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260350800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260350800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260374450",
      "pull_request_review_id": 3094123250,
      "id": 2260374450,
      "node_id": "PRRC_kwDOABII586GupOy",
      "diff_hunk": "@@ -30,10 +31,9 @@ static bool IsToScriptID(const CScript& script, CScriptID& hash)\n     return true;\n }\n \n-static bool IsToPubKey(const CScript& script, CPubKey &pubkey)\n+static bool IsToPubKey(const CScript& script, CPubKey& pubkey)\n {\n-    if (script.size() == 35 && script[0] == 33 && script[34] == OP_CHECKSIG\n-                            && (script[1] == 0x02 || script[1] == 0x03)) {\n+    if (script.IsCompressedPayToPubKey() && (script[1] == 0x02 || script[1] == 0x03)) {",
      "path": "src/compressor.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "2b48b562478405cf114c5816946d827fc525d5f7",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since we're adding the *secp256k1.h* `#include` in commit 17922e88153b07f6146f5740dde69e8a3587220a, why not use `SECP256K1_TAG_PUBKEY_EVEN`/`..._ODD` directly instead of changing to them in 90df1ccfca9c0adfd1c61c1b07d8911ab632bc6a?",
      "created_at": "2025-08-07T13:39:52Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260374450",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260374450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260401049",
      "pull_request_review_id": 3094123250,
      "id": 2260401049,
      "node_id": "PRRC_kwDOABII586GuvuZ",
      "diff_hunk": "@@ -12,14 +13,14 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/interpreter.h>\n-#include <script/script.h>\n #include <script/script_error.h>\n+#include <script/script.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <script/solver.h>\n #include <streams.h>\n-#include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>",
      "path": "src/test/fuzz/script.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "9ee6977ce86c0ca32fc116c97948160af32857c1",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "So your editor's sorting function orders *script_error.h* before *script.h*, and *fuzz.h* before *FuzzedDataProvider.h*? My editor sorts the headers as they are before this change. 🤔",
      "created_at": "2025-08-07T13:49:52Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260401049",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260401049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260808130",
      "pull_request_review_id": 3097866742,
      "id": 2260808130,
      "node_id": "PRRC_kwDOABII586GwTHC",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "006a428613710dde24866cf4f6efd7b68b6ee294",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: rename `GetSigOpCount` to `CountSigOps`\" (006a428613710dde24866cf4f6efd7b68b6ee294)\r\n\r\nThis sentence should be prefixed with \"When enforcing the `MAX_BLOCK_SIGOPS_COST` limit\" to be correct since it doesn't apply in other cases. (Problem is fixed in the next commit but the change belongs this commit. Sorry my previous feedback was a bit jumbled and I mixed the commits together.)",
      "created_at": "2025-08-07T16:14:44Z",
      "updated_at": "2025-08-07T19:26:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260808130",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260808130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260816171",
      "pull_request_review_id": 3094123250,
      "id": 2260816171,
      "node_id": "PRRC_kwDOABII586GwVEr",
      "diff_hunk": "@@ -28,6 +30,193 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(GetOpName_no_missing_mnemonics)\n+{\n+    // Special\n+    BOOST_CHECK(GetOpName(OP_0) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_FALSE) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_TRUE) == \"1\");\n+    // Direct push\n+    for (auto op{opcodetype(OP_0 + 1)}; op < OP_PUSHDATA1; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Push data\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA1), \"OP_PUSHDATA1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA2), \"OP_PUSHDATA2\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA4), \"OP_PUSHDATA4\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_1NEGATE), \"-1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_RESERVED), \"OP_RESERVED\");\n+    // Numbers\n+    for (auto op{opcodetype(OP_RESERVED + 1)}; op < OP_NOP; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), util::ToString(op - OP_RESERVED));\n+    }\n+    // Named operations\n+    for (auto op{OP_NOP}; op <= OP_CHECKSIGADD; op = opcodetype(op + 1)) {\n+        const auto op_name{GetOpName(op)};\n+        BOOST_CHECK_NE(op_name, \"OP_UNKNOWN\");\n+        BOOST_CHECK(op_name.starts_with(\"OP_\"));\n+    }\n+    // Unused\n+    for (auto op{opcodetype(OP_CHECKSIGADD + 1)}; op < OP_INVALIDOPCODE; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Invalid\n+    BOOST_CHECK_EQUAL(GetOpName(OP_INVALIDOPCODE), \"OP_INVALIDOPCODE\");",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 197,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "9ee6977ce86c0ca32fc116c97948160af32857c1",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1. Not sure this belongs in *sigopcount_tests.cpp*, *script_tests.cpp* seems more appropriate?\r\n2. Would feel more robust if written like this to eliminate any doubt about not covering the whole enum:\r\n```C++\r\n    static_assert(OP_FALSE == OP_0);\r\n    for (auto op{opcodetype(0)}; op <= OP_INVALIDOPCODE; op = static_cast<opcodetype>(op + 1)) {\r\n        switch (op) {\r\n        // Special\r\n        case OP_FALSE: BOOST_CHECK_EQUAL(GetOpName(op), \"0\"); break;\r\n        case OP_TRUE: BOOST_CHECK_EQUAL(GetOpName(op), \"1\"); break;\r\n        // Push data\r\n        case OP_PUSHDATA1: BOOST_CHECK_EQUAL(GetOpName(op), \"OP_PUSHDATA1\"); break;\r\n        case OP_PUSHDATA2: BOOST_CHECK_EQUAL(GetOpName(op), \"OP_PUSHDATA2\"); break;\r\n        case OP_PUSHDATA4: BOOST_CHECK_EQUAL(GetOpName(op), \"OP_PUSHDATA4\"); break;\r\n\r\n        case OP_1NEGATE: BOOST_CHECK_EQUAL(GetOpName(op), \"-1\"); break;\r\n        case OP_RESERVED: BOOST_CHECK_EQUAL(GetOpName(op), \"OP_RESERVED\"); break;\r\n        case OP_INVALIDOPCODE: BOOST_CHECK_EQUAL(GetOpName(op), \"OP_INVALIDOPCODE\"); break;\r\n\r\n        default:\r\n            // Direct push\r\n            if (op >= OP_0 + 1 && op < OP_PUSHDATA1) {\r\n                BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\r\n            // Numbers\r\n            } else if (op >= OP_RESERVED + 1 && op < OP_NOP) {\r\n                BOOST_CHECK_EQUAL(GetOpName(op), util::ToString(op - OP_RESERVED));\r\n            // Named operations\r\n            } else if (op >= OP_NOP && op <= OP_CHECKSIGADD) {\r\n                const auto op_name{GetOpName(op)};\r\n                BOOST_CHECK_NE(op_name, \"OP_UNKNOWN\");\r\n                BOOST_CHECK(op_name.starts_with(\"OP_\"));\r\n            // Unused\r\n            } else if (op >= OP_CHECKSIGADD + 1 && op < OP_INVALIDOPCODE) {\r\n                BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\r\n            } else {\r\n                BOOST_FAIL(\"Incomplete coverage\");\r\n            }\r\n            break;\r\n        }\r\n    }\r\n```",
      "created_at": "2025-08-07T16:18:34Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260816171",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260816171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260854463",
      "pull_request_review_id": 3097866742,
      "id": 2260854463,
      "node_id": "PRRC_kwDOABII586Gwea_",
      "diff_hunk": "@@ -131,9 +131,9 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     {\n         const Coin& coin = inputs.AccessCoin(tx.vin[i].prevout);\n         assert(!coin.IsSpent());\n-        const CTxOut &prevout = coin.out;\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+        if (coin.out.scriptPubKey.IsPayToScriptHash()) {\n+            nSigOps += CountP2SHSigOps(tx.vin[i].scriptSig);\n+        }",
      "path": "src/consensus/tx_verify.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "6bf5dce801e0da9d372d42d2c0650c283ec787f5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: split off `P2SH` from `GetSigOpCount`\" (6bf5dce801e0da9d372d42d2c0650c283ec787f5)\r\n\r\nI still think you should consider simplifying these lines to:\r\n\r\n```c++\r\nnSigOps += CountP2SHSigOps(tx.vin[i].scriptSig, coin.out.scriptPubKey);\r\n```\r\n\r\nand simplifying CheckSigopsBIP54 to:\r\n\r\n```c++\r\nsigops += txin.scriptSig.CountSigOps(/*fAccurate=*/true);\r\nsigops += prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\r\nsigops += CountP2SHSigOps(txin.scriptSig, prev_txo.scriptPubKey);\r\n```\r\n\r\nGetting rid of conditionals in these counting functions make them safer and more readable. In the case of BIP54 it also makes the code literally match the [specification](https://github.com/bitcoin/bips/blob/master/bip-0054.md#specification) which says \"For each input in the transaction, count the number of CHECKSIG and CHECKMULTISIG in the input scriptSig and previous output's scriptPubKey, including the P2SH redeemScript.\"\r\n\r\nAdditionally this would make the `CountP2SHSigOps` and `CountWitnessSigOps` functions take the same arguments and have the same semantics instead of having an unnecessary difference between them.\r\n",
      "created_at": "2025-08-07T16:35:02Z",
      "updated_at": "2025-08-07T19:26:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260854463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260854463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 134,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260876336",
      "pull_request_review_id": 3097866742,
      "id": 2260876336,
      "node_id": "PRRC_kwDOABII586Gwjww",
      "diff_hunk": "@@ -612,6 +606,15 @@ class CScriptID : public BaseHash<uint160>\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\n };\n \n+/**\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\n+ *\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or P2SH-P2WSH script),\n+ * this function counts only the non-SegWit sigops.\n+ * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\n+ */\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935",
      "in_reply_to_id": 2254092329,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255358039\r\n\r\nThanks. I think I just dislike reviewing changes before I know what purpose / motivation of the change is. I know you can often guess motivations after the fact, but it is usually helpful imo to see them stated explicitly.",
      "created_at": "2025-08-07T16:45:03Z",
      "updated_at": "2025-08-07T19:26:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260876336",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260876336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260899980",
      "pull_request_review_id": 3097866742,
      "id": 2260899980,
      "node_id": "PRRC_kwDOABII586GwpiM",
      "diff_hunk": "@@ -612,6 +606,15 @@ class CScriptID : public BaseHash<uint160>\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\n };\n \n+/**\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\n+ *\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or P2SH-P2WSH script),\n+ * this function counts only the non-SegWit sigops.\n+ * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\n+ */\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935",
      "in_reply_to_id": 2254641829,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255644392\r\n\r\n> I played with this, but really dislike the new version, mostly for how awkward `CheckSigopsBIP54` has become after it.\r\n\r\nI'm confused because the diff makes this code shorter than before, removes a conditional, and makes it match the BIP54 spec more closely (see other comment about BIP54 above). Also I liked the ternary version of this better than the current version. But whatever you prefer is fine with me and maybe some wires were just crossed here.\r\n",
      "created_at": "2025-08-07T16:53:39Z",
      "updated_at": "2025-08-07T19:26:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260899980",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2260899980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261095050",
      "pull_request_review_id": 3097866742,
      "id": 2261095050,
      "node_id": "PRRC_kwDOABII586GxZKK",
      "diff_hunk": "@@ -218,8 +218,8 @@ enum opcodetype\n     OP_INVALIDOPCODE = 0xff,\n };\n \n-// Maximum value that an opcode can be\n-static const unsigned int MAX_OPCODE = OP_NOP10;\n+// Highest opcode allowed in pre-Taproot scripts",
      "path": "src/script/script.h",
      "position": 29,
      "original_position": 6,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "in_reply_to_id": 2254970939,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: make sure `OP_CHECKSIGADD` isn't considered valid (legacy) sigop\" (a2cce66f11e635924c34b27b253214be8815b0bc)\r\n\r\nThanks, maybe also replace \"(legacy)\" in commit description with \"pre-tapscript\" or \"base\"",
      "created_at": "2025-08-07T18:15:05Z",
      "updated_at": "2025-08-07T19:26:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261095050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261095050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261132664",
      "pull_request_review_id": 3097866742,
      "id": 2261132664,
      "node_id": "PRRC_kwDOABII586GxiV4",
      "diff_hunk": "@@ -1222,7 +1222,7 @@ BOOST_AUTO_TEST_CASE(script_size_and_capacity_test)\n     // P2TR has direct allocation\n     {\n         const auto script{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey{dummy_pubkey}})};\n-        BOOST_CHECK_EQUAL(GetTxoutType(script), TxoutType::WITNESS_V1_TAPROOT);\n+        BOOST_CHECK(script.IsPayToTaproot());",
      "path": "src/test/script_tests.cpp",
      "position": 44,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "38e89f646221ec0c15158b6ef0007336fec008e3",
      "in_reply_to_id": 2254194990,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2255448800\r\n\r\n> You still think it needs additional explanations?\r\n\r\nIt seems ok, but maybe consider adding your explanation to the commit message: \"The `BOOST_CHECK_EQUAL` to `BOOST_CHECK` change is just to test the new helper method in a simpler way, now that we don't have to use `Solver`.\"\r\n\r\nI wouldn't have asked the question if I had known what the intention behind the solver change was, so this wasn't obvious to me.\r\n\r\nAlso I do see IsWitnessProgram followed by IsPayToTaproot in the header before b71e7a07becb5d74db4bc1fdd60899b5ec5157f4 and IsPayToTaproot followed by IsWitnessProgram after that commit, so I am still wondering if reordering was intended here. Seems fine either way though.",
      "created_at": "2025-08-07T18:33:46Z",
      "updated_at": "2025-08-07T19:26:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261132664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261132664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1229,
      "original_line": 1229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261177012",
      "pull_request_review_id": 3097866742,
      "id": 2261177012,
      "node_id": "PRRC_kwDOABII586GxtK0",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept",
      "path": "src/script/script.h",
      "position": 126,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254732750,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2254732750\r\n\r\nTo clarify I agree code is doing the right thing and the CScript class shouldn't be looking inside the keys to check the format. I just think short comments could be helpful to prevent misunderstandings. Maybe:\r\n\r\n- `//! Detect P2PK script with a compressed public key. Doesn't check the 0x02/0x03 key prefix.`\r\n- `//! Detect P2PK script with a uncompressed public key. Doesn't check the 0x04 key prefix.`\r\n\r\nFeel free to leave as-is though, just a suggestion",
      "created_at": "2025-08-07T18:58:49Z",
      "updated_at": "2025-08-07T19:26:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261177012",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261177012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 608,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261296349",
      "pull_request_review_id": 3094123250,
      "id": 2261296349,
      "node_id": "PRRC_kwDOABII586GyKTd",
      "diff_hunk": "@@ -82,7 +82,7 @@ static RPCHelpMan sendrawtransaction()\n             }\n \n             for (const auto& out : mtx.vout) {\n-                if((out.scriptPubKey.IsUnspendable() || !out.scriptPubKey.HasValidOps()) && out.nValue > max_burn_amount) {\n+                if((out.scriptPubKey.IsUnspendable() || !out.scriptPubKey.HasValidBaseOps()) && out.nValue > max_burn_amount) {",
      "path": "src/rpc/mempool.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "a2cce66f11e635924c34b27b253214be8815b0bc",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `if (`",
      "created_at": "2025-08-07T20:05:42Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261296349",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261296349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261304002",
      "pull_request_review_id": 3094123250,
      "id": 2261304002,
      "node_id": "PRRC_kwDOABII586GyMLC",
      "diff_hunk": "@@ -261,13 +261,13 @@ std::string CScriptWitness::ToString() const\n     return ret + \")\";\n }\n \n-bool CScript::HasValidOps() const\n+bool CScript::HasValidBaseOps() const\n {\n     CScript::const_iterator it = begin();\n     while (it < end()) {\n         opcodetype opcode;\n         std::vector<unsigned char> item;\n-        if (!GetOp(it, opcode, item) || opcode > MAX_OPCODE || item.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+        if (!GetOp(it, opcode, item) || opcode > MAX_BASE_OPCODE || item.size() > MAX_SCRIPT_ELEMENT_SIZE) {",
      "path": "src/script/script.cpp",
      "position": 91,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "a2cce66f11e635924c34b27b253214be8815b0bc",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Was considering whether `HasValidOps()` instead should take a parameter like `bool tapscript`. But only found it being used for scriptPubKeys and scriptSigs, whereas tapscripts only exist in witness data AFAIK. Maybe worth calling out in the commit message of 94da3342dd1cfd21cc99c67c55ee4aa977e8b520?",
      "created_at": "2025-08-07T20:10:34Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261304002",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261304002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": 268,
      "original_start_line": 264,
      "start_side": "RIGHT",
      "line": 274,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261384110",
      "pull_request_review_id": 3094123250,
      "id": 2261384110,
      "node_id": "PRRC_kwDOABII586Gyfuu",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept\n+    {\n+        return size() == 35 &&",
      "path": "src/script/script.h",
      "position": 128,
      "original_position": 14,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254716286,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you come up with any scenario where we would change a value of a named constant in this context of script types?\r\nIn absence of that, the redundancy argument seems weak and I would rather make these numbers less magical as Russ seems to prefer as well. Better to have expressions that describe the contents of the script IMO. Slightly lower risk of off-by-one errors as well I would think. Using literal values >`9` there's also more room for confusion/errors due to hexadecimal/decimal mixups.\r\n\r\nFor similar reasons, when accessing the last element I prefer either:\r\n```C++\r\n    (*this)[1 + CPubKey::COMPRESSED_SIZE] == OP_CHECKSIG;\r\n```\r\nor (what you had in an earlier push):\r\n```C++\r\n    back() == OP_CHECKSIG;\r\n```\r\nrather than:\r\nhttps://github.com/bitcoin/bitcoin/blob/748b10bbe864191ef49c32e0963e048b939f6088/src/script/script.h#L612\r\n\r\n(Even though I've been warming up to `back()`, I still prefer the aesthetics of `(*this)[0]` over `front()` in this context).",
      "created_at": "2025-08-07T20:59:12Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261384110",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261384110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261477492",
      "pull_request_review_id": 3098836449,
      "id": 2261477492,
      "node_id": "PRRC_kwDOABII586Gy2h0",
      "diff_hunk": "@@ -131,9 +131,9 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     {\n         const Coin& coin = inputs.AccessCoin(tx.vin[i].prevout);\n         assert(!coin.IsSpent());\n-        const CTxOut &prevout = coin.out;\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+        if (coin.out.scriptPubKey.IsPayToScriptHash()) {\n+            nSigOps += CountP2SHSigOps(tx.vin[i].scriptSig);\n+        }",
      "path": "src/consensus/tx_verify.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "6bf5dce801e0da9d372d42d2c0650c283ec787f5",
      "in_reply_to_id": 2260854463,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-07T21:43:06Z",
      "updated_at": "2025-08-07T22:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261477492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261477492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 134,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261477694",
      "pull_request_review_id": 3098836449,
      "id": 2261477694,
      "node_id": "PRRC_kwDOABII586Gy2k-",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "006a428613710dde24866cf4f6efd7b68b6ee294",
      "in_reply_to_id": 2260808130,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Brought the change one commit earlier to avoid modifying the same thing twice.",
      "created_at": "2025-08-07T21:43:11Z",
      "updated_at": "2025-08-07T22:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261477694",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261477694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261493776",
      "pull_request_review_id": 3098836449,
      "id": 2261493776,
      "node_id": "PRRC_kwDOABII586Gy6gQ",
      "diff_hunk": "@@ -218,8 +218,8 @@ enum opcodetype\n     OP_INVALIDOPCODE = 0xff,\n };\n \n-// Maximum value that an opcode can be\n-static const unsigned int MAX_OPCODE = OP_NOP10;\n+// Highest opcode allowed in pre-Taproot scripts",
      "path": "src/script/script.h",
      "position": 29,
      "original_position": 6,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "f8208e92bd103359f8c3ceb3361eb7904099e994",
      "in_reply_to_id": 2254970939,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reworded the commit message, thanks",
      "created_at": "2025-08-07T21:48:35Z",
      "updated_at": "2025-08-07T22:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261493776",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261493776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261517398",
      "pull_request_review_id": 3098836449,
      "id": 2261517398,
      "node_id": "PRRC_kwDOABII586GzARW",
      "diff_hunk": "@@ -1222,7 +1222,7 @@ BOOST_AUTO_TEST_CASE(script_size_and_capacity_test)\n     // P2TR has direct allocation\n     {\n         const auto script{GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey{dummy_pubkey}})};\n-        BOOST_CHECK_EQUAL(GetTxoutType(script), TxoutType::WITNESS_V1_TAPROOT);\n+        BOOST_CHECK(script.IsPayToTaproot());",
      "path": "src/test/script_tests.cpp",
      "position": 44,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "38e89f646221ec0c15158b6ef0007336fec008e3",
      "in_reply_to_id": 2254194990,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Also I do see IsWitnessProgram followed by IsPayToTaproot in the header before https://github.com/bitcoin/bitcoin/commit/b71e7a07becb5d74db4bc1fdd60899b5ec5157f4 and IsPayToTaproot followed by IsWitnessProgram after that commit\r\n\r\nYes, the quick template helpers are grouped above the `IsWitnessProgram`, the move is deliberate.\r\n\r\n> test the new helper method in a simpler way, now that we don't have to use Solver\r\n\r\nI don't actually mind keeping both the solver and the new helpers - it's even better to make sure they're synchronized. Added both to each case.",
      "created_at": "2025-08-07T21:55:16Z",
      "updated_at": "2025-08-07T22:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261517398",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261517398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1229,
      "original_line": 1229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261570975",
      "pull_request_review_id": 3098836449,
      "id": 2261570975,
      "node_id": "PRRC_kwDOABII586GzNWf",
      "diff_hunk": "@@ -131,9 +131,9 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     {\n         const Coin& coin = inputs.AccessCoin(tx.vin[i].prevout);\n         assert(!coin.IsSpent());\n-        const CTxOut &prevout = coin.out;\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+        if (coin.out.scriptPubKey.IsPayToScriptHash()) {\n+            nSigOps += CountP2SHSigOps(tx.vin[i].scriptSig);\n+        }",
      "path": "src/consensus/tx_verify.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "6bf5dce801e0da9d372d42d2c0650c283ec787f5",
      "in_reply_to_id": 2260854463,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you say you find it more readable, I don't mind - changed",
      "created_at": "2025-08-07T22:23:01Z",
      "updated_at": "2025-08-07T22:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261570975",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261570975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 134,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261571418",
      "pull_request_review_id": 3098836449,
      "id": 2261571418,
      "node_id": "PRRC_kwDOABII586GzNda",
      "diff_hunk": "@@ -612,6 +606,15 @@ class CScriptID : public BaseHash<uint160>\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\n };\n \n+/**\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\n+ *\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or P2SH-P2WSH script),\n+ * this function counts only the non-SegWit sigops.\n+ * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\n+ */\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935",
      "in_reply_to_id": 2254092329,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not after the fact, but that the commited code contained the added comments already explaining - not important, it's done :)",
      "created_at": "2025-08-07T22:23:30Z",
      "updated_at": "2025-08-07T22:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261571418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261571418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261577984",
      "pull_request_review_id": 3098836449,
      "id": 2261577984,
      "node_id": "PRRC_kwDOABII586GzPEA",
      "diff_hunk": "@@ -612,6 +606,15 @@ class CScriptID : public BaseHash<uint160>\n     explicit CScriptID(const uint160& in) : BaseHash(in) {}\n };\n \n+/**\n+ * Count the number of signature operations (sigops) in a P2SH scriptSig.\n+ *\n+ * If the scriptSig contains a SegWit redeem script (i.e., a P2SH-P2WPKH or P2SH-P2WSH script),\n+ * this function counts only the non-SegWit sigops.\n+ * To count SegWit sigops in such cases, use `CountWitnessSigOps`.\n+ */\n+unsigned int CountP2SHSigOps(const CScript& scriptSig);",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37c1d8fc8db2f1ddd6ddf4d8fccbd13bbc9c9935",
      "in_reply_to_id": 2254641829,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-07T22:29:14Z",
      "updated_at": "2025-08-07T22:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261577984",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261577984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261578300",
      "pull_request_review_id": 3098836449,
      "id": 2261578300,
      "node_id": "PRRC_kwDOABII586GzPI8",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept",
      "path": "src/script/script.h",
      "position": 126,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254732750,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, done",
      "created_at": "2025-08-07T22:29:32Z",
      "updated_at": "2025-08-07T22:33:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2261578300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2261578300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 608,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262340583",
      "pull_request_review_id": 3094123250,
      "id": 2262340583,
      "node_id": "PRRC_kwDOABII586G2JPn",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept",
      "path": "src/script/script.h",
      "position": 126,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254732750,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Agreed, comments are the absolute minimum, could even go so far as name them `IsCompressedPayToPubKeyNoPrefix`/`IsUncompressedPayToPubKeyNoPrefix`.",
      "created_at": "2025-08-08T08:49:54Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262340583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262340583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 608,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262347850",
      "pull_request_review_id": 3094123250,
      "id": 2262347850,
      "node_id": "PRRC_kwDOABII586G2LBK",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems fine since your #30765 / cac846c2fbf6fc69bfc288fd387aa3f68d84d584?\r\n```suggestion\r\n            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex};\r\n```",
      "created_at": "2025-08-08T08:53:12Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262347850",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262347850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262462929",
      "pull_request_review_id": 3094123250,
      "id": 2262462929,
      "node_id": "PRRC_kwDOABII586G2nHR",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "reflection: Tempting to encourage something like:\r\n```suggestion\r\n            const auto anchor_data{std::to_array({std::byte{0x4e}, std::byte{0x73}})};\r\n```\r\nBut the second `IsPayToAnchor()` is not ready for it and I understand if you don't want to modernize that within this PR.",
      "created_at": "2025-08-08T09:40:11Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262462929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262462929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262489840",
      "pull_request_review_id": 3094123250,
      "id": 2262489840,
      "node_id": "PRRC_kwDOABII586G2trw",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{}, script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop, script), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1, script), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD, script), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 161,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Starting a comment at column 115? More readable for multi-line statements here and above:\r\n```suggestion\r\n            // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\r\n            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\r\n                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\r\n                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY};\r\n```",
      "created_at": "2025-08-08T09:47:34Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262489840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262489840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262540045",
      "pull_request_review_id": 3094123250,
      "id": 2262540045,
      "node_id": "PRRC_kwDOABII586G258N",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{}, script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop, script), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1, script), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD, script), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 123,
      "original_position": 119,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why not use:\r\n```suggestion\r\n                              << OP_INVALIDOPCODE\r\n```\r\nhere and below?",
      "created_at": "2025-08-08T10:10:19Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262540045",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262540045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262712888",
      "pull_request_review_id": 3094123250,
      "id": 2262712888,
      "node_id": "PRRC_kwDOABII586G3kI4",
      "diff_hunk": "@@ -528,40 +537,97 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n-     */\n-    unsigned int GetSigOpCount(bool fAccurate) const;\n-\n-    /**\n-     * Accurately count sigOps, including sigOps in\n-     * pay-to-script-hash transactions:\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * When enforcing the `MAX_BLOCK_SIGOPS_COST` limit, set `fAccurate` to `true` when\n+     * analyzing P2SH redeem scripts or SegWit witness scripts, and to `false` when analyzing\n+     * scriptPubKeys or scriptSigs.",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 54,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Could include newer/clearer terms?\r\n```suggestion\r\n     * locking scripts (scriptPubKeys) or unlocking scripts (scriptSigs).\r\n```\r\nor\r\n```suggestion\r\n     * scriptPubKeys (locking scripts) or scriptSigs (unlocking scripts).\r\n```\r\nSame for `CountP2SHSigOps()`.",
      "created_at": "2025-08-08T11:39:02Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262712888",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262712888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 545,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262836125",
      "pull_request_review_id": 3094123250,
      "id": 2262836125,
      "node_id": "PRRC_kwDOABII586G4COd",
      "diff_hunk": "@@ -1601,18 +1606,13 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK(s == expect);\n }\n \n-BOOST_AUTO_TEST_CASE(script_HasValidOps)\n+BOOST_AUTO_TEST_CASE(script_HasValidBaseOps)\n {\n-    // Exercise the HasValidOps functionality\n-    CScript script;\n-    script = ToScript(\"76a9141234567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac\"_hex); // Normal script\n-    BOOST_CHECK(script.HasValidOps());\n-    script = ToScript(\"76a914ff34567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac\"_hex);\n-    BOOST_CHECK(script.HasValidOps());\n-    script = ToScript(\"ff88ac\"_hex); // Script with OP_INVALIDOPCODE explicit\n-    BOOST_CHECK(!script.HasValidOps());\n-    script = ToScript(\"88acc0\"_hex); // Script with undefined opcode\n-    BOOST_CHECK(!script.HasValidOps());\n+    BOOST_CHECK( ToScript(\"76a9141234567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac\"_hex).HasValidBaseOps()); // Normal script\n+    BOOST_CHECK( ToScript(\"76a914ff34567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac\"_hex).HasValidBaseOps());\n+    BOOST_CHECK(!ToScript(\"ff88ac\"_hex).HasValidBaseOps()); // Script with OP_INVALIDOPCODE explicit\n+    BOOST_CHECK(!ToScript(\"88acc0\"_hex).HasValidBaseOps()); // Script with undefined opcode\n+    BOOST_CHECK(!ToScript(\"ba\"_hex).HasValidBaseOps());     // OP_CHECKSIGADD > MAX_BASE_OPCODE",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 100,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could say it in code:\r\n```suggestion\r\n\r\n    static_assert(OP_CHECKSIGADD > MAX_BASE_OPCODE);\r\n    BOOST_CHECK(!CScript{CScript{} << OP_CHECKSIGADD}.HasValidBaseOps());\r\n```",
      "created_at": "2025-08-08T12:24:32Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262836125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262836125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1615,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262873788",
      "pull_request_review_id": 3094123250,
      "id": 2262873788,
      "node_id": "PRRC_kwDOABII586G4La8",
      "diff_hunk": "@@ -180,9 +180,9 @@ static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inpu\n         // This means sigops in the spent scriptPubKey count toward the limit.\n         // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs(VERIFY) with 16 pubkeys\n         // or fewer. This method of accounting was introduced by BIP16, and BIP54 reuses it.\n-        // The GetSigOpCount call on the previous scriptPubKey counts both bare and P2SH sigops.\n-        sigops += txin.scriptSig.GetSigOpCount(/*fAccurate=*/true);\n-        sigops += prev_txo.scriptPubKey.GetSigOpCount(txin.scriptSig);\n+        sigops += prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\n+        sigops += txin.scriptSig.CountSigOps(/*fAccurate=*/true);\n+        sigops += CountP2SHSigOps(txin.scriptSig, prev_txo.scriptPubKey);",
      "path": "src/policy/policy.cpp",
      "position": 9,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This function is covered in *transaction_tests.cpp*/max_standard_legacy_sigops, but the change is still a bit scary.\r\n\r\nOld behavior:\r\n1. `txin.scriptSig.GetSigOpCount(/*fAccurate=*/true)` would count `txin.scriptSig` sigops.\r\n2. `rev_txo.scriptPubKey.GetSigOpCount(txin.scriptSig)` would count sigops from either the P2SH lock script or the previous txo's lock script.\r\n\r\nNew behavior:\r\n1. `prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true)` counts sigops from the previous txo's lock script.\r\n2. `txin.scriptSig.CountSigOps(/*fAccurate=*/true)` counts `txin.scriptSig` sigops (same as before).\r\n3. `CountP2SHSigOps(txin.scriptSig, prev_txo.scriptPubKey)` will count `txin.scriptSig` sigops, only if `prev_txo.scriptPubKey` is P2SH.\r\n\r\nI guess `prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true)` will not find any sigops if `prev_txo.scriptPubKey` is P2SH, making the end result the same?\r\n\r\nWish this were more clear through code, or commented.",
      "created_at": "2025-08-08T12:42:28Z",
      "updated_at": "2025-08-08T13:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262873788",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262873788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": 183,
      "original_start_line": 183,
      "start_side": "RIGHT",
      "line": 185,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263216066",
      "pull_request_review_id": 3101158381,
      "id": 2263216066,
      "node_id": "PRRC_kwDOABII586G5e_C",
      "diff_hunk": "@@ -180,9 +180,9 @@ static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inpu\n         // This means sigops in the spent scriptPubKey count toward the limit.\n         // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs(VERIFY) with 16 pubkeys\n         // or fewer. This method of accounting was introduced by BIP16, and BIP54 reuses it.\n-        // The GetSigOpCount call on the previous scriptPubKey counts both bare and P2SH sigops.\n-        sigops += txin.scriptSig.GetSigOpCount(/*fAccurate=*/true);\n-        sigops += prev_txo.scriptPubKey.GetSigOpCount(txin.scriptSig);\n+        sigops += prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\n+        sigops += txin.scriptSig.CountSigOps(/*fAccurate=*/true);\n+        sigops += CountP2SHSigOps(txin.scriptSig, prev_txo.scriptPubKey);",
      "path": "src/policy/policy.cpp",
      "position": 9,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262873788,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262873788\r\n\r\n> I guess `prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true)` will not find any sigops if `prev_txo.scriptPubKey` is P2SH, making the end result the same?\r\n\r\nYes results should be the same for that reason. A goal of this change is to make the `CheckSigopsBIP54` function match the BIP54 [specification](https://github.com/bitcoin/bips/blob/master/bip-0054.md#specification) which says \"For each input in the transaction, count the number of CHECKSIG and CHECKMULTISIG in the input scriptSig and previous output's scriptPubKey, including the P2SH redeemScript.\"",
      "created_at": "2025-08-08T14:58:37Z",
      "updated_at": "2025-08-08T15:24:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2263216066",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263216066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": 183,
      "original_start_line": 183,
      "start_side": "RIGHT",
      "line": 185,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263221516",
      "pull_request_review_id": 3101158381,
      "id": 2263221516,
      "node_id": "PRRC_kwDOABII586G5gUM",
      "diff_hunk": "@@ -528,40 +537,97 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n-     */\n-    unsigned int GetSigOpCount(bool fAccurate) const;\n-\n-    /**\n-     * Accurately count sigOps, including sigOps in\n-     * pay-to-script-hash transactions:\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * When enforcing the `MAX_BLOCK_SIGOPS_COST` limit, set `fAccurate` to `true` when\n+     * analyzing P2SH redeem scripts or SegWit witness scripts, and to `false` when analyzing\n+     * scriptPubKeys or scriptSigs.",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 54,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262712888,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2262712888\r\n\r\n> nit: Could include newer/clearer terms?\r\n\r\nSuggestion seems ok, but just to push back a little I like terms scriptPubKey and scriptSig because they are concrete, easy to google and grep, and I'd think probably familiar to most people reading this. But maybe I'm wrong if newer documentation uses different terms, and it seems fine to add them.",
      "created_at": "2025-08-08T15:01:05Z",
      "updated_at": "2025-08-08T15:24:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2263221516",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263221516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 545,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263261844",
      "pull_request_review_id": 3101158381,
      "id": 2263261844,
      "node_id": "PRRC_kwDOABII586G5qKU",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,\n+     * and to `false` when analyzing scriptPubKeys or scriptSigs.\n+     *\n+     * Historically, Bitcoin always counted each `CHECKMULTISIG` as\n+     * 20 sigops (`MAX_PUBKEYS_PER_MULTISIG`), regardless of the number of pubkeys.\n+     * Starting with P2SH in version 0.6, `CHECKMULTISIG` operations inside wrapped scripts",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 17,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "006a428613710dde24866cf4f6efd7b68b6ee294",
      "in_reply_to_id": 2258271345,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2258271345\r\n\r\n> Why is the _wrapped_-property worth calling out in a P2SH context? Do you mean in contrast to bare multisig? \r\n\r\nGood point. By wrapped scripts I just meant redeemScripts and witnessScripts, but that term was confusing. I think a better version of this is probably:\r\n\r\n```c++\r\n/**\r\n * Count the number of signature operations (sigops) in this script.\r\n *\r\n * The `fAccurate` parameter controls how `CHECKMULTISIG` operations are counted.\r\n * When enforcing the `MAX_BLOCK_SIGOPS_COST` limit, set `fAccurate` to `true` when\r\n * counting a redeemScript (P2SH) or witnessScript (P2WSH), and set it to `false`\r\n * when counting a scriptPubKey or scriptSig.\r\n *\r\n * Historical note: before P2SH (v0.6), `CHECKMULTISIG` was always counted as\r\n * MAX_PUBKEYS_PER_MULTISIG (=20), regardless of the actual number of pubkeys.\r\n * Starting with P2SH — and similarly for P2WSH later — `CHECKMULTISIG` inside\r\n * the redeemScript/witnessScript began to be counted precisely, using the\r\n * preceding OP_N to determine the number of pubkeys.\r\n */\r\nunsigned int CountSigOps(bool fAccurate) const;\r\n```\r\n\r\nwhich cleans up the comment and mentions witness scripts explicitly in the \"historical\" section.\r\n\r\nIf anything still is confusing here would be good to know because I spent hours being confused by the previous code while reviewing this PR and was hoping a little more documentation could avoid the need for others to go through that.",
      "created_at": "2025-08-08T15:19:04Z",
      "updated_at": "2025-08-08T15:24:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2263261844",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263261844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263314370",
      "pull_request_review_id": 3101289828,
      "id": 2263314370,
      "node_id": "PRRC_kwDOABII586G52_C",
      "diff_hunk": "@@ -28,6 +30,193 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(GetOpName_no_missing_mnemonics)\n+{\n+    // Special\n+    BOOST_CHECK(GetOpName(OP_0) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_FALSE) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_TRUE) == \"1\");\n+    // Direct push\n+    for (auto op{opcodetype(OP_0 + 1)}; op < OP_PUSHDATA1; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Push data\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA1), \"OP_PUSHDATA1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA2), \"OP_PUSHDATA2\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA4), \"OP_PUSHDATA4\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_1NEGATE), \"-1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_RESERVED), \"OP_RESERVED\");\n+    // Numbers\n+    for (auto op{opcodetype(OP_RESERVED + 1)}; op < OP_NOP; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), util::ToString(op - OP_RESERVED));\n+    }\n+    // Named operations\n+    for (auto op{OP_NOP}; op <= OP_CHECKSIGADD; op = opcodetype(op + 1)) {\n+        const auto op_name{GetOpName(op)};\n+        BOOST_CHECK_NE(op_name, \"OP_UNKNOWN\");\n+        BOOST_CHECK(op_name.starts_with(\"OP_\"));\n+    }\n+    // Unused\n+    for (auto op{opcodetype(OP_CHECKSIGADD + 1)}; op < OP_INVALIDOPCODE; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Invalid\n+    BOOST_CHECK_EQUAL(GetOpName(OP_INVALIDOPCODE), \"OP_INVALIDOPCODE\");",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 197,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "9ee6977ce86c0ca32fc116c97948160af32857c1",
      "in_reply_to_id": 2260816171,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2260816171\r\n\r\nSeems like a good idea. Maybe default section can be simplified too (untested)\r\n\r\n```c++\r\n        default:\r\n            // Numbers\r\n            if (op >= OP_RESERVED + 1 && op < OP_NOP) {\r\n                BOOST_CHECK_EQUAL(GetOpName(op), util::ToString(op - OP_RESERVED));\r\n            // Named operations\r\n            } else if (op >= OP_NOP && op <= OP_CHECKSIGADD) {\r\n                const auto op_name{GetOpName(op)};\r\n                BOOST_CHECK_NE(op_name, \"OP_UNKNOWN\");\r\n                BOOST_CHECK(op_name.starts_with(\"OP_\"));\r\n            } else {\r\n                BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\r\n            }\r\n            break;\r\n```",
      "created_at": "2025-08-08T15:43:59Z",
      "updated_at": "2025-08-08T15:44:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2263314370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263314370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265381512",
      "pull_request_review_id": 3103702427,
      "id": 2265381512,
      "node_id": "PRRC_kwDOABII586HBvqI",
      "diff_hunk": "@@ -39,26 +39,18 @@ static void DeserializeBlockTest(benchmark::Bench& bench)\n     });\n }\n \n-static void DeserializeAndCheckBlockTest(benchmark::Bench& bench)\n+static void CheckBlockBench(benchmark::Bench& bench)\n {\n-    DataStream stream(benchmark::data::block413567);\n-    std::byte a{0};\n-    stream.write({&a, 1}); // Prevent compaction",
      "path": "src/bench/checkblock.cpp",
      "position": 39,
      "original_position": 18,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "0abbad2de413b2894a10a4dad773f3cf0a562518",
      "in_reply_to_id": 2258225300,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good observation, but we still need this because of https://github.com/bitcoin/bitcoin/blob/master/src/streams.h#L213 - after read reaches the end, it wipes the `Stream` so we should add some garbage to the end to prevent that.\r\nBut we could still do some cleanup in this area, in a separate PR.",
      "created_at": "2025-08-10T17:57:38Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265381512",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265381512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": 44,
      "original_start_line": 44,
      "start_side": "LEFT",
      "line": 46,
      "original_line": 46,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265384394",
      "pull_request_review_id": 3103702427,
      "id": 2265384394,
      "node_id": "PRRC_kwDOABII586HBwXK",
      "diff_hunk": "@@ -52,5 +50,21 @@ static void CheckBlockBench(benchmark::Bench& bench)\n     });\n }\n \n+static void SigOpsBlockBench(benchmark::Bench& bench)\n+{\n+    CBlock block;\n+    DataStream(benchmark::data::block413567) >> TX_WITH_WITNESS(block);\n+\n+    constexpr auto expected_sigops{2841};\n+    bench.batch(expected_sigops).unit(\"sigops\").run([&] {\n+        auto nSigOps{0};",
      "path": "src/bench/checkblock.cpp",
      "position": 69,
      "original_position": 36,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37f72340f95c45e718594b75c231a694f42ead40",
      "in_reply_to_id": 2258254151,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's deliberate, we're exercising https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L4080-L4084. Renaming it only here would only make searching more difficult. I'm all for modernizing, but this didn't seem the right place to do it. ",
      "created_at": "2025-08-10T18:06:44Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265384394",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265384394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265702067",
      "pull_request_review_id": 3103702427,
      "id": 2265702067,
      "node_id": "PRRC_kwDOABII586HC96z",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,\n+     * and to `false` when analyzing scriptPubKeys or scriptSigs.\n+     *\n+     * Historically, Bitcoin always counted each `CHECKMULTISIG` as\n+     * 20 sigops (`MAX_PUBKEYS_PER_MULTISIG`), regardless of the number of pubkeys.\n+     * Starting with P2SH in version 0.6, `CHECKMULTISIG` operations inside wrapped scripts",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 17,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "006a428613710dde24866cf4f6efd7b68b6ee294",
      "in_reply_to_id": 2258271345,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated the doc, thanks!\r\n\r\n> I spent hours being confused by the previous code while reviewing this PR\r\n\r\nDoes this PR make the situation clearer?",
      "created_at": "2025-08-11T05:04:14Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265702067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265702067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265703877",
      "pull_request_review_id": 3103702427,
      "id": 2265703877,
      "node_id": "PRRC_kwDOABII586HC-XF",
      "diff_hunk": "@@ -528,13 +528,19 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * Set `fAccurate` to `true` when analyzing P2SH redeem scripts or SegWit witness scripts,\n+     * and to `false` when analyzing scriptPubKeys or scriptSigs.",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "006a428613710dde24866cf4f6efd7b68b6ee294",
      "in_reply_to_id": 2258280308,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I also thought of that.",
      "created_at": "2025-08-11T05:06:05Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265703877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265703877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 533,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265705648",
      "pull_request_review_id": 3103702427,
      "id": 2265705648,
      "node_id": "PRRC_kwDOABII586HC-yw",
      "diff_hunk": "@@ -556,7 +559,13 @@ class CScript : public CScriptBase\n      */\n     static bool IsPayToAnchor(int version, const std::vector<unsigned char>& program);\n \n-    bool IsPayToScriptHash() const;\n+    bool IsPayToScriptHash() const noexcept",
      "path": "src/script/script.h",
      "position": 95,
      "original_position": 22,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "4df5614c4613c3cb17ae1303b66ec0dda0b08a9a",
      "in_reply_to_id": 2258374237,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe, I don't know in which cases we can safely avoid it, hoping that all compilers will eliminate it.",
      "created_at": "2025-08-11T05:08:17Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265705648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265705648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 578,
      "original_line": 578,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265709153",
      "pull_request_review_id": 3103702427,
      "id": 2265709153,
      "node_id": "PRRC_kwDOABII586HC_ph",
      "diff_hunk": "@@ -4,10 +4,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <compressor.h>\n-",
      "path": "src/compressor.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "2b48b562478405cf114c5816946d827fc525d5f7",
      "in_reply_to_id": 2260317113,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, done",
      "created_at": "2025-08-11T05:11:42Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265709153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265709153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265710779",
      "pull_request_review_id": 3103702427,
      "id": 2265710779,
      "node_id": "PRRC_kwDOABII586HDAC7",
      "diff_hunk": "@@ -164,4 +164,31 @@ BOOST_AUTO_TEST_CASE(compress_p2pk_scripts_not_on_curve)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(compressed_p2pk)\n+{\n+    // Valid Compressed P2PK\n+    {\n+        auto key{ToByteVector(GenerateRandomKey(/*compressed=*/true).GetPubKey())};\n+        const auto script{CScript() << key << OP_CHECKSIG};\n+        BOOST_CHECK(script.IsCompressedPayToPubKey());\n+\n+        CompressedScript compressed_script;\n+        BOOST_CHECK(CompressScript(script, compressed_script));\n+        BOOST_CHECK_EQUAL(compressed_script.size(), 33U);\n+    }\n+\n+    // Compressed P2PK with an invalid prefix\n+    {\n+        auto key{ToByteVector(GenerateRandomKey(/*compressed=*/true).GetPubKey())};\n+        key[0] = 0x06; // 0x02/0x03 would be valid prefixes\n+\n+        const auto script{CScript() << key << OP_CHECKSIG};\n+        BOOST_CHECK(script.IsCompressedPayToPubKey());",
      "path": "src/test/compress_tests.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "2b48b562478405cf114c5816946d827fc525d5f7",
      "in_reply_to_id": 2260350800,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment previously to `IsCompressedPayToPubKey` to explain that:\r\n```C++\r\n//! Detect P2PK script with a compressed public key. Doesn't check the 0x02/0x03 key prefix.\r\nbool IsCompressedPayToPubKey() const noexcept\r\n```",
      "created_at": "2025-08-11T05:13:13Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265710779",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265710779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265712631",
      "pull_request_review_id": 3103702427,
      "id": 2265712631,
      "node_id": "PRRC_kwDOABII586HDAf3",
      "diff_hunk": "@@ -30,10 +31,9 @@ static bool IsToScriptID(const CScript& script, CScriptID& hash)\n     return true;\n }\n \n-static bool IsToPubKey(const CScript& script, CPubKey &pubkey)\n+static bool IsToPubKey(const CScript& script, CPubKey& pubkey)\n {\n-    if (script.size() == 35 && script[0] == 33 && script[34] == OP_CHECKSIG\n-                            && (script[1] == 0x02 || script[1] == 0x03)) {\n+    if (script.IsCompressedPayToPubKey() && (script[1] == 0x02 || script[1] == 0x03)) {",
      "path": "src/compressor.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "2b48b562478405cf114c5816946d827fc525d5f7",
      "in_reply_to_id": 2260374450,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's more consistent, indeed",
      "created_at": "2025-08-11T05:15:29Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265712631",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265712631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265715950",
      "pull_request_review_id": 3103702427,
      "id": 2265715950,
      "node_id": "PRRC_kwDOABII586HDBTu",
      "diff_hunk": "@@ -12,14 +13,14 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/interpreter.h>\n-#include <script/script.h>\n #include <script/script_error.h>\n+#include <script/script.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <script/solver.h>\n #include <streams.h>\n-#include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>",
      "path": "src/test/fuzz/script.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "9ee6977ce86c0ca32fc116c97948160af32857c1",
      "in_reply_to_id": 2260401049,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reverted",
      "created_at": "2025-08-11T05:18:54Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265715950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265715950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265728060",
      "pull_request_review_id": 3103702427,
      "id": 2265728060,
      "node_id": "PRRC_kwDOABII586HDEQ8",
      "diff_hunk": "@@ -28,6 +30,193 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(GetOpName_no_missing_mnemonics)\n+{\n+    // Special\n+    BOOST_CHECK(GetOpName(OP_0) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_FALSE) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_TRUE) == \"1\");\n+    // Direct push\n+    for (auto op{opcodetype(OP_0 + 1)}; op < OP_PUSHDATA1; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Push data\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA1), \"OP_PUSHDATA1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA2), \"OP_PUSHDATA2\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA4), \"OP_PUSHDATA4\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_1NEGATE), \"-1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_RESERVED), \"OP_RESERVED\");\n+    // Numbers\n+    for (auto op{opcodetype(OP_RESERVED + 1)}; op < OP_NOP; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), util::ToString(op - OP_RESERVED));\n+    }\n+    // Named operations\n+    for (auto op{OP_NOP}; op <= OP_CHECKSIGADD; op = opcodetype(op + 1)) {\n+        const auto op_name{GetOpName(op)};\n+        BOOST_CHECK_NE(op_name, \"OP_UNKNOWN\");\n+        BOOST_CHECK(op_name.starts_with(\"OP_\"));\n+    }\n+    // Unused\n+    for (auto op{opcodetype(OP_CHECKSIGADD + 1)}; op < OP_INVALIDOPCODE; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Invalid\n+    BOOST_CHECK_EQUAL(GetOpName(OP_INVALIDOPCODE), \"OP_INVALIDOPCODE\");",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 197,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "9ee6977ce86c0ca32fc116c97948160af32857c1",
      "in_reply_to_id": 2260816171,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Excellent, did something very similar, thanks for the hints. Verified that all ops are indeed checked this way and added both of you as coauthors.",
      "created_at": "2025-08-11T05:29:17Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265728060",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265728060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265728850",
      "pull_request_review_id": 3103702427,
      "id": 2265728850,
      "node_id": "PRRC_kwDOABII586HDEdS",
      "diff_hunk": "@@ -82,7 +82,7 @@ static RPCHelpMan sendrawtransaction()\n             }\n \n             for (const auto& out : mtx.vout) {\n-                if((out.scriptPubKey.IsUnspendable() || !out.scriptPubKey.HasValidOps()) && out.nValue > max_burn_amount) {\n+                if((out.scriptPubKey.IsUnspendable() || !out.scriptPubKey.HasValidBaseOps()) && out.nValue > max_burn_amount) {",
      "path": "src/rpc/mempool.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "a2cce66f11e635924c34b27b253214be8815b0bc",
      "in_reply_to_id": 2261296349,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-11T05:30:11Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265728850",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265728850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265732443",
      "pull_request_review_id": 3103702427,
      "id": 2265732443,
      "node_id": "PRRC_kwDOABII586HDFVb",
      "diff_hunk": "@@ -261,13 +261,13 @@ std::string CScriptWitness::ToString() const\n     return ret + \")\";\n }\n \n-bool CScript::HasValidOps() const\n+bool CScript::HasValidBaseOps() const\n {\n     CScript::const_iterator it = begin();\n     while (it < end()) {\n         opcodetype opcode;\n         std::vector<unsigned char> item;\n-        if (!GetOp(it, opcode, item) || opcode > MAX_OPCODE || item.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+        if (!GetOp(it, opcode, item) || opcode > MAX_BASE_OPCODE || item.size() > MAX_SCRIPT_ELEMENT_SIZE) {",
      "path": "src/script/script.cpp",
      "position": 91,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "a2cce66f11e635924c34b27b253214be8815b0bc",
      "in_reply_to_id": 2261304002,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did something like that, let me know what you think.",
      "created_at": "2025-08-11T05:33:59Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265732443",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265732443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": 268,
      "original_start_line": 264,
      "start_side": "RIGHT",
      "line": 274,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265734514",
      "pull_request_review_id": 3103702427,
      "id": 2265734514,
      "node_id": "PRRC_kwDOABII586HDF1y",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept\n+    {\n+        return size() == 35 &&",
      "path": "src/script/script.h",
      "position": 128,
      "original_position": 14,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254716286,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not yet sure, we have a lot of places where we have similar indexes, I find them hard to follow and verify.\r\nI need more convincing to do it here - or maybe we can attempt it in a follow-up.",
      "created_at": "2025-08-11T05:36:12Z",
      "updated_at": "2025-08-11T06:03:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265734514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265734514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265737840",
      "pull_request_review_id": 3103702427,
      "id": 2265737840,
      "node_id": "PRRC_kwDOABII586HDGpw",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept",
      "path": "src/script/script.h",
      "position": 126,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254732750,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Already done (I don't like the prefix, the script also checks `CPubKey::ValidSize` and the compressor also checks `pubkey.IsFullyValid()` - so it's not just the prefix validation that's \"missing\")",
      "created_at": "2025-08-11T05:39:40Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265737840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265737840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 608,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265738868",
      "pull_request_review_id": 3103702427,
      "id": 2265738868,
      "node_id": "PRRC_kwDOABII586HDG50",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262347850,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks",
      "created_at": "2025-08-11T05:40:42Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265738868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265738868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265740875",
      "pull_request_review_id": 3103702427,
      "id": 2265740875,
      "node_id": "PRRC_kwDOABII586HDHZL",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262462929,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, I don't really like it, it has more moving parts",
      "created_at": "2025-08-11T05:42:44Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265740875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265740875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265744809",
      "pull_request_review_id": 3103702427,
      "id": 2265744809,
      "node_id": "PRRC_kwDOABII586HDIWp",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{}, script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop, script), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1, script), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD, script), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 161,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262489840,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure, but I don't mind - done.",
      "created_at": "2025-08-11T05:46:40Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265744809",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265744809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265745549",
      "pull_request_review_id": 3103702427,
      "id": 2265745549,
      "node_id": "PRRC_kwDOABII586HDIiN",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{}, script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop, script), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1, script), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD, script), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 123,
      "original_position": 119,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262540045,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Because it would look weird in cases such as:\r\n```C++\r\n<< opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\r\n```",
      "created_at": "2025-08-11T05:47:25Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265745549",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265745549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265748212",
      "pull_request_review_id": 3103702427,
      "id": 2265748212,
      "node_id": "PRRC_kwDOABII586HDJL0",
      "diff_hunk": "@@ -528,40 +537,97 @@ class CScript : public CScriptBase\n     }\n \n     /**\n-     * Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-     * as 20 sigops. With pay-to-script-hash, that changed:\n-     * CHECKMULTISIGs serialized in scriptSigs are\n-     * counted more accurately, assuming they are of the form\n-     *  ... OP_N CHECKMULTISIG ...\n-     */\n-    unsigned int GetSigOpCount(bool fAccurate) const;\n-\n-    /**\n-     * Accurately count sigOps, including sigOps in\n-     * pay-to-script-hash transactions:\n+     * Count the number of signature operations (sigops) in this script.\n+     *\n+     * The `fAccurate` parameter controls how sigops are counted for `CHECKMULTISIG` operations.\n+     * When enforcing the `MAX_BLOCK_SIGOPS_COST` limit, set `fAccurate` to `true` when\n+     * analyzing P2SH redeem scripts or SegWit witness scripts, and to `false` when analyzing\n+     * scriptPubKeys or scriptSigs.",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 54,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262712888,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, added it to Russ's latest doc.",
      "created_at": "2025-08-11T05:49:53Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265748212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265748212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 545,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265750279",
      "pull_request_review_id": 3103702427,
      "id": 2265750279,
      "node_id": "PRRC_kwDOABII586HDJsH",
      "diff_hunk": "@@ -1601,18 +1606,13 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK(s == expect);\n }\n \n-BOOST_AUTO_TEST_CASE(script_HasValidOps)\n+BOOST_AUTO_TEST_CASE(script_HasValidBaseOps)\n {\n-    // Exercise the HasValidOps functionality\n-    CScript script;\n-    script = ToScript(\"76a9141234567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac\"_hex); // Normal script\n-    BOOST_CHECK(script.HasValidOps());\n-    script = ToScript(\"76a914ff34567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac\"_hex);\n-    BOOST_CHECK(script.HasValidOps());\n-    script = ToScript(\"ff88ac\"_hex); // Script with OP_INVALIDOPCODE explicit\n-    BOOST_CHECK(!script.HasValidOps());\n-    script = ToScript(\"88acc0\"_hex); // Script with undefined opcode\n-    BOOST_CHECK(!script.HasValidOps());\n+    BOOST_CHECK( ToScript(\"76a9141234567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac\"_hex).HasValidBaseOps()); // Normal script\n+    BOOST_CHECK( ToScript(\"76a914ff34567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac\"_hex).HasValidBaseOps());\n+    BOOST_CHECK(!ToScript(\"ff88ac\"_hex).HasValidBaseOps()); // Script with OP_INVALIDOPCODE explicit\n+    BOOST_CHECK(!ToScript(\"88acc0\"_hex).HasValidBaseOps()); // Script with undefined opcode\n+    BOOST_CHECK(!ToScript(\"ba\"_hex).HasValidBaseOps());     // OP_CHECKSIGADD > MAX_BASE_OPCODE",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 100,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262836125,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added something similar, thanks",
      "created_at": "2025-08-11T05:51:54Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265750279",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265750279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1615,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265752896",
      "pull_request_review_id": 3103702427,
      "id": 2265752896,
      "node_id": "PRRC_kwDOABII586HDKVA",
      "diff_hunk": "@@ -180,9 +180,9 @@ static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inpu\n         // This means sigops in the spent scriptPubKey count toward the limit.\n         // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs(VERIFY) with 16 pubkeys\n         // or fewer. This method of accounting was introduced by BIP16, and BIP54 reuses it.\n-        // The GetSigOpCount call on the previous scriptPubKey counts both bare and P2SH sigops.\n-        sigops += txin.scriptSig.GetSigOpCount(/*fAccurate=*/true);\n-        sigops += prev_txo.scriptPubKey.GetSigOpCount(txin.scriptSig);\n+        sigops += prev_txo.scriptPubKey.CountSigOps(/*fAccurate=*/true);\n+        sigops += txin.scriptSig.CountSigOps(/*fAccurate=*/true);\n+        sigops += CountP2SHSigOps(txin.scriptSig, prev_txo.scriptPubKey);",
      "path": "src/policy/policy.cpp",
      "position": 9,
      "original_position": 9,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262873788,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added Russ's explanation to the commit message.",
      "created_at": "2025-08-11T05:54:23Z",
      "updated_at": "2025-08-11T06:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265752896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265752896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": 183,
      "original_start_line": 183,
      "start_side": "RIGHT",
      "line": 185,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265953142",
      "pull_request_review_id": 3104559199,
      "id": 2265953142,
      "node_id": "PRRC_kwDOABII586HD7N2",
      "diff_hunk": "@@ -28,6 +30,193 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(GetOpName_no_missing_mnemonics)\n+{\n+    // Special\n+    BOOST_CHECK(GetOpName(OP_0) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_FALSE) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_TRUE) == \"1\");\n+    // Direct push\n+    for (auto op{opcodetype(OP_0 + 1)}; op < OP_PUSHDATA1; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Push data\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA1), \"OP_PUSHDATA1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA2), \"OP_PUSHDATA2\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA4), \"OP_PUSHDATA4\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_1NEGATE), \"-1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_RESERVED), \"OP_RESERVED\");\n+    // Numbers\n+    for (auto op{opcodetype(OP_RESERVED + 1)}; op < OP_NOP; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), util::ToString(op - OP_RESERVED));\n+    }\n+    // Named operations\n+    for (auto op{OP_NOP}; op <= OP_CHECKSIGADD; op = opcodetype(op + 1)) {\n+        const auto op_name{GetOpName(op)};\n+        BOOST_CHECK_NE(op_name, \"OP_UNKNOWN\");\n+        BOOST_CHECK(op_name.starts_with(\"OP_\"));\n+    }\n+    // Unused\n+    for (auto op{opcodetype(OP_CHECKSIGADD + 1)}; op < OP_INVALIDOPCODE; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Invalid\n+    BOOST_CHECK_EQUAL(GetOpName(OP_INVALIDOPCODE), \"OP_INVALIDOPCODE\");",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 197,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "9ee6977ce86c0ca32fc116c97948160af32857c1",
      "in_reply_to_id": 2260816171,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! Could avoid some more redundant `GetOpName()`-calls and use more information rich variable naming.\r\n(nit: Still have a minor preference for specifying which op-codes are expected to result in \"OP_UNKNOWN\"):\r\n```diff\r\ndiff --git a/src/test/script_tests.cpp b/src/test/script_tests.cpp\r\nindex 60a730dfc2..a851bf6c9f 100644\r\n--- a/src/test/script_tests.cpp\r\n+++ b/src/test/script_tests.cpp\r\n@@ -1620,29 +1620,31 @@ BOOST_AUTO_TEST_CASE(script_HasValidBaseOps)\r\n BOOST_AUTO_TEST_CASE(GetOpName_no_missing_mnemonics)\r\n {\r\n     for (auto op{OP_0}; op <= OP_INVALIDOPCODE; op = opcodetype(op + 1)) {\r\n-        switch (auto arg0{GetOpName(op)}; op) {\r\n+        switch (auto name{GetOpName(op)}; op) {\r\n         // Special\r\n-        case OP_FALSE: BOOST_CHECK_EQUAL(arg0, \"0\"); break;\r\n-        case OP_TRUE: BOOST_CHECK_EQUAL(arg0, \"1\"); break;\r\n+        case OP_FALSE: BOOST_CHECK_EQUAL(name, \"0\"); break;\r\n+        case OP_TRUE: BOOST_CHECK_EQUAL(name, \"1\"); break;\r\n         // Push data\r\n-        case OP_PUSHDATA1: BOOST_CHECK_EQUAL(arg0, \"OP_PUSHDATA1\"); break;\r\n-        case OP_PUSHDATA2: BOOST_CHECK_EQUAL(arg0, \"OP_PUSHDATA2\"); break;\r\n-        case OP_PUSHDATA4: BOOST_CHECK_EQUAL(arg0, \"OP_PUSHDATA4\"); break;\r\n+        case OP_PUSHDATA1: BOOST_CHECK_EQUAL(name, \"OP_PUSHDATA1\"); break;\r\n+        case OP_PUSHDATA2: BOOST_CHECK_EQUAL(name, \"OP_PUSHDATA2\"); break;\r\n+        case OP_PUSHDATA4: BOOST_CHECK_EQUAL(name, \"OP_PUSHDATA4\"); break;\r\n         // Other\r\n-        case OP_1NEGATE: BOOST_CHECK_EQUAL(arg0, \"-1\"); break;\r\n-        case OP_RESERVED: BOOST_CHECK_EQUAL(arg0, \"OP_RESERVED\"); break;\r\n-        case OP_INVALIDOPCODE: BOOST_CHECK_EQUAL(arg0, \"OP_INVALIDOPCODE\"); break;\r\n+        case OP_1NEGATE: BOOST_CHECK_EQUAL(name, \"-1\"); break;\r\n+        case OP_RESERVED: BOOST_CHECK_EQUAL(name, \"OP_RESERVED\"); break;\r\n+        case OP_INVALIDOPCODE: BOOST_CHECK_EQUAL(name, \"OP_INVALIDOPCODE\"); break;\r\n         default:\r\n             if (op >= OP_RESERVED + 1 && op < OP_NOP) {\r\n                 // Numbers\r\n-                BOOST_CHECK_EQUAL(GetOpName(op), util::ToString(op - OP_RESERVED));\r\n+                BOOST_CHECK_EQUAL(name, util::ToString(op - OP_RESERVED));\r\n             } else if (op >= OP_NOP && op <= OP_CHECKSIGADD) {\r\n                 // Named operations\r\n-                const auto op_name{GetOpName(op)};\r\n-                BOOST_CHECK_NE(op_name, \"OP_UNKNOWN\");\r\n-                BOOST_CHECK(op_name.starts_with(\"OP_\"));\r\n+                BOOST_CHECK_NE(name, \"OP_UNKNOWN\");\r\n+                BOOST_CHECK(name.starts_with(\"OP_\"));\r\n+            } else if ((op >= OP_0 + 1 && op < OP_PUSHDATA1) || (op >= OP_CHECKSIGADD + 1 && op < OP_INVALIDOPCODE)) {\r\n+                // Direct push or unused\r\n+                BOOST_CHECK_EQUAL(name, \"OP_UNKNOWN\");\r\n             } else {\r\n-                BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\r\n+                BOOST_FAIL(\"Incomplete coverage\");\r\n             }\r\n             break;\r\n         }\r\n```",
      "created_at": "2025-08-11T07:58:07Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2265953142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265953142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269101439",
      "pull_request_review_id": 3104559199,
      "id": 2269101439,
      "node_id": "PRRC_kwDOABII586HP71_",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{}, script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop, script), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1, script), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD, script), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 123,
      "original_position": 119,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262540045,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consider it a nit, but curious why it would look weird?",
      "created_at": "2025-08-12T08:28:43Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2269101439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269101439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269111251",
      "pull_request_review_id": 3104559199,
      "id": 2269111251,
      "node_id": "PRRC_kwDOABII586HP-PT",
      "diff_hunk": "@@ -261,13 +261,13 @@ std::string CScriptWitness::ToString() const\n     return ret + \")\";\n }\n \n-bool CScript::HasValidOps() const\n+bool CScript::HasValidBaseOps() const\n {\n     CScript::const_iterator it = begin();\n     while (it < end()) {\n         opcodetype opcode;\n         std::vector<unsigned char> item;\n-        if (!GetOp(it, opcode, item) || opcode > MAX_OPCODE || item.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+        if (!GetOp(it, opcode, item) || opcode > MAX_BASE_OPCODE || item.size() > MAX_SCRIPT_ELEMENT_SIZE) {",
      "path": "src/script/script.cpp",
      "position": 91,
      "original_position": 12,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "a2cce66f11e635924c34b27b253214be8815b0bc",
      "in_reply_to_id": 2261304002,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Like the new version, makes it clearer!\r\n\r\n(nit: I would drop the \"Also fixes minor spacing issues in conditional statements.\"-paragraph if you retouch).",
      "created_at": "2025-08-12T08:32:30Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2269111251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269111251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": 268,
      "original_start_line": 264,
      "start_side": "RIGHT",
      "line": 274,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269183678",
      "pull_request_review_id": 3104559199,
      "id": 2269183678,
      "node_id": "PRRC_kwDOABII586HQP6-",
      "diff_hunk": "@@ -164,4 +164,31 @@ BOOST_AUTO_TEST_CASE(compress_p2pk_scripts_not_on_curve)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(compressed_p2pk)\n+{\n+    // Valid Compressed P2PK\n+    {\n+        auto key{ToByteVector(GenerateRandomKey(/*compressed=*/true).GetPubKey())};\n+        const auto script{CScript() << key << OP_CHECKSIG};\n+        BOOST_CHECK(script.IsCompressedPayToPubKey());\n+\n+        CompressedScript compressed_script;\n+        BOOST_CHECK(CompressScript(script, compressed_script));\n+        BOOST_CHECK_EQUAL(compressed_script.size(), 33U);\n+    }\n+\n+    // Compressed P2PK with an invalid prefix\n+    {\n+        auto key{ToByteVector(GenerateRandomKey(/*compressed=*/true).GetPubKey())};\n+        key[0] = 0x06; // 0x02/0x03 would be valid prefixes\n+\n+        const auto script{CScript() << key << OP_CHECKSIG};\n+        BOOST_CHECK(script.IsCompressedPayToPubKey());",
      "path": "src/test/compress_tests.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "2b48b562478405cf114c5816946d827fc525d5f7",
      "in_reply_to_id": 2260350800,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, saw that, but still thought a brief local comment would decrease the level of surprise for those reading the test. Please consider it a nit though.\r\n```suggestion\r\n        BOOST_CHECK(script.IsCompressedPayToPubKey()); // Prefix is not validated\r\n```",
      "created_at": "2025-08-12T08:59:15Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2269183678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269183678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269542353",
      "pull_request_review_id": 3104559199,
      "id": 2269542353,
      "node_id": "PRRC_kwDOABII586HRnfR",
      "diff_hunk": "@@ -556,7 +559,13 @@ class CScript : public CScriptBase\n      */\n     static bool IsPayToAnchor(int version, const std::vector<unsigned char>& program);\n \n-    bool IsPayToScriptHash() const;\n+    bool IsPayToScriptHash() const noexcept",
      "path": "src/script/script.h",
      "position": 95,
      "original_position": 22,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "4df5614c4613c3cb17ae1303b66ec0dda0b08a9a",
      "in_reply_to_id": 2258374237,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I hoped it would be inferred by the compiler, but experiments such as `static_assert(noexcept(script.IsPayToAnchor()))` when removing the explicit specification showed that to not be the case. Guess we can open the floodgates of adding these identifiers to touched/new functions where appropriate.",
      "created_at": "2025-08-12T11:27:38Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2269542353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269542353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 578,
      "original_line": 578,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269563051",
      "pull_request_review_id": 3104559199,
      "id": 2269563051,
      "node_id": "PRRC_kwDOABII586HRsir",
      "diff_hunk": "@@ -52,5 +50,21 @@ static void CheckBlockBench(benchmark::Bench& bench)\n     });\n }\n \n+static void SigOpsBlockBench(benchmark::Bench& bench)\n+{\n+    CBlock block;\n+    DataStream(benchmark::data::block413567) >> TX_WITH_WITNESS(block);\n+\n+    constexpr auto expected_sigops{2841};\n+    bench.batch(expected_sigops).unit(\"sigops\").run([&] {\n+        auto nSigOps{0};",
      "path": "src/bench/checkblock.cpp",
      "position": 69,
      "original_position": 36,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37f72340f95c45e718594b75c231a694f42ead40",
      "in_reply_to_id": 2258254151,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did you mean these lines? (Better to not link master as it's a moving target).\r\nhttps://github.com/bitcoin/bitcoin/blob/273e600e65c2e31a6e9a0bd72b40672aaa503b08/src/validation.cpp#L4075-L4079\r\nCertainly nit-level.",
      "created_at": "2025-08-12T11:36:57Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2269563051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269563051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269627312",
      "pull_request_review_id": 3104559199,
      "id": 2269627312,
      "node_id": "PRRC_kwDOABII586HR8Ow",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept\n+    {\n+        return size() == 35 &&",
      "path": "src/script/script.h",
      "position": 128,
      "original_position": 14,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254716286,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think my argument above is strong enough but this is not a blocker for me.",
      "created_at": "2025-08-12T12:05:02Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2269627312",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269627312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269707332",
      "pull_request_review_id": 3104559199,
      "id": 2269707332,
      "node_id": "PRRC_kwDOABII586HSPxE",
      "diff_hunk": "",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "cf8f476ef25e4fe43e67970ee2ec6a265d49e763",
      "original_commit_id": "dff42e3af75d13603a64d7250a303b016edf7cec",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: The added `IsPayToWitnessPubKeyHash()` makes tests feel more complete, but is pretty much dead code.",
      "created_at": "2025-08-12T12:38:23Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2269707332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269707332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269760110",
      "pull_request_review_id": 3104559199,
      "id": 2269760110,
      "node_id": "PRRC_kwDOABII586HScpu",
      "diff_hunk": "@@ -222,15 +222,6 @@ bool CScript::IsPayToAnchor(int version, const std::vector<unsigned char>& progr\n         program[1] == 0x73;\n }\n \n-bool CScript::IsPayToScriptHash() const",
      "path": "src/script/script.cpp",
      "position": 52,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "6b167d5835b68297b259cc99baee8eff3968155a",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1. In 6b167d5835b68297b259cc99baee8eff3968155a etc, what is the gain from making these methods inline by moving them to the header?\r\n2. nit: If these moves are kept, would suggest using \"move\" rather than \"pull\" in the commit message.\r\n3. nit: Would suggest using \"extract\" rather than \"add\" (except for `IsPayToWitnessPubKeyHash()` which is new code).",
      "created_at": "2025-08-12T12:56:47Z",
      "updated_at": "2025-08-12T13:15:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2269760110",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269760110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270336232",
      "pull_request_review_id": 3111519834,
      "id": 2270336232,
      "node_id": "PRRC_kwDOABII586HUpTo",
      "diff_hunk": "@@ -52,5 +50,21 @@ static void CheckBlockBench(benchmark::Bench& bench)\n     });\n }\n \n+static void SigOpsBlockBench(benchmark::Bench& bench)\n+{\n+    CBlock block;\n+    DataStream(benchmark::data::block413567) >> TX_WITH_WITNESS(block);\n+\n+    constexpr auto expected_sigops{2841};\n+    bench.batch(expected_sigops).unit(\"sigops\").run([&] {\n+        auto nSigOps{0};",
      "path": "src/bench/checkblock.cpp",
      "position": 69,
      "original_position": 36,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "37f72340f95c45e718594b75c231a694f42ead40",
      "in_reply_to_id": 2258254151,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah",
      "created_at": "2025-08-12T15:43:02Z",
      "updated_at": "2025-08-12T16:26:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2270336232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270336232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270353206",
      "pull_request_review_id": 3111519834,
      "id": 2270353206,
      "node_id": "PRRC_kwDOABII586HUtc2",
      "diff_hunk": "@@ -222,15 +222,6 @@ bool CScript::IsPayToAnchor(int version, const std::vector<unsigned char>& progr\n         program[1] == 0x73;\n }\n \n-bool CScript::IsPayToScriptHash() const",
      "path": "src/script/script.cpp",
      "position": 52,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "6b167d5835b68297b259cc99baee8eff3968155a",
      "in_reply_to_id": 2269760110,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1) we don't introduce a header + implementation duplication - what would be the advantage in this case of separating them to header + impl?  \r\n\r\n2,3) done",
      "created_at": "2025-08-12T15:46:48Z",
      "updated_at": "2025-08-12T16:26:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2270353206",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270353206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270374741",
      "pull_request_review_id": 3111519834,
      "id": 2270374741,
      "node_id": "PRRC_kwDOABII586HUytV",
      "diff_hunk": "",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "cf8f476ef25e4fe43e67970ee2ec6a265d49e763",
      "original_commit_id": "dff42e3af75d13603a64d7250a303b016edf7cec",
      "in_reply_to_id": 2269707332,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm planning on using these to short-circuit sigop counting, see https://github.com/bitcoin/bitcoin/pull/32532/files#diff-6da39bed8a76fcaae51f021f0cdd906748aa99fdbf2d41981947f6a1b18fbe7bR192",
      "created_at": "2025-08-12T15:50:57Z",
      "updated_at": "2025-08-12T16:26:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2270374741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270374741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270385928",
      "pull_request_review_id": 3111519834,
      "id": 2270385928,
      "node_id": "PRRC_kwDOABII586HU1cI",
      "diff_hunk": "@@ -164,4 +164,31 @@ BOOST_AUTO_TEST_CASE(compress_p2pk_scripts_not_on_curve)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(compressed_p2pk)\n+{\n+    // Valid Compressed P2PK\n+    {\n+        auto key{ToByteVector(GenerateRandomKey(/*compressed=*/true).GetPubKey())};\n+        const auto script{CScript() << key << OP_CHECKSIG};\n+        BOOST_CHECK(script.IsCompressedPayToPubKey());\n+\n+        CompressedScript compressed_script;\n+        BOOST_CHECK(CompressScript(script, compressed_script));\n+        BOOST_CHECK_EQUAL(compressed_script.size(), 33U);\n+    }\n+\n+    // Compressed P2PK with an invalid prefix\n+    {\n+        auto key{ToByteVector(GenerateRandomKey(/*compressed=*/true).GetPubKey())};\n+        key[0] = 0x06; // 0x02/0x03 would be valid prefixes\n+\n+        const auto script{CScript() << key << OP_CHECKSIG};\n+        BOOST_CHECK(script.IsCompressedPayToPubKey());",
      "path": "src/test/compress_tests.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "2b48b562478405cf114c5816946d827fc525d5f7",
      "in_reply_to_id": 2260350800,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since many other parts aren't validated either, only the structure, I think I'll leave it as is",
      "created_at": "2025-08-12T15:53:21Z",
      "updated_at": "2025-08-12T16:26:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2270385928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270385928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270396303",
      "pull_request_review_id": 3111519834,
      "id": 2270396303,
      "node_id": "PRRC_kwDOABII586HU3-P",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{}, script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop, script), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1, script), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD, script), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 123,
      "original_position": 119,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262540045,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "just seems more consistent with the rest (I also considered it at first, changed it back, seems eaiser to parse).\r\n\r\nAlso, these aren't actual opcodes (edit: I'm explicitly creating invalid pushes here).\r\nI though of adding these as `CScript{} << \"ffff\"_hex`, but `operator<<(std::span<const std::byte> b)` starts with `AppendDataSize`, we don't really have a way to just add raw bytes (except for `.insert()` which will likely make the code uglier).",
      "created_at": "2025-08-12T15:55:32Z",
      "updated_at": "2025-08-12T18:36:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2270396303",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270396303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270431354",
      "pull_request_review_id": 3111519834,
      "id": 2270431354,
      "node_id": "PRRC_kwDOABII586HVAh6",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept\n+    {\n+        return size() == 35 &&",
      "path": "src/script/script.h",
      "position": 128,
      "original_position": 14,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254716286,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There's a fine line here, as @ryanofsky also mentioned, we can endlessly bikeshed here. I'm for deduplication, but in this case leaving the hard-coded indexes seems safer to me. I don't mind doing this and other related hard-coded values in a follow-up.",
      "created_at": "2025-08-12T16:02:41Z",
      "updated_at": "2025-08-12T16:26:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2270431354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270431354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271367931",
      "pull_request_review_id": 3112987777,
      "id": 2271367931,
      "node_id": "PRRC_kwDOABII586HYlL7",
      "diff_hunk": "",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "cf8f476ef25e4fe43e67970ee2ec6a265d49e763",
      "original_commit_id": "dff42e3af75d13603a64d7250a303b016edf7cec",
      "in_reply_to_id": 2269707332,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, now I recall it from the PR description.\r\n\r\nnit: Would be nice to add that motivation in the commit message when adding `IsPayToWitnessPubKeyHash()`.",
      "created_at": "2025-08-12T21:46:31Z",
      "updated_at": "2025-08-12T22:10:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2271367931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271367931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271393495",
      "pull_request_review_id": 3112987777,
      "id": 2271393495,
      "node_id": "PRRC_kwDOABII586HYrbX",
      "diff_hunk": "@@ -222,15 +222,6 @@ bool CScript::IsPayToAnchor(int version, const std::vector<unsigned char>& progr\n         program[1] == 0x73;\n }\n \n-bool CScript::IsPayToScriptHash() const",
      "path": "src/script/script.cpp",
      "position": 52,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "6b167d5835b68297b259cc99baee8eff3968155a",
      "in_reply_to_id": 2269760110,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "2,3) thanks!\r\n\r\n1\\): Arguments for avoiding the move:\r\n\r\n➕: Avoids moving 4 functions to headers, minimizing the diff and making it clearer which parts of the body changed if any.\r\n\r\n➕: Someone chose to have them like this, so best to avoid flip-flopping for minor reasons.\r\n\r\n➕: Keeps the *script.h* header small and faster to re-parse for each compilation unit as it is a commonly included header, direct includes:\r\n```\r\n₿ git grep \"<script/script\\.h>\" |wc -l\r\n98\r\n```\r\n(➖): Not inlining adds some linking time, but those functions are rarely called.\r\n\r\n➕: Increases readability for getting an overview of `CScript` for programmers using editors that don't auto-collapse function bodies.",
      "created_at": "2025-08-12T22:01:19Z",
      "updated_at": "2025-08-12T22:10:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2271393495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271393495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271403451",
      "pull_request_review_id": 3112987777,
      "id": 2271403451,
      "node_id": "PRRC_kwDOABII586HYt27",
      "diff_hunk": "@@ -28,6 +30,193 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)\n+                              << OP_CHECKSIGVERIFY}; // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)}; // not enough data after OP_PUSHDATA2\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2\n+                              << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)}; // not enough data after OP_PUSHDATA4\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\n+                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\n+                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY}; // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(GetOpName_no_missing_mnemonics)\n+{\n+    // Special\n+    BOOST_CHECK(GetOpName(OP_0) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_FALSE) == \"0\");\n+    BOOST_CHECK(GetOpName(OP_TRUE) == \"1\");\n+    // Direct push\n+    for (auto op{opcodetype(OP_0 + 1)}; op < OP_PUSHDATA1; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Push data\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA1), \"OP_PUSHDATA1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA2), \"OP_PUSHDATA2\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_PUSHDATA4), \"OP_PUSHDATA4\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_1NEGATE), \"-1\");\n+    BOOST_CHECK_EQUAL(GetOpName(OP_RESERVED), \"OP_RESERVED\");\n+    // Numbers\n+    for (auto op{opcodetype(OP_RESERVED + 1)}; op < OP_NOP; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), util::ToString(op - OP_RESERVED));\n+    }\n+    // Named operations\n+    for (auto op{OP_NOP}; op <= OP_CHECKSIGADD; op = opcodetype(op + 1)) {\n+        const auto op_name{GetOpName(op)};\n+        BOOST_CHECK_NE(op_name, \"OP_UNKNOWN\");\n+        BOOST_CHECK(op_name.starts_with(\"OP_\"));\n+    }\n+    // Unused\n+    for (auto op{opcodetype(OP_CHECKSIGADD + 1)}; op < OP_INVALIDOPCODE; op = opcodetype(op + 1)) {\n+        BOOST_CHECK_EQUAL(GetOpName(op), \"OP_UNKNOWN\");\n+    }\n+    // Invalid\n+    BOOST_CHECK_EQUAL(GetOpName(OP_INVALIDOPCODE), \"OP_INVALIDOPCODE\");",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 1,
      "original_position": 197,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "9ee6977ce86c0ca32fc116c97948160af32857c1",
      "in_reply_to_id": 2260816171,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Seems to be missing a newline after `default:`:\r\nhttps://github.com/bitcoin/bitcoin/blob/8ec20fbe3fe476e44a60bba2ed90f8bff39fc4db/src/test/script_tests.cpp#L1632-L1639",
      "created_at": "2025-08-12T22:09:14Z",
      "updated_at": "2025-08-12T22:10:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2271403451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271403451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271417959",
      "pull_request_review_id": 3113051020,
      "id": 2271417959,
      "node_id": "PRRC_kwDOABII586HYxZn",
      "diff_hunk": "@@ -222,15 +222,6 @@ bool CScript::IsPayToAnchor(int version, const std::vector<unsigned char>& progr\n         program[1] == 0x73;\n }\n \n-bool CScript::IsPayToScriptHash() const",
      "path": "src/script/script.cpp",
      "position": 52,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "6b167d5835b68297b259cc99baee8eff3968155a",
      "in_reply_to_id": 2269760110,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I prefer having them in the same place, @ryanofsky, where do you think these helpers belong, in header or cpp?",
      "created_at": "2025-08-12T22:21:11Z",
      "updated_at": "2025-08-12T22:21:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2271417959",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271417959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271418069",
      "pull_request_review_id": 3113051137,
      "id": 2271418069,
      "node_id": "PRRC_kwDOABII586HYxbV",
      "diff_hunk": "",
      "path": "src/script/script.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "cf8f476ef25e4fe43e67970ee2ec6a265d49e763",
      "original_commit_id": "dff42e3af75d13603a64d7250a303b016edf7cec",
      "in_reply_to_id": 2269707332,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, done",
      "created_at": "2025-08-12T22:21:16Z",
      "updated_at": "2025-08-12T22:21:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2271418069",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271418069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2272304823",
      "pull_request_review_id": 3114243593,
      "id": 2272304823,
      "node_id": "PRRC_kwDOABII586HcJ63",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{}, script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop, script), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1, script), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD, script), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 123,
      "original_position": 119,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262540045,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was glossing over the fact that you want to use these to represent numeric lengths, sorry. The old-style C++ `opcodetype()` casts derailed me.\r\n\r\nHave a slight preference for:\r\n```diff\r\ndiff --git a/src/test/sigopcount_tests.cpp b/src/test/sigopcount_tests.cpp\r\nindex eeb9eec3f9..dbe1dd7ca2 100644\r\n--- a/src/test/sigopcount_tests.cpp\r\n+++ b/src/test/sigopcount_tests.cpp\r\n@@ -125,71 +125,77 @@ BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\r\n         }\r\n         {\r\n             // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\r\n-            const auto script{CScript{} << OP_CHECKSIG\r\n-                              << opcodetype(0x02)\r\n-                              << OP_CHECKSIGVERIFY};\r\n+            auto script{CScript{} << OP_CHECKSIG};\r\n+            script.push_back(0x02);\r\n+            script << OP_CHECKSIGVERIFY;\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n \r\n         {\r\n-            // not enough data after OP_PUSHDATA1\r\n+            // missing data after OP_PUSHDATA1\r\n             const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1};\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n         {\r\n             // out of bounds OP_PUSHDATA1 data size ignoring OP_CHECKSIGVERIFY\r\n-            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\r\n-                              << opcodetype(0xff)\r\n-                              << OP_CHECKSIGVERIFY};\r\n+            auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1};\r\n+            script.push_back(0xff);\r\n+            script << OP_CHECKSIGVERIFY;\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n \r\n         {\r\n-            // not enough data after OP_PUSHDATA2\r\n+            // missing data after OP_PUSHDATA2\r\n             const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2};\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n         {\r\n             // not enough data after OP_PUSHDATA2\r\n-            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2 << opcodetype(0xff)};\r\n+            auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2};\r\n+            script.push_back(0xff);\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n         {\r\n             // out of bounds OP_PUSHDATA2 data size ignoring OP_CHECKSIGVERIFY\r\n-            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2\r\n-                              << opcodetype(0xff) << opcodetype(0xff)\r\n-                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY};\r\n+            auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA2};\r\n+            script.push_back(0xff);\r\n+            script.push_back(0xff);\r\n+            script << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY;\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n \r\n         {\r\n-            // not enough data after OP_PUSHDATA4\r\n+            // missing data after OP_PUSHDATA4\r\n             const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4};\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n         {\r\n             // not enough data after OP_PUSHDATA4\r\n-            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\r\n-                              << opcodetype(0xff)};\r\n+            auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4};\r\n+            script.push_back(0xff);\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n         {\r\n             // not enough data after OP_PUSHDATA4\r\n-            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\r\n-                              << opcodetype(0xff) << opcodetype(0xff)};\r\n+            auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4};\r\n+            script.push_back(0xff);\r\n+            script.push_back(0xff);\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n         {\r\n             // not enough data after OP_PUSHDATA4\r\n-            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\r\n-                              << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)};\r\n+            auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4};\r\n+            script.push_back(0xff);\r\n+            script.push_back(0xff);\r\n+            script.push_back(0xff);\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n         {\r\n             // out of bounds OP_PUSHDATA4 data size ignoring OP_CHECKMULTISIGVERIFY\r\n-            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4\r\n-                              << opcodetype(100) << opcodetype(0xff) << opcodetype(0xff) << opcodetype(0xff)\r\n-                              << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY};\r\n+            auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA4};\r\n+            constexpr uint8_t length[]{100, 0xff, 0xff, 0xff};\r\n+            script.insert(script.end(), length, length + sizeof(length));\r\n+            script << OP_CHECKSIG << OP_CHECKSIGVERIFY << OP_CHECKMULTISIG << OP_CHECKMULTISIGVERIFY;\r\n             BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\r\n         }\r\n     }\r\n```\r\n* Avoids `opcodetype()` for non-opcodes.\r\n* Makes the `CScript` mutable, but the scopes are narrow.",
      "created_at": "2025-08-13T07:17:30Z",
      "updated_at": "2025-08-13T07:23:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2272304823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2272304823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273141547",
      "pull_request_review_id": 3115365742,
      "id": 2273141547,
      "node_id": "PRRC_kwDOABII586HfWMr",
      "diff_hunk": "@@ -592,6 +593,13 @@ class CScript : public CScriptBase\n                (*this)[1] == WITNESS_V1_TAPROOT_SIZE;\n     }\n \n+    bool IsCompressedPayToPubKey() const noexcept\n+    {\n+        return size() == 35 &&",
      "path": "src/script/script.h",
      "position": 128,
      "original_position": 14,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "017f58821fe857a2bb7ac14f2b00b349936391d8",
      "in_reply_to_id": 2254716286,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2270431354\r\n\r\nAm fine with current approach just wanted to link https://github.com/bitcoin/bitcoin/pull/32729#pullrequestreview-3097866742 in this thread which shows the way I'd suggest writing this.\r\n\r\nThe surface difference between two styles is that mine avoids magic numbers while current style doesn't. I think the more fundamental difference is l0rinc thinks it's good if this code would be broken with different constant sizes \"to make sure that we do have to change in multiple places if we really want to change this value\" and I don't think that's good. Imo, if it's important for a constant to not change, unit tests, static asserts, and comments providing rationales are better mechanisms for ensuring this than segfaults.\r\n\r\nPractically speaking though I don't think style of this code matters, and anything seems fine here.",
      "created_at": "2025-08-13T11:48:54Z",
      "updated_at": "2025-08-13T12:12:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2273141547",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273141547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273202121",
      "pull_request_review_id": 3115365742,
      "id": 2273202121,
      "node_id": "PRRC_kwDOABII586Hfk_J",
      "diff_hunk": "@@ -222,15 +222,6 @@ bool CScript::IsPayToAnchor(int version, const std::vector<unsigned char>& progr\n         program[1] == 0x73;\n }\n \n-bool CScript::IsPayToScriptHash() const",
      "path": "src/script/script.cpp",
      "position": 52,
      "original_position": 4,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "6b167d5835b68297b259cc99baee8eff3968155a",
      "in_reply_to_id": 2269760110,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2271417959\r\n\r\n> I prefer having them in the same place, @ryanofsky, where do you think these helpers belong, in header or cpp?\r\n\r\nNo real opinion, I just assumed these needed to be moved for the optimization in d76d7531dfcc7ef2d104b8977a2239cb1fc89119.\r\n\r\nAbstractly,  I think it makes sense for these to be in a header file since they are low-level and natural candidates to inline. Ideally I don't think they'd be in this header file for reasons hodlinator mentioned, and I would probably want them to be standalone functions not class methods since I think the purpose of classes is to encapsulate internal state and these aren't accessing anything private.\r\n\r\nBut I think anything is fine here, and it makes sense to go with your preference if there aren't objections.",
      "created_at": "2025-08-13T12:04:15Z",
      "updated_at": "2025-08-13T12:12:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2273202121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273202121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274142523",
      "pull_request_review_id": 3117011685,
      "id": 2274142523,
      "node_id": "PRRC_kwDOABII586HjKk7",
      "diff_hunk": "@@ -28,41 +30,226 @@ Serialize(const CScript& s)\n \n BOOST_FIXTURE_TEST_SUITE(sigopcount_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(GetSigOpCount)\n+// Asserts the expected legacy/accurate sig-op totals for all common known script templates\n+BOOST_AUTO_TEST_CASE(CountSigOpsKnownTemplates)\n+{\n+    CKey dummyKey{GenerateRandomKey(/*compressed=*/true)};\n+    const auto pubkey{dummyKey.GetPubKey()};\n+\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            // P2A\n+            const std::vector<unsigned char> anchor_data{0x4e, 0x73};\n+            const auto script{CScript{} << OP_1 << anchor_data};\n+\n+            BOOST_CHECK(script.IsPayToAnchor());\n+            BOOST_CHECK(script.IsPayToAnchor(1, anchor_data));\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // OP_RETURN with sigop after (non-standard, found first in block 229,712)\n+            const auto p2pkh_hash{\"cd2b3298b7f455f39805377e5f213093df3cc09a\"_hex_v_u8};\n+            const auto script{CScript{} << OP_RETURN << OP_DUP << OP_HASH160 << p2pkh_hash << OP_EQUALVERIFY << OP_CHECKSIG};\n+\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WPKH\n+            const auto script{GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToWitnessPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2SH\n+            const auto script{GetScriptForDestination(ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{}, script), 0);\n+            const auto single_sigop{CScript{} << ToByteVector(CScript{} << OP_CHECKMULTISIG)};\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(single_sigop, script), 20); // arg is counted since script is P2SH\n+\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_PUSHDATA1, script), 0);   // error: OP_PUSHDATA1, but no size byte\n+            BOOST_CHECK_EQUAL(CountP2SHSigOps(CScript{} << OP_CHECKSIGADD, script), 0); // error: OP_CHECKSIGADD > OP_16\n+        }\n+        {\n+            // P2PKH\n+            const auto script{GetScriptForDestination(PKHash(pubkey.GetID()))};\n+            BOOST_REQUIRE(script.IsPayToPubKeyHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2WSH\n+            const auto script{GetScriptForDestination(WitnessV0ScriptHash(CScript{} << OP_TRUE))};\n+            BOOST_REQUIRE(script.IsPayToWitnessScriptHash());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2TR\n+            const auto script{GetScriptForDestination(WitnessV1Taproot(XOnlyPubKey(pubkey)))};\n+            BOOST_REQUIRE(script.IsPayToTaproot());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 0);\n+        }\n+        {\n+            // P2PK (compressed)\n+            const auto script{GetScriptForRawPubKey(pubkey)};\n+            BOOST_REQUIRE(script.IsCompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            // P2PK (uncompressed)\n+            CKey uncompressedKey{GenerateRandomKey(/*compressed=*/false)};\n+            const auto script{GetScriptForRawPubKey(uncompressedKey.GetPubKey())};\n+            BOOST_REQUIRE(script.IsUncompressedPayToPubKey());\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+    }\n+\n+    // MULTISIG\n+    std::vector<CPubKey> keys;\n+    keys.push_back(pubkey);\n+    keys.push_back(pubkey); // Using the same key twice for simplicity\n+    const auto script{GetScriptForMultisig(1, keys)};\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/false), 20); // Default max pubkeys\n+    BOOST_CHECK_EQUAL(script.CountSigOps(/*fAccurate=*/true), 2);   // Actual count\n+}\n+\n+// Feeds malformed PUSHDATA sequences to confirm the parser never crashes and still counts sig-ops that appear before the error.\n+BOOST_AUTO_TEST_CASE(CountSigOpsErrors)\n+{\n+    for (const bool fAccurate : {false, true}) {\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << opcodetype(0x4b)}; // push-75 with 0 bytes present\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG\n+                              << opcodetype(0x02)\n+                              << OP_CHECKSIGVERIFY}; // push-2 with only 1 byte present ignoring OP_CHECKSIGVERIFY\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1}; // not enough data after OP_PUSHDATA1\n+            BOOST_CHECK_EQUAL(script.CountSigOps(fAccurate), 1);\n+        }\n+        {\n+            const auto script{CScript{} << OP_CHECKSIG << OP_PUSHDATA1\n+                              << opcodetype(0xff)",
      "path": "src/test/sigopcount_tests.cpp",
      "position": 123,
      "original_position": 119,
      "commit_id": "3219b59c47d5a487a1129f702602f58ca9285342",
      "original_commit_id": "748b10bbe864191ef49c32e0963e048b939f6088",
      "in_reply_to_id": 2262540045,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, I was explicitly trying to avoid these, but maybe we can polish this in a follow-up.",
      "created_at": "2025-08-13T17:17:37Z",
      "updated_at": "2025-08-13T17:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32729#discussion_r2274142523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274142523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32729"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    }
  ]
}
{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
    "id": 304070624,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzA0MDcwNjI0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16545",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16545.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16545.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/4090dcf6cfda2e21b7a7323de0e0499092ea900c",
    "number": 16545,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "refactor: Implement missing error checking for ArgsManager flags",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Trigger startup errors if bitcoin is configured with bad setting values according to flags. Also raise internal errors if settings are registered and retrieved with inconsistent flags.\n\nThis change has no effect on behavior because the new ArgsManager flags added here are not used outside of tests yet.\n\nIt'll probably be easier to start applying type checking flags to _new_ options than _existing_ options. But for examples of how type checking flags can make sense applied to existing options, see the new [example_options unit test](https://github.com/ryanofsky/bitcoin/blob/pr/argcheck/src/test/argsman_tests.cpp#L27) added in this PR.\n\n---\n\nFollowups:\n\n- Support for flag combinations is possible and is added in commit c919f51c044f0e80ecd301f9c9d396ddff2331ba ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/argcomb))\n- ALLOW_LIST flags are added and enforced in [#17580](https://github.com/bitcoin/bitcoin/pull/17580)\n- Bad IsArgSet usages with ALLOW_LIST are removed in [#30529](https://github.com/bitcoin/bitcoin/pull/30529) and prevented in [#17783](https://github.com/bitcoin/bitcoin/pull/17783)\n- Confusing and ignored multiple assignments in config files are disallowed in [#17493](https://github.com/bitcoin/bitcoin/pull/17493)\n- Confusing reverse-precedence settings merging code is removed in [#17581](https://github.com/bitcoin/bitcoin/pull/17581)\n- Type flags added in this PR implement runtime part of a change to add more compile-time checking in [#22978](https://github.com/bitcoin/bitcoin/pull/22978)\n",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2019-08-04T14:13:12Z",
    "updated_at": "2025-10-16T02:42:17Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "bf9825364bfac27269f8b84212b4791286299d7c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ryanofsky:pr/argcheck",
      "ref": "pr/argcheck",
      "sha": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 11,
        "stargazers_count": 19,
        "watchers_count": 19,
        "size": 296418,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-15T00:42:21Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2025-10-15T12:19:26Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "9039d8f1a1dfe080321f119e1bda2255e1cfdeb9",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38036,
        "stargazers_count": 86206,
        "watchers_count": 86206,
        "size": 294954,
        "default_branch": "master",
        "open_issues_count": 826,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-15T14:01:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-16T02:11:16Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 836,
    "deletions": 88,
    "changed_files": 9,
    "commits": 6,
    "review_comments": 135,
    "comments": 31
  },
  "events": [
    {
      "event": "commented",
      "id": 518007182,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxODAwNzE4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518007182",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T14:14:53Z",
      "updated_at": "2019-08-04T14:14:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "FYI @hebasto, this adds error checking for the flags from #16097",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518007182",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "mentioned",
      "id": 2531792709,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUzMTc5MjcwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531792709",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T14:14:53Z"
    },
    {
      "event": "subscribed",
      "id": 2531792710,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MzE3OTI3MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531792710",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T14:14:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2531796446,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMTc5NjQ0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531796446",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4ca5242065dbc0130393c537c5f51818f88695b1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4ca5242065dbc0130393c537c5f51818f88695b1",
      "created_at": "2019-08-04T14:23:39Z"
    },
    {
      "event": "reviewed",
      "id": 270501537,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcwNTAxNTM3",
      "url": null,
      "actor": null,
      "commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-08-04T14:52:04Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-270501537",
      "submitted_at": "2019-08-04T14:52:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 270501668,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcwNTAxNjY4",
      "url": null,
      "actor": null,
      "commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-08-04T14:54:39Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-270501668",
      "submitted_at": "2019-08-04T14:54:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "commented",
      "id": 518010518,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxODAxMDUxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518010518",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T14:59:06Z",
      "updated_at": "2025-10-16T02:42:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/16545.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [laanwj](https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-545388679), [hodlinator](https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2316714013) |\n| Approach ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2329375556) |\n| Approach NACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902442106) |\n| Stale ACK | [hebasto](https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-339547315) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31260](https://github.com/bitcoin/bitcoin/pull/31260) (scripted-diff: Type-safe settings retrieval by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518010518",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "labeled",
      "id": 2531815426,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MzE4MTU0MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531815426",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T15:06:45Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 2531815428,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MzE4MTU0Mjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2531815428",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T15:06:45Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 518012293,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxODAxMjI5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518012293",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-04T15:21:27Z",
      "updated_at": "2019-08-04T15:21:27Z",
      "author_association": "MEMBER",
      "body": "It seems that not providing a new `InterpretNegated()` function has some benefits:\r\n- no need for `key_name` local variables\r\n- diff gets much smaller",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518012293",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2534605013,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzNDYwNTAxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2534605013",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "created_at": "2019-08-05T19:52:21Z"
    },
    {
      "event": "ready_for_review",
      "id": 2534619503,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQyNTM0NjE5NTAz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2534619503",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-05T19:58:14Z"
    },
    {
      "event": "reviewed",
      "id": 271666106,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcxNjY2MTA2",
      "url": null,
      "actor": null,
      "commit_id": "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-08-07T00:01:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Looks good, read the code and tried locally. Will review tests, but for now just a couple of comments.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-271666106",
      "submitted_at": "2019-08-07T00:01:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 271818284,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcxODE4Mjg0",
      "url": null,
      "actor": null,
      "commit_id": "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-08-07T10:35:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for reviews!\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518012293\r\n\r\n> It seems that not providing a new `InterpretNegated()` function has some benefits:\r\n> \r\n> * no need for `key_name` local variables\r\n> * diff gets much smaller\r\n\r\nThe function is only 9 lines long, so I don't see it having a very big impact on the size of the diff, but  there are a few reasons why I think it's important for this to be separate and not part of FlagsOfKnownArg:\r\n\r\n- FlagsOfKnownArg is now called at argument retrieval time, not jut argument parsing time, so it's more efficient and easier to reason about if it is only doing a pure map lookup without string manipulation and parsing.\r\n\r\n- Having this be a separate function makes InterpretOption shorter and more understandable. Instead of parsing option names, parsing option values, and dealing with flags, it now only parses option values and no longer deals with flags or names at all.\r\n\r\n- Getting rid of the InterpretNegated function may reduce the size of this diff, but it would increase the diff in #15934, because it would leave more code for that PR to deduplicate and update. It's nice to take care of some work for #15934 when the changes make sense here as well.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-271818284",
      "submitted_at": "2019-08-07T10:35:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2539618922,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzOTYxODkyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2539618922",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "01ca54a2411ff8f39fa10974327e882141140739",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/01ca54a2411ff8f39fa10974327e882141140739",
      "created_at": "2019-08-07T10:42:33Z"
    },
    {
      "event": "commented",
      "id": 519048000,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTA0ODAwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/519048000",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-07T10:58:55Z",
      "updated_at": "2019-08-07T10:58:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Side note, I find `FlagsOfKnownArg` confusing because it also returns for unknown arguments and it doesn't tell if it's known or not. I'd reword to `GetArgFlags`.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-519048000",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "reviewed",
      "id": 272573893,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcyNTczODkz",
      "url": null,
      "actor": null,
      "commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-08-08T13:59:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Promag's suggestion to work on a commit using the flags \r\nhttps://github.com/bitcoin/bitcoin/pull/16545#discussion_r311321892 was really useful. Turns out after trying this out with wallet flags, the empty string check for TYPE_STRING is a lot less useful than I thought it would be, so I'm going to simplify the flags a little and get rid of it. \r\n\r\nIt does seem good to just start off with a minimal set of checks,, and then in the future when we think of checks that actually are useful in practice (maybe checks for ip addresses, timestamps, hex strings, value ranges) we can add them at that point.\r\n\r\nI'm going to:\r\n\r\n- Make a little followup PR applying new types to some wallet args\r\n- Tweak flags a little in this PR to be less crazy about empty strings\r\n- Add example of using flags in the PR description as suggested and link to wallet flag PR\r\n- Improve comments, make `/* Standard value types. */` comment more descriptive and add notes to `IsArgSet` and `IsArgNegated` methods  explaining how there's no need to call these if the argument has a type declared.\r\n\r\nActual changes to this PR will be very small, so it still should be reviewable now.\r\n\r\n> Side note, I find `FlagsOfKnownArg` confusing because it also returns for unknown arguments and it doesn't tell if it's known or not. I'd reword to `GetArgFlags`.\r\n\r\nBoth seem good to me, but get `GetArgFlags` does seem a little more standard, so I'll rename if @hebasto also says it's better or just as good.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-272573893",
      "submitted_at": "2019-08-08T13:57:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "commented",
      "id": 520160573,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDE2MDU3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520160573",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-10T16:09:28Z",
      "updated_at": "2019-08-10T16:09:28Z",
      "author_association": "MEMBER",
      "body": "Concept ACK 01ca54a2411ff8f39fa10974327e882141140739\r\n\r\n@promag \r\n> Side note, I find `FlagsOfKnownArg` confusing because it also returns for unknown arguments and it doesn't tell if it's known or not. I'd reword to `GetArgFlags`.\r\n\r\nFor unknown arguments it returns `ArgsManager::NONE`.\r\n\r\n@ryanofsky \r\n> Both seem good to me, but get `GetArgFlags` does seem a little more standard, so I'll rename if @hebasto also says it's better or just as good.\r\n\r\nNaming is the hardest part of coding ;)\r\nAgree with @promag's suggestion about renaming.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-520160573",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "mentioned",
      "id": 2548234391,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU0ODIzNDM5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2548234391",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-10T16:09:28Z"
    },
    {
      "event": "subscribed",
      "id": 2548234393,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1NDgyMzQzOTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2548234393",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-10T16:09:28Z"
    },
    {
      "event": "mentioned",
      "id": 2548234394,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU0ODIzNDM5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2548234394",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-10T16:09:28Z"
    },
    {
      "event": "subscribed",
      "id": 2548234395,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1NDgyMzQzOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2548234395",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-10T16:09:28Z"
    },
    {
      "event": "mentioned",
      "id": 2548234396,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU0ODIzNDM5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2548234396",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-10T16:09:28Z"
    },
    {
      "event": "subscribed",
      "id": 2548234397,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1NDgyMzQzOTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2548234397",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-10T16:09:28Z"
    },
    {
      "event": "reviewed",
      "id": 273432467,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjczNDMyNDY3",
      "url": null,
      "actor": null,
      "commit_id": "01ca54a2411ff8f39fa10974327e882141140739",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-08-10T16:56:16Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-273432467",
      "submitted_at": "2019-08-10T16:56:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2551879186,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU1MTg3OTE4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2551879186",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c7d018d78ef0b78891fbba1c02b775fe156e0a1d",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c7d018d78ef0b78891fbba1c02b775fe156e0a1d",
      "created_at": "2019-08-13T00:47:25Z"
    },
    {
      "event": "referenced",
      "id": 2620070927,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2MjAwNzA5Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2620070927",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0779ce57d4d97040108c81c75bc9a2b332a74ed1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0779ce57d4d97040108c81c75bc9a2b332a74ed1",
      "created_at": "2019-09-09T20:34:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2620070952,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYyMDA3MDk1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2620070952",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b5e8b2a406900bb8d3f8bac1992f5367bbb3f2c9",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/b5e8b2a406900bb8d3f8bac1992f5367bbb3f2c9",
      "created_at": "2019-09-09T20:34:13Z"
    },
    {
      "event": "referenced",
      "id": 2620075345,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2MjAwNzUzNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2620075345",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "36f2aded05d6471a7316ffcd209a584ca18210c1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/36f2aded05d6471a7316ffcd209a584ca18210c1",
      "created_at": "2019-09-09T20:35:47Z"
    },
    {
      "event": "reviewed",
      "id": 275011908,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc1MDExOTA4",
      "url": null,
      "actor": null,
      "commit_id": "cb9f7e3b4501d76ec69505d2cab98490ba6d6858",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-09-09T20:49:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated c7d018d78ef0b78891fbba1c02b775fe156e0a1d -> b5e8b2a406900bb8d3f8bac1992f5367bbb3f2c9 ([pr/argcheck.5](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.5) -> [pr/argcheck.6](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.5..pr/argcheck.6)) with changes described in https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-272573893.\r\n\r\n> Agree with @promag's suggestion about renaming.\r\n\r\nNow renamed in 0779ce57d4d97040108c81c75bc9a2b332a74ed1.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-275011908",
      "submitted_at": "2019-09-09T20:49:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "commented",
      "id": 545388679,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTM4ODY3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545388679",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T10:58:53Z",
      "updated_at": "2019-10-23T10:59:23Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, consistent argument error checking is good.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-545388679",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "labeled",
      "id": 2749764977,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3NDk3NjQ5Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749764977",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T19:20:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 2797682333,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTc2ODIzMzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797682333",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "959096cbacbd43d838c4c4d59b9bfa1b528ca609",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/959096cbacbd43d838c4c4d59b9bfa1b528ca609",
      "created_at": "2019-11-14T04:31:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2797696018,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc5NzY5NjAxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797696018",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4b8149b5aae874cffe81423a2d4529c6f5b6e944",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4b8149b5aae874cffe81423a2d4529c6f5b6e944",
      "created_at": "2019-11-14T04:41:35Z"
    },
    {
      "event": "reviewed",
      "id": 316713766,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE2NzEzNzY2",
      "url": null,
      "actor": null,
      "commit_id": "4b8149b5aae874cffe81423a2d4529c6f5b6e944",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-11-14T05:01:07Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-316713766",
      "submitted_at": "2019-11-14T05:01:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "unlabeled",
      "id": 2797737386,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjc5NzczNzM4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2797737386",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T05:10:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 2799285335,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTkyODUzMzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2799285335",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6974a2fecbeedf107e6542007c19dc09463e9ab6",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6974a2fecbeedf107e6542007c19dc09463e9ab6",
      "created_at": "2019-11-14T14:34:27Z"
    },
    {
      "event": "referenced",
      "id": 2799285348,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3OTkyODUzNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2799285348",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e1dd793a94394e57eec9cc4f3882abda3bb50919",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e1dd793a94394e57eec9cc4f3882abda3bb50919",
      "created_at": "2019-11-14T14:34:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2800325632,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjgwMDMyNTYzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2800325632",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "909bcca7971063f42de6d981111c628bf5a0ebfa",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/909bcca7971063f42de6d981111c628bf5a0ebfa",
      "created_at": "2019-11-14T19:39:05Z"
    },
    {
      "event": "renamed",
      "id": 2826188275,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjgyNjE4ODI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2826188275",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-24T19:57:52Z",
      "rename": {
        "from": "Implement missing error checking for ArgsManager flags",
        "to": "refactor: Implement missing error checking for ArgsManager flags"
      }
    },
    {
      "event": "referenced",
      "id": 2894310295,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTQzMTAyOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2894310295",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/dc0f1480746b34aa3ca2d9c0f1ec764083026b40",
      "created_at": "2019-12-18T16:59:21Z"
    },
    {
      "event": "referenced",
      "id": 2894310303,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTQzMTAzMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2894310303",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "425bb307252cf4dec9b3ef6426e6548b2be7a303",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/425bb307252cf4dec9b3ef6426e6548b2be7a303",
      "created_at": "2019-12-18T16:59:22Z"
    },
    {
      "event": "referenced",
      "id": 2894310309,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTQzMTAzMDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2894310309",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cba2710220d76bbe790b04088839cbbd410436de",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/cba2710220d76bbe790b04088839cbbd410436de",
      "created_at": "2019-12-18T16:59:22Z"
    },
    {
      "event": "referenced",
      "id": 2898495031,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTg0OTUwMzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2898495031",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6677be64f69b3d6f60f5a675ff9746def27a2de8",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6677be64f69b3d6f60f5a675ff9746def27a2de8",
      "created_at": "2019-12-19T20:06:59Z"
    },
    {
      "event": "labeled",
      "id": 2898520871,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI4OTg1MjA4NzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2898520871",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-19T20:16:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2898609240,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg5ODYwOTI0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2898609240",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "created_at": "2019-12-19T20:48:04Z"
    },
    {
      "event": "unlabeled",
      "id": 2898918982,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjg5ODkxODk4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2898918982",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-19T22:20:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 2898934346,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTg5MzQzNDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2898934346",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "33fe88ae5bb68ceb345d06a5f2da01b2974fb1d5",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/33fe88ae5bb68ceb345d06a5f2da01b2974fb1d5",
      "created_at": "2019-12-19T22:26:45Z"
    },
    {
      "event": "reviewed",
      "id": 335673755,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM1NjczNzU1",
      "url": null,
      "actor": null,
      "commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2019-12-22T23:43:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've changed https://github.com/promag/bitcoin/commit/71da58bc9437b977e56029bd8d2516bcf61cb823",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-335673755",
      "submitted_at": "2019-12-22T23:43:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 338163788,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MTYzNzg4",
      "url": null,
      "actor": null,
      "commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-03T16:34:16Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-338163788",
      "submitted_at": "2020-01-03T16:34:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 338599308,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NTk5MzA4",
      "url": null,
      "actor": null,
      "commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-06T11:40:39Z",
      "author_association": "MEMBER",
      "body": "ACK 67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556, tested on Linux Mint 19.3.\r\n\r\n```\r\n$ ./src/test/test_bitcoin --run_test=util_tests/util_CheckValue\r\nRunning 1 test case...\r\n\r\n*** No errors detected\r\n```\r\n```\r\n$ ./src/test/test_bitcoin --run_test=util_tests/CheckSingleValue\r\nRunning 1 test case...\r\n\r\n*** No errors detected\r\n```\r\n\r\n---\r\n\r\nThere are two non-blocking suggestions:\r\n1) add some tests:\r\n```diff\r\ndiff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp\r\nindex 539e1a972..215057227 100644\r\n--- a/src/test/util_tests.cpp\r\n+++ b/src/test/util_tests.cpp\r\n@@ -316,6 +316,8 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\r\n     CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\r\n     CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1\"));\r\n     CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1\"));\r\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1\"));\r\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1\"));\r\n \r\n     CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\r\n     CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\r\n@@ -371,6 +373,8 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\r\n     CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\r\n     CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\r\n     CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\r\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=true\", Expect{\"true\"}.String(\"true\").DefaultBool());\r\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=false\", Expect{\"false\"}.String(\"false\").DefaultBool());\r\n \r\n     CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\r\n     CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\r\n```\r\n\r\n2) move `ArgManager` class and related functions to its own file (in another PR)",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-338599308",
      "submitted_at": "2020-01-06T11:40:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "commented",
      "id": 571114833,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTExNDgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571114833",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T12:04:48Z",
      "updated_at": "2020-01-06T12:04:48Z",
      "author_association": "MEMBER",
      "body": "Is @MarcoFalke's [suggestion](https://github.com/bitcoin/bitcoin/pull/17473#discussion_r360386173) still relevant?",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-571114833",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "mentioned",
      "id": 2923995340,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkyMzk5NTM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2923995340",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T12:04:48Z"
    },
    {
      "event": "subscribed",
      "id": 2923995344,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MjM5OTUzNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2923995344",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T12:04:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2928901291,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyODkwMTI5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2928901291",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "27beca5ffee664360005f74123dad9107769d048",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/27beca5ffee664360005f74123dad9107769d048",
      "created_at": "2020-01-07T20:09:32Z"
    },
    {
      "event": "reviewed",
      "id": 338929766,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4OTI5NzY2",
      "url": null,
      "actor": null,
      "commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-07T20:15:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556 -> 27beca5ffee664360005f74123dad9107769d048 ([`pr/argcheck.9`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.9) -> [`pr/argcheck.10`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.9..pr/argcheck.10)) with various suggested changes. Thanks for the reviews and feedback!\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-338599308\r\n\r\n> ```diff\r\n> +    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1\"));\r\n> +    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1\"));\r\n\r\nThanks, added these checks in a new test (`util_CheckBoolStringsNotSpecial`).\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-571114833\r\n\r\n> Is @MarcoFalke's [suggestion](https://github.com/bitcoin/bitcoin/pull/17473#discussion_r360386173) still relevant?\r\n\r\nYes, the suggestion still applies to master branch and is now incorporated in this PR.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-338929766",
      "submitted_at": "2020-01-07T20:15:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 339497687,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NDk3Njg3",
      "url": null,
      "actor": null,
      "commit_id": "27beca5ffee664360005f74123dad9107769d048",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-07T20:48:10Z",
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-339497687",
      "submitted_at": "2020-01-07T20:48:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 339515679,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTE1Njc5",
      "url": null,
      "actor": null,
      "commit_id": "27beca5ffee664360005f74123dad9107769d048",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-07T21:23:10Z",
      "author_association": "MEMBER",
      "body": "re-ACK 27beca5ffee664360005f74123dad9107769d048, tested on Linux Mint 19.3:\r\n```\r\n$ ./src/test/test_bitcoin --run_test=util_tests/util_CheckValue\r\nRunning 1 test case...\r\n\r\n*** No errors detected\r\n```\r\n```\r\n$ ./src/test/test_bitcoin --run_test=util_tests/util_CheckBoolStringsNotSpecial\r\nRunning 1 test case...\r\n\r\n*** No errors detected\r\n```\r\n```\r\n$ ./src/test/test_bitcoin --run_test=util_tests/util_CheckSingleValue\r\nRunning 1 test case...\r\n\r\n*** No errors detected\r\n```\r\n```\r\n$ ./src/test/test_bitcoin --run_test=util_tests/util_CheckBadFlagCombinations\r\nRunning 1 test case...\r\n\r\n*** No errors detected\r\n```\r\n```\r\n$ ./src/bitcoind -nolisten=0 -nowallet=0\r\n2020-01-07T21:22:29Z Warning: parsed potentially confusing double-negative -listen=0\r\n2020-01-07T21:22:29Z Warning: parsed potentially confusing double-negative -wallet=0\r\n...\r\n```",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-339515679",
      "submitted_at": "2020-01-07T21:23:10Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2929176848,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyOTE3Njg0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2929176848",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "created_at": "2020-01-07T21:51:24Z"
    },
    {
      "event": "reviewed",
      "id": 339529990,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTI5OTkw",
      "url": null,
      "actor": null,
      "commit_id": "27beca5ffee664360005f74123dad9107769d048",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-07T21:52:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for re-ack!\r\n\r\nUpdated 27beca5ffee664360005f74123dad9107769d048 -> 5bb512aa51ae46350f8527ff7b3817dd719bb455 ([`pr/argcheck.10`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.10) -> [`pr/argcheck.11`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.10..pr/argcheck.11)) with suggested spelling fix",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-339529990",
      "submitted_at": "2020-01-07T21:52:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 339547315,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTQ3MzE1",
      "url": null,
      "actor": null,
      "commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-07T22:25:33Z",
      "author_association": "MEMBER",
      "body": "ACK 5bb512aa51ae46350f8527ff7b3817dd719bb455, just fix a typo.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-339547315",
      "submitted_at": "2020-01-07T22:25:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "commented",
      "id": 571802700,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTgwMjcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571802700",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-07T22:28:53Z",
      "updated_at": "2020-01-07T23:02:33Z",
      "author_association": "MEMBER",
      "body": "A note for future: it seems worth adding a functional test for \"Warning: parsed potentially confusing double-negative ...\" in the `debug.log`.\r\n\r\nnm - it is already, see #17893 ",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-571802700",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 572394418,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjM5NDQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572394418",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-09T05:28:04Z",
      "updated_at": "2020-01-09T05:28:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rather than changing `foo=` from being `foo=0` to becoming `foo=<whatever foo's default was>` it might be clearer to write `reset-foo` for that behaviour (like `-nofoo`), so that it can be consistent no matter what the type of the setting is?",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-572394418",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 572714990,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjcxNDk5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572714990",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-09T19:24:40Z",
      "updated_at": "2020-01-09T19:24:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for looking at this!\r\n\r\n> Rather than changing `foo=` from being `foo=0` to becoming `foo=<whatever foo's default was>`\r\n\r\nI don't think that's really an accurate description. `-foo=\"\"` is currently interpreted as `true` for boolean arguments, `0` for integer arguments, and all kinds of random ways for string arguments. The PR doesn't change this, or affect any existing behavior.\r\n\r\nWhat the PR does is implement flags that let the `GetArg` family of functions retrieve settings in a consistent way, so when you are trying to retrieve a setting that has a default value, you can just call a `GetArg` function and not have to deal with `IsArgSet` `IsArgNegated` or do manual parsing to get sensible behavior. After porting lots of existing arguments and dealing with bugs like #15864, I think that sensible behavior in most cases means treating `-nofoo` like `false/0/\"\"` for bool/int/string arguments, allowing `-foo` syntax for bool arguments but not most int/string arguments, and treating empty `-foo=\"\"` settings like unset settings.\r\n\r\nThese are just defaults, though. Since #15934, the internal representation of settings is always unambiguous and doesn't throw away information, and callers should easily be able to implement any behavior they choose when interpretting settings.\r\n\r\n> it might be clearer to write `reset-foo` for that behaviour (like `-nofoo`), so that it can be consistent no matter what the type of the setting is?\r\n\r\nI think this could be a reasonable feature to add in its own PR. Reset settings could be represented as `null` setting values. The `GetArg` functions already always treat `null` settings like unset settings, regardless of flags.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-572714990",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 577752833,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3Nzc1MjgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577752833",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-23T16:15:18Z",
      "updated_at": "2020-01-23T16:15:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "> What the PR does is implement flags that let the `GetArg` family of functions retrieve settings in a consistent way,\r\n\r\nThe way I think of args at the moment is that `ArgsManager` stores a convenient representation of the config file (so it parses out the \"-nofoo\" stuff, but otherwise just stores strings) before it's converted into typed info, and then the GetArg functions do that conversion so that the setting can actually be used, often dropping the result into a global/module variable so it doesn't have to be repeatedly converted.\r\n\r\nI guess what I've got in mind is eventually ending up with something where args get statically declared along with the variable they should stored in, and parsing/merging the config files and command line just fills in the variables, so that instead of `GetBoolArg('-addrmantest', false)` you just evaluate `g_addrmantest` and get your answer more directly. I suppose that would mean instead of querying `IsArgSet` mean you'd use a `std::optional<bool>` instead of just `bool` etc; but otherwise it would give you compile time type checking and mean that you'd be writing the default values where you define the parameters rather than every place you try to access them. (I don't know if this is all actually possible, it's just what I'm hoping for)\r\n\r\nAnyway, with or without that context, I'm not really seeing that much value in adding the type information while ArgsManager is storing the info; it's easy enough to say that \"\" should be interpreted as 0 if asked for as an int and true if asked for as a bool, but when you want to convert the \"\" to an int, and then convert that int to a bool because you've got `ALLOW_INT | ALLOW_BOOL` set, that starts becoming pretty weird. Weird enough that you've implemented it so that in that case `-value=` returns the defaults instead; but that's then a user-visible behaviour change for anyone who was using `-boolparam=` to set it true if it's default happens to be false when `-boolparam` is converted from ANY to BOOL.\r\n\r\nTo try and fully understand your PR, I've split it up into bitesize chunks that make sense to me on their own -- https://github.com/ajtowns/bitcoin/commits/202001-argsmanflag . It gets most of the PR done, but doesn't do the coversion to int within SettingsValue generally, so keeps the same semantics for all the calls that wouldn't pass an error back to the user. I'm not really seeing enough value in those different semantics to justify the change given the chance of breaking someone's config isn't zero...",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-577752833",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "reviewed",
      "id": 347342602,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MzQyNjAy",
      "url": null,
      "actor": null,
      "commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-23T16:15:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Couple of potential nits",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-347342602",
      "submitted_at": "2020-01-23T16:15:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "commented",
      "id": 577826251,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzgyNjI1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577826251",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-23T19:02:34Z",
      "updated_at": "2020-01-23T19:02:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > What the PR does is implement flags that let the `GetArg` family of functions retrieve settings in a consistent way,\r\n> \r\n> The way I think of args at the moment is that `ArgsManager` stores a convenient representation of the config file (so it parses out the \"-nofoo\" stuff, but otherwise just stores strings) before it's converted into typed info, and then the GetArg functions do that conversion so that the setting can actually be used, often dropping the result into a global/module variable so it doesn't have to be repeatedly converted.\r\n> \r\n> I guess what I've got in mind is eventually ending up with something where args get statically declared along with the variable they should stored in, and parsing/merging the config files and command line just fills in the variables, so that instead of `GetBoolArg('-addrmantest', false)` you just evaluate `g_addrmantest` and get your answer more directly. I suppose that would mean instead of querying `IsArgSet` mean you'd use a `std::optional<bool>` instead of just `bool` etc; but otherwise it would give you compile time type checking and mean that you'd be writing the default values where you define the parameters rather than every place you try to access them. (I don't know if this is all actually possible, it's just what I'm hoping for)\r\n\r\nYes, I have the same thing in mind. But again, like I said in https://github.com/bitcoin/bitcoin/pull/17580#pullrequestreview-340791706, switching from untyped settings to typed settings is the hard part because it has to do be done on a case-by-case basis (see wallet flag commits in the PR description). Switching from a dynamic representation of types to a static representation of types is a straightforward thing to do after types are in place.\r\n\r\n> Anyway, with or without that context, I'm not really seeing that much value in adding the type information while ArgsManager is storing the info\r\n\r\nI've tried to clearly motivate this PR and the PRs that depend on it (#17493 #17580 #17581 and #17783). I'm not trying to convince everyone of everything, but I am happy to try to address specific concerns that can be articulated.\r\n\r\n> it's easy enough to say that \"\" should be interpreted as 0 if asked for as an int and true if asked for as a bool, but when you want to convert the \"\" to an int, and then convert that int to a bool because you've got `ALLOW_INT | ALLOW_BOOL` set, that starts becoming pretty weird. Weird enough that you've implemented it so that in that case `-value=` returns the defaults instead; but that's then a user-visible behaviour change for anyone who was using `-boolparam=` to set it true if it's default happens to be false when `-boolparam` is converted from ANY to BOOL.\r\n\r\nI'm having a hard time following this and I probably don't know how to convince someone that something is weird or not weird. I put a lot of thought into the flags, and did a lot of experimentation with the wallet commits linked to in the description, and have a result that I think:\r\n\r\n- Provides good error and reporting useful behavior to end users\r\n- Does not require a boilerplate IsArgSet/IsArgNegated nonsense code in places where arguments are accessed\r\n- Is backwards compatible in all cases except some specific and obscure corner cases, and clearly documented where not backwards compatible\r\n\r\n> To try and fully understand your PR, I've split it up into bitesize chunks that make sense to me on their own -- https://github.com/ajtowns/bitcoin/commits/202001-argsmanflag . It gets most of the PR done, but doesn't do the coversion to int within SettingsValue generally, so keeps the same semantics for all the calls that wouldn't pass an error back to the user.\r\n\r\nCan you give a specific example of how this is an improvement? If you can say how it improves rhe wallet changes linked in the PR description, or any of the followup PRs actually making use of these flags, that would be most helpful.\r\n\r\n> I'm not really seeing enough value in those different semantics to justify the change given the chance of breaking someone's config isn't zero...\r\n\r\nI'm sure you know this, but just so someone reading doesn't get the wrong idea, this PR is 100% backwards compatible, and is only defining new type flags that are used in future improvements",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-577826251",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 578047805,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODA0NzgwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578047805",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-24T09:04:59Z",
      "updated_at": "2020-01-24T09:21:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > https://github.com/ajtowns/bitcoin/commits/202001-argsmanflag \r\n> \r\n> Can you give a specific example of how this is an improvement?\r\n\r\nIt's not so much meant as an improvement, but more as \"your PR is X=A+B+C, the A+B parts make sense to me, but the C part doesn't and even seems like a step in the wrong direction, and A+B alone seems to do what the PR was aiming to do -- ie, implement missing error checking for ArgsManager flags\".\r\n\r\nI've added a couple more commits on top now, so that (a) it actually does more of the error checking for the flags and (b) it's easy to see from the test suite that changing from ANY to BOOL etc only makes some things errors, rather than changing the meaning of user's configurations. Both these veer more substantially away from your patch than where I was yesterday; consider it executable whiteboarding, I guess?\r\n\r\nI'm still uncomfortable with making working configs start giving errors, but changing the meaning of potentially already existing configs really needs a good justification that I'm not seeing. I realise this PR alone doesn't do that, but it sets up future PRs to do so in ways that aren't necessarily super-obvious.\r\n\r\nI think the approach I linked above would make it much more straightforward to switch away from ALLOW_ANY sooner, since it just means you can say \"a bunch of things that were previously allowed in config files that weren't at all sensible (double negatives, repeatedly setting the same option, giving strings where ints are needed or numbers other than 0 or 1 where a bool is needed, or saying \"true\" to set a bool to false) will now give errors at startup\" and be done.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-578047805",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 578117815,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODExNzgxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578117815",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-24T12:50:15Z",
      "updated_at": "2020-01-24T12:55:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "AJ, this critique does not seem substantive because it is too general. **Would it be possible for you to cite a specific deficiency in my design, or in any of my PRs, or in any of my wallet flag porting commits that lead to bad user behavior, or an unergnonomic API for developers?** I'd be more than happy to adopt suggestions for improvement. Or if we disagree about a specific design decision, I could explain the tradeoffs behind it, and what made me favor one approach. But when you do things like casually state that something in my PR goes in the \"wrong direction,\" without even telling me what you're referring to, it does not seem productive.\r\n\r\nAgain, to be clear to anyone else reading this: This PR is 100% backwards compatible. It adds a new developer feature which I put a lot of thought and effort into designing, testing, and making use of in followup PRs and commits prioritizing 1) backwards compatibilty, 2) good error reporting for users, 3) flexibility for users about how to specify options, for example supporting `-foo` and `-nofoo` valueless syntax whenever not ambiguous 4) having ergonomic code at `GetArg` call sites and avoiding current ubiquitous `IsArgNegated` `IsArgset` bugs 5) having ability to add future improvements like custom validation functions and typed int/string/bool/vector\\<x\\>/Optional\\<x\\>/Variant\\<x\\> setting storage\r\n\r\nI'm pretty satisfied with design of this PR and happy with the way it functions by itself, but the actual test of the PR is when the features it adds are put to use in followup PRs. **This PR by itself is a starting point that doesn't set anything in stone.** If it has deficiencies, they can be addressed now or  addressed in future PRs, it's not some hugely high stakes thing where everything has to be worked out in advance, even though I've definitely tried to work out everything in advance, and you can look at all the actual use cases in the followups to see that",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-578117815",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "reviewed",
      "id": 348193241,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTkzMjQx",
      "url": null,
      "actor": null,
      "commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-24T21:21:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 5bb512aa51ae46350f8527ff7b3817dd719bb455 -> f42da6bbe3a327a7abe9c29ac1278bd652e86513 ([`pr/argcheck.11`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.11) -> [`pr/argcheck.12`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.12), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.11..pr/argcheck.12)) with suggested softsetbool check",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-348193241",
      "submitted_at": "2020-01-24T21:19:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2978631275,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk3ODYzMTI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2978631275",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "created_at": "2020-01-24T21:20:31Z"
    },
    {
      "event": "commented",
      "id": 579068737,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTA2ODczNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579068737",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-28T04:02:05Z",
      "updated_at": "2020-01-28T04:10:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Would it be possible for you to cite a specific deficiency in my design, or in any of my PRs, or in any of my wallet flag porting commits that lead to bad user behavior, or an unergnonomic API for developers?\r\n\r\nI don't know if I can cite a problem you'll accept, your PRs are no-ops (\"this change has no effect\") because you're modifying dead code, and you seem to be rejecting criticisms that only take place once the code is used...\r\nI think:\r\n\r\n* making `-value=` reset things to defaults changes the meaning of existing configs, and while that might be fine if it were a new system, it doesn't seem useful enough to justify introducing an incompatibility\r\n* you're doing a lot more things in this patch than just implementing missing errors (and given this code doesn't apply to any existing options, arguably aren't implementing the missing errors yet!)\r\n* it would be better to have ALLOW_BOOL etc work *exactly* the same way as ALLOW_ANY; change the argument declarations types in the first PR; and then change the meaning of ALLOW_BOOL etc to provide better errors in follow up PRs; that makes it easy to see what the effects of the new behaviours you're coding up actually is\r\n* rather than bit flags it would be better to have a type enumeration something like: BOOL, INT, STRING, OPTIONAL_STRING, STRING_LIST. At that point having unique \"GetArg\" functions for each type returning exactly the right type seems straightforward; so `Optional<std::string> dbg_log = GetOptionalStringArg(\"-debuglogfile\", DEFAULT_DEBUG_LOGFILE); m_print_to_file = dbg_log ? true : false; m_file_path = dbg_log ? *dbg_log : \"\";` \r\n* that the IsArgNegated and IsArgSet warts aren't a priority -- they're largely encapsulated in system.cpp\r\n\r\nEDIT: the first one of these prevents me from giving an ACK at least without seeing a good reason for it, the second one made it hard to review, the latter are just IMO",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-579068737",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "reviewed",
      "id": 349119563,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTE5NTYz",
      "url": null,
      "actor": null,
      "commit_id": "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2020-01-28T04:04:51Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-349119563",
      "submitted_at": "2020-01-28T04:04:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "labeled",
      "id": 3010580155,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMwMTA1ODAxNTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3010580155",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-05T16:00:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3244175980,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175980",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7a97631cc5b45593eac4ac046b265c7370e7c5f3",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/7a97631cc5b45593eac4ac046b265c7370e7c5f3",
      "created_at": "2020-04-17T12:28:28Z"
    },
    {
      "event": "referenced",
      "id": 3244175991,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175991",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02a6fd02c4c00a731f85013acdc4459d66f7ead3",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/02a6fd02c4c00a731f85013acdc4459d66f7ead3",
      "created_at": "2020-04-17T12:28:28Z"
    },
    {
      "event": "referenced",
      "id": 3244176001,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzYwMDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244176001",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "51d492e9c1b06ecaa0c60f4d7005716f6e755a79",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/51d492e9c1b06ecaa0c60f4d7005716f6e755a79",
      "created_at": "2020-04-17T12:28:28Z"
    },
    {
      "event": "referenced",
      "id": 3290365894,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyOTAzNjU4OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3290365894",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "619943a5c9c6bf280a147856a479aefd6503d63f",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/619943a5c9c6bf280a147856a479aefd6503d63f",
      "created_at": "2020-04-30T16:35:12Z"
    },
    {
      "event": "unlabeled",
      "id": 3704124260,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzcwNDEyNDI2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3704124260",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-28T14:08:49Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3717313690,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxNzMxMzY5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3717313690",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "662bf363679f912f96774899994b252736ddb355",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/662bf363679f912f96774899994b252736ddb355",
      "created_at": "2020-09-02T00:19:50Z"
    },
    {
      "event": "unlabeled",
      "id": 3717499728,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzcxNzQ5OTcyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3717499728",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-02T01:56:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3718991315,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxODk5MTMxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3718991315",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a7a1518176d75d012b51569c2ffcd6a208cb5654",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a7a1518176d75d012b51569c2ffcd6a208cb5654",
      "created_at": "2020-09-02T10:25:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3719362916,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxOTM2MjkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3719362916",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9cde44dc321ec20c1c5a27707a97f2e060a769f5",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/9cde44dc321ec20c1c5a27707a97f2e060a769f5",
      "created_at": "2020-09-02T11:57:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3719896153,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcxOTg5NjE1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3719896153",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f5282e5e1b87312978c0703053f5f25eba8e3c90",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/f5282e5e1b87312978c0703053f5f25eba8e3c90",
      "created_at": "2020-09-02T13:40:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3720489889,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcyMDQ4OTg4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3720489889",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f801ea91aa05843e4bdfce5ea06d51c7a18a2f38",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/f801ea91aa05843e4bdfce5ea06d51c7a18a2f38",
      "created_at": "2020-09-02T15:41:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3720996006,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzcyMDk5NjAwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3720996006",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45beb3bc1a588ec3f45e852796adb3c07980136c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/45beb3bc1a588ec3f45e852796adb3c07980136c",
      "created_at": "2020-09-02T17:35:42Z"
    },
    {
      "event": "referenced",
      "id": 3980858170,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTgxNzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980858170",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "96245fcfb0509afa11bad830d175d30d11f019e1",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/96245fcfb0509afa11bad830d175d30d11f019e1",
      "created_at": "2020-11-10T20:39:42Z"
    },
    {
      "event": "labeled",
      "id": 4205499749,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyMDU0OTk3NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4205499749",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T10:18:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 611778602,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjExNzc4NjAy",
      "url": null,
      "actor": null,
      "commit_id": "45beb3bc1a588ec3f45e852796adb3c07980136c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2021-03-15T02:04:29Z",
      "author_association": "MEMBER",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-611778602",
      "submitted_at": "2021-03-15T02:04:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4492817754,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ5MjgxNzc1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4492817754",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c213464e724b4c94554c16c518dd6e9e5e24ad0a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c213464e724b4c94554c16c518dd6e9e5e24ad0a",
      "created_at": "2021-03-22T22:27:04Z"
    },
    {
      "event": "unlabeled",
      "id": 4493101685,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQ5MzEwMTY4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4493101685",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-23T00:07:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4504854256,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUwNDg1NDI1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4504854256",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "64f92731b59bfee723fae80c52e5fdd37bd2a68a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/64f92731b59bfee723fae80c52e5fdd37bd2a68a",
      "created_at": "2021-03-24T22:48:59Z"
    },
    {
      "event": "referenced",
      "id": 4518456903,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY5MDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456903",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7f404e8d42b32f06220c0b1e1b8d1a73135910b5",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/7f404e8d42b32f06220c0b1e1b8d1a73135910b5",
      "created_at": "2021-03-28T19:23:25Z"
    },
    {
      "event": "referenced",
      "id": 4518456908,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY5MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456908",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "87096f79e16439c76745b8785e7599ff443c2684",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/87096f79e16439c76745b8785e7599ff443c2684",
      "created_at": "2021-03-28T19:23:25Z"
    },
    {
      "event": "referenced",
      "id": 4518456914,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY5MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456914",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ba6f9db598ce7eee753a106db270eb14743270e3",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/ba6f9db598ce7eee753a106db270eb14743270e3",
      "created_at": "2021-03-28T19:23:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4522019006,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUyMjAxOTAwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4522019006",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5ef6e720e0c7c709d71ce33935141d106f5dade9",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5ef6e720e0c7c709d71ce33935141d106f5dade9",
      "created_at": "2021-03-29T14:53:15Z"
    },
    {
      "event": "labeled",
      "id": 4616456918,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2MTY0NTY5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4616456918",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-20T02:34:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4832469273,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDgzMjQ2OTI3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4832469273",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2772948473df34181535558f6b105ca413730053",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2772948473df34181535558f6b105ca413730053",
      "created_at": "2021-06-02T15:23:53Z"
    },
    {
      "event": "unlabeled",
      "id": 4832532694,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDgzMjUzMjY5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4832532694",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-02T15:34:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 480189924,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTg5OTI0",
      "url": null,
      "actor": null,
      "commit_id": "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2021-08-19T00:59:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-579068737\r\n\r\n> * making `-value=` reset things to defaults changes the meaning of existing configs\r\n\r\nNo, there is impact no impact on existing settings, which are not consistent in how they treat these values. All this is doing is establishing a convention that lets new settings behave consistently and usefully in the future *by default* (if you want inconsistent behavior in the future, that is still possible using ALLOW_STRING and std::string::empty()).\r\n\r\n> * you're doing a lot more things in this patch than just implementing missing errors\r\n\r\nThe only change in this PR is adding missing validation for argsmanager flags and raising new errors.\r\n\r\n> * it would be better to have ALLOW_BOOL etc work _exactly_ the same way as ALLOW_ANY\r\n\r\nI don't want to change the meaning of the flag over many PRs. I want implement the flag once. If there is something unclear or bad about the behavior that's being implemented, obviously that would be bad. But it would also be fixable. Clearly I've put in the effort here to write extensive tests and apply the flag to real world use-cases in the wallet (see table in PR description), so I don't think we need to be paralyzed by speculative and vague concerns.\r\n\r\n> * rather than bit flags it would be better to have a type enumeration\r\n\r\nI started off thinking similarly until I looked at actual use cases, again see the table in the PR description. There is a balance between having no validation and complete freedom, and rigid validation and not enough freedom to be used everywhere. This PR is taking a step of adding some validation, with a level of API freedom justified by existing use cases, again see table. If you need the API to be more rigid, you can make it more rigid in future PRs. If you need the API to have a different interface without changing the functionality, we can also do that in future PRs. I would like to make the API more ergonomic in the future and would like to check more things at compile time instead of runtime. But the API currently uses bit flags, and bit flags work fine, so this PR is continuing to use bit flags.\r\n\r\n> * that the IsArgNegated and IsArgSet warts aren't a priority -- they're largely encapsulated in system.cpp\r\n\r\nThis is not the case. These APIs are widely misused and make the developer and users experiences worse. See actual usages 9c0e6975f42a1197a7b898b19d8af81a03868123 048a4ee606a370d51620e39aecc8f6d4a132c31c and commits in the table in the PR description.\r\n\r\nCoincidentally, in a PR I reviewed today there were two new incorrect set/negated usages: https://github.com/bitcoin/bitcoin/pull/20487#discussion_r674354542, https://github.com/bitcoin/bitcoin/pull/20487#discussion_r676915974 and I'm sure you could find more fresh examples of incorrect usages in open and merged PRs.\r\n\r\n> EDIT: the first one of these prevents me from giving an ACK at least without seeing a good reason for it\r\n\r\nAgain, the reason is just to provide consistent default behavior for future `-value=\"\"` settings. Current settings are not affected. Future settings that want to override the behavior are not affected. Fixation on this case seems strange to me, and I think it is possibly standing in for some other concern (aesthetic differences? a different understanding of current conventions?) that has not been articulated.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-480189924",
      "submitted_at": "2021-08-19T00:59:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "commented",
      "id": 901538026,
      "node_id": "IC_kwDOABII5841vGDq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901538026",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T01:26:19Z",
      "updated_at": "2021-08-19T18:37:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 2772948473df34181535558f6b105ca413730053 -> 0a4ded27b7613656f423a07d889a9648b72200e7 ([`pr/argcheck.22`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.22) -> [`pr/argcheck.23`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.22-rebase..pr/argcheck.23)) adding a scripted-diff commit to actually ensure backwards compatibility.\r\nUpdated 0a4ded27b7613656f423a07d889a9648b72200e7 -> aa3dec078fc464d7ea2b46088c789bfd4a7e2637 ([`pr/argcheck.23`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.23) -> [`pr/argcheck.24`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.24), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.23..pr/argcheck.24)) retaining \"Negating of -%s is meaningless\" error for compatibility with #19827.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-901538026",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5177869464,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE3Nzg2OTQ2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5177869464",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0a4ded27b7613656f423a07d889a9648b72200e7",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0a4ded27b7613656f423a07d889a9648b72200e7",
      "created_at": "2021-08-19T01:26:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5182947883,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE4Mjk0Nzg4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5182947883",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at": "2021-08-19T18:37:05Z"
    },
    {
      "event": "commented",
      "id": 902152223,
      "node_id": "IC_kwDOABII5841xcAf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902152223",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T18:42:34Z",
      "updated_at": "2021-08-19T18:44:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "(deleted comment meant for other PR https://github.com/bitcoin/bitcoin/pull/19827#issuecomment-902152599)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902152223",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 902153817,
      "node_id": "IC_kwDOABII5841xcZZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902153817",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T18:44:59Z",
      "updated_at": "2021-08-19T18:44:59Z",
      "author_association": "MEMBER",
      "body": "I looks like the scripted-diff *does* change behavior, given that at least `ALLOW_INT` has some additional checks attached?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902153817",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 902156069,
      "node_id": "IC_kwDOABII5841xc8l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902156069",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-19T18:48:21Z",
      "updated_at": "2021-08-19T18:48:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I looks like the scripted-diff _does_ change behavior, given that at least `ALLOW_INT` has some additional checks attached?\r\n\r\nYeah, it's been a while I forgot this had dropped the \"negating is meaningless\" check in some cases. I'll update the comment to say it avoids breaking existing configs, not that it avoids changing behavior entirely.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902156069",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 902442106,
      "node_id": "IC_kwDOABII5841yix6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902442106",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-20T05:28:29Z",
      "updated_at": "2021-08-20T05:28:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach NACK aa3dec078fc464d7ea2b46088c789bfd4a7e2637\r\n\r\n> re: [#16545 (comment)](https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-579068737)\r\n> > * making `-value=` reset things to defaults changes the meaning of existing configs\r\n> No, there is impact no impact on existing settings,\r\n\r\nThere is no impact on existing settings because ALLOW_BOOL, ALLOW_INT, ALLOW_STRING and ALLOW_LIST are unused outside of tests, and that's only because you've specifically converted them all to ALLOW_ANY. If they were to be used, which is presumably the idea, there would be an impact. If it's not the idea to switch existing options from ALLOW_ANY to the more specific things -- which will impact existing settings -- then this approach just makes config handling more complicated because of the different behaviour between currently existing settings and the new ones.\r\n\r\n(I haven't re-reviewed to see if there really isn't an impact on existing settings given those changes)\r\n\r\n> I started off thinking similarly until I looked at actual use cases, again see the table in the PR description.\r\n\r\nThe only entry for the \"(anything) or BOOL\" types is no longer relevant as far as I can see, the only \"LIST\" type is \"LIST of STRING\"; and list options can only be access via GetArgs which returns a list of strings anyway. It was worth exploring using flags, but you were right the first time.\r\n\r\n> > * that the IsArgNegated and IsArgSet warts aren't a priority -- they're largely encapsulated in system.cpp \r\n> This is not the case. These APIs are widely misused and make the developer and users experiences worse. See actual usages [9c0e697](https://github.com/bitcoin/bitcoin/commit/9c0e6975f42a1197a7b898b19d8af81a03868123)\r\n\r\nI don't agree with `-nofoo` sometimes being \"override explicit config settings back to the default\", and particularly having `-nosignetchallenge` as another way of saying \"default signet challenge\" doesn't make much sense to me. So I don't find that commit super convincing...\r\n\r\n> > EDIT: the first one of these prevents me from giving an ACK at least without seeing a good reason for it\r\n> \r\n> Again, the reason is just to provide consistent default behavior for future `-value=\"\"` settings. Current settings are not affected.  Future settings that want to override the behavior are not affected. Fixation on this case seems strange to me, and I think it is possibly standing in for some other concern (aesthetic differences? a different understanding of current conventions?) that has not been articulated.\r\n\r\nI feel like I've been pretty verbose already (though if you want to chat further offline or something, I'm happy to) but as far as I can see you're just ignoring my concerns. All you're doing in this PR is implementing a new API for arguments, but you're dismissing criticism of that API (vs the current one) as \"too general\" because, being unused, the API doesn't impact \"user behaviour\". You could defend `gets()` on the same grounds -- it works great so long as it's not actually used and you can always implement a better API later. So I really don't know what else to say. I don't think it's a good idea to merge an API and then fix it later after you start trying to use it.\r\n\r\n> respond to that depressing review comment\r\n\r\nI guess I'm sorry I looked at this PR. I like the idea of better typing of config options and improved error handling, and figured reviewing PRs about that was a positive step.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902442106",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "referenced",
      "id": 5190160181,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxOTAxNjAxODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5190160181",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c53e8f089472722746aa96b835bf80c5c4782676",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c53e8f089472722746aa96b835bf80c5c4782676",
      "created_at": "2021-08-21T20:18:13Z"
    },
    {
      "event": "convert_to_draft",
      "id": 5190164938,
      "node_id": "MDE5OkNvbnZlcnRUb0RyYWZ0RXZlbnQ1MTkwMTY0OTM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5190164938",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-21T20:24:33Z"
    },
    {
      "event": "reviewed",
      "id": 735517335,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NTE3MzM1",
      "url": null,
      "actor": null,
      "commit_id": "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2021-08-21T20:37:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Setting draft status. Will rebase this on #22766 soon to make this PR smaller and eliminate all confusion/questions/bugs related to backwards compatibility.\r\n\r\n> Approach NACK aa3dec0\r\n\r\nI don't think this NACK is justified. This PR is implementing an internal API. We disagree on minor points of the API design, notably some default behaviors which can be overridden by API callers. I think we both agree that the API will provide useful features to developers for providing clearer error messages and more consistency when parsing settings, both for new settings where there are not backwards compatibility concerns, and selectively for existing settings like #19827 (and maybe in examples from the PR description), where we think the usability benefits outweigh the compatibility concerns.\r\n\r\nIn every case where the NACK has raised a specific concern with the API, I've always responded with specifics, and have also always reiterated the broad point that because this is an internal API, we can change it and make different choices in the future without ever having to affect end-user backwards compatibility in any case.\r\n\r\n> There is no impact on existing settings [...] this approach just makes config handling more complicated because of the different behaviour between currently existing settings and the new ones.\r\n\r\nThanks for acknowledging there is no impact on existing settings. Now we can stop talking so much about backwards compatibility, and I can stop repeating I am not breaking backwards compatibility.\r\n\r\nAt the end of this paragraph you are hinting about what the real concern may be, which is a concern about complexity and inconsistency. This is a very subjective thing to begin with, and I think it has never been substantiated with specific examples. It is also ignoring existing footguns and complexity which this PR is trying to address, see #17783 #17508 and #17493 for real examples. Even if any part of this concern is valid, it seems overblown when you try to stack up handwavy disagreements about internal design decisions with concrete improvements made and enabled by this PR.\r\n\r\n> I don't agree with -nofoo sometimes\r\n\r\nI suspect would not be useful to respond to this, but I can respond if you believe there are implications for this PR. You are saying ArgSet/Negated warts aren't a priority. I am saying why I think they are worth fixing. I think we can agree to disagree about this if it is as tangential to the PR as it seems to be.\r\n\r\n> dismissing criticism of that API (vs the current one) as \"too general\" because, being unused, the API doesn't impact \"user behaviour\".\r\n\r\nI defended the API design I chose for the default behavior of these flags AND I'm saying the default behavior does not affect exisitng options and can be overriden where needed. If we ever want to change the default API behavior in the future, we can do this in the future, and never have to break end-user compatibility. I would just like to try my approach to this API design here, which I think is thoughtful and grounded in real world use-cases.\r\n\r\n> I guess I'm sorry I looked at this PR. I like the idea of better typing of config options and improved error handling, and figured reviewing PRs about that was a positive step.\r\n\r\nI should clarify I think it's definitely a good thing that you've reviewed the PR, and the fault is totally mine for getting discouraged and failing to reply to comments promptly.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-735517335",
      "submitted_at": "2021-08-21T20:37:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5196200991,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTE5NjIwMDk5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5196200991",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9349a02cc41ea537873dd20636aff51e23870cbe",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/9349a02cc41ea537873dd20636aff51e23870cbe",
      "created_at": "2021-08-23T18:40:25Z"
    },
    {
      "event": "referenced",
      "id": 5199711178,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxOTk3MTExNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5199711178",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "40243483ded668a0aee0f276dab6e8070120a9dc",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/40243483ded668a0aee0f276dab6e8070120a9dc",
      "created_at": "2021-08-24T10:19:34Z"
    },
    {
      "event": "referenced",
      "id": 5199711282,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxOTk3MTEyODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5199711282",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eca00d8dfd6bceb2f79fc65d5719507c85cf92f3",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/eca00d8dfd6bceb2f79fc65d5719507c85cf92f3",
      "created_at": "2021-08-24T10:19:35Z"
    },
    {
      "event": "referenced",
      "id": 5202580846,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUyMDI1ODA4NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5202580846",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d5ab248929d3deacca9aeca830481d27af6723bd",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d5ab248929d3deacca9aeca830481d27af6723bd",
      "created_at": "2021-08-24T19:22:25Z"
    },
    {
      "event": "referenced",
      "id": 5212050866,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUyMTIwNTA4NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5212050866",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4332297f627d3e4bc607775445191b1af4525cd5",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4332297f627d3e4bc607775445191b1af4525cd5",
      "created_at": "2021-08-26T10:33:46Z"
    },
    {
      "event": "referenced",
      "id": 5212050979,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUyMTIwNTA5Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5212050979",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3ffbb3b828d6c72618d8acf07f6eeb49eb15ed8f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3ffbb3b828d6c72618d8acf07f6eeb49eb15ed8f",
      "created_at": "2021-08-26T10:33:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5214589887,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTIxNDU4OTg4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5214589887",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c7ba71fb9165b1aae22d4b55a7f804223d5be3a0",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c7ba71fb9165b1aae22d4b55a7f804223d5be3a0",
      "created_at": "2021-08-26T18:18:26Z"
    },
    {
      "event": "referenced",
      "id": 5236868165,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAE4JERF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5236868165",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ae721507691190cfc7fcbf773253d3c3c13938f2",
      "commit_url": "https://api.github.com/repos/ajtowns/bitcoin/commits/ae721507691190cfc7fcbf773253d3c3c13938f2",
      "created_at": "2021-09-01T05:34:35Z"
    },
    {
      "event": "commented",
      "id": 909979400,
      "node_id": "IC_kwDOABII5842PS8I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909979400",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-01T07:00:32Z",
      "updated_at": "2021-09-01T07:00:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I don't think this NACK is justified.\r\n\r\nTo summarise: 1) This PR doesn't improve behaviour (in this case, actually issuing errors/warnings when people make mistakes in the config, or removing any of the footguns for any existing option), and we should be prioritising patches that do improve things. For example, an earlier version of this API has already spent over a year merged without getting us the intended benefits during that time, and instead has resulted in needing extra PRs to revert people trying to use it. That's totally backwards. 2) When introducing a new API we should be using it immediately, both because if it's better then using it is an immediate win, and because that demonstrates the new API actually works in practice, not just in theory. 3) I don't think the new API as of the commit id I referenced is particularly great, since the obvious way to use it means existing options and new ones will behave differently in subtle and confusing ways.\r\n\r\nFor comparison, #22766 changes a bunch less code and simplifies the API in a way that's immediately used and (IMHO) obviously useful, so I'd much rather move the focus there than keep going in circles here. As far as I'm concerned that's a good approach, this isn't (well, wasn't, as of the aforementioned commit id), hence the approach nack here, vs the ack there.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-909979400",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "referenced",
      "id": 5244385743,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAE4lvnP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5244385743",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e6f76cbabbd9670b1a10e688fe7142349a76168b",
      "commit_url": "https://api.github.com/repos/ajtowns/bitcoin/commits/e6f76cbabbd9670b1a10e688fe7142349a76168b",
      "created_at": "2021-09-02T04:40:44Z"
    },
    {
      "event": "referenced",
      "id": 5302940226,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAE8FHJC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5302940226",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "313976dfa2312ca36b1ba6ef27867ebdedc37acf",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/313976dfa2312ca36b1ba6ef27867ebdedc37acf",
      "created_at": "2021-09-15T01:44:52Z"
    },
    {
      "event": "referenced",
      "id": 5365682441,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAE_0dEJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5365682441",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "54cab91151417fae3c26981115d1e52799c5d57a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/54cab91151417fae3c26981115d1e52799c5d57a",
      "created_at": "2021-09-27T13:37:38Z"
    },
    {
      "event": "referenced",
      "id": 5365682573,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAE_0dGN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5365682573",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6e613a0a3058e65237907bcf7915864dcef8cc99",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6e613a0a3058e65237907bcf7915864dcef8cc99",
      "created_at": "2021-09-27T13:37:39Z"
    },
    {
      "event": "referenced",
      "id": 5473220846,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAFGOrju",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5473220846",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7ce0687ef1b28eade9593c079c3b7db0786dd119",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/7ce0687ef1b28eade9593c079c3b7db0786dd119",
      "created_at": "2021-10-16T15:57:11Z"
    },
    {
      "event": "referenced",
      "id": 5514625302,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAFIsoEW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5514625302",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b8c069b7a952e326d2d974cc671889d1a3b38aa4",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/b8c069b7a952e326d2d974cc671889d1a3b38aa4",
      "created_at": "2021-10-25T15:47:30Z"
    },
    {
      "event": "referenced",
      "id": 5514625435,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAFIsoGb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5514625435",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5c428ceef68eb400e2ec4525f044f46f751cdedd",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5c428ceef68eb400e2ec4525f044f46f751cdedd",
      "created_at": "2021-10-25T15:47:32Z"
    },
    {
      "event": "referenced",
      "id": 5546397827,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAFKl1CD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5546397827",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3fc3641043be31e65e43d9f7bcb2c37a8a19760e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc3641043be31e65e43d9f7bcb2c37a8a19760e",
      "created_at": "2021-11-01T03:25:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5549772071,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAFKys0n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5549772071",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
      "created_at": "2021-11-01T15:42:29Z"
    },
    {
      "event": "commented",
      "id": 956523589,
      "node_id": "IC_kwDOABII5845A2RF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/956523589",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-01T19:27:25Z",
      "updated_at": "2022-09-24T12:32:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased aa3dec078fc464d7ea2b46088c789bfd4a7e2637 -> 9349a02cc41ea537873dd20636aff51e23870cbe ([`pr/argcheck.24`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.24) -> [`pr/argcheck.25`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.25), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.24-rebase..pr/argcheck.25)) due to conflict with #22217, on top of new base PR #22766 pr/argscripts.1\r\nRebased 9349a02cc41ea537873dd20636aff51e23870cbe -> c7ba71fb9165b1aae22d4b55a7f804223d5be3a0 ([`pr/argcheck.25`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.25) -> [`pr/argcheck.26`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.26), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.25-rebase..pr/argcheck.26)) on top #22766 pr/argscripts.4\r\nRebased c7ba71fb9165b1aae22d4b55a7f804223d5be3a0 -> 3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06 ([`pr/argcheck.26`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.26) -> [`pr/argcheck.27`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.27), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.26-rebase..pr/argcheck.27)) after #22766 merge\r\nUpdated 3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06 -> 26f8e60dc6b6bb1d123822e336a93352e38fe148 ([`pr/argcheck.27`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.27) -> [`pr/argcheck.28`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.28), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.27..pr/argcheck.28)) with some minor commit and code cleanups, no changes in behavior.\r\nRebased 26f8e60dc6b6bb1d123822e336a93352e38fe148 -> 770b99ea13d6800534f2aa8b6e65152a92272a94 ([`pr/argcheck.28`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.28) -> [`pr/argcheck.29`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.29), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.28-rebase..pr/argcheck.29)) due to various conflicts. Also improved commit messages and added a lot of documentation.\r\nUpdated 770b99ea13d6800534f2aa8b6e65152a92272a94 -> e6565763879e92d3c17dca296966fbccf6991a83 ([`pr/argcheck.29`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.29) -> [`pr/argcheck.30`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.30), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.29..pr/argcheck.30)) changing `TypedArg` declaration to avoid signed/unsigned int conversion",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-956523589",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5829086755,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAFbcM4j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5829086755",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "26f8e60dc6b6bb1d123822e336a93352e38fe148",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/26f8e60dc6b6bb1d123822e336a93352e38fe148",
      "created_at": "2021-12-30T20:52:16Z"
    },
    {
      "event": "labeled",
      "id": 6037993206,
      "node_id": "LE_lADOABII584cZ7HmzwAAAAFn5Hb2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6037993206",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-09T23:11:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 6093454845,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAFrMr39",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454845",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "caa30cc07d5b67c370fe1e64ece82a2e45065bd8",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/caa30cc07d5b67c370fe1e64ece82a2e45065bd8",
      "created_at": "2022-02-17T21:05:40Z"
    },
    {
      "event": "referenced",
      "id": 6093454859,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAFrMr4L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454859",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c8377531b0c184e68f0dd080c87a602f8bd4428a",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/c8377531b0c184e68f0dd080c87a602f8bd4428a",
      "created_at": "2022-02-17T21:05:40Z"
    },
    {
      "event": "referenced",
      "id": 6093454869,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAFrMr4V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6093454869",
      "actor": {
        "login": "Stackout",
        "id": 4387849,
        "node_id": "MDQ6VXNlcjQzODc4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4387849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Stackout",
        "html_url": "https://github.com/Stackout",
        "followers_url": "https://api.github.com/users/Stackout/followers",
        "following_url": "https://api.github.com/users/Stackout/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Stackout/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Stackout/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Stackout/subscriptions",
        "organizations_url": "https://api.github.com/users/Stackout/orgs",
        "repos_url": "https://api.github.com/users/Stackout/repos",
        "events_url": "https://api.github.com/users/Stackout/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Stackout/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b880790944c04285deffba9c8484f36c47ad4f9e",
      "commit_url": "https://api.github.com/repos/VeriBlock/vbk-ri-btc/commits/b880790944c04285deffba9c8484f36c47ad4f9e",
      "created_at": "2022-02-17T21:05:40Z"
    },
    {
      "event": "referenced",
      "id": 6764734736,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAGTNakQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6764734736",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e79d73f0fc31c07ba2f89f29de0ca400a44213fa",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/e79d73f0fc31c07ba2f89f29de0ca400a44213fa",
      "created_at": "2022-06-07T21:05:45Z"
    },
    {
      "event": "referenced",
      "id": 6764756058,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAGTNfxa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6764756058",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "78ac0e9361d3a0e3a520ec8756376135898b4636",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/78ac0e9361d3a0e3a520ec8756376135898b4636",
      "created_at": "2022-06-07T21:09:48Z"
    },
    {
      "event": "referenced",
      "id": 6789171849,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAGUqoqJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6789171849",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d1187d70d1382fb8d5efb591ac96508edaa6c536",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/d1187d70d1382fb8d5efb591ac96508edaa6c536",
      "created_at": "2022-06-10T22:59:47Z"
    },
    {
      "event": "referenced",
      "id": 6806525603,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAGVs1aj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6806525603",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "67f95cb60bf4314d181cdff9bde9f885f926b9cf",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/67f95cb60bf4314d181cdff9bde9f885f926b9cf",
      "created_at": "2022-06-14T17:50:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7441016082,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAG7hOUS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7441016082",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "770b99ea13d6800534f2aa8b6e65152a92272a94",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/770b99ea13d6800534f2aa8b6e65152a92272a94",
      "created_at": "2022-09-22T16:00:43Z"
    },
    {
      "event": "unlabeled",
      "id": 7441529411,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAAG7jLpD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7441529411",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-22T17:13:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7451954489,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAG8K805",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7451954489",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e6565763879e92d3c17dca296966fbccf6991a83",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e6565763879e92d3c17dca296966fbccf6991a83",
      "created_at": "2022-09-24T12:27:47Z"
    },
    {
      "event": "labeled",
      "id": 7817631173,
      "node_id": "LE_lADOABII584cZ7HmzwAAAAHR95XF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7817631173",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-15T21:17:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7837205787,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAHTIkUb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7837205787",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3378fe188bd98215c4f6901d7d43fac7756317f2",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3378fe188bd98215c4f6901d7d43fac7756317f2",
      "created_at": "2022-11-17T19:45:58Z"
    },
    {
      "event": "unlabeled",
      "id": 7837207193,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAAHTIkqZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7837207193",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-17T19:46:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 9039730895,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAIaz1jP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9039730895",
      "actor": {
        "login": "knst",
        "id": 545784,
        "node_id": "MDQ6VXNlcjU0NTc4NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/545784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/knst",
        "html_url": "https://github.com/knst",
        "followers_url": "https://api.github.com/users/knst/followers",
        "following_url": "https://api.github.com/users/knst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/knst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/knst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/knst/subscriptions",
        "organizations_url": "https://api.github.com/users/knst/orgs",
        "repos_url": "https://api.github.com/users/knst/repos",
        "events_url": "https://api.github.com/users/knst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/knst/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "814f197d851da58923d4c7235721c094bc6f8295",
      "commit_url": "https://api.github.com/repos/knst/dash/commits/814f197d851da58923d4c7235721c094bc6f8295",
      "created_at": "2023-04-18T20:02:26Z"
    },
    {
      "event": "referenced",
      "id": 9043588720,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAIbCjZw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9043588720",
      "actor": {
        "login": "knst",
        "id": 545784,
        "node_id": "MDQ6VXNlcjU0NTc4NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/545784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/knst",
        "html_url": "https://github.com/knst",
        "followers_url": "https://api.github.com/users/knst/followers",
        "following_url": "https://api.github.com/users/knst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/knst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/knst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/knst/subscriptions",
        "organizations_url": "https://api.github.com/users/knst/orgs",
        "repos_url": "https://api.github.com/users/knst/repos",
        "events_url": "https://api.github.com/users/knst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/knst/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "39082d2565205484e0cede6117d2b3d191a43b45",
      "commit_url": "https://api.github.com/repos/knst/dash/commits/39082d2565205484e0cede6117d2b3d191a43b45",
      "created_at": "2023-04-19T08:05:57Z"
    },
    {
      "event": "labeled",
      "id": 9066353877,
      "node_id": "LE_lADOABII584cZ7HmzwAAAAIcZZTV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9066353877",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-21T10:42:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 9079974594,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAIdNWrC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9079974594",
      "actor": {
        "login": "knst",
        "id": 545784,
        "node_id": "MDQ6VXNlcjU0NTc4NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/545784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/knst",
        "html_url": "https://github.com/knst",
        "followers_url": "https://api.github.com/users/knst/followers",
        "following_url": "https://api.github.com/users/knst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/knst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/knst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/knst/subscriptions",
        "organizations_url": "https://api.github.com/users/knst/orgs",
        "repos_url": "https://api.github.com/users/knst/repos",
        "events_url": "https://api.github.com/users/knst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/knst/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5289219191cc0339076076f5e8d307ae5b00ddd9",
      "commit_url": "https://api.github.com/repos/knst/dash/commits/5289219191cc0339076076f5e8d307ae5b00ddd9",
      "created_at": "2023-04-24T11:04:43Z"
    },
    {
      "event": "referenced",
      "id": 9096232294,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAIeLX1m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9096232294",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bf9edc1f42bca027edad7082c33db57ffb4a808f",
      "commit_url": "https://api.github.com/repos/knst/dash/commits/bf9edc1f42bca027edad7082c33db57ffb4a808f",
      "created_at": "2023-04-25T20:14:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9147801992,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAIhQGGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9147801992",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e2b9de219b9ebf822fd3801049a7bc3147dd6406",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e2b9de219b9ebf822fd3801049a7bc3147dd6406",
      "created_at": "2023-05-02T16:49:51Z"
    },
    {
      "event": "unlabeled",
      "id": 9148357524,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAAIhSNuU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9148357524",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-02T17:56:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 9202843535,
      "node_id": "LE_lADOABII584cZ7HmzwAAAAIkiD-P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9202843535",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-09T16:37:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1732361506,
      "node_id": "IC_kwDOABII585nQb0i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732361506",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-23T16:42:20Z",
      "updated_at": "2023-09-23T16:42:20Z",
      "author_association": "MEMBER",
      "body": "Are you still working on this? This was converted to draft 2 years ago, is it necessary to keep it as one?",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-1732361506",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10465447056,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAJvygyQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10465447056",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "98d8b635627a2d396b140df0b489433c1fd02081",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/98d8b635627a2d396b140df0b489433c1fd02081",
      "created_at": "2023-09-25T17:04:00Z"
    },
    {
      "event": "unlabeled",
      "id": 10466473863,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAAJv2beH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10466473863",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-25T18:59:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 11589788582,
      "node_id": "LE_lADOABII584cZ7HmzwAAAAKyziOm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11589788582",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-24T21:23:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2071267683,
      "node_id": "IC_kwDOABII5857dQlj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2071267683",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-23T01:55:33Z",
      "updated_at": "2024-04-23T01:55:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--2e250dc3d92b2c9115b66051148d6e47-->\n🤔 There hasn't been much activity lately and the CI seems to be failing.\n\nIf no one reviewed the current pull request by commit hash, a [rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes) can be considered. While the CI failure may be a false positive, the CI hasn't been running for some time, so there may be a real issue hiding as well. A rebase triggers the latest CI and makes sure that no silent merge conflicts have snuck in.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2071267683",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 2232487097,
      "node_id": "IC_kwDOABII586FEQy5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2232487097",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T05:59:35Z",
      "updated_at": "2024-07-17T05:59:35Z",
      "author_association": "MEMBER",
      "body": "Are you still working on this, or do you want someone to pick it up?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2232487097",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13582754078,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAMpmGEe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13582754078",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/9196cfe26da4784029500da482c6f7d55fca5ac2",
      "created_at": "2024-07-19T21:56:06Z"
    },
    {
      "event": "commented",
      "id": 2240599386,
      "node_id": "IC_kwDOABII586FjNVa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2240599386",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-19T23:17:02Z",
      "updated_at": "2024-07-19T23:17:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2232487097\r\n\r\n> Are you still working on this, or do you want someone to pick it up?\r\n\r\nI would like code review, and I probably need to respond to some old comments and questions. There are two parts to this PR:\r\n\r\n- The first part of this PR, implemented in the first commit, uses the ALLOW_BOOL, ALLOW_INT, and ALLOW_STRING flags to validate command line and config file settings, and save them into UniValue values as typed values, rather than strings.\r\n\r\n- The second part of this PR, implemented in the second commit, uses the ALLOW_BOOL, ALLOW_INT, ALLOW_STRING, and ALLOW_LIST flags to provide extra safety to the `GetArg`, `GetArgs`, `GetBoolArg`, and `GetIntArg` accessors. For example it prevents `GetIntArg` accessor from being called on non-int settings, and disables confusing legacy coercion behavior like making `GetBoolArg` return `false` for `-setting=0` and `true` for `-setting=1` but false for `-setting=true` and `true` for `-setting=`.\r\n\r\nI think the first commit is less controversial, but the second commit has been nitpicked because it is a developer API and developers have different preferences and concerns.\r\n\r\nUnfortunately, I don't think it is safe to merge the first commit without the second commit, because the second commit disables unsafe coercions in the `Get*Arg` functions.\r\n\r\nBut fortunately I do not think we need to nitpick and argue about behavior the `Get*Arg` functions because **if any developer does not like the behavior of the `Get*Arg` functions they can call the `GetSetting` function instead** which gives access to the underlying, validated `UniValue` setting and allows any developers to implement any behavior they would like to implement to parse their settings using the UniValue API. Also, because this second commit only affects an internal API, it is possible to change its behavior in the future, if necessary, without affecting users.\r\n\r\nI have done substantial work on top of this PR (in #16545 #17580 #17493 #17581 4719738f602a681eb0d1633fbb1651f42cc93129 7f7d82b521b7d78ea9eccab18f068e2881eefafc 6865a198f5db30bd494b3a2540f47ee728963908\r\n51ca84ecfcad3b8b2a85d75c8c1da61d97c2ca9b and 012a320038158a532bd3662c99cd8211941659d2) porting real settings to use the API defined here, and I shaped the API around this work, and I believe if this PR could make its way beyond the nitpicking trap it is in, it would substantially improve user and developer experience and safety. Or, if I am wrong, it would fail to live up to this promise and will need subsequent improvements. Either way I think this PR is a positive step towards improving the current situation where settings are parsed in unsafe and surprising ways.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2240599386",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "unlabeled",
      "id": 13586856984,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAAMp1vwY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13586856984",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-20T00:23:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2242444648,
      "node_id": "IC_kwDOABII586FqP1o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2242444648",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-22T08:59:49Z",
      "updated_at": "2024-07-22T08:59:49Z",
      "author_association": "MEMBER",
      "body": "> But fortunately I do not think we need to nitpick and argue about behavior the `Get*Arg` functions because **if any developer does not like the behavior of the `Get*Arg` functions they can call the `GetSetting` function instead** which gives access to the underlying, validated `UniValue` setting and allows any developers to implement any behavior they would like to implement to parse their settings using the UniValue API.\r\n\r\nI looked at the feedback so far, and I wonder if it could make sense to simplify the changes here for now to only allow an `enum class` (and not a flags field). The reason is that the controversy seems to stem from where flags are combined. Eg.\r\n\r\n```\r\n    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\r\n    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\r\n```\r\n\r\n(falling back to the default seems controversial).\r\n\r\nThis way, flags can be implemented later (or implemented via GetSetting), if needed, but the simple stuff (like just a `ALLOW_BOOL`) should be easily usable in new options?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2242444648",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "reviewed",
      "id": 2194180912,
      "node_id": "PRR_kwDOABII586CyIsw",
      "url": null,
      "actor": null,
      "commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-23T21:56:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK 9196cfe26da4784029500da482c6f7d55fca5ac2\r\n\r\n### Concept\r\n\r\nIn https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440561 you say:\r\n\r\n> Also this case really can and should be a compile error, not a runtime error.\r\n\r\nThat's along the lines of what I was going to bring up before reading the comments too. Hopefully this PR will take us further in that direction as you say.\r\n\r\n### Commit messages\r\n\r\nBoth commits mention not changing application behavior 2 times each, seems a bit much.\r\n\r\n#### Commit message 9196cfe26da4784029500da482c6f7d55fca5ac2\r\n\r\n> and they be bypassed\r\n->\r\n> and they *can* be bypassed\r\n\r\n### Behavior changes once types are applied\r\n\r\nThis thread gives me some concern: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371600794\r\n\r\n> This seems very strange; I don't see how having \"value=1\", GetBoolArg(\"-value\", false)==false for an arg that's meant to accept a bool or a string could possibly make sense (likewise for value=0, with GetBoolArg(\"-value\", true)==true).\r\n\r\nImplementing a `BOOL|STRING` example might help assuage some fears.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2194180912",
      "submitted_at": "2024-07-23T21:56:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13701202750,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAMwp8M-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13701202750",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/29d932b18559a360f7fade67ad8172ff04f80345",
      "created_at": "2024-07-30T20:47:29Z"
    },
    {
      "event": "reviewed",
      "id": 2208513840,
      "node_id": "PRR_kwDOABII586Doz8w",
      "url": null,
      "actor": null,
      "commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-30T20:51:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 9196cfe26da4784029500da482c6f7d55fca5ac2 -> 29d932b18559a360f7fade67ad8172ff04f80345 ([`pr/argcheck.35`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.35) -> [`pr/argcheck.36`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.36), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.35-rebase..pr/argcheck.36)) adding an initial documentation commit, and a final test commit showing more realistic examples of how the flags are intended to be used. Also implemented all the suggestions from hodlinator's very helpful review and made small tweaks based on the other changes.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2242444648\r\n\r\n> I looked at the feedback so far, and I wonder if it could make sense to simplify the changes here for now to only allow an enum class (and not a flags field)\r\n\r\nIt's an interesting idea, but I wonder if there's any particular problem you think it would solve?\r\n\r\nI don't see why it should be a problem to combine the ALLOW flags in general because the flags control which syntaxes are allowed, so combining the flags just allows more syntaxes.\r\n\r\nIt is true that in most cases you don't want to combine STRING, INT, and BOOL flags. The one case where it's useful to combine BOOL with INT or STRING, is when you have some imperative setting that causes a new action to happen, and can take an optional int or string value. I think of settings like `-ipcbind=<address>` and `-ipcconnect=<address>` where you want to be able to accept an address to connect or bind to, so you want ALLOW_STRING. But you also want to the address to be optional and for `-ipcbind` and `-ipcconnect` to work so you need to add ALLOW_BOOL.\r\n\r\nI tried to [document](https://github.com/ryanofsky/bitcoin/blob/29d932b18559a360f7fade67ad8172ff04f80345/src/common/args.h#L102-L117) this better and also added a new example with `-ipcbind` in the last commit.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2194180912\r\n\r\n> > Also this case really can and should be a compile error, not a runtime error.\r\n> \r\n> That's along the lines of what I was going to bring up before reading the comments too. Hopefully this PR will take us further in that direction as you say.\r\n\r\nYes, basically my idea for implementing this is in https://github.com/bitcoin/bitcoin/issues/22978, and there are other ideas listed there as well. This PR is parsing the settings into typed objects, but the types are determined at runtime because the settings are only defined at runtime when they are registered. If the types were available earlier before the settings are registered, it could be a compile error instead of a runtime error to call the wrong GetArg function.\r\n\r\n> Both commits [...]\r\n\r\nThanks for the helpful suggestion and correction. Issues should be fixed now.\r\n\r\n> Implementing a `BOOL|STRING` example might help assuage some fears.\r\n\r\nThis is a good idea and it prompted me to add a new commit with more realistic examples of how the API is intended to be used. So hopefully that can help.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2208513840",
      "submitted_at": "2024-07-30T20:49:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "labeled",
      "id": 13701903656,
      "node_id": "LE_lADOABII584cZ7HmzwAAAAMwsnUo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13701903656",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T22:12:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2259295329,
      "node_id": "IC_kwDOABII586Gqhxh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2259295329",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T22:12:21Z",
      "updated_at": "2024-07-30T22:12:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/28126603473</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2259295329",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "reviewed",
      "id": 2208698806,
      "node_id": "PRR_kwDOABII586DphG2",
      "url": null,
      "actor": null,
      "commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-31T10:11:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed 29d932b18559a360f7fade67ad8172ff04f80345\r\n\r\nThanks for refining the commit messages and breaking out one commit out of another + adding the new test commit!\r\n\r\nSee you fixed a missing `ALLOW_BOOL` in `GetBoolArg()`.\r\n\r\nFrom my prior review:\r\n\r\n> This thread gives me some concern: #16545 (comment)\r\n> > This seems very strange; I don't see how having \"value=1\", GetBoolArg(\"-value\", false)==false for an arg that's meant to accept a bool or a string could possibly make sense (likewise for value=0, with GetBoolArg(\"-value\", true)==true).\r\n\r\nI see your possible counterpoint - when we have BOOL|INT args, the bool component should only be set using simply \"-arg\" or \"-noarg\", while \"-arg=1\" or \"-arg=0\" means setting the int component. It would be more consistent to make BOOL-only args disallow \"-arg=1\" or \"-arg=0\" but I understand if you don't want to take that fight now.\r\n",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2208698806",
      "submitted_at": "2024-07-31T10:11:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13713225597,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAMxXzd9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13713225597",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7c5cf89ca9bcb62e11cce1c9a711ebd8450d2be0",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/7c5cf89ca9bcb62e11cce1c9a711ebd8450d2be0",
      "created_at": "2024-07-31T17:22:36Z"
    },
    {
      "event": "reviewed",
      "id": 2210115329,
      "node_id": "PRR_kwDOABII586Du68B",
      "url": null,
      "actor": null,
      "commit_id": "7c5cf89ca9bcb62e11cce1c9a711ebd8450d2be0",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-31T17:28:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 29d932b18559a360f7fade67ad8172ff04f80345 -> 7c5cf89ca9bcb62e11cce1c9a711ebd8450d2be0 ([`pr/argcheck.36`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.36) -> [`pr/argcheck.37`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.37), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.36..pr/argcheck.37)) with review suggestions and other minor corrections like spelling fixes.\r\n\r\nThanks again for the detailed review! I think I implemented all the suggestions except one.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2208698806\r\n\r\n> See you fixed a missing ALLOW_BOOL in GetBoolArg().\r\n\r\nYes, the previous version did not require the ALLOW_BOOL flag to be set to call GetBoolArg(). This behavior was actually intended when the PR was written, because it was before GetArg functions returning std::optional were introduced in fc02f77ca604f0221171bfde3059b34f5d0fb1cd from #25290, so  GetBoolArg() was useful as a way to see if an argument was set and nonempty, and it was always allowed to be called regardless of flags. But now that std::optional is available, there is no need for GetBoolArg() to be special.\r\n\r\n> It would be more consistent to make BOOL-only args disallow \"-arg=1\" or \"-arg=0\" but I understand if you don't want to take that fight now.\r\n\r\nIdeally, I would like to go the opposite direction and allow `-arg=0/1/false/true/yes/no/on/off` boolean syntax like [git](https://git-scm.com/docs/git-config#Documentation/git-config.txt-true) but the problem is InterpretBool() interprets all of these values except `1` as false right now, and probably there are existing configurations inadvertently relying on this behavior, so this change would have to be rolled out thoughtfully. One way to do it would be to first make it an error to use \"true\" \"yes\" or \"on\" to set false values, and make it a warning to specify other, unrecognized boolean values. Then after some time we could start interpreting and \"true\" \"yes\" or \"on\" as true and \"false\" \"no\" \"off\" as false and make it an error instead of a warning to specify unrecognized values. These changes could happen independently of this PR if we wanted to pursue them. But this PR just wants to interpret boolean values safely without changing the way they are normally specified.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2210115329",
      "submitted_at": "2024-07-31T17:28:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13714094767,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAMxbHqv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13714094767",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c3a8536155afc2e402e864a60958696e9dc6137b",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c3a8536155afc2e402e864a60958696e9dc6137b",
      "created_at": "2024-07-31T18:16:10Z"
    },
    {
      "event": "commented",
      "id": 2261134212,
      "node_id": "IC_kwDOABII586GxiuE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2261134212",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T18:17:35Z",
      "updated_at": "2024-07-31T18:17:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 7c5cf89ca9bcb62e11cce1c9a711ebd8450d2be0 -> c3a8536155afc2e402e864a60958696e9dc6137b ([`pr/argcheck.37`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.37) -> [`pr/argcheck.38`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.38), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.37..pr/argcheck.38)) to fix CI errors\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2261134212",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "unlabeled",
      "id": 13716335190,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAAMxjqpW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13716335190",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T21:06:31Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2211234589,
      "node_id": "PRR_kwDOABII586DzMMd",
      "url": null,
      "actor": null,
      "commit_id": "c3a8536155afc2e402e864a60958696e9dc6137b",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-31T22:30:23Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2211234589",
      "submitted_at": "2024-07-31T22:30:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 2213902760,
      "node_id": "PRR_kwDOABII586D9Xmo",
      "url": null,
      "actor": null,
      "commit_id": "c3a8536155afc2e402e864a60958696e9dc6137b",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-01T20:47:25Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2213902760",
      "submitted_at": "2024-08-01T20:47:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13757529208,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAM0Azx4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13757529208",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "created_at": "2024-08-05T03:37:56Z"
    },
    {
      "event": "reviewed",
      "id": 2217955390,
      "node_id": "PRR_kwDOABII586EM1A-",
      "url": null,
      "actor": null,
      "commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-05T03:38:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated c3a8536155afc2e402e864a60958696e9dc6137b -> 1e37bcf9fc11562baaedea24685c31f60ef2de31 ([`pr/argcheck.38`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.38) -> [`pr/argcheck.39`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.39), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.38..pr/argcheck.39)) with suggested doxygen fixes and other tweaks",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2217955390",
      "submitted_at": "2024-08-05T03:38:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "labeled",
      "id": 13758355378,
      "node_id": "LE_lADOABII584cZ7HmzwAAAAM0D9ey",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13758355378",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-05T05:38:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2218528901,
      "node_id": "PRR_kwDOABII586EPBCF",
      "url": null,
      "actor": null,
      "commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-05T09:36:31Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2218528901",
      "submitted_at": "2024-08-05T09:36:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "unlabeled",
      "id": 13780857098,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAAM1ZzEK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13780857098",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-06T15:52:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2230505700,
      "node_id": "PRR_kwDOABII586E8tDk",
      "url": null,
      "actor": null,
      "commit_id": "16fe0c57637dbc83c569a407b1f36c30a24081f5",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-09T15:35:51Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2230505700",
      "submitted_at": "2024-08-09T15:35:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 2240110993,
      "node_id": "PRR_kwDOABII586FhWGR",
      "url": null,
      "actor": null,
      "commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-15T11:42:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK 1e37bcf9fc11562baaedea24685c31f60ef2de31\r\n\r\nThe current state of things with no/ad-hoc validation of command line args since #22766 in Nov 2021 is not a good place to be. There can be a tendency to neglect stringent argument parsing on larger projects as long as the happy path of correctly specified args still works.\r\n\r\nOther more embryonic and radical initiatives exist to make args more strictly typed at compile time (#22978, and @ajtowns https://github.com/ajtowns/bitcoin/pull/8). I think the incremental approach of this PR + gradually activating it for existing args will achieve a better baseline to approach those future initiatives from.\r\n\r\n### Approach concerns\r\n\r\nnit: d03b7e94cd4f89b46f658bb3f2afbb24b26e84fa - Title of the commit message could be \"Add ArgsManager flags to parse and validate settings on startup\" -> \"Implement ArgsManager flags to parse and validate settings on startup\" as it was the prior commit that uncommented the flags themselves.\r\n\r\nBeyond my inline comment regarding the `ALLOW_INT | ALLOW_BOOL` example, I think the next steps for me to reach an Approach A-C-K would be to try converting some existing complex args to be typed.\r\n\r\n### Why this PR hasn't seen more activity lately\r\n\r\nmaflcko:\r\n> I know that you [(ryanofsky)] disagree and want to introduce all features in one go all at once, but the fact that this pull request is sitting for more than half a decade without a single full review ACK could be a mild hint that the current state may not be the one that reviewers want to review?\r\n\r\n@maflcko I am grateful you pointed me to this PR based on a comment I made in another PR. Had I started on Bitcoin Core earlier, I would have pushed for some version of this sooner. I've been doing passes on the PR lately with ryanofsky in the hope of getting traction on it from more contributors.\r\n\r\nI think ryanofsky is correct in that a big factor in lacking reviews was the somewhat heated discussions earlier on.\r\n\r\nryanofsky has been responsive throughout the PR lifetime and provided example commits to further help reviewers.\r\n\r\n### Difficulty of review\r\n\r\nmaflcko:\r\n> I agree, but I don't think it is incompatible with my suggestion. (In fact, what you say in the quote is what I was trying to say myself). It seems possible to just implement bool error checking (and only that, or any other single feature), and make sure it is coherent and will be used, and then roll out the feature to one bool-only setting at a time, changing the behavior only once for this setting.\r\n\r\nmaflcko:\r\n> Personally, I just find it a bit hard to read the docs in this change (even if they are great and self-consistent) and then say \"Yes, ...\r\n\r\nI second ryanofsky's suggestion to look at the recently added ExampleOptions test in 16fe0c57637dbc83c569a407b1f36c30a24081f5 do help make things more real. Maybe focus on reviewing those before wading through the docs? But I agree it would make the PR easier to review if @ryanofsky could find ways to compress the comments.\r\n\r\nIt is useful to evaluate a tentative complete version of the API. If the tactic of breaking the PR down into smaller steps is still a requirement for maflcko then maybe we should take a stab at it. If ryanofsky doesn't feel like doing that then maybe I can volunteer (although he'd probably be 20x quicker).\r\n\r\n#### Wacky idea\r\n\r\nThe number of args are finite (~270). To inspire confidence in this and later PRs, maybe one could build an `--extended` functional test harness that runs through all ways they might be used, in all expected *valid* variants (`-norescan`, `-rescan`, `-rescan=500000`, `-rescan=0`, `-rescan=1`), adding debug output where there isn't some already in order to perform primitive log-based validation that the arg was applied in the expected way.\r\n\r\nIf the C++ code were strictly organized with pairs of free functions with the first calling `AddArg()` and the second function reading args and applying them to each component's options-struct, then it could even be run as unit tests, and might also take us one step closer to *compile-time* type safety for args.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2240110993",
      "submitted_at": "2024-08-15T11:42:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13986323412,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAANBplvU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13986323412",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "41bdf3d025f900a59ec14d5b497a31a2d84eea52",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/41bdf3d025f900a59ec14d5b497a31a2d84eea52",
      "created_at": "2024-08-23T01:24:48Z"
    },
    {
      "event": "reviewed",
      "id": 2256044988,
      "node_id": "PRR_kwDOABII586GeIO8",
      "url": null,
      "actor": null,
      "commit_id": "41bdf3d025f900a59ec14d5b497a31a2d84eea52",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-23T02:06:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 1e37bcf9fc11562baaedea24685c31f60ef2de31 -> 41bdf3d025f900a59ec14d5b497a31a2d84eea52 ([`pr/argcheck.39`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.39) -> [`pr/argcheck.40`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.40), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.39..pr/argcheck.40)) dropping support for flag combinations and fixing a commit message as suggested. \r\n\r\nSupport for flag combinations is added back in commit df5c3e123227c1cd01a02b970f63c3682a1522d4 ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/argcomb)) which could be a followup PR.\r\n\r\n---\r\n\r\nThanks maflcko and hodlinator for the very helpful feedback. I dropped support for flag combinations which should make this PR easier to merge and start using, if we want to to do that. In parallel, though I'm also working on a scripted-diff change based on https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-2265757710 that will associate C++ types with all existing ArgsManager options while being fully backwards compatible, to make the new behaviors implemented here easier to see and enable in specific cases, without having to think abstractly about flags. So if we can't make progress here, we could have a another way of adding type checking soon that doesn't require using the flags directly.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2240110993\r\n\r\nThank you very much for that summary and perspective!\r\n\r\n> nit: [d03b7e9](https://github.com/bitcoin/bitcoin/commit/d03b7e94cd4f89b46f658bb3f2afbb24b26e84fa) - Title of the commit message could be [...]\r\n\r\nThanks! Updated\r\n\r\n> #### Wacky idea\r\n> The number of args are finite (~270). To inspire confidence in this and later PRs, maybe one could build an `--extended` functional test harness that runs through all ways they might be used, in all expected _valid_ variants (`-norescan`, `-rescan`, `-rescan=500000`, `-rescan=0`, `-rescan=1`), adding debug output where there isn't some already in order to perform primitive log-based validation that the arg was applied in the expected way.\r\n\r\nThis seems pretty feasible to implement, though I imagine a naive implementation could be pretty slow since there are a lot of ways to specify options. Seems ok for an extended test though, and I do think it's worth thinking about how to test at least some options comprehensively even if not every option.\r\n\r\n> If the C++ code were strictly organized with pairs of free functions with the first calling `AddArg()` and the second function reading args and applying them to each component's options-struct, then it could even be run as unit tests, and might also take us one step closer to _compile-time_ type safety for args.\r\n\r\nWould be curious about this idea if you can elaborate. I guess I'm not sure how you would want to check the result of the second function.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2256044988",
      "submitted_at": "2024-08-23T01:50:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "labeled",
      "id": 14136243957,
      "node_id": "LE_lADOABII584cZ7HmzwAAAANKlfb1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14136243957",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T19:35:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2316714013,
      "node_id": "PRR_kwDOABII586KFkAd",
      "url": null,
      "actor": null,
      "commit_id": "41bdf3d025f900a59ec14d5b497a31a2d84eea52",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-02-22T23:14:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 1e37bcf 41bdf3d`\r\n\r\nAdds code disallowing combining `ALLOW_BOOL` with `ALLOW_INT` and `ALLOW_STRING`. Removes now invalid tests and adds 2 `BOOST_CHECK_THROW()`s.\r\n\r\nCurious to hear maflcko's thoughts now that this change was made (a month ago). Happy to see if I can shake some stuff out first through.\r\n\r\n## Making the applying of arguments testable\r\n\r\nhodlinator:\r\n\r\n> > If the C++ code were strictly organized with pairs of free functions with the first calling AddArg() and the second function reading args and applying them to each component's options-struct, then it could even be run as unit tests, and might also take us one step closer to compile-time type safety for args.\r\n\r\nryanofsky:\r\n\r\n> Would be curious about this idea if you can elaborate. I guess I'm not sure how you would want to check the result of the second function.\r\n\r\n<details><summary>Expand/collapse answer</summary>\r\n\r\nRough existing example:\r\n```C++\r\nstruct BlockManagerOpts {\r\n    const CChainParams& chainparams;\r\n    uint64_t prune_target{0};\r\n    bool fast_prune{false};\r\n    const fs::path blocks_dir;\r\n    Notifications& notifications;\r\n};\r\n\r\nclass BlockManager\r\n{\r\n    ...\r\n    using Options = kernel::BlockManagerOpts;\r\n    ...\r\n};\r\n\r\nutil::Result<void> ApplyArgsManOptions(const ArgsManager& args, BlockManager::Options& opts)\r\n{\r\n    // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\r\n    int64_t nPruneArg{args.GetIntArg(\"-prune\", opts.prune_target)};\r\n    if (nPruneArg < 0) {\r\n        return util::Error{_(\"Prune cannot be configured with a negative value.\")};\r\n    }\r\n    uint64_t nPruneTarget{uint64_t(nPruneArg) * 1024 * 1024};\r\n    if (nPruneArg == 1) { // manual pruning: -prune=1\r\n        nPruneTarget = BlockManager::PRUNE_TARGET_MANUAL;\r\n    } else if (nPruneTarget) {\r\n        if (nPruneTarget < MIN_DISK_SPACE_FOR_BLOCK_FILES) {\r\n            return util::Error{strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024)};\r\n        }\r\n    }\r\n    opts.prune_target = nPruneTarget;\r\n\r\n    if (auto value{args.GetBoolArg(\"-fastprune\")}) opts.fast_prune = *value;\r\n\r\n    return {};\r\n}\r\n```\r\nOnly 2/5 of the fields are actually set by `ApplyArgsManOptions`, and `prune_target` is even being read from first. Ideally the function prototype would be closer to:\r\n```C++\r\nutil::Result<BlockManager::Options> DeriveBlockManagerOptsFromArgs(const ArgsManager& args, const CChainParams& chainparams, int default_prune_target, const fs::path& blocks_dir, Notifications& notifications);\r\n```\r\nand should also have a separate:\r\n```C++\r\nvoid RegisterBlockManagerOptsArgs(const ArgsManager& args)\r\n{\r\n    args.AddArg(\"-fastprune\", \"Use smaller block files and lower minimum prune height for testing purposes\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\r\n    args.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex. \"\r\n            \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\r\n            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\r\n}\r\n```\r\nThen one could create tests such as:\r\n```C++\r\nBOOST_AUTO_TEST_CASE(util_datadir)\r\n{\r\n\tArgsManager args;\r\n\tRegisterBlockManagerOptsArgs(args);\r\n\r\n\t{\r\n\t\targs.ForceSetArg(\"-fastprune\", false);\r\n\t\tBlockManagerOpts& opts = DeriveBlockManagerOptsFromArgs(args, ...).value();\r\n\t\tBOOST_CHECK_EQUAL(opts.prune_target, 1);\r\n\t\tBOOST_CHECK_EQUAL(opts.fastprune, false);\r\n\t\t...\r\n\t}\r\n\r\n\t{\r\n\t\targs.ForceSetArg(\"-fastprune\", true);\r\n\t\tBlockManagerOpts& opts = DeriveBlockManagerOptsFromArgs(args, ...).value();\r\n\t\tBOOST_CHECK_EQUAL(opts.prune_target, 0);\r\n\t\tBOOST_CHECK_EQUAL(opts.fastprune, true);\r\n\t\t...\r\n\t}\r\n\r\n\t...\r\n}\r\n```\r\nValidating all possible states of Options-objects based off possible args would be a lot of work/code. But it would have a lot shorter run-time than my initial impulse to basically re-run bitcoind for every validation-pass and add debug logging for any arg that doesn't have it already to enable validation.\r\n\r\n</details>\r\n\r\n## Getting closer to ACK exploration\r\n\r\nMyself from above:\r\n> ... I think the next steps for me to reach an Approach A-C-K would be to try converting some existing complex args to be typed.\r\n\r\nI tried making all args in *bitcoin-cli.cpp*/`SetupCliArgs()` into typed (`ALLOW_BOOL`, `ALLOW_INT`, `ALLOW_STRING`) and exercising 11 out of 21.\r\n\r\n<details><summary>Expand/collapse lengthy exploration</summary>\r\n\r\nOmitting `-regtest` for brevity along with most well-behaving cases.\r\n\r\n### `-version`\r\n\r\n```\r\n₿ bitcoin-cli -noversion\r\nBitcoin Core RPC client version v27.99.0-41bdf3d025f9-dirty\r\n...\r\n```\r\n⚠️ Wrongly prints out version information. I'm itching to apply `DISALLOW_NEGATION` to it. That contradicts the comment being added to *args.h* by this PR:\r\n```\r\n     * - Only use the DISALLOW_NEGATION flag if your setting really cannot\r\n     *   function without a value, so the command line interface will generally\r\n     *   support negation and be more consistent.\r\n```\r\n\r\n⚠️ (`bitcoin-cli -version=0`) also prints version information. Might be nice to have generalized code for disallowing at least `-version=0`-usage (`REQUIRE_ELISION`?), but could be done in a follow-up.\r\n\r\n\r\n### `-conf`\r\n\r\n```\r\n₿ bitcoin-cli -noconf getblockcount\r\nerror: Bug: Can't call GetArg on arg -rpcport registered with flags 0x00000204 (requires 0x8, disallows 0x10)\r\n```\r\nOops. Updated `-rpcport` handling:\r\n```diff\r\n             } // else, no port was provided in rpcconnect (continue using default one)\r\n         }\r\n \r\n-        if (std::optional<std::string> rpcport_arg = gArgs.GetArg(\"-rpcport\")) {\r\n+        if (std::optional<int64_t> rpcport_arg = gArgs.GetIntArg(\"-rpcport\")) {\r\n             // -rpcport was specified\r\n-            const uint16_t rpcport_int{ToIntegral<uint16_t>(rpcport_arg.value()).value_or(0)};\r\n+            const uint16_t rpcport_int = static_cast<uint64_t>(rpcport_arg.value()) > std::numeric_limits<uint16_t>::max() ? 0 : rpcport_arg.value();\r\n             if (rpcport_int == 0) {\r\n                 // Uses argument provided as-is\r\n                 // (rather than value parsed)\r\n```\r\nAgain:\r\n```\r\n₿ bitcoin-cli -noconf getblockcount\r\n0\r\n```\r\nHm... Tempted to apply `DISALLOW_NEGATION` to `-conf` here as well, but I guess skipping having a configuration file is allowable. It turns out `-conf` uses the only place currently calling `IsArgNegated` outside of tests:\r\n```C++\r\nfs::path ArgsManager::GetPathArg(std::string arg, const fs::path& default_value) const\r\n{\r\n    if (IsArgNegated(arg)) return fs::path{};\r\n```\r\nOuter context is:\r\n```C++\r\nbool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\r\n{\r\n    {\r\n        LOCK(cs_args);\r\n        m_settings.ro_config.clear();\r\n        m_config_sections.clear();\r\n        m_config_path = AbsPathForConfigVal(*this, GetPathArg(\"-conf\", BITCOIN_CONF_FILENAME), /*net_specific=*/false);\r\n    }\r\n\r\n    const auto conf_path{GetConfigFilePath()};\r\n    std::ifstream stream{conf_path};\r\n\r\n    // not ok to have a config file specified that cannot be opened\r\n    if (IsArgSet(\"-conf\") && !stream.good()) {\r\n        error = strprintf(\"specified config file \\\"%s\\\" could not be opened.\", fs::PathToString(conf_path));\r\n        return false;\r\n    }\r\n    // ok to not have a config file\r\n    if (stream.good()) {\r\n```\r\nStepped through in the debugger, and the code creates an `std::ifstream` targeting the **directory** */home/hodlinator/.bitcoin* instead of a config **file**. `stream.good()` returns *true*. No errors are generated by Bitcoin Core. User facing behavior is acceptable but *what the code does should probably be considered a minor bug independent of the PR*. 🚨\r\n\r\n\r\n### `-datadir`\r\n\r\nSimilar behavior as `-conf`.\r\n```\r\n₿ bitcoin-cli -nodatadir getblockcount\r\n0\r\n```\r\n🚨 No error for `-nodatadir`. Arguably *we cannot run without a datadir*. `DISALLOW_NEGATION` would be appropriate and conform with its doc-string.\r\n\r\n\r\n### `-generate`\r\n\r\nThis takes multiple optional positional integer arguments and so falls out of the scope of the PR.\r\n\r\n\r\n### `-addrinfo`\r\n\r\n```\r\n₿ bitcoin-cli -regtest -addrinfo=foo\r\nError parsing command line arguments: Can not set -addrinfo value to 'foo'. It must be set to 0 or 1.\r\n```\r\n✅ Okay across the board.\r\n\r\n\r\n### `-getinfo`\r\n```\r\n₿ bitcoin-cli -getinfo\r\nChain: regtest\r\nBlocks: 4\r\nHeaders: 4\r\n...\r\n```\r\n✅\r\n\r\n```\r\n₿ bitcoin-cli -getinfo=\r\n{\r\n  \"version\": 279900,\r\n  \"blocks\": 4,\r\n  \"headers\": 4,\r\n  \"verificationprogress\": 1,\r\n  \"timeoffset\": 0,\r\n  \"connections\": {\r\n    \"in\": 0,\r\n    \"out\": 0,\r\n    \"total\": 0\r\n  },\r\n...\r\n```\r\n🆗 Suddenly the input is JSON just by appending '='?! Seems like we end up with a different `*RequestHandler`. Edit: 2025-02: I cannot reproduce this behavior.\r\n\r\n```\r\n₿ bitcoin-cli -nogetinfo\r\n{\r\n  \"version\": 279900,\r\n  \"blocks\": 4,\r\n  \"headers\": 4,\r\n  \"verificationprogress\": 1,\r\n  \"timeoffset\": 0,\r\n  \"connections\": {\r\n    \"in\": 0,\r\n    \"out\": 0,\r\n    \"total\": 0\r\n  },\r\n```\r\n⚠️ Feels wrong. (Same result with `bitcoin-cli -nogetinfo=1`).\r\n\r\n```\r\n₿ bitcoin-cli -nogetinfo=\r\nError parsing command line arguments: Can not negate -getinfo at the same time as setting a value ('').\r\n```\r\n🆗 (Same behavior with `bitcoin-cli -nogetinfo=0`).\r\n\r\n\r\n### `-netinfo`\r\n\r\nOkay across the board.\r\n\r\n\r\n### `-color`\r\n\r\nOkay across the board. Reflection: `-color` implicitly depends on `-getinfo`, *should probably be explicit in doc-string, and possibly warn when not used in combination*. ⚠️\r\n\r\n\r\n### `-named`\r\n\r\nOkay across the board.\r\n\r\n\r\n### `-rpcclienttimeout`\r\n\r\n```\r\n₿ bitcoin-cli -regtest -rpcclienttimeout=foo getblockcount\r\nError parsing command line arguments: Can not set -rpcclienttimeout value to 'foo'. It must be set to an integer.\r\n```\r\n\r\nOkay across the board.\r\n\r\n\r\n### `-rpcconnect`\r\n\r\nCould benefit from `DISALLOW_NEGATION`:\r\n```\r\n₿ bitcoin-cli -regtest -norpcconnect getblockcount\r\nerror: timeout on transient error: Could not connect to the server :18443 (error code 1 - \"EOF reached\")\r\n\r\nMake sure the bitcoind server is running and that you are connecting to the correct RPC port.\r\nUse \"bitcoin-cli -help\" for more info.\r\n```\r\n\r\n### `-rpccookiefile`\r\n\r\nGenerally okay, could make an effort to write out the attempted absolute file path:\r\n```\r\n₿ bitcoin-cli -regtest -rpccookiefile=.cookie_wrong getblockcount\r\n2024-09-23T11:43:19Z ThreadRPCServer incorrect password attempt from 127.0.0.1:60906\r\nerror: Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (/home/hodlinator/.bitcoin/bitcoin.conf)\r\n```\r\n\r\n### The rest\r\n\r\nDidn't try `-rpcpassword`, `-rpcport`, `-rpcuser`, `-rpcwait\"`, `-rpcwaittimeout`, `-rpcwallet`, `-stdin\"`, `-stdinrpcpass\"`, `-stdinwalletpassphrase` as STRING/INT/BOOL types have all been tried and the above felt like enough of a sample.\r\n\r\n</details>\r\n\r\n### Reflections from exploration\r\n\r\nWhile this PR does not make everything air-tight by itself, it's a step in the right direction and doesn't seem to introduce any issues.\r\n\r\n#### `DISALLOW_NEGATION` too restrictive\r\n\r\nAs experience with `-noversion` and `-nogetinfo` suggests, there may be a case for disallowing negation through the flag even in cases where the arg doesn't take a value, instead of having custom code for each such case - which does not match the quoted doc-string being added.\r\n\r\n\r\n#### `optional<*> Get*Arg(str)` not a panacea\r\n\r\n(Closely related but independent of the actual changes in the PR). Being able to pass in default values makes for more readable code:\r\n```C++\r\n                 ParseError(error, strPrint, nRet);\r\n             }\r\n         } else if (gArgs.GetBoolArg(\"-addrinfo\", false)) {\r\n         // Verbose: } else if (auto addrinfo{gArgs.GetBoolArg(\"-addrinfo\")}; addrinfo && *addrinfo) {\r\n             rh.reset(new AddrinfoRequestHandler());\r\n         } else {\r\n             rh.reset(new DefaultRequestHandler());\r\n```",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2316714013",
      "submitted_at": "2024-09-23T12:53:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "commented",
      "id": 2368341651,
      "node_id": "IC_kwDOABII586NKgaT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2368341651",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T13:53:49Z",
      "updated_at": "2024-09-23T13:53:49Z",
      "author_association": "MEMBER",
      "body": "> Curious to hear maflcko's thoughts now that this change was made (a month ago). Happy to see if I can shake some stuff out first through.\r\n\r\nThis needs rebase and is still in draft, which is why I haven't taken another look for now. Though, I may take another look later.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2368341651",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "commented",
      "id": 2368602184,
      "node_id": "IC_kwDOABII586NLgBI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2368602184",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T15:13:51Z",
      "updated_at": "2024-09-23T15:13:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for @hodlinator and @maflcko for the comments.I'll go ahead and update this PR in case marco is interested in looking at it since dropping support for flag combinations (https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2256044988).\r\n\r\nIn the meantime though I'm slowly working on the branch in #22978. Compared to this PR, that approach will be a larger change. This PR adds only ~100 lines if you exclude tests and documentation by only adding flags while not change existing code. By contrast #22978 will get rid of flags everywhere all at once. Both changes are refactorings that don't change any current behavior, and both changes implement the same semantics for setting validation and retrieval. I think the approach in #22978 might be more appealing than this one because C++ developers should be more comfortable with type declarations like `std::variant<bool, std::string>` than equivalent declarations with flags like `ALLOW_BOOL | ALLOW_STRING`. Also the approach in #22978 provides better compile time checking, links setting registration & retrieval so it is easier to unit test, and will have native support for options structs, so it will provide other benefits seem to be interested in, not just basic runtime type checking added in this PR.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2316714013\r\n\r\n- Thanks for clarifying your testing idea. The fact that most settings are registered in a global `SetupServerArgs` function does make unit testing awkward, so your idea to break up AddArg calls makes sense and #22978 tries to do something very similar pairing setting registration and retrieval methods. \r\n\r\n- On weird -noversion -version=0 -nodatadir behavior. I think these settings are just implemented badly because current IsArgSet behavior is confusing and frequently misused. I'd like to drop that method, and #30529 removes a number of uses, but there are many more that can be dropped, especially in combination with this PR. I also agree disallowing negation in these cases is ok, though personally I think it's also fine if -noversion or -version=0 is just treated as a normal boolean option and the last option value is used. The comment about disallow_negation is just hoping to make the interface more consistent and discourage special cases, but of course not every case is the same, and some case ares special.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2368602184",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16545"
    },
    {
      "event": "mentioned",
      "id": 14366088556,
      "node_id": "MEE_lADOABII584cZ7HmzwAAAANYSR1s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14366088556",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T15:13:53Z"
    },
    {
      "event": "subscribed",
      "id": 14366088576,
      "node_id": "SE_lADOABII584cZ7HmzwAAAANYSR2A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14366088576",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T15:13:53Z"
    },
    {
      "event": "mentioned",
      "id": 14366088599,
      "node_id": "MEE_lADOABII584cZ7HmzwAAAANYSR2X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14366088599",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T15:13:54Z"
    },
    {
      "event": "subscribed",
      "id": 14366088616,
      "node_id": "SE_lADOABII584cZ7HmzwAAAANYSR2o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14366088616",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T15:13:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14366810468,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAANYVCFk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14366810468",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43",
      "created_at": "2024-09-23T16:00:56Z"
    },
    {
      "event": "reviewed",
      "id": 2322682262,
      "node_id": "PRR_kwDOABII586KcVGW",
      "url": null,
      "actor": null,
      "commit_id": "87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-23T16:02:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 41bdf3d025f900a59ec14d5b497a31a2d84eea52 -> 87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43 ([`pr/argcheck.40`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.40) -> [`pr/argcheck.41`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.41), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.40-rebase..pr/argcheck.41)) due to conflicts with #29043 and #30618\r\n\r\nFollowup adding support for argument combinations is commit c919f51c044f0e80ecd301f9c9d396ddff2331ba ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/argcomb))",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2322682262",
      "submitted_at": "2024-09-23T16:02:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "unlabeled",
      "id": 14367016789,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAANYV0dV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14367016789",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T16:16:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 14367707165,
      "node_id": "LE_lADOABII584cZ7HmzwAAAANYYdAd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14367707165",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-23T17:12:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2325050760,
      "node_id": "PRR_kwDOABII586KlXWI",
      "url": null,
      "actor": null,
      "commit_id": "87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-24T13:09:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "> C++ developers should be more comfortable with type declarations like std::variant<bool, std::string> than equivalent declarations with flags like ALLOW_BOOL | ALLOW_STRING\r\n\r\n`std::variant` is basically a poor-man's-try-monad, until we can use `std::expected` in C++23.\r\n\r\n----\r\n\r\nI started reviewing the PR, but rereading your comment I'm not sure whether you want to modify this part twice - because I'm all for a more functional approach instead of playing with flags (did a similar refactor in https://github.com/bitcoin/bitcoin/pull/30906).\r\n\r\nSo, are you planning on migrating this PR away from flags, or should we review this, knowing that in a future PR you'll likely remove them?",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2325050760",
      "submitted_at": "2024-09-24T13:09:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "unlabeled",
      "id": 14381787115,
      "node_id": "UNLE_lADOABII584cZ7HmzwAAAANZOKfr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14381787115",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-24T13:29:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIwYTk5ODY3NTE3ODVkMzA0N2NmZDg3ZmE4MmM0YjA1YTJlODJiNDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20a9986751785d3047cfd87fa82c4b05a2e82b41",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/20a9986751785d3047cfd87fa82c4b05a2e82b41",
      "tree": {
        "sha": "f98941a995998954c1a7a81017a55f426a7a7931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f98941a995998954c1a7a81017a55f426a7a7931"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33adc7521cc8bb24b941d959022b084002ba7c60",
          "sha": "33adc7521cc8bb24b941d959022b084002ba7c60",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/33adc7521cc8bb24b941d959022b084002ba7c60"
        }
      ],
      "message": "common: Grammar / formatting tweaks\n\nImplement cleanup suggestions from l0rinc:\n\nhttps://github.com/bitcoin/bitcoin/pull/16545#discussion_r1773221823\nhttps://github.com/bitcoin/bitcoin/pull/16545#discussion_r1773291395\nhttps://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775897382",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-09-25T18:42:12Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-09-25T18:42:12Z"
      },
      "sha": "20a9986751785d3047cfd87fa82c4b05a2e82b41"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMwMzg1ZjI5NzZlNzBmMzFmNDVhMGU0Y2QyZTQzZTMxNzFkMjk5OGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30385f2976e70f31f45a0e4cd2e43e3171d2998a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/30385f2976e70f31f45a0e4cd2e43e3171d2998a",
      "tree": {
        "sha": "38cee372f3fa2a643dc14b79310be3d6b597abad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38cee372f3fa2a643dc14b79310be3d6b597abad"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20a9986751785d3047cfd87fa82c4b05a2e82b41",
          "sha": "20a9986751785d3047cfd87fa82c4b05a2e82b41",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/20a9986751785d3047cfd87fa82c4b05a2e82b41"
        }
      ],
      "message": "doc: Add detailed ArgsManager type flag documention\n\nThis commit just adds documentation for the type flags. The flags are actually\nimplemented in the following two commits.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-09-25T18:42:12Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-07-30T16:57:30Z"
      },
      "sha": "30385f2976e70f31f45a0e4cd2e43e3171d2998a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE3YTM1ZWQwODA4OTM0OThlZDZkZTYxNzQ1MTgzNjdlM2E5M2ZhYmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7a35ed080893498ed6de6174518367e3a93fabe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a7a35ed080893498ed6de6174518367e3a93fabe",
      "tree": {
        "sha": "0423c24da2798258a9b30a2503fd23fa9f70f8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0423c24da2798258a9b30a2503fd23fa9f70f8f2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30385f2976e70f31f45a0e4cd2e43e3171d2998a",
          "sha": "30385f2976e70f31f45a0e4cd2e43e3171d2998a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/30385f2976e70f31f45a0e4cd2e43e3171d2998a"
        }
      ],
      "message": "common: Implement ArgsManager flags to parse and validate settings on startup\n\nThis commit implements support for new ALLOW_BOOL, ALLOW_INT, ALLOW_STRING, and\nALLOW_LIST flags by validating settings with these flags earlier on startup and\nproviding detailed error messages to users.\n\nThe new flags implement stricter error checking than ALLOW_ANY. For example, a\ndouble negated option like -nosetting=0 is treated like an error instead of\ntrue, and an unrecognized bool value like -setting=true is treated like an\nerror instead of false. And if a non-list setting is assigned multiple times in\nthe same section of a configuration file, the later assignments trigger errors\ninstead of being silently ignored.\n\nThe new flags also provide type information that allows ArgsManager\nGetSettings() and GetSettingsList() methods to return typed integer and boolean\nvalues instead of unparsed strings.\n\nThe changes in this commit have no effect on current application behavior\nbecause the new flags are only used in unit tests. The existing ALLOW_ANY\nchecks in the argsman_tests/CheckValueTest confirm that no behavior is changing\nfor current settings, which use ALLOW_ANY.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-09-25T18:42:12Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2019-08-04T13:36:04Z"
      },
      "sha": "a7a35ed080893498ed6de6174518367e3a93fabe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE0ZThlZDI2N2FlNTc5MDY5MWViNzFhOTgzOWVkODJmNTc2ODNiNWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4e8ed267ae5790691eb71a9839ed82f57683b5e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a4e8ed267ae5790691eb71a9839ed82f57683b5e",
      "tree": {
        "sha": "617ed91a1bcad07101aaf563d4e43b63f5362f92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/617ed91a1bcad07101aaf563d4e43b63f5362f92"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7a35ed080893498ed6de6174518367e3a93fabe",
          "sha": "a7a35ed080893498ed6de6174518367e3a93fabe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a7a35ed080893498ed6de6174518367e3a93fabe"
        }
      ],
      "message": "common: Update ArgManager GetArg helper methods to work better with ALLOW flags\n\nUpdate GetArg, GetArgs, GetBoolArg, and GetIntArg helper methods to work\nconveniently with ALLOW_BOOL, ALLOW_INT, and ALLOW_STRING flags.\n\nThe GetArg methods are convenience wrappers around the GetSetting method. The\nGetSetting method returns the originally parsed settings values in their\ndeclared bool/int/string types, while the GetArg wrappers provide extra\ntype-coercion and default-value fallback features as additional conveniences\nfor callers.\n\nThis commit makes two changes to GetArg, GetArgs, GetBoolArg, and GetIntArg\nhelper methods when BOOL/INT/STRING flags are used:\n\n1. GetArg methods will now raise errors if they are called with inconsistent\n   flags. For example, GetArgs will raise a logic_error if it is called on a\n   non-LIST setting, GetIntArg will raise a logic_error if it is called\n   on a non-INT setting.\n\n2. GetArg methods will now avoid various type coersion footguns when they are\n   called on new BOOL/INT/STRING settings. Existing ALLOW_ANY settings are\n   unaffected. For example, negated settings will return \"\" empty strings\n   instead of \"0\" strings (in the past the \"0\" strings caused strangeness like\n   \"-nowallet\" options creating wallet files named \"0\"). The new behaviors are\n   fully specified and checked by the `CheckValueTest` unit test.\n\nThe ergonomics of the GetArg helper methods are subjective and the behaviors\nthey implement can be nitpicked and debated endlessly. But behavior of these\nhelper methods does not dictate application behavior, and they can be bypassed\nby calling GetSetting and GetSettingList methods instead. If it's necessary,\nbehavior of these helper methods can also be changed again in the future.\n\nThe changes have no effect on current application behavior because the new\nflags are only used in unit tests. The `setting_args` unit test and ALLOW_ANY\nchecks in the `CheckValueTest` unit test are unchanged and confirm that\n`GetArg` methods behave the same as before for ALLOW_ANY flags (returning the\nsame values and throwing the same exceptions).",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-09-25T18:42:12Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2022-09-21T19:14:40Z"
      },
      "sha": "a4e8ed267ae5790691eb71a9839ed82f57683b5e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU5YzQ0OWUwMzQ4MDE0ZTdlYzU5YmVjNTQyMTg5ZGEzN2Y1NTFmMDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59c449e0348014e7ec59bec542189da37f551f05",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/59c449e0348014e7ec59bec542189da37f551f05",
      "tree": {
        "sha": "51c1fc9110be860133ea96bcc4e052bf53527b71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51c1fc9110be860133ea96bcc4e052bf53527b71"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4e8ed267ae5790691eb71a9839ed82f57683b5e",
          "sha": "a4e8ed267ae5790691eb71a9839ed82f57683b5e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a4e8ed267ae5790691eb71a9839ed82f57683b5e"
        }
      ],
      "message": "test: Add tests to demonstrate usage of ArgsManager flags\n\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-09-25T18:42:12Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-07-30T03:26:27Z"
      },
      "sha": "59c449e0348014e7ec59bec542189da37f551f05"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQwOTBkY2Y2Y2ZkYTJlMjFiN2E3MzIzZGUwZTA0OTkwOTJlYTkwMGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "tree": {
        "sha": "ece81e6a7b4e7369139fc4ca42b69f36a67b0915",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ece81e6a7b4e7369139fc4ca42b69f36a67b0915"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59c449e0348014e7ec59bec542189da37f551f05",
          "sha": "59c449e0348014e7ec59bec542189da37f551f05",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/59c449e0348014e7ec59bec542189da37f551f05"
        }
      ],
      "message": "test: Add test for settings.json parsing with type flags\n\nThe type flags aren't currently used to validate or convert settings in the\nsettings.json file, but they should be in the future. Add test to check current\nbehavior that can be extended when flags are applied.\n\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-09-25T18:42:12Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-06-05T18:48:51Z"
      },
      "sha": "4090dcf6cfda2e21b7a7323de0e0499092ea900c"
    },
    {
      "event": "referenced",
      "id": 14404534616,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAANak8FY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14404534616",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0e3aedf80e3fc9040b8bc1bee735e568f4638996",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0e3aedf80e3fc9040b8bc1bee735e568f4638996",
      "created_at": "2024-09-25T19:12:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14404535172,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAANak8OE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14404535172",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5a945600451037693a032e6df94f99a666dd581f",
      "created_at": "2024-09-25T19:12:04Z"
    },
    {
      "event": "reviewed",
      "id": 2329185957,
      "node_id": "PRR_kwDOABII586K1I6l",
      "url": null,
      "actor": null,
      "commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-25T19:17:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43 -> 5a945600451037693a032e6df94f99a666dd581f ([`pr/argcheck.41`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.41) -> [`pr/argcheck.42`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.42), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.41..pr/argcheck.42)) with suggested formatting & grammar tweaks.\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2325050760\r\n\r\nThanks for the review. To be clear, I would be very happy to see this PR reviewed and merged as is, even though I am working on other related changes in #22978, and am also happy to proceed with them if this PR is stuck.\r\n\r\n> std::variant is basically a poor-man's-try-monad, until we can use std::expected in C++23.\r\n\r\nIt is true that `std::variant` is a poor substitute for `std::expected` in cases where `std::expected` is useful. But `std::variant` is more general than `std::expected` and provides a tagged union type / sum type that's useful for other things besides error handling, such as representing settings in different states.\r\n\r\n> I started reviewing the PR, but rereading your comment I'm not sure whether you want to modify this part twice\r\n\r\nChanges here and in the experimental branch in #22978 should be basically orthogonal.\r\n\r\nThis PR is implementing new validation and parsing behavior so users can have better feedback about invalid settings, and so support for ALLOW_LIST can be added in #17580 and used to remove various confusing merge behaviors (see list of followups in the [description](https://github.com/bitcoin/bitcoin/pull/16545#issue-476557798).\r\n\r\nThe experimental branch in #22978 doesn't implement new behavior. It just hides (and will eliminate but doesn't currently eliminate) the ALLOW_BOOL ALLOW_INT ALLOW_STRING ALLOW_LIST flags, replacing them with equivalent C++ type expressions. If this PR were merged before the changes in that branch, behavior would not be changing twice, it would just be moving with superficial changes from the `InterpretValue` function here to a new `ParseSetting` function there.\r\n\r\nIf you are interested in the validation and parsing behavior implemented in this PR, or the followups listed in the [description](https://github.com/bitcoin/bitcoin/pull/16545#issue-476557798), it's probably worth reviewing this without waiting for the experimental branch to be ready. But if you are less interested in the way settings are validated and parsed, and more interested in being able to represent setting types as C++ type expressions like `std::vector<std::string>` instead of `ALLOW_STRING | ALLOW_LIST`, then the branch will be more interesting than this PR. The branch also provides more compile time checking and support for `Options` structs that should be convenient for developers.\r\n\r\n> So, are you planning on migrating this PR away from flags, or should we review this, knowing that in a future PR you'll likely remove them?\r\n\r\nThe branch will replace flags combinations with C++ type expressions as part of a larger migration from `AddArgs()` calls to `Setting<>` declarations that I hope to implement as a scripted diff. The parsing and validation implemented here which is controlled by the flags will not change. Replacing flags with C++ type expressions is a pretty superficial change, even though it does enable replacing runtime checks with compile-time ones.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2329185957",
      "submitted_at": "2024-09-25T19:17:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "reviewed",
      "id": 2329375556,
      "node_id": "PRR_kwDOABII586K13NE",
      "url": null,
      "actor": null,
      "commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-25T22:03:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nI did a first scan over the impl, left a few nits, some refactoring ideas, let me know what you think and I'll continue the reviews based on that.\r\n\r\n<details>\r\n<summary>Suggestions</summary>\r\n\r\n```patch\r\nIndex: src/test/util/setup_common.h\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/test/util/setup_common.h b/src/test/util/setup_common.h\r\n--- a/src/test/util/setup_common.h\t(revision 5a945600451037693a032e6df94f99a666dd581f)\r\n+++ b/src/test/util/setup_common.h\t(date 1727301051076)\r\n@@ -259,10 +259,6 @@\r\n     return v ? os << *v\r\n              : os << \"std::nullopt\";\r\n }\r\n-inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)\r\n-{\r\n-    return os << \"std::nullopt\";\r\n-}\r\n } // namespace std\r\n \r\n std::ostream& operator<<(std::ostream& os, const arith_uint256& num);\r\nIndex: src/common/args.cpp\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/common/args.cpp b/src/common/args.cpp\r\n--- a/src/common/args.cpp\t(revision 5a945600451037693a032e6df94f99a666dd581f)\r\n+++ b/src/common/args.cpp\t(date 1727300363436)\r\n@@ -56,11 +56,16 @@\r\n  * For a more extensive discussion of this topic (and a wide range of opinions\r\n  * on the Right Way to change this code), see PR12713.\r\n  */\r\n-static bool InterpretBool(const std::string& strValue)\r\n+static bool InterpretBool(std::string_view strValue)\r\n {\r\n-    if (strValue.empty())\r\n-        return true;\r\n-    return (LocaleIndependentAtoi<int>(strValue) != 0);\r\n+    return strValue.empty() || LocaleIndependentAtoi<int>(strValue);\r\n+}\r\n+\r\n+std::optional<int64_t> TryParseInt64(std::string_view str)\r\n+{\r\n+    int64_t result;\r\n+    if (ParseInt64(str, &result)) return result;\r\n+    return std::nullopt;\r\n }\r\n \r\n static std::string SettingName(const std::string& arg)\r\n@@ -93,6 +98,56 @@\r\n     return result;\r\n }\r\n \r\n+std::optional<common::SettingsValue> HandleTypedArg(const KeyInfo& key, std::optional<std::string_view> value,\r\n+                                                    unsigned int flags, std::string& error)\r\n+{\r\n+    if (key.negated) {\r\n+        // If argument is typed, only allow negation with no value or with\r\n+        // literal \"1\" value. Avoid calling InterpretBool and accepting\r\n+        // other values which could be ambiguous.\r\n+        if (value && value != \"1\") {\r\n+            error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\r\n+            return std::nullopt;\r\n+        }\r\n+        return false;\r\n+    }\r\n+    if (value) {\r\n+        if (IsStringArg(flags) || value->empty()) return *value;\r\n+        if (IsIntArg(flags)) {\r\n+            if (auto parsed = TryParseInt64(*value)) return *parsed;\r\n+        }\r\n+        if (IsBoolArg(flags)) {\r\n+            if (value == \"0\") return false;\r\n+            if (value == \"1\") return true;\r\n+        }\r\n+        error = strprintf(\"Cannot set -%s value to '%s'.\", key.name, *value);\r\n+    } else {\r\n+        if (IsBoolArg(flags)) return true;\r\n+        error = strprintf(\"Cannot set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\r\n+    }\r\n+\r\n+    auto type_str = IsStringArg(flags) ? \"a string\" : IsIntArg(flags) ? \"an integer\" : \"0 or 1\";\r\n+    error += strprintf(\" It must be set to %s.\", type_str);\r\n+    return std::nullopt;\r\n+}\r\n+\r\n+std::optional<common::SettingsValue> HandleUntypedArg(const KeyInfo& key, std::optional<std::string_view> value,\r\n+                                                      unsigned int flags, std::string& error)\r\n+{\r\n+    if (key.negated) {\r\n+        // Double negatives like -nofoo=0 are supported (but discouraged)\r\n+        if (value && !InterpretBool(*value)) {\r\n+            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+    if (value) return *value;\r\n+    if (!DisallowElision(flags)) return \"\";\r\n+    error = strprintf(\"Cannot set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\r\n+    return std::nullopt;\r\n+}\r\n+\r\n /**\r\n  * Interpret settings value based on registered flags.\r\n  *\r\n@@ -136,52 +191,18 @@\r\n  * - JSON numbers like `123` are returned for settings like `-setting=123` if\r\n  *   the setting enables integer parsing with the ALLOW_INT flag.\r\n  */\r\n-std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const std::string* value,\r\n-                                                  unsigned int flags, std::string& error)\r\n+std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, std::optional<std::string_view> value,\r\n+                                                    unsigned int flags, std::string& error)\r\n {\r\n-    // Return negated settings as false values.\r\n-    if (key.negated) {\r\n-        if (flags & ArgsManager::DISALLOW_NEGATION) {\r\n-            error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\r\n-            return std::nullopt;\r\n-        }\r\n-        if (IsTypedArg(flags)) {\r\n-            // If argument is typed, only allow negation with no value or with\r\n-            // literal \"1\" value. Avoid calling InterpretBool and accepting\r\n-            // other values which could be ambiguous.\r\n-            if (value && *value != \"1\") {\r\n-                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\r\n-                return std::nullopt;\r\n-            }\r\n-            return false;\r\n-        }\r\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\r\n-        if (value && !InterpretBool(*value)) {\r\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\r\n-            return true;\r\n-        }\r\n-        return false;\r\n+    // Check for disallowed negation\r\n+    if (key.negated && DisallowNegation(flags)) {\r\n+        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\r\n+        return std::nullopt;\r\n     }\r\n-    if (value) {\r\n-        int64_t parsed_int;\r\n-        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;\r\n-        if ((flags & ArgsManager::ALLOW_INT) && ParseInt64(*value, &parsed_int)) return parsed_int;\r\n-        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"0\") return false;\r\n-        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"1\") return true;\r\n-        error = strprintf(\"Cannot set -%s value to '%s'.\", key.name, *value);\r\n-    } else {\r\n-        if (flags & ArgsManager::ALLOW_BOOL) return true;\r\n-        if (!(flags & ArgsManager::DISALLOW_ELISION) && !IsTypedArg(flags)) return \"\";\r\n-        error = strprintf(\"Cannot set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\r\n-    }\r\n-    if (flags & ArgsManager::ALLOW_STRING) {\r\n-        error = strprintf(\"%s %s\", error, \"It must be set to a string.\");\r\n-    } else if (flags & ArgsManager::ALLOW_INT) {\r\n-        error = strprintf(\"%s %s\", error, \"It must be set to an integer.\");\r\n-    } else if (flags & ArgsManager::ALLOW_BOOL) {\r\n-        error = strprintf(\"%s %s\", error, \"It must be set to 0 or 1.\");\r\n-    }\r\n-    return std::nullopt;\r\n+\r\n+    return IsTypedArg(flags)\r\n+           ? HandleTypedArg(key, value, flags, error)\r\n+           : HandleUntypedArg(key, value, flags, error);\r\n }\r\n \r\n //! Return string if setting is a nonempty string or number (-setting=abc,\r\n@@ -284,10 +305,10 @@\r\n #endif\r\n \r\n         if (key == \"-\") break; //bitcoin-tx using stdin\r\n-        std::optional<std::string> val;\r\n+        std::optional<std::string_view> val;\r\n         size_t is_index = key.find('=');\r\n         if (is_index != std::string::npos) {\r\n-            val = key.substr(is_index + 1);\r\n+            val = std::string_view{key}.substr(is_index + 1);\r\n             key.erase(is_index);\r\n         }\r\n #ifdef WIN32\r\n@@ -330,10 +351,11 @@\r\n             return false;\r\n         }\r\n \r\n-        std::optional<common::SettingsValue> value = InterpretValue(keyinfo, val ? &*val : nullptr, *flags, error);\r\n-        if (!value) return false;\r\n-\r\n-        m_settings.command_line_options[keyinfo.name].push_back(*value);\r\n+        if (auto value = InterpretValue(keyinfo, val, *flags, error)) {\r\n+            m_settings.command_line_options[keyinfo.name].push_back(*value);\r\n+        } else {\r\n+            return false;\r\n+        }\r\n     }\r\n \r\n     // we do not allow -includeconf from command line, only -noincludeconf\r\n@@ -674,19 +696,19 @@\r\n     }\r\n \r\n     // Disallow flag combinations that would result in nonsensical behavior or a bad UX.\r\n-    if ((flags & ALLOW_ANY) && (flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING))) {\r\n+    if (IsAnyArg(flags) && IsTypedArg(flags)) {\r\n         throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags are incompatible with \"\r\n                                          \"ALLOW_ANY (typed arguments need to be type checked)\", arg_name));\r\n     }\r\n-    if ((flags & ALLOW_BOOL) && (flags & DISALLOW_ELISION)) {\r\n+    if (IsBoolArg(flags) && DisallowElision(flags)) {\r\n         throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_BOOL flag is incompatible with DISALLOW_ELISION \"\r\n                                          \"(boolean arguments should not require argument values)\", arg_name));\r\n     }\r\n-    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\r\n+    if (IsIntArg(flags) && IsStringArg(flags)) {\r\n         throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT flag is incompatible with ALLOW_STRING \"\r\n                                          \"(any valid integer is also a valid string)\", arg_name));\r\n     }\r\n-    if ((flags & ALLOW_BOOL) && (flags & (ALLOW_INT | ALLOW_STRING))) {\r\n+    if (IsBoolArg(flags) && (IsIntArg(flags) || IsStringArg(flags))) {\r\n         throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_BOOL flag may not currently be specified with ALLOW_INT or ALLOW_STRING \"\r\n                                          \"(integer and string argument values cannot currently be omitted)\", arg_name));\r\n     }\r\nIndex: src/common/config.cpp\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/common/config.cpp b/src/common/config.cpp\r\n--- a/src/common/config.cpp\t(revision 5a945600451037693a032e6df94f99a666dd581f)\r\n+++ b/src/common/config.cpp\t(date 1727296525414)\r\n@@ -105,11 +105,11 @@\r\n                 error = strprintf(\"Multiple values specified for -%s in same section of config file.\", key.name);\r\n                 return false;\r\n             }\r\n-            std::optional<common::SettingsValue> value = InterpretValue(key, &option.second, *flags, error);\r\n-            if (!value) {\r\n-                return false;\r\n-            }\r\n-            m_settings.ro_config[key.section][key.name].push_back(*value);\r\n+            if (auto value = InterpretValue(key, option.second, *flags, error)) {\r\n+                m_settings.ro_config[key.section][key.name].push_back(*value);\r\n+            } else {\r\n+                return false;\r\n+            }\r\n         } else {\r\n             if (ignore_invalid_keys) {\r\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\r\nIndex: src/test/argsman_tests.cpp\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/test/argsman_tests.cpp b/src/test/argsman_tests.cpp\r\n--- a/src/test/argsman_tests.cpp\t(revision 5a945600451037693a032e6df94f99a666dd581f)\r\n+++ b/src/test/argsman_tests.cpp\t(date 1727301503684)\r\n@@ -232,7 +232,7 @@\r\n     BOOST_CHECK_EXCEPTION(ParseOptions({\"-rpcserver=yes\"}), std::exception, HasReason{\"Cannot set -rpcserver value to 'yes'. It must be set to 0 or 1.\"});\r\n \r\n     // Check default dnsseed value is unset.\r\n-    BOOST_CHECK_EQUAL(ParseOptions({}).enable_dns_seed, std::nullopt);\r\n+    BOOST_CHECK(!ParseOptions({}).enable_dns_seed);\r\n     // Check passing -dnsseed makes it true.\r\n     BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed\"}).enable_dns_seed, true);\r\n     // Check passing -dnsseed=1 makes it true.\r\n@@ -242,7 +242,7 @@\r\n     // Check passing -dnsseed=0 makes it false.\r\n     BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=0\"}).enable_dns_seed, false);\r\n     // Check adding -dnsseed= sets it back to default.\r\n-    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed, std::nullopt);\r\n+    BOOST_CHECK(!ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed);\r\n     // Check passing invalid value.\r\n     BOOST_CHECK_EXCEPTION(ParseOptions({\"-dnsseed=yes\"}), std::exception, HasReason{\"Cannot set -dnsseed value to 'yes'. It must be set to 0 or 1.\"});\r\n \r\n@@ -276,7 +276,7 @@\r\n     // Check default assumevalid value is unset.\r\n     BOOST_CHECK(!ParseOptions({}).assumevalid);\r\n     // Check passing -assumevalid=<hash> makes it set that hash.\r\n-    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid.value().ToString(), \"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\");\r\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid, uint256{\"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"});\r\n     // Check passing -noassumevalid makes it not assumevalid.\r\n     BOOST_CHECK(!ParseOptions({\"-noassumevalid\"}).assumevalid);\r\n     // Check adding -assumevalid= sets it back to default.\r\nIndex: src/common/args.h\r\n<+>UTF-8\r\n===================================================================\r\ndiff --git a/src/common/args.h b/src/common/args.h\r\n--- a/src/common/args.h\t(revision 5a945600451037693a032e6df94f99a666dd581f)\r\n+++ b/src/common/args.h\t(date 1727300249024)\r\n@@ -77,8 +77,8 @@\r\n \r\n KeyInfo InterpretKey(std::string key);\r\n \r\n-std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const std::string* value,\r\n-                                                         unsigned int flags, std::string& error);\r\n+std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, std::optional<std::string_view> value,\r\n+                                                    unsigned int flags, std::string& error);\r\n \r\n struct SectionInfo {\r\n     std::string m_name;\r\n@@ -561,12 +561,16 @@\r\n         const std::map<std::string, std::vector<common::SettingsValue>>& args) const;\r\n };\r\n \r\n-//! Whether the type of the argument has been specified and extra validation\r\n-//! rules should apply.\r\n-inline bool IsTypedArg(uint32_t flags)\r\n-{\r\n-    return flags & (ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT |  ArgsManager::ALLOW_STRING);\r\n-}\r\n+//! Whether the type of the argument has been specified and extra validation rules should apply.\r\n+inline bool DisallowNegation(uint32_t flags) { return flags & ArgsManager::DISALLOW_NEGATION; }\r\n+inline bool DisallowElision(uint32_t flags) { return flags & ArgsManager::DISALLOW_ELISION; }\r\n+\r\n+inline bool IsAnyArg(uint32_t flags) { return flags & ArgsManager::ALLOW_ANY; }\r\n+inline bool IsBoolArg(uint32_t flags) { return flags & ArgsManager::ALLOW_BOOL; }\r\n+inline bool IsIntArg(uint32_t flags) { return flags & ArgsManager::ALLOW_INT; }\r\n+inline bool IsStringArg(uint32_t flags) { return flags & ArgsManager::ALLOW_STRING; }\r\n+inline bool IsListArg(uint32_t flags) { return flags & ArgsManager::ALLOW_LIST; }\r\n+inline bool IsTypedArg(uint32_t flags) { return IsBoolArg(flags) || IsIntArg(flags) || IsStringArg(flags); }\r\n \r\n extern ArgsManager gArgs;\r\n\r\n```\r\n\r\n</details>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2329375556",
      "submitted_at": "2024-09-25T22:00:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14492371978,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAANf0AwK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14492371978",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b5ef85497436c3e9e60c760465d8991592efef07",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/b5ef85497436c3e9e60c760465d8991592efef07",
      "created_at": "2024-10-02T17:08:58Z"
    },
    {
      "event": "reviewed",
      "id": 2343217508,
      "node_id": "PRR_kwDOABII586Lqqlk",
      "url": null,
      "actor": null,
      "commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-10-02T17:09:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 5a945600451037693a032e6df94f99a666dd581f -> b5ef85497436c3e9e60c760465d8991592efef07 ([`pr/argcheck.42`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.42) -> [`pr/argcheck.43`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.43), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.42..pr/argcheck.43)) implementing review suggestions",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2343217508",
      "submitted_at": "2024-10-02T17:09:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "referenced",
      "id": 14512695368,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAANhBihI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14512695368",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "98f2edf32ce5411eb40fa6bf1889ee325d40e1f7",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/98f2edf32ce5411eb40fa6bf1889ee325d40e1f7",
      "created_at": "2024-10-04T03:34:53Z"
    },
    {
      "event": "referenced",
      "id": 15530717033,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAOds-9p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15530717033",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "11f68cc8108494c709bc6d6c0654c7e1d0261840",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f68cc8108494c709bc6d6c0654c7e1d0261840",
      "created_at": "2024-12-04T18:20:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15590106977,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAOhPidh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15590106977",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d28a5c88979d89dcaea27dc9a015bac54c640d3f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d28a5c88979d89dcaea27dc9a015bac54c640d3f",
      "created_at": "2024-12-09T20:27:24Z"
    },
    {
      "event": "reviewed",
      "id": 2489945399,
      "node_id": "PRR_kwDOABII586UaY03",
      "url": null,
      "actor": null,
      "commit_id": "d28a5c88979d89dcaea27dc9a015bac54c640d3f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-09T14:46:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Appreciate the reviews.\n\nUpdated b5ef85497436c3e9e60c760465d8991592efef07 -> d28a5c88979d89dcaea27dc9a015bac54c640d3f ([`pr/argcheck.43`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.43) -> [`pr/argcheck.44`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.44), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.43..pr/argcheck.44)) with some suggested changes.\nUpdated d28a5c88979d89dcaea27dc9a015bac54c640d3f -> 2057315f03ac6daa6905e1ce9bf7bb92b22442ad ([`pr/argcheck.44`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.44) -> [`pr/argcheck.45`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.45), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.44..pr/argcheck.45)) to fix typo in fuzz check\n<!-- begin push-46 -->\nUpdated 2057315f03ac6daa6905e1ce9bf7bb92b22442ad -> 4090dcf6cfda2e21b7a7323de0e0499092ea900c ([`pr/argcheck.45`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.45) -> [`pr/argcheck.46`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.46), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.45..pr/argcheck.46))<!-- end --> to fix typo in fuzz check\n\n\nWhile I think this PR is in a good state, I'd encourage review of #31260 ahead of this, because #31260 allows setting types to be specified with C++ types instead of flags, which should semantics implemented here more obvious when this can be rebased on top.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-2489945399",
      "submitted_at": "2024-12-09T20:28:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15590395644,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAOhQo78",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15590395644",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2057315f03ac6daa6905e1ce9bf7bb92b22442ad",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2057315f03ac6daa6905e1ce9bf7bb92b22442ad",
      "created_at": "2024-12-09T20:51:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15590682082,
      "node_id": "HRFPE_lADOABII584cZ7HmzwAAAAOhRu3i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15590682082",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "created_at": "2024-12-09T21:15:10Z"
    },
    {
      "event": "referenced",
      "id": 16318301782,
      "node_id": "REFE_lADOABII584cZ7HmzwAAAAPMpYZW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16318301782",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e53310c47abef3e4f8de59c2866469e338dda9fc",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e53310c47abef3e4f8de59c2866469e338dda9fc",
      "created_at": "2025-02-14T23:10:29Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310390632",
      "pull_request_review_id": 270501537,
      "id": 310390632,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM5MDYzMg==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 15,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice to see `ALLOW_NEGATED` flag [again](https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823) ;)",
      "created_at": "2019-08-04T14:52:04Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310390632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310390769",
      "pull_request_review_id": 270501668,
      "id": 310390769,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM5MDc2OQ==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,\n+        TYPE_OPTIONAL_STRING = ALLOW_NONEMPTY | ALLOW_NEGATED | ALLOW_EMPTY,\n+        TYPE_INT = ALLOW_INT | ALLOW_NEGATED,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we drop `ALLOW_NEGATED` for `TYPE_INT` now or in the future?",
      "created_at": "2019-08-04T14:54:39Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310390769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311316763",
      "pull_request_review_id": 271666106,
      "id": 311316763,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTMxNjc2Mw==",
      "diff_hunk": "@@ -260,8 +260,60 @@ class ArgsManagerHelper {\n         }\n         return InterpretBool(found_result.second); // is set, so evaluate\n     }\n+\n+    static inline void CheckFlags(const ArgsManager& am, const std::string& key, unsigned int require_any)\n+    {\n+        unsigned int flags = am.FlagsOfKnownArg(key);\n+        if (flags != ArgsManager::NONE && ((flags & require_any) == 0)) {",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "00973301f6a1efb6aa2232544a49b080ac0c6c50\r\n\r\nLooks like this should be an assertion?\r\n```c++\r\n        if (flags) assert(flags & require_any);\r\n```",
      "created_at": "2019-08-06T23:32:49Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311316763",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311316763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311321892",
      "pull_request_review_id": 271666106,
      "id": 311321892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTMyMTg5Mg==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 22,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1efb9ee41ab228a73d293603838951af6fb0f59c\r\n\r\nIt would be nice to see a commit elsewhere using these \"types\".",
      "created_at": "2019-08-06T23:59:13Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311321892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311321892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440418",
      "pull_request_review_id": 271818284,
      "id": 311440418,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ0MDQxOA==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 15,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": 310390632,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390632\r\n\r\n> Nice to see ALLOW_NEGATED flag again ;)\r\n\r\nIt is ok to have this, but like the comment above it says, it should only be used in rare cases, where a negated setting needs to be treated differently than a false/0/empty bool/int/string setting. Normal code for normal options should never have to use ALLOW_NEGATED or IsArgNegated.",
      "created_at": "2019-08-07T08:55:14Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440447",
      "pull_request_review_id": 271818284,
      "id": 311440447,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ0MDQ0Nw==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,\n+        TYPE_OPTIONAL_STRING = ALLOW_NONEMPTY | ALLOW_NEGATED | ALLOW_EMPTY,\n+        TYPE_INT = ALLOW_INT | ALLOW_NEGATED,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": 310390769,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390769\r\n\r\n> Could we drop ALLOW_NEGATED for TYPE_INT now or in the future?\r\n\r\nThis seems like a bad thing to provide as a shortcut. If an option is an integer, treating `-nonumber` exactly the same as `-number=0` provides a simple interface to users consistent with what we've always provided in the past. Treating these the same is also less error prone for developers than treating them differently. It is possible there may be exceptions where treating `-nonumber` differently from `-number=0` would be a good thing, but I'd honestly be surprised to see one, and ALLOW_ flags and IsArgNegated function are available if this is actually desired.\r\n\r\nIn case the reason you're asking about this is because you want range checking for integer options that shouldn't accept 0, I think it'd be better to implement that in a way that disallows both `-nonumber` and `-number=0` settings, not just one of them. This could be added with a TYPE_POSITIVE_INT shortcut, or letting AddArg take validation callbacks or options structs (`IntType{}.MinValue(1).MaxValue(65535)`) in place of flags.",
      "created_at": "2019-08-07T08:55:19Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440561",
      "pull_request_review_id": 271818284,
      "id": 311440561,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ0MDU2MQ==",
      "diff_hunk": "@@ -260,8 +260,60 @@ class ArgsManagerHelper {\n         }\n         return InterpretBool(found_result.second); // is set, so evaluate\n     }\n+\n+    static inline void CheckFlags(const ArgsManager& am, const std::string& key, unsigned int require_any)\n+    {\n+        unsigned int flags = am.FlagsOfKnownArg(key);\n+        if (flags != ArgsManager::NONE && ((flags & require_any) == 0)) {",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "in_reply_to_id": 311316763,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311316763\r\n\r\n> Looks like this should be an assertion?\r\n\r\nI know you didn't check the tests yet, but the main reason for this being a logic_error instead of an assert is so the test can require and check this logic so it won't be accidentally broken in the future. The other reason this is a logic_error is to provide clearer feedback to a developer who accidentally sets the wrong flag or calls the wrong GetArg overload, by providing the option names and flags values in error messages.\r\n\r\nI tdo think it makes sense to use assert/abort instead of logic_error in cases where the error is critical (affecting consensus, or data integrity) and it's important to abort unconditionally and not take a risk that a caller may catch the error and handle it inappropriately. But this case is less critical than that.\r\n\r\nAlso this case really can and should be a compile error, not a runtime error. But it will take some more work and scripted-diffs to make that happen.",
      "created_at": "2019-08-07T08:55:33Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440561",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440627",
      "pull_request_review_id": 271818284,
      "id": 311440627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ0MDYyNw==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 22,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": 311321892,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311321892\r\n\r\n> It would be nice to see a commit elsewhere using these \"types\".\r\n\r\nThis is a good idea. I can open a draft PR applying these to some wallet flags, since I know hebasto already has good work on node flags like -datadir, -blocksdir, -pid etc that I don't want to interfere with. I do think any PR actually using flags should be merged after this one since changing flag behavior after flags are already in use would be unnecessarily confusing and risky.\r\n",
      "created_at": "2019-08-07T08:55:41Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311490205",
      "pull_request_review_id": 271880915,
      "id": 311490205,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ5MDIwNQ==",
      "diff_hunk": "@@ -260,8 +260,60 @@ class ArgsManagerHelper {\n         }\n         return InterpretBool(found_result.second); // is set, so evaluate\n     }\n+\n+    static inline void CheckFlags(const ArgsManager& am, const std::string& key, unsigned int require_any)\n+    {\n+        unsigned int flags = am.FlagsOfKnownArg(key);\n+        if (flags != ArgsManager::NONE && ((flags & require_any) == 0)) {",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "in_reply_to_id": 311316763,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Actually I did check and ran the tests with my change and I understand the idea of testing the exception, which wouldn't make sense if it was an assertion.\r\n\r\n> Also this case really can and should be a compile error\r\n\r\nAgree.",
      "created_at": "2019-08-07T10:53:36Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311490205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311490205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311490504",
      "pull_request_review_id": 271881309,
      "id": 311490504,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ5MDUwNA==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 22,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": 311321892,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe a brief example in the PR description then?",
      "created_at": "2019-08-07T10:54:33Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311490504",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311490504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312037476",
      "pull_request_review_id": 272573893,
      "id": 312037476,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjAzNzQ3Ng==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 22,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": 311321892,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Maybe a brief example in the PR description then?\r\n\r\nAnother really good idea! Will add this.",
      "created_at": "2019-08-08T13:34:34Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312037476",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312037476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312707098",
      "pull_request_review_id": 273430124,
      "id": 312707098,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjcwNzA5OA==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,\n+        TYPE_OPTIONAL_STRING = ALLOW_NONEMPTY | ALLOW_NEGATED | ALLOW_EMPTY,\n+        TYPE_INT = ALLOW_INT | ALLOW_NEGATED,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "in_reply_to_id": 310390769,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> If an option is an integer, treating `-nonumber` exactly the same as `-number=0` provides a simple interface to users...\r\n\r\nSuch practice is a bad habit, IMO.\r\n\r\n> ... consistent with what we've always provided in the past. Treating these the same is also less error prone for developers than treating them differently.\r\n\r\nAgree. It is important.",
      "created_at": "2019-08-10T15:48:16Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312707098",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312707098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312709327",
      "pull_request_review_id": 273432467,
      "id": 312709327,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjcwOTMyNw==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 3,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "01ca54a2411ff8f39fa10974327e882141140739",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could the underlying type be specified?\r\n```suggestion\r\n     enum Flags : unsigned int {\r\n```\r\nRef: https://github.com/bitcoin/bitcoin/pull/16097#discussion_r310193132",
      "created_at": "2019-08-10T16:56:16Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312709327",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312709327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313973773",
      "pull_request_review_id": 275011908,
      "id": 313973773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzk3Mzc3Mw==",
      "diff_hunk": "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 3,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "01ca54a2411ff8f39fa10974327e882141140739",
      "in_reply_to_id": 312709327,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Could the underlying type be specified?\r\n\r\nDone in 9a1e20eef36b9dfff9de7780b0edd30b8ae92487",
      "created_at": "2019-08-14T16:40:33Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r313973773",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313973773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346127792",
      "pull_request_review_id": 316713766,
      "id": 346127792,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjEyNzc5Mg==",
      "diff_hunk": "@@ -350,11 +410,28 @@ Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n     return nullopt;\n }\n \n+bool ArgsManager::CheckArgFlags(const std::string& name,\n+    unsigned int require,\n+    unsigned int forbid,\n+    const char* context) const",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 194,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "4b8149b5aae874cffe81423a2d4529c6f5b6e944",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"Implement missing error checking for ArgsManager flags\" (4b8149b5aae874cffe81423a2d4529c6f5b6e944)\r\n\r\nNote: comment describing this function is in the header file shown below on github",
      "created_at": "2019-11-14T05:01:07Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r346127792",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346127792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 413,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360732832",
      "pull_request_review_id": 335673755,
      "id": 360732832,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDczMjgzMg==",
      "diff_hunk": "@@ -174,8 +175,9 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * Result will be null if setting was unset, true if \"-setting\" argument\n+     * was passed false if \"-nosetting\" argument was passed, and a string,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, comma before `false`?",
      "created_at": "2019-12-22T22:30:02Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360732832",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360732832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360736266",
      "pull_request_review_id": 335673755,
      "id": 360736266,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDczNjI2Ng==",
      "diff_hunk": "@@ -198,30 +190,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n+static Optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 67,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, I've changed this to `Optional<string>`, see https://github.com/promag/bitcoin/commit/71da58bc9437b977e56029bd8d2516bcf61cb823.",
      "created_at": "2019-12-22T23:42:50Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736266",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360736266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360736303",
      "pull_request_review_id": 335673755,
      "id": 360736303,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDczNjMwMw==",
      "diff_hunk": "@@ -132,12 +132,13 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n-    enum Flags {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+    enum Flags : unsigned int {\n+        ALLOW_ANY = 0x01,    //!< disable validation",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`AddArg` could disallow any other flag when this one is used?",
      "created_at": "2019-12-22T23:43:47Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736303",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360736303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362874240",
      "pull_request_review_id": 338163788,
      "id": 362874240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NDI0MA==",
      "diff_hunk": "@@ -174,8 +175,9 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * Result will be null if setting was unset, true if \"-setting\" argument\n+     * was passed false if \"-nosetting\" argument was passed, and a string,\n+     * integer, or boolean depending on ALLOW_ flags if a \"-setting=value\"",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 28,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n     * integer, or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a \"-setting=value\"\r\n```",
      "created_at": "2020-01-03T16:34:15Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r362874240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362874240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509730",
      "pull_request_review_id": 338929766,
      "id": 363509730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwOTczMA==",
      "diff_hunk": "@@ -198,30 +190,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n+static Optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 67,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": 360736266,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736266\r\n\r\n> nit, I've changed this to `Optional<string>`, see [promag@71da58b](https://github.com/promag/bitcoin/commit/71da58bc9437b977e56029bd8d2516bcf61cb823).\r\n\r\nUsing an optional wrapper instead of a simple const pointer seems a little worse to me (less efficient, more verbose), but I wouldn't object if there's an advantage I'm not seeing.",
      "created_at": "2020-01-06T22:17:16Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509851",
      "pull_request_review_id": 338929766,
      "id": 363509851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwOTg1MQ==",
      "diff_hunk": "@@ -132,12 +132,13 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n-    enum Flags {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+    enum Flags : unsigned int {\n+        ALLOW_ANY = 0x01,    //!< disable validation",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": 360736303,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736303\r\n\r\n> `AddArg` could disallow any other flag when this one is used?\r\n\r\nThanks, added checks for useless flag combinations in `AddArg` and tests for the checks in `util_CheckBadFlagCombinations`",
      "created_at": "2020-01-06T22:17:34Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509906",
      "pull_request_review_id": 338929766,
      "id": 363509906,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwOTkwNg==",
      "diff_hunk": "@@ -174,8 +175,9 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * Result will be null if setting was unset, true if \"-setting\" argument\n+     * was passed false if \"-nosetting\" argument was passed, and a string,",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": 360732832,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360732832\r\n\r\n> nit, comma before `false`?\r\n\r\nThanks, fixed",
      "created_at": "2020-01-06T22:17:44Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509906",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363510017",
      "pull_request_review_id": 338929766,
      "id": 363510017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUxMDAxNw==",
      "diff_hunk": "@@ -174,8 +175,9 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * Result will be null if setting was unset, true if \"-setting\" argument\n+     * was passed false if \"-nosetting\" argument was passed, and a string,\n+     * integer, or boolean depending on ALLOW_ flags if a \"-setting=value\"",
      "path": "src/util/system.h",
      "position": 1,
      "original_position": 28,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": 362874240,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r362874240\r\n\r\nThanks, included suggestion",
      "created_at": "2020-01-06T22:18:06Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363510017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363510017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363943771",
      "pull_request_review_id": 339497687,
      "id": 363943771,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0Mzc3MQ==",
      "diff_hunk": "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assiging explicit int or string",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 159,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "27beca5ffee664360005f74123dad9107769d048",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "assiging  ==> assigning",
      "created_at": "2020-01-07T20:48:09Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363943771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363943771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363968221",
      "pull_request_review_id": 339529990,
      "id": 363968221,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2ODIyMQ==",
      "diff_hunk": "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assiging explicit int or string",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 159,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "27beca5ffee664360005f74123dad9107769d048",
      "in_reply_to_id": 363943771,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363943771\r\n\r\n> assiging ==> assigning\r\n\r\nThanks, fixed",
      "created_at": "2020-01-07T21:50:22Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363968221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363968221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364847093",
      "pull_request_review_id": 340663527,
      "id": 364847093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0NzA5Mw==",
      "diff_hunk": "@@ -198,30 +190,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n+static Optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 67,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "in_reply_to_id": 360736266,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah don't bother",
      "created_at": "2020-01-09T16:45:39Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r364847093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364847093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370152855",
      "pull_request_review_id": 347342602,
      "id": 370152855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1Mjg1NQ==",
      "diff_hunk": "@@ -427,6 +505,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 270,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems like you might as well have a check for:\r\n\r\n```c++\r\nif ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_LIST)) \r\n```\r\n\r\nhere as well -- if you add LIST, you can't use GetArg to query for a string or int, or GetBoolArg to query for a bool value?",
      "created_at": "2020-01-23T14:35:20Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370152855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370152855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370153489",
      "pull_request_review_id": 347342602,
      "id": 370153489,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1MzQ4OQ==",
      "diff_hunk": "@@ -398,15 +474,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ 0, __func__);",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 252,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems like this should have `/* forbid= */ ALLOW_LIST` to match `GetBoolArg` ?",
      "created_at": "2020-01-23T14:36:25Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370153489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370153489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370818419",
      "pull_request_review_id": 348193241,
      "id": 370818419,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxODQxOQ==",
      "diff_hunk": "@@ -398,15 +474,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ 0, __func__);",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 252,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "in_reply_to_id": 370153489,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370153489\r\n\r\n> Seems like this should have `/* forbid= */ ALLOW_LIST` to match `GetBoolArg` ?\r\n\r\nAdded suggested restriction",
      "created_at": "2020-01-24T20:02:17Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370818419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370818419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370818484",
      "pull_request_review_id": 348193241,
      "id": 370818484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxODQ4NA==",
      "diff_hunk": "@@ -427,6 +505,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 270,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "in_reply_to_id": 370152855,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370152855\r\n\r\n> Seems like you might as well have a check for:\r\n> \r\n> ```c++\r\n> if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_LIST)) \r\n> ```\r\n> \r\n> here as well -- if you add LIST, you can't use GetArg to query for a string or int, or GetBoolArg to query for a bool value?\r\n\r\nIf the suggestion is make it impossible to accept lists of strings, I don't see how that makes sense. If the suggestion is to make it impossible to accept lists of bools or ints, I don't think that is a good idea. ArgsManager API for retrieving typed lists could be improved but it isn't something that needs to be explicitly supported or forbidden in this PR",
      "created_at": "2020-01-24T20:02:26Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370818484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370818484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371597025",
      "pull_request_review_id": 349115190,
      "id": 371597025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NzAyNQ==",
      "diff_hunk": "@@ -427,6 +505,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 270,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "in_reply_to_id": 370152855,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you want to support lists of bools or ints later, then it's easy to remove the restriction then; if lists of bools or ints is supported now, it should be tested along with the other cases in util_tests.cpp -- but it doesn't seem like it makes sense to say that it's supported now when we've only got `std::vector<std::string> GetArgs()` to query it.",
      "created_at": "2020-01-28T03:42:36Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371597025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371597025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371600794",
      "pull_request_review_id": 349119563,
      "id": 371600794,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMDc5NA==",
      "diff_hunk": "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 122,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems very strange; I don't see how having \"value=1\", `GetBoolArg(\"-value\", false)==false` for an arg that's meant to accept a bool or a string could possibly make sense (likewise for value=0, with `GetBoolArg(\"-value\", true)==true`).",
      "created_at": "2020-01-28T04:04:51Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371600794",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371600794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481492984",
      "pull_request_review_id": 480189924,
      "id": 481492984,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5Mjk4NA==",
      "diff_hunk": "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 122,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "in_reply_to_id": 371600794,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371600794\r\n\r\n> This seems very strange; I don't see how having \"value=1\", `GetBoolArg(\"-value\", false)==false` for an arg that's meant to accept a bool or a string could possibly make sense (likewise for value=0, with `GetBoolArg(\"-value\", true)==true`).\r\n\r\nI think this is just strange if you are not thinking about use cases. The use case for BOOL|STRING is for /imperative/ options like `-bind` `-connect` `-upgrade` `-reindex` where you want naked options with no value to be accepted and you also want verbose options with string values to be accepted. The BOOL flag is what allows the naked option, and the STRING flag is what allows the string option. Just as with any other STRING option, you are responsible for parsing the string and ArgsManager is not going to interpret it for you. Making the change you suggest would require either choosing a new SettingsValue representation or making it impossible to to distinguish -setting from -setting=\"\", and would make the implementation more complicated, and would have no actual utility.",
      "created_at": "2020-09-01T23:47:21Z",
      "updated_at": "2021-08-19T00:59:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r481492984",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481492984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481493139",
      "pull_request_review_id": 480189924,
      "id": 481493139,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5MzEzOQ==",
      "diff_hunk": "@@ -427,6 +505,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 270,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "in_reply_to_id": 370152855,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371597025\r\n\r\n> If you want to support lists of bools or ints later, then it's easy to remove the restriction then; if lists of bools or ints is supported now, it should be tested along with the other cases in util_tests.cpp -- but it doesn't seem like it makes sense to say that it's supported now when we've only got `std::vector<std::string> GetArgs()` to query it.\r\n\r\nAm not inclined to add a new restriction that only complicates the implementation and doesn't provide a benefit to end users or developers trying to use the API. There is no missing test coverage here either. Writing this would be just analogous to building a roadblock in front a road that hasn't been built.",
      "created_at": "2020-09-01T23:47:50Z",
      "updated_at": "2021-08-19T00:59:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r481493139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481493139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 751,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594006161",
      "pull_request_review_id": 611778602,
      "id": 594006161,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDAwNjE2MQ==",
      "diff_hunk": "@@ -296,7 +356,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n #endif\n \n         if (key == \"-\") break; //bitcoin-tx using stdin\n-        std::string val;\n+        Optional<std::string> val;",
      "path": "src/util/system.cpp",
      "position": 1,
      "original_position": 160,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "45beb3bc1a588ec3f45e852796adb3c07980136c",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please [use `std::optional` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/optional.h#L12).",
      "created_at": "2021-03-15T02:04:29Z",
      "updated_at": "2021-03-29T14:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r594006161",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594006161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692627400",
      "pull_request_review_id": 734628808,
      "id": 692627400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjYyNzQwMA==",
      "diff_hunk": "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 122,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "in_reply_to_id": 371600794,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`-bind` and `-connect` both support multiple options (require=STRING+LIST for GetArgs) but this is forbidden for GetBoolArg (forbid=LIST); `-reindex`, `-reindexchainstate`, and `-rescan` all don't seem to be used as anything but a bool as far as I can see. The comments also mention `-listen` which also seems to be only used as a boolean arg.  That does leave `-upgradewallet` (presuming that's what `-upgrade` is referring to) though that option was replaced by an RPC a while ago.\r\n\r\nThere's no need to change the SettingsValue representation -- if you can differentiate different values using GetBoolArg/GetArg, then you can differentiate them via some different api too.",
      "created_at": "2021-08-20T03:12:51Z",
      "updated_at": "2021-08-20T03:12:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r692627400",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692627400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693393118",
      "pull_request_review_id": 735517335,
      "id": 693393118,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzM5MzExOA==",
      "diff_hunk": "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 122,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "in_reply_to_id": 371600794,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r692627400\r\n\r\n> `-bind` and `-connect`\r\n\r\nWe can go down a rabbit hole about these individual cases, but this is nitpicking which I do not think is relevant to the point I am making about imperative options (which trigger behavior and don't require but can accept string values) being useful to handle differently from string options whose purpose is to set values.\r\n\r\n> you can differentiate them via some different api\r\n\r\nRight, I do not want to change the API and I do not want to change the representation. The suggestion is not a good suggestion. Even if it was a good suggestion, it would expand the scope of the PR. Even if it was a good suggestion, it could done separately as a followup.",
      "created_at": "2021-08-21T19:39:53Z",
      "updated_at": "2021-08-21T20:37:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r693393118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693393118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699936341",
      "pull_request_review_id": 743557250,
      "id": 699936341,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTkzNjM0MQ==",
      "diff_hunk": "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 122,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "in_reply_to_id": 371600794,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> We can go down a rabbit hole about these individual cases, but this is nitpicking which I do not think is relevant to the point I am making about imperative options (which trigger behavior and don't require but can accept string values)\r\n\r\nI went through all the examples I could find of potential \"imperative options\", and none of them fit your definition, except for the one that's been removed. I don't think \"this feature won't be used at all so there's no point implementing it\" is nitpicking.",
      "created_at": "2021-09-01T07:10:00Z",
      "updated_at": "2021-09-01T07:10:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r699936341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699936341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688179608",
      "pull_request_review_id": 2194180912,
      "id": 1688179608,
      "node_id": "PRRC_kwDOABII585kn5OY",
      "diff_hunk": "@@ -102,6 +102,38 @@ KeyInfo InterpretKey(std::string key)\n  *\n  * @return parsed settings value if it is valid, otherwise nullopt accompanied\n  * by a descriptive error string\n+ *",
      "path": "src/common/args.cpp",
      "position": 7,
      "original_position": 4,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ran ```make -j`nprocs` docs```:\r\n\r\nCurrent:\r\n![Screenshot from 2024-07-23 16-22-49](https://github.com/user-attachments/assets/02f5ee0e-4533-4123-9497-343ae59f6aad)\r\nAfter applying...\r\n```diff\r\ndiff --git a/src/common/args.cpp b/src/common/args.cpp\r\nindex fd9efc265f..26eeabf4e3 100644\r\n--- a/src/common/args.cpp\r\n+++ b/src/common/args.cpp\r\n@@ -109,7 +109,7 @@ KeyInfo InterpretKey(std::string key)\r\n  * helper methods can unambiguously determine original configuration strings\r\n  * from the JSON values, and flexibly interpret settings and provide good error\r\n  * feedback. Specifically:\r\n- *\r\n+ * \\n\r\n  * - JSON `null` value is never returned and is reserved for settings that were\r\n  *   not configured at all.\r\n  *\r\n```\r\n..we get:\r\n![Screenshot from 2024-07-23 16-31-28](https://github.com/user-attachments/assets/5583907a-f156-4c62-80fe-a3017046b958)\r\n",
      "created_at": "2024-07-23T14:33:58Z",
      "updated_at": "2024-07-23T21:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688179608",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688179608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688211499",
      "pull_request_review_id": 2194180912,
      "id": 1688211499,
      "node_id": "PRRC_kwDOABII585koBAr",
      "diff_hunk": "@@ -437,6 +437,13 @@ class ArgsManager\n         const std::map<std::string, std::vector<common::SettingsValue>>& args) const;\n };\n \n+//! Whether the type of the argument has been specified and extra validation\n+//! rules should apply.\n+inline bool TypedArg(uint32_t flags)",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 62,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please clarify that this is not a constructor of some type, but rather checking a boolean condition.\r\n```suggestion\r\ninline bool IsTypedArg(uint32_t flags)\r\n```",
      "created_at": "2024-07-23T14:52:38Z",
      "updated_at": "2024-07-23T21:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688211499",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688211499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 442,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688231667",
      "pull_request_review_id": 2194180912,
      "id": 1688231667,
      "node_id": "PRRC_kwDOABII585koF7z",
      "diff_hunk": "@@ -112,18 +144,75 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (TypedArg(flags)) {\n+            if (value && *value != \"1\") {",
      "path": "src/common/args.cpp",
      "position": 54,
      "original_position": 44,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Care to insert a comment about why you are avoiding the untyped version's `InterpretBool(*value)` here?",
      "created_at": "2024-07-23T15:03:48Z",
      "updated_at": "2024-07-23T21:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688231667",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688231667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688276366",
      "pull_request_review_id": 2194180912,
      "id": 1688276366,
      "node_id": "PRRC_kwDOABII585koQ2O",
      "diff_hunk": "@@ -155,9 +152,12 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unset, true if `-setting` argument was\n+     * passed, false if `-nosetting` argument was passed, and a string, integer,\n+     * or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a\n+     * `-setting=value` argument was passed. See \\ref IntepretValue for an",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 50,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Typo: IntepretValue -> InterpretValue",
      "created_at": "2024-07-23T15:31:30Z",
      "updated_at": "2024-07-23T21:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688276366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688276366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688280437",
      "pull_request_review_id": 2194180912,
      "id": 1688280437,
      "node_id": "PRRC_kwDOABII585koR11",
      "diff_hunk": "@@ -137,16 +137,16 @@ class CheckValueTest : public TestChain100Setup\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n         } else if (expect.string_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", \"zzzzz\"), std::logic_error);",
      "path": "src/test/argsman_tests.cpp",
      "position": 335,
      "original_position": 16,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is a bit opaque. Worth adding a comment such as:\r\n`// Non-string values should always throw on this, even if untyped.`\r\n? Not sure even that is correct though.",
      "created_at": "2024-07-23T15:34:15Z",
      "updated_at": "2024-07-23T21:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688280437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688280437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688743390",
      "pull_request_review_id": 2194180912,
      "id": 1688743390,
      "node_id": "PRRC_kwDOABII585kqC3e",
      "diff_hunk": "@@ -112,18 +144,75 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (TypedArg(flags)) {\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Can not negate -%s at the same time as setting value '%s'.\", key.name, *value);",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 45,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Small adjustment to clarify that the specific value being set is not important.\r\n```suggestion\r\n                error = strprintf(\"Can not negate -%s at the same time as setting a value ('%s').\", key.name, *value);\r\n```",
      "created_at": "2024-07-23T21:21:12Z",
      "updated_at": "2024-07-23T21:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688743390",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688743390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697473667",
      "pull_request_review_id": 2208513840,
      "id": 1697473667,
      "node_id": "PRRC_kwDOABII585lLWSD",
      "diff_hunk": "@@ -112,18 +144,75 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (TypedArg(flags)) {\n+            if (value && *value != \"1\") {",
      "path": "src/common/args.cpp",
      "position": 54,
      "original_position": 44,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": 1688231667,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688231667\r\n\r\n> Care to insert a comment about why you are avoiding the untyped version's `InterpretBool(*value)` here?\r\n\r\nGood idea, added comment",
      "created_at": "2024-07-30T19:30:52Z",
      "updated_at": "2024-07-30T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697473667",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697473667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697475960",
      "pull_request_review_id": 2208513840,
      "id": 1697475960,
      "node_id": "PRRC_kwDOABII585lLW14",
      "diff_hunk": "@@ -102,6 +102,38 @@ KeyInfo InterpretKey(std::string key)\n  *\n  * @return parsed settings value if it is valid, otherwise nullopt accompanied\n  * by a descriptive error string\n+ *",
      "path": "src/common/args.cpp",
      "position": 7,
      "original_position": 4,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": 1688179608,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688179608\r\n\r\n> Ran `` make -j`nprocs` docs ``:\r\n\r\nThanks, should be fixed. Interesting that \\n can be used to join the paragraphs.",
      "created_at": "2024-07-30T19:33:04Z",
      "updated_at": "2024-07-30T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697475960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697475960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697476542",
      "pull_request_review_id": 2208513840,
      "id": 1697476542,
      "node_id": "PRRC_kwDOABII585lLW--",
      "diff_hunk": "@@ -437,6 +437,13 @@ class ArgsManager\n         const std::map<std::string, std::vector<common::SettingsValue>>& args) const;\n };\n \n+//! Whether the type of the argument has been specified and extra validation\n+//! rules should apply.\n+inline bool TypedArg(uint32_t flags)",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 62,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": 1688211499,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688211499\r\n\r\n> Please clarify that this is not a constructor of some type, but rather checking a boolean condition.\r\n\r\nAgree that's better. Updated.\r\n",
      "created_at": "2024-07-30T19:33:39Z",
      "updated_at": "2024-07-30T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697476542",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697476542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 442,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697477103",
      "pull_request_review_id": 2208513840,
      "id": 1697477103,
      "node_id": "PRRC_kwDOABII585lLXHv",
      "diff_hunk": "@@ -155,9 +152,12 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unset, true if `-setting` argument was\n+     * passed, false if `-nosetting` argument was passed, and a string, integer,\n+     * or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a\n+     * `-setting=value` argument was passed. See \\ref IntepretValue for an",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 50,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": 1688276366,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688276366\r\n\r\n> Typo: IntepretValue -> InterpretValue\r\n\r\nThanks, fixed",
      "created_at": "2024-07-30T19:34:12Z",
      "updated_at": "2024-07-30T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697477103",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697477103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697482034",
      "pull_request_review_id": 2208513840,
      "id": 1697482034,
      "node_id": "PRRC_kwDOABII585lLYUy",
      "diff_hunk": "@@ -137,16 +137,16 @@ class CheckValueTest : public TestChain100Setup\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n         } else if (expect.string_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", \"zzzzz\"), std::logic_error);",
      "path": "src/test/argsman_tests.cpp",
      "position": 335,
      "original_position": 16,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": 1688280437,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688280437\r\n\r\n> This is a bit opaque.\r\n\r\nThanks, that needed comments. The point of this is just to make sure that that coverage is complete, that anytime the test is not checking for expected GetArg() return values, GetArg() must be throwing and not returning anything.",
      "created_at": "2024-07-30T19:39:02Z",
      "updated_at": "2024-07-30T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697482034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697482034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 453,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697484062",
      "pull_request_review_id": 2208513840,
      "id": 1697484062,
      "node_id": "PRRC_kwDOABII585lLY0e",
      "diff_hunk": "@@ -112,18 +144,75 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (TypedArg(flags)) {\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Can not negate -%s at the same time as setting value '%s'.\", key.name, *value);",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 45,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": 1688743390,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1688743390\r\n\r\n> Small adjustment to clarify that the specific value being set is not important.\r\n\r\nNice suggestion. Applied.",
      "created_at": "2024-07-30T19:39:52Z",
      "updated_at": "2024-07-30T20:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697484062",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697484062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697594296",
      "pull_request_review_id": 2208698806,
      "id": 1697594296,
      "node_id": "PRRC_kwDOABII585lLzu4",
      "diff_hunk": "@@ -85,27 +85,99 @@ struct SectionInfo {\n };\n \n std::string SettingToString(const common::SettingsValue&, const std::string&);\n-std::optional<std::string> SettingToString(const common::SettingsValue&);\n-\n int64_t SettingToInt(const common::SettingsValue&, int64_t);\n-std::optional<int64_t> SettingToInt(const common::SettingsValue&);\n-\n bool SettingToBool(const common::SettingsValue&, bool);\n-std::optional<bool> SettingToBool(const common::SettingsValue&);\n \n class ArgsManager\n {\n public:\n     /**\n-     * Flags controlling how config and command line arguments are validated and\n-     * interpreted.\n+     * Flags controlling how config and command line arguments are parsed.\n+     *\n+     * The flags below provide very basic type checking, designed to catch\n+     * obvious configuration mistakes and provide helpful error messages.\n+     * Specifying these flags is not a substitute for actually validating\n+     * setting values that are parsed and making sure they are legitimate.\n+     *\n+     * Summary of recommended flags:\n+     *\n+     * - For most settings, just use standalone ALLOW_BOOL, ALLOW_INT, or\n+     *   ALLOW_STRING flags.\n+     *\n+     * - If your setting accepts multiple values and you want to read all the\n+     *   values, not just the last value, add | ALLOW_LIST to the flags.\n+     *\n+     * - If your setting is a command that causes a new action to be performed,\n+     *   and does not require a value, add | ALLOW_BOOL to the flags. Adding it\n+     *   just allows the setting to be specified alone on the command line\n+     *   without a value, as \"-foo\" instead of \"-foo=value\".\n+     *\n+     * - Unless it makes no sense for your setting not to have a value, avoid\n+     *   the DISALLOW_NEGATION and DISALLOW_ELISION flags, so the command line",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 39,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Slightly decreased negation: Unless + avoid => Only\r\n\r\n```suggestion\r\n     * - Only use the DISALLOW_NEGATION and DISALLOW_ELISION flags when it does\r\n     *   not make sense for your setting to have no value, so the command line\r\n```",
      "created_at": "2024-07-30T21:06:11Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697594296",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697594296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697601679",
      "pull_request_review_id": 2208698806,
      "id": 1697601679,
      "node_id": "PRRC_kwDOABII585lL1iP",
      "diff_hunk": "@@ -85,27 +85,99 @@ struct SectionInfo {\n };\n \n std::string SettingToString(const common::SettingsValue&, const std::string&);\n-std::optional<std::string> SettingToString(const common::SettingsValue&);\n-\n int64_t SettingToInt(const common::SettingsValue&, int64_t);\n-std::optional<int64_t> SettingToInt(const common::SettingsValue&);\n-\n bool SettingToBool(const common::SettingsValue&, bool);\n-std::optional<bool> SettingToBool(const common::SettingsValue&);\n \n class ArgsManager\n {\n public:\n     /**\n-     * Flags controlling how config and command line arguments are validated and\n-     * interpreted.\n+     * Flags controlling how config and command line arguments are parsed.\n+     *\n+     * The flags below provide very basic type checking, designed to catch\n+     * obvious configuration mistakes and provide helpful error messages.\n+     * Specifying these flags is not a substitute for actually validating\n+     * setting values that are parsed and making sure they are legitimate.\n+     *\n+     * Summary of recommended flags:\n+     *\n+     * - For most settings, just use standalone ALLOW_BOOL, ALLOW_INT, or\n+     *   ALLOW_STRING flags.\n+     *\n+     * - If your setting accepts multiple values and you want to read all the\n+     *   values, not just the last value, add | ALLOW_LIST to the flags.\n+     *\n+     * - If your setting is a command that causes a new action to be performed,\n+     *   and does not require a value, add | ALLOW_BOOL to the flags. Adding it\n+     *   just allows the setting to be specified alone on the command line\n+     *   without a value, as \"-foo\" instead of \"-foo=value\".\n+     *\n+     * - Unless it makes no sense for your setting not to have a value, avoid\n+     *   the DISALLOW_NEGATION and DISALLOW_ELISION flags, so the command line\n+     *   interface will be more convenient and consistent.\n+     *\n+     * Detailed description of flags:\n+     *\n+     * The ALLOW_STRING, ALLOW_INT, and ALLOW_BOOL flags control what syntaxes are\n+     * accepted, according to the following chart:\n+     *\n+     * | Syntax   | STRING | INT | BOOL | STRING|BOOL | INT|BOOL |\n+     * | -------- | ------ | --- | ---- | ----------- | -------- |\n+     * | -foo=abc |   X    |     |      |      X      |          |\n+     * | -foo=123 |   X    |  X  |      |      X      |    X     |\n+     * | -foo=0   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo=1   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo     |        |     |  X   |      X      |    X     |\n+     * | -foo=    |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo   |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo=1 |   X    |  X  |  X   |      X      |    X     |",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 56,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ":heart: the table!\r\nDifference in `-foo` vs `-nofoo` is a bit surprising with X for STRING/INT if one isn't used to \"-nologfile\" etc behavior which doesn't set the arg back to default, but rather clears it.",
      "created_at": "2024-07-30T21:11:52Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697601679",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697601679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697614182",
      "pull_request_review_id": 2208698806,
      "id": 1697614182,
      "node_id": "PRRC_kwDOABII585lL4lm",
      "diff_hunk": "@@ -152,12 +226,67 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *   GetArg(\"-foo\") returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *   GetIntArg(\"-foo\") returns 123 if -foo=123 was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns true if -foo was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors like\n+     * parsing -foo=true as boolean false, or -nofoo as string \"0\", which legacy\n+     * code relies on.\n+     *\n+     * If any type flags are set:\n+     *\n+     * - It is an error to call GetArg functions with nonmatching types. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecifed or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.",
      "path": "src/common/args.h",
      "position": 144,
      "original_position": 156,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Tested out this area a bit:\r\n```C++\r\nBOOST_AUTO_TEST_CASE(util_BoolJson)\r\n{\r\n    {\r\n        ArgsManager args;\r\n        args.LockSettings([&](common::Settings& settings) {\r\n            settings.rw_settings[\"boolarg1\"] = true;\r\n            settings.rw_settings[\"boolarg2\"] = false;\r\n        });\r\n        args.WriteSettingsFile();\r\n\r\n        std::ifstream file{args.GetDataDirBase() / \"settings.json\"};\r\n        const std::string default_warning = strprintf(\"This file is automatically generated and updated by %s. Please do not edit this file while the node \"\r\n                                                \"is running, as any changes might be ignored or overwritten.\",\r\n                                                PACKAGE_NAME);\r\n        const std::string file_contents{std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>()};\r\n        const std::string expected = \"{\\n\"\r\n            \"    \\\"_warning_\\\": \\\"\"+default_warning+\"\\\",\\n\"\r\n            \"    \\\"boolarg1\\\": true,\\n\"\r\n            \"    \\\"boolarg2\\\": false\\n\"\r\n            \"}\\n\";\r\n        BOOST_CHECK_EQUAL(file_contents, expected);\r\n    }\r\n\r\n    {\r\n        ArgsManager args;\r\n        args.AddArg(\"-boolarg1\", \"\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\r\n        args.AddArg(\"-boolarg2\", \"\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\r\n        args.ReadSettingsFile();\r\n\r\n        BOOST_CHECK_EQUAL(args.GetBoolArg(\"-boolarg1\").value(), true);\r\n        BOOST_CHECK_EQUAL(args.GetBoolArg(\"-boolarg2\").value(), false);\r\n    }\r\n\r\n    {\r\n        ArgsManager args;\r\n        args.AddArg(\"-boolarg1\", \"\", ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\r\n        args.AddArg(\"-boolarg2\", \"\", ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\r\n        args.ReadSettingsFile();\r\n\r\n        BOOST_CHECK_EQUAL(args.GetIntArg(\"-boolarg1\").value(), 1);\r\n        BOOST_CHECK_EQUAL(args.GetIntArg(\"-boolarg2\").value(), 0);\r\n    }\r\n}\r\n```\r\nWhy not be more strict for typed args in `settings.json`, as JSON has distinct bool/number/string types?\r\n\r\nThe fact that **settings.json** can contain `{\"foo\":true}` but that it gives a different result than `-foo=true` on the command line makes me sad, but I guess the latter will cause an error for typed bool args.",
      "created_at": "2024-07-30T21:21:40Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697614182",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697614182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697624715",
      "pull_request_review_id": 2208698806,
      "id": 1697624715,
      "node_id": "PRRC_kwDOABII585lL7KL",
      "diff_hunk": "@@ -152,12 +226,67 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *   GetArg(\"-foo\") returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *   GetIntArg(\"-foo\") returns 123 if -foo=123 was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns true if -foo was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors like\n+     * parsing -foo=true as boolean false, or -nofoo as string \"0\", which legacy\n+     * code relies on.\n+     *\n+     * If any type flags are set:\n+     *\n+     * - It is an error to call GetArg functions with nonmatching types. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecifed or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.\n+     *\n+     * - \"Narrowing\" type conversions in the other direction are not done even\n+     *   when they would be unambiguous. This makes it possible to distinguish\n+     *   values by type by checking for narrow types first. For example, to\n+     *   handle boolean settings.json or command line values (-foo -nofoo)\n+     *   differently than string values (-foo=abc), you can write:\n+     *\n+     *     if (auto foo{args.GetBoolArg(\"-foo\")}) {\n+     *         // handle bool foo.value()\n+     *     } else if (auto foo{args.GetArg(\"-foo\")}) {\n+     *         // handle string foo.value()\n+     *     } else {\n+     *         // handle unset setting\n+     *     }\n+     *@{*/\n+    std::optional<std::string> GetArg(const std::string& strArg) const;\n+    std::optional<int64_t> GetIntArg(const std::string& strArg) const;\n+    std::optional<bool> GetBoolArg(const std::string& strArg) const;\n+    /**@}*/\n+\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unspecified, true if `-setting`",
      "path": "src/common/args.h",
      "position": 166,
      "original_position": 183,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If paragraph at line 167 is correct:\r\n```suggestion\r\n     * Result will be null if setting was unspecified (or empty, `-setting=`), true if `-setting`\r\n```",
      "created_at": "2024-07-30T21:28:31Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697624715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697624715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 276,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697656006",
      "pull_request_review_id": 2208698806,
      "id": 1697656006,
      "node_id": "PRRC_kwDOABII585lMCzG",
      "diff_hunk": "@@ -219,6 +214,8 @@ class ArgsManager\n     mutable fs::path m_cached_datadir_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_network_datadir_path GUARDED_BY(cs_args);\n \n+    bool CheckArgFlags(const std::string& name, uint32_t require, uint32_t forbid, const char* context) const;",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "0e124bbb36aaa1dd541276c73759e080b012a971",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why introduce this as `protected` instead of `private`?",
      "created_at": "2024-07-30T22:06:09Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697656006",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1697656006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698006499",
      "pull_request_review_id": 2208698806,
      "id": 1698006499,
      "node_id": "PRRC_kwDOABII585lNYXj",
      "diff_hunk": "@@ -45,6 +45,19 @@ std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::os\n {\n     return stream << static_cast<typename std::underlying_type<T>::type>(e);\n }\n+\n+// Enable BOOST_CHECK_EQUAL for std::optional\n+inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)\n+{\n+    return os << \"std::nullopt\";\n+}\n+\n+template <typename T>\n+std::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\n+{\n+    if (v) os << *v; else os << std::nullopt;",
      "path": "src/test/util/setup_common.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/blob/d367a4e36f7357c4ebd018e8e1c9c5071db2e1c2/doc/developer-notes.md?plain=1#L76-L79\r\n```suggestion\r\n    if (v) {\r\n        os << *v;\r\n    } else {\r\n        os << std::nullopt;\r\n    }\r\n```",
      "created_at": "2024-07-31T07:04:56Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698006499",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698006499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698017503",
      "pull_request_review_id": 2208698806,
      "id": 1698017503,
      "node_id": "PRRC_kwDOABII585lNbDf",
      "diff_hunk": "@@ -24,6 +24,379 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-rescan\", \"\",        ArgsManager::ALLOW_INT | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-ipcbind\", \"\",       ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Whether rescan wallets starting from an optional height.\n+    //! Example of an imperative integer setting that uses ALLOW_BOOL flag.\n+    std::optional<RescanOptions> wallet_rescan;\n+\n+    //! Whether to bind to an IPC socket. False to not bind, true to bind to the\n+    //! default path, and string to bind to the specified path.\n+    //! Example of an imperative string setting that uses ALLOW_BOOL flag.\n+    std::variant<bool, std::string> ipc_bind{false};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-rescan\")}) {\n+        // If -rescan was passed with no height, enable wallet rescan with\n+        // default options. If -norescan was passed, do nothing.\n+        if (*value) options.wallet_rescan.emplace();\n+    } else if (auto value = args.GetIntArg(\"-rescan\")) {\n+        // If -rescan=<height> command was passed enable wallet rescan from the\n+        // specified height.\n+        options.wallet_rescan = RescanOptions{.start_height=*value};\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-ipcbind\")}) {\n+        // If -ipcbind was passed with no address, set ipc_bind = true, or if\n+        // -noipcbind was passed, set ipc_bind = false.\n+        options.ipc_bind = *value;\n+    } else if (auto value = args.GetArg(\"-ipcbind\")) {\n+        // If -ipcbind=<address> was passed, set ipc_bind = <address>\n+        options.ipc_bind = *value;\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::ipc_bind as a human readable string for easier testing.\n+std::string IpcBindStr(const Options& options)\n+{\n+    if (auto address{std::get_if<std::string>(&options.ipc_bind)}) {\n+        return *address;\n+    } else if (auto enabled{std::get_if<bool>(&options.ipc_bind)}; enabled && *enabled) {\n+        // Default address in this example when -ipcbind is specified without an\n+        // address is \"node.sock\".\n+        return \"node.sock\";\n+    }\n+    return \"\";\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block: options.load_block) {",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 182,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "meganit: Unlike L223 below, missing space before `:`.",
      "created_at": "2024-07-31T07:15:07Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698017503",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698017503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698022397",
      "pull_request_review_id": 2208698806,
      "id": 1698022397,
      "node_id": "PRRC_kwDOABII585lNcP9",
      "diff_hunk": "@@ -24,6 +24,379 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-rescan\", \"\",        ArgsManager::ALLOW_INT | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-ipcbind\", \"\",       ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Whether rescan wallets starting from an optional height.\n+    //! Example of an imperative integer setting that uses ALLOW_BOOL flag.\n+    std::optional<RescanOptions> wallet_rescan;\n+\n+    //! Whether to bind to an IPC socket. False to not bind, true to bind to the\n+    //! default path, and string to bind to the specified path.\n+    //! Example of an imperative string setting that uses ALLOW_BOOL flag.\n+    std::variant<bool, std::string> ipc_bind{false};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-rescan\")}) {\n+        // If -rescan was passed with no height, enable wallet rescan with\n+        // default options. If -norescan was passed, do nothing.\n+        if (*value) options.wallet_rescan.emplace();\n+    } else if (auto value = args.GetIntArg(\"-rescan\")) {\n+        // If -rescan=<height> command was passed enable wallet rescan from the\n+        // specified height.\n+        options.wallet_rescan = RescanOptions{.start_height=*value};\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-ipcbind\")}) {\n+        // If -ipcbind was passed with no address, set ipc_bind = true, or if\n+        // -noipcbind was passed, set ipc_bind = false.\n+        options.ipc_bind = *value;\n+    } else if (auto value = args.GetArg(\"-ipcbind\")) {\n+        // If -ipcbind=<address> was passed, set ipc_bind = <address>\n+        options.ipc_bind = *value;\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::ipc_bind as a human readable string for easier testing.\n+std::string IpcBindStr(const Options& options)\n+{\n+    if (auto address{std::get_if<std::string>(&options.ipc_bind)}) {\n+        return *address;\n+    } else if (auto enabled{std::get_if<bool>(&options.ipc_bind)}; enabled && *enabled) {\n+        // Default address in this example when -ipcbind is specified without an\n+        // address is \"node.sock\".\n+        return \"node.sock\";\n+    }\n+    return \"\";\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block: options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        Options options;\n+        ReadOptions(args, options);\n+        return options;\n+    }\n+};\n+} // namespace example_options\n+\n+BOOST_FIXTURE_TEST_CASE(ExampleOptions, example_options::TestSetup)\n+{\n+    // Check default upnp value is false\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_upnp, false);\n+    // Check passing -upnp makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp\"}).enable_upnp, true);\n+    // Check passing -upnp=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\"}).enable_upnp, true);\n+    // Check adding -upnp= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\", \"-upnp=\"}).enable_upnp, false);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-upnp=yes\"}), std::exception, HasReason{\"Can not set -upnp value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default rpcserver value is true.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_rpc_server, true);\n+    // Check passing -norpcserver makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-norpcserver\"}).enable_rpc_server, false);\n+    // Check passing -rpcserver=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\"}).enable_rpc_server, false);\n+    // Check adding -rpcserver= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=1\", \"-rpcserver=\"}).enable_rpc_server, true);",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 250,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Forgot to replace value with non-default:\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\", \"-rpcserver=\"}).enable_rpc_server, true);\r\n```",
      "created_at": "2024-07-31T07:19:13Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698022397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698022397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698030468",
      "pull_request_review_id": 2208698806,
      "id": 1698030468,
      "node_id": "PRRC_kwDOABII585lNeOE",
      "diff_hunk": "@@ -24,6 +24,379 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-rescan\", \"\",        ArgsManager::ALLOW_INT | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-ipcbind\", \"\",       ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Whether rescan wallets starting from an optional height.\n+    //! Example of an imperative integer setting that uses ALLOW_BOOL flag.\n+    std::optional<RescanOptions> wallet_rescan;\n+\n+    //! Whether to bind to an IPC socket. False to not bind, true to bind to the\n+    //! default path, and string to bind to the specified path.\n+    //! Example of an imperative string setting that uses ALLOW_BOOL flag.\n+    std::variant<bool, std::string> ipc_bind{false};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-rescan\")}) {\n+        // If -rescan was passed with no height, enable wallet rescan with\n+        // default options. If -norescan was passed, do nothing.\n+        if (*value) options.wallet_rescan.emplace();\n+    } else if (auto value = args.GetIntArg(\"-rescan\")) {\n+        // If -rescan=<height> command was passed enable wallet rescan from the\n+        // specified height.\n+        options.wallet_rescan = RescanOptions{.start_height=*value};\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-ipcbind\")}) {\n+        // If -ipcbind was passed with no address, set ipc_bind = true, or if\n+        // -noipcbind was passed, set ipc_bind = false.\n+        options.ipc_bind = *value;\n+    } else if (auto value = args.GetArg(\"-ipcbind\")) {\n+        // If -ipcbind=<address> was passed, set ipc_bind = <address>\n+        options.ipc_bind = *value;\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::ipc_bind as a human readable string for easier testing.\n+std::string IpcBindStr(const Options& options)\n+{\n+    if (auto address{std::get_if<std::string>(&options.ipc_bind)}) {\n+        return *address;\n+    } else if (auto enabled{std::get_if<bool>(&options.ipc_bind)}; enabled && *enabled) {\n+        // Default address in this example when -ipcbind is specified without an\n+        // address is \"node.sock\".\n+        return \"node.sock\";\n+    }\n+    return \"\";\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block: options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        Options options;\n+        ReadOptions(args, options);\n+        return options;\n+    }\n+};\n+} // namespace example_options\n+\n+BOOST_FIXTURE_TEST_CASE(ExampleOptions, example_options::TestSetup)\n+{\n+    // Check default upnp value is false\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_upnp, false);\n+    // Check passing -upnp makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp\"}).enable_upnp, true);\n+    // Check passing -upnp=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\"}).enable_upnp, true);\n+    // Check adding -upnp= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\", \"-upnp=\"}).enable_upnp, false);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-upnp=yes\"}), std::exception, HasReason{\"Can not set -upnp value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default rpcserver value is true.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_rpc_server, true);\n+    // Check passing -norpcserver makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-norpcserver\"}).enable_rpc_server, false);\n+    // Check passing -rpcserver=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\"}).enable_rpc_server, false);\n+    // Check adding -rpcserver= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=1\", \"-rpcserver=\"}).enable_rpc_server, true);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-rpcserver=yes\"}), std::exception, HasReason{\"Can not set -rpcserver value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default dnsseed value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_dns_seed, std::nullopt);\n+    // Check passing -dnsseed makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed\"}).enable_dns_seed, true);\n+    // Check passing -dnsseed=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\"}).enable_dns_seed, true);\n+    // Check passing -nodnsseed makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nodnsseed\"}).enable_dns_seed, false);\n+    // Check passing -dnsseed=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=0\"}).enable_dns_seed, false);\n+    // Check adding -dnsseed= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed, std::nullopt);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-dnsseed=yes\"}), std::exception, HasReason{\"Can not set -dnsseed value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default bantime value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bantime.count(), 86400);\n+    // Check passing -bantime=3600 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\"}).bantime.count(), 3600);\n+    // Check passing -nobantime makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nobantime\"}).bantime.count(), 0);\n+    // Check passing -bantime=0 makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=0\"}).bantime.count(), 0);\n+    // Check adding -bantime= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\", \"-bantime=\"}).bantime.count(), 86400);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime\"}), std::exception, HasReason{\"Can not set -bantime with no value. Please specify value with -bantime=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=abc\"}), std::exception, HasReason{\"Can not set -bantime value to 'abc'. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=-1000\"}), std::exception, HasReason{\"-bantime value -1000 is negative\"});\n+\n+    // Check default bytespersigop value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bytes_per_sigop, 20);\n+    // Check passing -bytespersigop=30 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\"}).bytes_per_sigop, 30);\n+    // Check adding -bytespersigop= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\", \"-bytespersigop=\"}).bytes_per_sigop, 20);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop\"}), std::exception, HasReason{\"Can not set -bytespersigop with no value. Please specify value with -bytespersigop=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-nobytespersigop\"}), std::exception, HasReason{\"Negating of -bytespersigop is meaningless and therefore forbidden\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=0\"}), std::exception, HasReason{\"-bytespersigop value 0 is less than 1\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=abc\"}), std::exception, HasReason{\"Can not set -bytespersigop value to 'abc'. It must be set to an integer.\"});\n+\n+    // Check default assumevalid value is unset.\n+    BOOST_CHECK(!ParseOptions({}).assumevalid);\n+    // Check passing -assumevalid=<hash> makes it set that hash.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid.value().ToString(), \"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\");\n+    // Check passing -noassumevalid makes it not assumevalid.\n+    BOOST_CHECK(!ParseOptions({\"-noassumevalid\"}).assumevalid);\n+    // Check adding -assumevalid= sets it back to default.\n+    BOOST_CHECK(!ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\", \"-assumevalid=\"}).assumevalid);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-assumevalid\"}), std::exception, HasReason{\"Can not set -assumevalid with no value. Please specify value with -assumevalid=value. It must be set to a string.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-assumevalid=1\"}), std::exception, HasReason{\"-assumevalid value '1' is not a valid hash\"});\n+\n+    // Check default logfile value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).log_file, fs::path{\"debug.log\"});\n+    // Check passing -logfile=custom.log overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-logfile=custom.log\"}).log_file, fs::path{\"custom.log\"});\n+    // Check passing -nologfile makes it disables logging.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nologfile\"}).log_file, fs::path{});\n+    // Check adding -logfile= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-logfile=custom.log\", \"-logfile=\"}).log_file, fs::path{\"debug.log\"});\n+    // Check passing invalid values.",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 316,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe also test this combo?\r\n```C++\r\n    // Check re-enabling the log file\r\n    BOOST_CHECK_EQUAL(ParseOptions({\"-nologfile\", \"-logfile=\"}).log_file, fs::path{\"debug.log\"});\r\n```",
      "created_at": "2024-07-31T07:25:46Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698030468",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698030468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 338,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698061361",
      "pull_request_review_id": 2208698806,
      "id": 1698061361,
      "node_id": "PRRC_kwDOABII585lNlwx",
      "diff_hunk": "@@ -24,6 +24,379 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-rescan\", \"\",        ArgsManager::ALLOW_INT | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-ipcbind\", \"\",       ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Whether rescan wallets starting from an optional height.\n+    //! Example of an imperative integer setting that uses ALLOW_BOOL flag.\n+    std::optional<RescanOptions> wallet_rescan;\n+\n+    //! Whether to bind to an IPC socket. False to not bind, true to bind to the\n+    //! default path, and string to bind to the specified path.\n+    //! Example of an imperative string setting that uses ALLOW_BOOL flag.\n+    std::variant<bool, std::string> ipc_bind{false};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-rescan\")}) {\n+        // If -rescan was passed with no height, enable wallet rescan with\n+        // default options. If -norescan was passed, do nothing.\n+        if (*value) options.wallet_rescan.emplace();\n+    } else if (auto value = args.GetIntArg(\"-rescan\")) {\n+        // If -rescan=<height> command was passed enable wallet rescan from the\n+        // specified height.\n+        options.wallet_rescan = RescanOptions{.start_height=*value};\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-ipcbind\")}) {\n+        // If -ipcbind was passed with no address, set ipc_bind = true, or if\n+        // -noipcbind was passed, set ipc_bind = false.\n+        options.ipc_bind = *value;\n+    } else if (auto value = args.GetArg(\"-ipcbind\")) {\n+        // If -ipcbind=<address> was passed, set ipc_bind = <address>\n+        options.ipc_bind = *value;\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::ipc_bind as a human readable string for easier testing.\n+std::string IpcBindStr(const Options& options)\n+{\n+    if (auto address{std::get_if<std::string>(&options.ipc_bind)}) {\n+        return *address;\n+    } else if (auto enabled{std::get_if<bool>(&options.ipc_bind)}; enabled && *enabled) {\n+        // Default address in this example when -ipcbind is specified without an\n+        // address is \"node.sock\".\n+        return \"node.sock\";\n+    }\n+    return \"\";\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block: options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        Options options;\n+        ReadOptions(args, options);\n+        return options;\n+    }\n+};\n+} // namespace example_options\n+\n+BOOST_FIXTURE_TEST_CASE(ExampleOptions, example_options::TestSetup)\n+{\n+    // Check default upnp value is false\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_upnp, false);\n+    // Check passing -upnp makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp\"}).enable_upnp, true);\n+    // Check passing -upnp=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\"}).enable_upnp, true);\n+    // Check adding -upnp= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\", \"-upnp=\"}).enable_upnp, false);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-upnp=yes\"}), std::exception, HasReason{\"Can not set -upnp value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default rpcserver value is true.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_rpc_server, true);\n+    // Check passing -norpcserver makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-norpcserver\"}).enable_rpc_server, false);\n+    // Check passing -rpcserver=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\"}).enable_rpc_server, false);\n+    // Check adding -rpcserver= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=1\", \"-rpcserver=\"}).enable_rpc_server, true);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-rpcserver=yes\"}), std::exception, HasReason{\"Can not set -rpcserver value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default dnsseed value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_dns_seed, std::nullopt);\n+    // Check passing -dnsseed makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed\"}).enable_dns_seed, true);\n+    // Check passing -dnsseed=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\"}).enable_dns_seed, true);\n+    // Check passing -nodnsseed makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nodnsseed\"}).enable_dns_seed, false);\n+    // Check passing -dnsseed=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=0\"}).enable_dns_seed, false);\n+    // Check adding -dnsseed= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed, std::nullopt);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-dnsseed=yes\"}), std::exception, HasReason{\"Can not set -dnsseed value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default bantime value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bantime.count(), 86400);\n+    // Check passing -bantime=3600 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\"}).bantime.count(), 3600);\n+    // Check passing -nobantime makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nobantime\"}).bantime.count(), 0);\n+    // Check passing -bantime=0 makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=0\"}).bantime.count(), 0);\n+    // Check adding -bantime= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\", \"-bantime=\"}).bantime.count(), 86400);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime\"}), std::exception, HasReason{\"Can not set -bantime with no value. Please specify value with -bantime=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=abc\"}), std::exception, HasReason{\"Can not set -bantime value to 'abc'. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=-1000\"}), std::exception, HasReason{\"-bantime value -1000 is negative\"});\n+\n+    // Check default bytespersigop value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bytes_per_sigop, 20);\n+    // Check passing -bytespersigop=30 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\"}).bytes_per_sigop, 30);\n+    // Check adding -bytespersigop= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\", \"-bytespersigop=\"}).bytes_per_sigop, 20);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop\"}), std::exception, HasReason{\"Can not set -bytespersigop with no value. Please specify value with -bytespersigop=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-nobytespersigop\"}), std::exception, HasReason{\"Negating of -bytespersigop is meaningless and therefore forbidden\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=0\"}), std::exception, HasReason{\"-bytespersigop value 0 is less than 1\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=abc\"}), std::exception, HasReason{\"Can not set -bytespersigop value to 'abc'. It must be set to an integer.\"});\n+\n+    // Check default assumevalid value is unset.\n+    BOOST_CHECK(!ParseOptions({}).assumevalid);\n+    // Check passing -assumevalid=<hash> makes it set that hash.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid.value().ToString(), \"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\");\n+    // Check passing -noassumevalid makes it not assumevalid.\n+    BOOST_CHECK(!ParseOptions({\"-noassumevalid\"}).assumevalid);\n+    // Check adding -assumevalid= sets it back to default.\n+    BOOST_CHECK(!ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\", \"-assumevalid=\"}).assumevalid);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-assumevalid\"}), std::exception, HasReason{\"Can not set -assumevalid with no value. Please specify value with -assumevalid=value. It must be set to a string.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-assumevalid=1\"}), std::exception, HasReason{\"-assumevalid value '1' is not a valid hash\"});\n+\n+    // Check default logfile value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).log_file, fs::path{\"debug.log\"});\n+    // Check passing -logfile=custom.log overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-logfile=custom.log\"}).log_file, fs::path{\"custom.log\"});\n+    // Check passing -nologfile makes it disables logging.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nologfile\"}).log_file, fs::path{});\n+    // Check adding -logfile= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-logfile=custom.log\", \"-logfile=\"}).log_file, fs::path{\"debug.log\"});\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-logfile\"}), std::exception, HasReason{\"Can not set -logfile with no value. Please specify value with -logfile=value. It must be set to a string.\"});\n+\n+    // Check default chain value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).chain, ChainType::MAIN);\n+    // Check passing -chain=regtest overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-chain=regtest\"}).chain, ChainType::REGTEST);\n+    // Check adding -chain= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-chain=regtest\", \"-chain=\"}).chain, ChainType::MAIN);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-chain\"}), std::exception, HasReason{\"Can not set -chain with no value. Please specify value with -chain=value. It must be set to a string.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-chain=abc\"}), std::exception, HasReason{\"Invalid chain type 'abc'\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-nochain\"}), std::exception, HasReason{\"Negating of -chain is meaningless and therefore forbidden\"});\n+\n+    // Check default rescan value is unset.\n+    BOOST_CHECK(!ParseOptions({}).wallet_rescan);\n+    // Check passing -rescan makes it rescan from default height\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rescan\"}).wallet_rescan.value().start_height, std::nullopt);\n+    // Check passing -rescan=500000 makes it scan from specified height.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rescan=500000\"}).wallet_rescan.value().start_height, 500000);",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 335,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Add?\r\n```C++\r\n    // Check passing -rescan=1 does not simply set the bool but treats it as a height.\r\n    BOOST_CHECK_EQUAL(ParseOptions({\"-rescan=1\"}).wallet_rescan.value().start_height, 1);\r\n    // Check passing -rescan=0 does not simply set the bool but treats it as a height.\r\n    BOOST_CHECK_EQUAL(ParseOptions({\"-rescan=0\"}).wallet_rescan.value().start_height, 0);\r\n```",
      "created_at": "2024-07-31T07:49:41Z",
      "updated_at": "2024-07-31T10:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698061361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698061361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698476564",
      "pull_request_review_id": 2210115329,
      "id": 1698476564,
      "node_id": "PRRC_kwDOABII585lPLIU",
      "diff_hunk": "@@ -85,27 +85,99 @@ struct SectionInfo {\n };\n \n std::string SettingToString(const common::SettingsValue&, const std::string&);\n-std::optional<std::string> SettingToString(const common::SettingsValue&);\n-\n int64_t SettingToInt(const common::SettingsValue&, int64_t);\n-std::optional<int64_t> SettingToInt(const common::SettingsValue&);\n-\n bool SettingToBool(const common::SettingsValue&, bool);\n-std::optional<bool> SettingToBool(const common::SettingsValue&);\n \n class ArgsManager\n {\n public:\n     /**\n-     * Flags controlling how config and command line arguments are validated and\n-     * interpreted.\n+     * Flags controlling how config and command line arguments are parsed.\n+     *\n+     * The flags below provide very basic type checking, designed to catch\n+     * obvious configuration mistakes and provide helpful error messages.\n+     * Specifying these flags is not a substitute for actually validating\n+     * setting values that are parsed and making sure they are legitimate.\n+     *\n+     * Summary of recommended flags:\n+     *\n+     * - For most settings, just use standalone ALLOW_BOOL, ALLOW_INT, or\n+     *   ALLOW_STRING flags.\n+     *\n+     * - If your setting accepts multiple values and you want to read all the\n+     *   values, not just the last value, add | ALLOW_LIST to the flags.\n+     *\n+     * - If your setting is a command that causes a new action to be performed,\n+     *   and does not require a value, add | ALLOW_BOOL to the flags. Adding it\n+     *   just allows the setting to be specified alone on the command line\n+     *   without a value, as \"-foo\" instead of \"-foo=value\".\n+     *\n+     * - Unless it makes no sense for your setting not to have a value, avoid\n+     *   the DISALLOW_NEGATION and DISALLOW_ELISION flags, so the command line",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 39,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1697594296,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697594296\r\n\r\n> nit: Slightly decreased negation: Unless + avoid => Only\r\n\r\nGood catch. Simplified to \"Only use the DISALLOW_NEGATION flag if your setting really cannot function without a value, so the command line interface will be consistent and support negation generally.\"\r\n\r\nI dropped reference to DISALLOW_ELISION since the elision flag is harmless to specify with type flags and just redundant. I also think it could be eliminated after this PR. There are only two current uses and they would both be better off replacing with ALLOW_STRING.",
      "created_at": "2024-07-31T13:05:17Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698476564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698476564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698572117",
      "pull_request_review_id": 2210115329,
      "id": 1698572117,
      "node_id": "PRRC_kwDOABII585lPidV",
      "diff_hunk": "@@ -85,27 +85,99 @@ struct SectionInfo {\n };\n \n std::string SettingToString(const common::SettingsValue&, const std::string&);\n-std::optional<std::string> SettingToString(const common::SettingsValue&);\n-\n int64_t SettingToInt(const common::SettingsValue&, int64_t);\n-std::optional<int64_t> SettingToInt(const common::SettingsValue&);\n-\n bool SettingToBool(const common::SettingsValue&, bool);\n-std::optional<bool> SettingToBool(const common::SettingsValue&);\n \n class ArgsManager\n {\n public:\n     /**\n-     * Flags controlling how config and command line arguments are validated and\n-     * interpreted.\n+     * Flags controlling how config and command line arguments are parsed.\n+     *\n+     * The flags below provide very basic type checking, designed to catch\n+     * obvious configuration mistakes and provide helpful error messages.\n+     * Specifying these flags is not a substitute for actually validating\n+     * setting values that are parsed and making sure they are legitimate.\n+     *\n+     * Summary of recommended flags:\n+     *\n+     * - For most settings, just use standalone ALLOW_BOOL, ALLOW_INT, or\n+     *   ALLOW_STRING flags.\n+     *\n+     * - If your setting accepts multiple values and you want to read all the\n+     *   values, not just the last value, add | ALLOW_LIST to the flags.\n+     *\n+     * - If your setting is a command that causes a new action to be performed,\n+     *   and does not require a value, add | ALLOW_BOOL to the flags. Adding it\n+     *   just allows the setting to be specified alone on the command line\n+     *   without a value, as \"-foo\" instead of \"-foo=value\".\n+     *\n+     * - Unless it makes no sense for your setting not to have a value, avoid\n+     *   the DISALLOW_NEGATION and DISALLOW_ELISION flags, so the command line\n+     *   interface will be more convenient and consistent.\n+     *\n+     * Detailed description of flags:\n+     *\n+     * The ALLOW_STRING, ALLOW_INT, and ALLOW_BOOL flags control what syntaxes are\n+     * accepted, according to the following chart:\n+     *\n+     * | Syntax   | STRING | INT | BOOL | STRING|BOOL | INT|BOOL |\n+     * | -------- | ------ | --- | ---- | ----------- | -------- |\n+     * | -foo=abc |   X    |     |      |      X      |          |\n+     * | -foo=123 |   X    |  X  |      |      X      |    X     |\n+     * | -foo=0   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo=1   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo     |        |     |  X   |      X      |    X     |\n+     * | -foo=    |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo   |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo=1 |   X    |  X  |  X   |      X      |    X     |",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 56,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1697601679,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697601679\r\n\r\n> ❤️ the table! Difference in `-foo` vs `-nofoo` is a bit surprising with X for STRING/INT if one isn't used to \"-nologfile\" etc behavior which doesn't set the arg back to default, but rather clears it.\r\n\r\nThanks! Just to make sure I understand the point, you are saying a user could mistakenly add `-nologfile` to their command line expecting it unset the logfile setting and change the log file path back to the default path. I agree this is possible but I feel that a more natural/common/correct interpretation of `-nologfile` is just that it would disable creation of a logfile.\r\n\r\nI do think the possibility of misinterpretation is something to keep in mind when implementing options. In this case I think documentation currently does a good job for -debuglogfile:\r\n\r\n```\r\n  -debuglogfile=<file>\r\n       Specify location of debug log file (default: debug.log). Relative paths\r\n       will be prefixed by a net-specific datadir location. Pass\r\n       -nodebuglogfile to disable writing the log to a file.\r\n```\r\n\r\nBut maybe there could be a more general note in doc/bitcoin-conf.md or command line help about negated options, that for settings which are enabled by default, specifying \"-nosetting\" typically has effect of disabling the setting rather than unsetting it, and setting documentation may have more details.",
      "created_at": "2024-07-31T14:04:58Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698572117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698572117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698719060",
      "pull_request_review_id": 2210115329,
      "id": 1698719060,
      "node_id": "PRRC_kwDOABII585lQGVU",
      "diff_hunk": "@@ -152,12 +226,67 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *   GetArg(\"-foo\") returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *   GetIntArg(\"-foo\") returns 123 if -foo=123 was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns true if -foo was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors like\n+     * parsing -foo=true as boolean false, or -nofoo as string \"0\", which legacy\n+     * code relies on.\n+     *\n+     * If any type flags are set:\n+     *\n+     * - It is an error to call GetArg functions with nonmatching types. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecifed or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.",
      "path": "src/common/args.h",
      "position": 144,
      "original_position": 156,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1697614182,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697614182\r\n\r\n\r\n> ```c++\r\n> BOOST_AUTO_TEST_CASE(util_BoolJson)\r\n> ```\r\n\r\nNice test! Added a slightly simplified version as `setting_args_allow_types` test in new commit.\r\n\r\n> Why not be more strict for typed args in `settings.json`, as JSON has distinct bool/number/string types?\r\n\r\nThis PR is just applies type flags to command line and configuration file settings, but I think it would be be a natural followup for `ArgsManager::ReadSettingsFile` to start applying type flags to the `settings.json` file too. I don't think it is essential to do it here because `settings.json` is mostly an internal file meant to be updated by the GUI and RPCs rather than users. And I'm reluctant to make this PR too much bigger. Even though the actual code changes here are small, there's a lot of documentation and many tests, so the size could already be overwhelming.\r\n\r\nAssuming we will apply type flags to `settings.json`, there are some choices about how strict the type checking should be. For example if the json file specifies `\"foo\": 123` for and \"-foo\" is an ALLOW_STRING option, we could treat it like parse error, or just treat it like `rw_settings[\"foo\"] = \"123\"`. Similarly, if the json file specifies `\"foo\": \"123\"` for and \"-foo\" is an ALLOW_INT option, we could treat it like parse error, or just treat it like `rw_settings[\"foo\"] = 123.` Similar concerns apply for bool and string settings.\r\n\r\n> The fact that **settings.json** can contain `{\"foo\":true}` but that it gives a different result than `-foo=true` on the command line makes me sad, but I guess the latter will cause an error for typed bool args.\r\n\r\nRight, I think it would be bad for those two things to be interpreted differently than each other. But if one is accepted and the other is rejected because JSON syntax is different than command line syntax, I think that's ok. I also think if we want to support `-foo=true` syntax for ALLOW_BOOL options, we can do that, see my earlier comment about \"-arg=0/1/false/true/yes/no/on/off\" syntax",
      "created_at": "2024-07-31T15:31:55Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698719060",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698719060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698742041",
      "pull_request_review_id": 2210115329,
      "id": 1698742041,
      "node_id": "PRRC_kwDOABII585lQL8Z",
      "diff_hunk": "@@ -152,12 +226,67 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *   GetArg(\"-foo\") returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *   GetIntArg(\"-foo\") returns 123 if -foo=123 was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns true if -foo was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors like\n+     * parsing -foo=true as boolean false, or -nofoo as string \"0\", which legacy\n+     * code relies on.\n+     *\n+     * If any type flags are set:\n+     *\n+     * - It is an error to call GetArg functions with nonmatching types. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecifed or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.\n+     *\n+     * - \"Narrowing\" type conversions in the other direction are not done even\n+     *   when they would be unambiguous. This makes it possible to distinguish\n+     *   values by type by checking for narrow types first. For example, to\n+     *   handle boolean settings.json or command line values (-foo -nofoo)\n+     *   differently than string values (-foo=abc), you can write:\n+     *\n+     *     if (auto foo{args.GetBoolArg(\"-foo\")}) {\n+     *         // handle bool foo.value()\n+     *     } else if (auto foo{args.GetArg(\"-foo\")}) {\n+     *         // handle string foo.value()\n+     *     } else {\n+     *         // handle unset setting\n+     *     }\n+     *@{*/\n+    std::optional<std::string> GetArg(const std::string& strArg) const;\n+    std::optional<int64_t> GetIntArg(const std::string& strArg) const;\n+    std::optional<bool> GetBoolArg(const std::string& strArg) const;\n+    /**@}*/\n+\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unspecified, true if `-setting`",
      "path": "src/common/args.h",
      "position": 166,
      "original_position": 183,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1697624715,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697624715\r\n\r\n> If paragraph at line 167 is correct\r\n\r\nIt is correct, but this paragraph is also correct, and suggested change would be incorrect. The other paragraph (\"Since all settings are optional, it is useful to have a way to set them, and a way to unset them.\") is just describing a convention to treat empty settings as unset, which is implemented in the GetArg functions. But this is just a default convention that may not be appropriate to follow in every case, and can be overridden. The lower level GetSetting and InterpretValue functions don't care about this convention and just represent empty strings as \"\".\r\n\r\nSomething similar happens with negated settings. The GetSetting and InterpretValue functions return false for negated settings, but GetArg functions decide how to interpret the false values, with default behavior that usually makes sense, but may not be appropriate in every case, and can be overridden.",
      "created_at": "2024-07-31T15:47:54Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698742041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698742041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 276,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698765408",
      "pull_request_review_id": 2210115329,
      "id": 1698765408,
      "node_id": "PRRC_kwDOABII585lQRpg",
      "diff_hunk": "@@ -219,6 +214,8 @@ class ArgsManager\n     mutable fs::path m_cached_datadir_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_network_datadir_path GUARDED_BY(cs_args);\n \n+    bool CheckArgFlags(const std::string& name, uint32_t require, uint32_t forbid, const char* context) const;",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "0e124bbb36aaa1dd541276c73759e080b012a971",
      "in_reply_to_id": 1697656006,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1697656006\r\n\r\n> Why introduce this as `protected` instead of `private`?\r\n\r\nNo reason, moved to private",
      "created_at": "2024-07-31T16:05:19Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698765408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698765408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698768660",
      "pull_request_review_id": 2210115329,
      "id": 1698768660,
      "node_id": "PRRC_kwDOABII585lQScU",
      "diff_hunk": "@@ -45,6 +45,19 @@ std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::os\n {\n     return stream << static_cast<typename std::underlying_type<T>::type>(e);\n }\n+\n+// Enable BOOST_CHECK_EQUAL for std::optional\n+inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)\n+{\n+    return os << \"std::nullopt\";\n+}\n+\n+template <typename T>\n+std::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\n+{\n+    if (v) os << *v; else os << std::nullopt;",
      "path": "src/test/util/setup_common.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1698006499,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698006499\r\n\r\nThanks, applied suggestion",
      "created_at": "2024-07-31T16:07:51Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698768660",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698768660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698770369",
      "pull_request_review_id": 2210115329,
      "id": 1698770369,
      "node_id": "PRRC_kwDOABII585lQS3B",
      "diff_hunk": "@@ -24,6 +24,379 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-rescan\", \"\",        ArgsManager::ALLOW_INT | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-ipcbind\", \"\",       ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Whether rescan wallets starting from an optional height.\n+    //! Example of an imperative integer setting that uses ALLOW_BOOL flag.\n+    std::optional<RescanOptions> wallet_rescan;\n+\n+    //! Whether to bind to an IPC socket. False to not bind, true to bind to the\n+    //! default path, and string to bind to the specified path.\n+    //! Example of an imperative string setting that uses ALLOW_BOOL flag.\n+    std::variant<bool, std::string> ipc_bind{false};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-rescan\")}) {\n+        // If -rescan was passed with no height, enable wallet rescan with\n+        // default options. If -norescan was passed, do nothing.\n+        if (*value) options.wallet_rescan.emplace();\n+    } else if (auto value = args.GetIntArg(\"-rescan\")) {\n+        // If -rescan=<height> command was passed enable wallet rescan from the\n+        // specified height.\n+        options.wallet_rescan = RescanOptions{.start_height=*value};\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-ipcbind\")}) {\n+        // If -ipcbind was passed with no address, set ipc_bind = true, or if\n+        // -noipcbind was passed, set ipc_bind = false.\n+        options.ipc_bind = *value;\n+    } else if (auto value = args.GetArg(\"-ipcbind\")) {\n+        // If -ipcbind=<address> was passed, set ipc_bind = <address>\n+        options.ipc_bind = *value;\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::ipc_bind as a human readable string for easier testing.\n+std::string IpcBindStr(const Options& options)\n+{\n+    if (auto address{std::get_if<std::string>(&options.ipc_bind)}) {\n+        return *address;\n+    } else if (auto enabled{std::get_if<bool>(&options.ipc_bind)}; enabled && *enabled) {\n+        // Default address in this example when -ipcbind is specified without an\n+        // address is \"node.sock\".\n+        return \"node.sock\";\n+    }\n+    return \"\";\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block: options.load_block) {",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 182,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1698017503,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698017503\r\n\r\n> meganit: Unlike L223 below, missing space before `:`.\r\n\r\nThanks, fixed!",
      "created_at": "2024-07-31T16:09:14Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698770369",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698770369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698775314",
      "pull_request_review_id": 2210115329,
      "id": 1698775314,
      "node_id": "PRRC_kwDOABII585lQUES",
      "diff_hunk": "@@ -24,6 +24,379 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-rescan\", \"\",        ArgsManager::ALLOW_INT | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-ipcbind\", \"\",       ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Whether rescan wallets starting from an optional height.\n+    //! Example of an imperative integer setting that uses ALLOW_BOOL flag.\n+    std::optional<RescanOptions> wallet_rescan;\n+\n+    //! Whether to bind to an IPC socket. False to not bind, true to bind to the\n+    //! default path, and string to bind to the specified path.\n+    //! Example of an imperative string setting that uses ALLOW_BOOL flag.\n+    std::variant<bool, std::string> ipc_bind{false};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-rescan\")}) {\n+        // If -rescan was passed with no height, enable wallet rescan with\n+        // default options. If -norescan was passed, do nothing.\n+        if (*value) options.wallet_rescan.emplace();\n+    } else if (auto value = args.GetIntArg(\"-rescan\")) {\n+        // If -rescan=<height> command was passed enable wallet rescan from the\n+        // specified height.\n+        options.wallet_rescan = RescanOptions{.start_height=*value};\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-ipcbind\")}) {\n+        // If -ipcbind was passed with no address, set ipc_bind = true, or if\n+        // -noipcbind was passed, set ipc_bind = false.\n+        options.ipc_bind = *value;\n+    } else if (auto value = args.GetArg(\"-ipcbind\")) {\n+        // If -ipcbind=<address> was passed, set ipc_bind = <address>\n+        options.ipc_bind = *value;\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::ipc_bind as a human readable string for easier testing.\n+std::string IpcBindStr(const Options& options)\n+{\n+    if (auto address{std::get_if<std::string>(&options.ipc_bind)}) {\n+        return *address;\n+    } else if (auto enabled{std::get_if<bool>(&options.ipc_bind)}; enabled && *enabled) {\n+        // Default address in this example when -ipcbind is specified without an\n+        // address is \"node.sock\".\n+        return \"node.sock\";\n+    }\n+    return \"\";\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block: options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        Options options;\n+        ReadOptions(args, options);\n+        return options;\n+    }\n+};\n+} // namespace example_options\n+\n+BOOST_FIXTURE_TEST_CASE(ExampleOptions, example_options::TestSetup)\n+{\n+    // Check default upnp value is false\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_upnp, false);\n+    // Check passing -upnp makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp\"}).enable_upnp, true);\n+    // Check passing -upnp=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\"}).enable_upnp, true);\n+    // Check adding -upnp= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\", \"-upnp=\"}).enable_upnp, false);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-upnp=yes\"}), std::exception, HasReason{\"Can not set -upnp value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default rpcserver value is true.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_rpc_server, true);\n+    // Check passing -norpcserver makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-norpcserver\"}).enable_rpc_server, false);\n+    // Check passing -rpcserver=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\"}).enable_rpc_server, false);\n+    // Check adding -rpcserver= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=1\", \"-rpcserver=\"}).enable_rpc_server, true);",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 250,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1698022397,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698022397\r\n\r\n> Forgot to replace value with non-default:\r\n\r\nGood catch, fixed",
      "created_at": "2024-07-31T16:13:18Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698775314",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698775314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698778065",
      "pull_request_review_id": 2210115329,
      "id": 1698778065,
      "node_id": "PRRC_kwDOABII585lQUvR",
      "diff_hunk": "@@ -24,6 +24,379 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-rescan\", \"\",        ArgsManager::ALLOW_INT | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-ipcbind\", \"\",       ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Whether rescan wallets starting from an optional height.\n+    //! Example of an imperative integer setting that uses ALLOW_BOOL flag.\n+    std::optional<RescanOptions> wallet_rescan;\n+\n+    //! Whether to bind to an IPC socket. False to not bind, true to bind to the\n+    //! default path, and string to bind to the specified path.\n+    //! Example of an imperative string setting that uses ALLOW_BOOL flag.\n+    std::variant<bool, std::string> ipc_bind{false};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-rescan\")}) {\n+        // If -rescan was passed with no height, enable wallet rescan with\n+        // default options. If -norescan was passed, do nothing.\n+        if (*value) options.wallet_rescan.emplace();\n+    } else if (auto value = args.GetIntArg(\"-rescan\")) {\n+        // If -rescan=<height> command was passed enable wallet rescan from the\n+        // specified height.\n+        options.wallet_rescan = RescanOptions{.start_height=*value};\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-ipcbind\")}) {\n+        // If -ipcbind was passed with no address, set ipc_bind = true, or if\n+        // -noipcbind was passed, set ipc_bind = false.\n+        options.ipc_bind = *value;\n+    } else if (auto value = args.GetArg(\"-ipcbind\")) {\n+        // If -ipcbind=<address> was passed, set ipc_bind = <address>\n+        options.ipc_bind = *value;\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::ipc_bind as a human readable string for easier testing.\n+std::string IpcBindStr(const Options& options)\n+{\n+    if (auto address{std::get_if<std::string>(&options.ipc_bind)}) {\n+        return *address;\n+    } else if (auto enabled{std::get_if<bool>(&options.ipc_bind)}; enabled && *enabled) {\n+        // Default address in this example when -ipcbind is specified without an\n+        // address is \"node.sock\".\n+        return \"node.sock\";\n+    }\n+    return \"\";\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block: options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        Options options;\n+        ReadOptions(args, options);\n+        return options;\n+    }\n+};\n+} // namespace example_options\n+\n+BOOST_FIXTURE_TEST_CASE(ExampleOptions, example_options::TestSetup)\n+{\n+    // Check default upnp value is false\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_upnp, false);\n+    // Check passing -upnp makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp\"}).enable_upnp, true);\n+    // Check passing -upnp=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\"}).enable_upnp, true);\n+    // Check adding -upnp= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\", \"-upnp=\"}).enable_upnp, false);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-upnp=yes\"}), std::exception, HasReason{\"Can not set -upnp value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default rpcserver value is true.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_rpc_server, true);\n+    // Check passing -norpcserver makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-norpcserver\"}).enable_rpc_server, false);\n+    // Check passing -rpcserver=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\"}).enable_rpc_server, false);\n+    // Check adding -rpcserver= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=1\", \"-rpcserver=\"}).enable_rpc_server, true);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-rpcserver=yes\"}), std::exception, HasReason{\"Can not set -rpcserver value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default dnsseed value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_dns_seed, std::nullopt);\n+    // Check passing -dnsseed makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed\"}).enable_dns_seed, true);\n+    // Check passing -dnsseed=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\"}).enable_dns_seed, true);\n+    // Check passing -nodnsseed makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nodnsseed\"}).enable_dns_seed, false);\n+    // Check passing -dnsseed=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=0\"}).enable_dns_seed, false);\n+    // Check adding -dnsseed= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed, std::nullopt);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-dnsseed=yes\"}), std::exception, HasReason{\"Can not set -dnsseed value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default bantime value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bantime.count(), 86400);\n+    // Check passing -bantime=3600 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\"}).bantime.count(), 3600);\n+    // Check passing -nobantime makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nobantime\"}).bantime.count(), 0);\n+    // Check passing -bantime=0 makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=0\"}).bantime.count(), 0);\n+    // Check adding -bantime= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\", \"-bantime=\"}).bantime.count(), 86400);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime\"}), std::exception, HasReason{\"Can not set -bantime with no value. Please specify value with -bantime=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=abc\"}), std::exception, HasReason{\"Can not set -bantime value to 'abc'. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=-1000\"}), std::exception, HasReason{\"-bantime value -1000 is negative\"});\n+\n+    // Check default bytespersigop value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bytes_per_sigop, 20);\n+    // Check passing -bytespersigop=30 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\"}).bytes_per_sigop, 30);\n+    // Check adding -bytespersigop= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\", \"-bytespersigop=\"}).bytes_per_sigop, 20);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop\"}), std::exception, HasReason{\"Can not set -bytespersigop with no value. Please specify value with -bytespersigop=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-nobytespersigop\"}), std::exception, HasReason{\"Negating of -bytespersigop is meaningless and therefore forbidden\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=0\"}), std::exception, HasReason{\"-bytespersigop value 0 is less than 1\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=abc\"}), std::exception, HasReason{\"Can not set -bytespersigop value to 'abc'. It must be set to an integer.\"});\n+\n+    // Check default assumevalid value is unset.\n+    BOOST_CHECK(!ParseOptions({}).assumevalid);\n+    // Check passing -assumevalid=<hash> makes it set that hash.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid.value().ToString(), \"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\");\n+    // Check passing -noassumevalid makes it not assumevalid.\n+    BOOST_CHECK(!ParseOptions({\"-noassumevalid\"}).assumevalid);\n+    // Check adding -assumevalid= sets it back to default.\n+    BOOST_CHECK(!ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\", \"-assumevalid=\"}).assumevalid);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-assumevalid\"}), std::exception, HasReason{\"Can not set -assumevalid with no value. Please specify value with -assumevalid=value. It must be set to a string.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-assumevalid=1\"}), std::exception, HasReason{\"-assumevalid value '1' is not a valid hash\"});\n+\n+    // Check default logfile value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).log_file, fs::path{\"debug.log\"});\n+    // Check passing -logfile=custom.log overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-logfile=custom.log\"}).log_file, fs::path{\"custom.log\"});\n+    // Check passing -nologfile makes it disables logging.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nologfile\"}).log_file, fs::path{});\n+    // Check adding -logfile= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-logfile=custom.log\", \"-logfile=\"}).log_file, fs::path{\"debug.log\"});\n+    // Check passing invalid values.",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 316,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1698030468,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698030468\r\n\r\n> Maybe also test this combo?\r\n\r\nGood idea, added this.",
      "created_at": "2024-07-31T16:15:38Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698778065",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698778065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 338,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698781568",
      "pull_request_review_id": 2210115329,
      "id": 1698781568,
      "node_id": "PRRC_kwDOABII585lQVmA",
      "diff_hunk": "@@ -24,6 +24,379 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-rescan\", \"\",        ArgsManager::ALLOW_INT | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-ipcbind\", \"\",       ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Whether rescan wallets starting from an optional height.\n+    //! Example of an imperative integer setting that uses ALLOW_BOOL flag.\n+    std::optional<RescanOptions> wallet_rescan;\n+\n+    //! Whether to bind to an IPC socket. False to not bind, true to bind to the\n+    //! default path, and string to bind to the specified path.\n+    //! Example of an imperative string setting that uses ALLOW_BOOL flag.\n+    std::variant<bool, std::string> ipc_bind{false};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-rescan\")}) {\n+        // If -rescan was passed with no height, enable wallet rescan with\n+        // default options. If -norescan was passed, do nothing.\n+        if (*value) options.wallet_rescan.emplace();\n+    } else if (auto value = args.GetIntArg(\"-rescan\")) {\n+        // If -rescan=<height> command was passed enable wallet rescan from the\n+        // specified height.\n+        options.wallet_rescan = RescanOptions{.start_height=*value};\n+    }\n+\n+    if (auto value{args.GetBoolArg(\"-ipcbind\")}) {\n+        // If -ipcbind was passed with no address, set ipc_bind = true, or if\n+        // -noipcbind was passed, set ipc_bind = false.\n+        options.ipc_bind = *value;\n+    } else if (auto value = args.GetArg(\"-ipcbind\")) {\n+        // If -ipcbind=<address> was passed, set ipc_bind = <address>\n+        options.ipc_bind = *value;\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::ipc_bind as a human readable string for easier testing.\n+std::string IpcBindStr(const Options& options)\n+{\n+    if (auto address{std::get_if<std::string>(&options.ipc_bind)}) {\n+        return *address;\n+    } else if (auto enabled{std::get_if<bool>(&options.ipc_bind)}; enabled && *enabled) {\n+        // Default address in this example when -ipcbind is specified without an\n+        // address is \"node.sock\".\n+        return \"node.sock\";\n+    }\n+    return \"\";\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block: options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        Options options;\n+        ReadOptions(args, options);\n+        return options;\n+    }\n+};\n+} // namespace example_options\n+\n+BOOST_FIXTURE_TEST_CASE(ExampleOptions, example_options::TestSetup)\n+{\n+    // Check default upnp value is false\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_upnp, false);\n+    // Check passing -upnp makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp\"}).enable_upnp, true);\n+    // Check passing -upnp=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\"}).enable_upnp, true);\n+    // Check adding -upnp= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\", \"-upnp=\"}).enable_upnp, false);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-upnp=yes\"}), std::exception, HasReason{\"Can not set -upnp value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default rpcserver value is true.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_rpc_server, true);\n+    // Check passing -norpcserver makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-norpcserver\"}).enable_rpc_server, false);\n+    // Check passing -rpcserver=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\"}).enable_rpc_server, false);\n+    // Check adding -rpcserver= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=1\", \"-rpcserver=\"}).enable_rpc_server, true);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-rpcserver=yes\"}), std::exception, HasReason{\"Can not set -rpcserver value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default dnsseed value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_dns_seed, std::nullopt);\n+    // Check passing -dnsseed makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed\"}).enable_dns_seed, true);\n+    // Check passing -dnsseed=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\"}).enable_dns_seed, true);\n+    // Check passing -nodnsseed makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nodnsseed\"}).enable_dns_seed, false);\n+    // Check passing -dnsseed=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=0\"}).enable_dns_seed, false);\n+    // Check adding -dnsseed= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed, std::nullopt);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-dnsseed=yes\"}), std::exception, HasReason{\"Can not set -dnsseed value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default bantime value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bantime.count(), 86400);\n+    // Check passing -bantime=3600 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\"}).bantime.count(), 3600);\n+    // Check passing -nobantime makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nobantime\"}).bantime.count(), 0);\n+    // Check passing -bantime=0 makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=0\"}).bantime.count(), 0);\n+    // Check adding -bantime= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\", \"-bantime=\"}).bantime.count(), 86400);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime\"}), std::exception, HasReason{\"Can not set -bantime with no value. Please specify value with -bantime=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=abc\"}), std::exception, HasReason{\"Can not set -bantime value to 'abc'. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=-1000\"}), std::exception, HasReason{\"-bantime value -1000 is negative\"});\n+\n+    // Check default bytespersigop value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bytes_per_sigop, 20);\n+    // Check passing -bytespersigop=30 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\"}).bytes_per_sigop, 30);\n+    // Check adding -bytespersigop= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\", \"-bytespersigop=\"}).bytes_per_sigop, 20);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop\"}), std::exception, HasReason{\"Can not set -bytespersigop with no value. Please specify value with -bytespersigop=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-nobytespersigop\"}), std::exception, HasReason{\"Negating of -bytespersigop is meaningless and therefore forbidden\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=0\"}), std::exception, HasReason{\"-bytespersigop value 0 is less than 1\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=abc\"}), std::exception, HasReason{\"Can not set -bytespersigop value to 'abc'. It must be set to an integer.\"});\n+\n+    // Check default assumevalid value is unset.\n+    BOOST_CHECK(!ParseOptions({}).assumevalid);\n+    // Check passing -assumevalid=<hash> makes it set that hash.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid.value().ToString(), \"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\");\n+    // Check passing -noassumevalid makes it not assumevalid.\n+    BOOST_CHECK(!ParseOptions({\"-noassumevalid\"}).assumevalid);\n+    // Check adding -assumevalid= sets it back to default.\n+    BOOST_CHECK(!ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\", \"-assumevalid=\"}).assumevalid);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-assumevalid\"}), std::exception, HasReason{\"Can not set -assumevalid with no value. Please specify value with -assumevalid=value. It must be set to a string.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-assumevalid=1\"}), std::exception, HasReason{\"-assumevalid value '1' is not a valid hash\"});\n+\n+    // Check default logfile value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).log_file, fs::path{\"debug.log\"});\n+    // Check passing -logfile=custom.log overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-logfile=custom.log\"}).log_file, fs::path{\"custom.log\"});\n+    // Check passing -nologfile makes it disables logging.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nologfile\"}).log_file, fs::path{});\n+    // Check adding -logfile= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-logfile=custom.log\", \"-logfile=\"}).log_file, fs::path{\"debug.log\"});\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-logfile\"}), std::exception, HasReason{\"Can not set -logfile with no value. Please specify value with -logfile=value. It must be set to a string.\"});\n+\n+    // Check default chain value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).chain, ChainType::MAIN);\n+    // Check passing -chain=regtest overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-chain=regtest\"}).chain, ChainType::REGTEST);\n+    // Check adding -chain= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-chain=regtest\", \"-chain=\"}).chain, ChainType::MAIN);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-chain\"}), std::exception, HasReason{\"Can not set -chain with no value. Please specify value with -chain=value. It must be set to a string.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-chain=abc\"}), std::exception, HasReason{\"Invalid chain type 'abc'\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-nochain\"}), std::exception, HasReason{\"Negating of -chain is meaningless and therefore forbidden\"});\n+\n+    // Check default rescan value is unset.\n+    BOOST_CHECK(!ParseOptions({}).wallet_rescan);\n+    // Check passing -rescan makes it rescan from default height\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rescan\"}).wallet_rescan.value().start_height, std::nullopt);\n+    // Check passing -rescan=500000 makes it scan from specified height.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rescan=500000\"}).wallet_rescan.value().start_height, 500000);",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 335,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1698061361,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698061361\r\n\r\n> Add?\r\n\r\nNice, added.\r\n",
      "created_at": "2024-07-31T16:18:12Z",
      "updated_at": "2024-07-31T17:28:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1698781568",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1698781568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699114004",
      "pull_request_review_id": 2211144567,
      "id": 1699114004,
      "node_id": "PRRC_kwDOABII585lRmwU",
      "diff_hunk": "@@ -152,12 +226,67 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *   GetArg(\"-foo\") returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *   GetIntArg(\"-foo\") returns 123 if -foo=123 was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns true if -foo was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors like\n+     * parsing -foo=true as boolean false, or -nofoo as string \"0\", which legacy\n+     * code relies on.\n+     *\n+     * If any type flags are set:\n+     *\n+     * - It is an error to call GetArg functions with nonmatching types. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecifed or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.",
      "path": "src/common/args.h",
      "position": 144,
      "original_position": 156,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1697614182,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm instinctively eager to add stricter type checking, but would probably necessitate some form of migration support for **settings.json** when activated, which risks devs messing up and frustrating users. Makes sense to not grow this PR too much. :+1: ",
      "created_at": "2024-07-31T21:13:46Z",
      "updated_at": "2024-07-31T21:13:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1699114004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699114004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699118080",
      "pull_request_review_id": 2211151092,
      "id": 1699118080,
      "node_id": "PRRC_kwDOABII585lRnwA",
      "diff_hunk": "@@ -152,12 +226,67 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *   GetArg(\"-foo\") returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *   GetIntArg(\"-foo\") returns 123 if -foo=123 was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns true if -foo was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors like\n+     * parsing -foo=true as boolean false, or -nofoo as string \"0\", which legacy\n+     * code relies on.\n+     *\n+     * If any type flags are set:\n+     *\n+     * - It is an error to call GetArg functions with nonmatching types. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecifed or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.",
      "path": "src/common/args.h",
      "position": 144,
      "original_position": 156,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1697614182,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Sorry about helping to cause CI issues with the test code).",
      "created_at": "2024-07-31T21:18:40Z",
      "updated_at": "2024-07-31T21:18:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1699118080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699118080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699122048",
      "pull_request_review_id": 2211157374,
      "id": 1699122048,
      "node_id": "PRRC_kwDOABII585lRouA",
      "diff_hunk": "@@ -85,27 +85,99 @@ struct SectionInfo {\n };\n \n std::string SettingToString(const common::SettingsValue&, const std::string&);\n-std::optional<std::string> SettingToString(const common::SettingsValue&);\n-\n int64_t SettingToInt(const common::SettingsValue&, int64_t);\n-std::optional<int64_t> SettingToInt(const common::SettingsValue&);\n-\n bool SettingToBool(const common::SettingsValue&, bool);\n-std::optional<bool> SettingToBool(const common::SettingsValue&);\n \n class ArgsManager\n {\n public:\n     /**\n-     * Flags controlling how config and command line arguments are validated and\n-     * interpreted.\n+     * Flags controlling how config and command line arguments are parsed.\n+     *\n+     * The flags below provide very basic type checking, designed to catch\n+     * obvious configuration mistakes and provide helpful error messages.\n+     * Specifying these flags is not a substitute for actually validating\n+     * setting values that are parsed and making sure they are legitimate.\n+     *\n+     * Summary of recommended flags:\n+     *\n+     * - For most settings, just use standalone ALLOW_BOOL, ALLOW_INT, or\n+     *   ALLOW_STRING flags.\n+     *\n+     * - If your setting accepts multiple values and you want to read all the\n+     *   values, not just the last value, add | ALLOW_LIST to the flags.\n+     *\n+     * - If your setting is a command that causes a new action to be performed,\n+     *   and does not require a value, add | ALLOW_BOOL to the flags. Adding it\n+     *   just allows the setting to be specified alone on the command line\n+     *   without a value, as \"-foo\" instead of \"-foo=value\".\n+     *\n+     * - Unless it makes no sense for your setting not to have a value, avoid\n+     *   the DISALLOW_NEGATION and DISALLOW_ELISION flags, so the command line\n+     *   interface will be more convenient and consistent.\n+     *\n+     * Detailed description of flags:\n+     *\n+     * The ALLOW_STRING, ALLOW_INT, and ALLOW_BOOL flags control what syntaxes are\n+     * accepted, according to the following chart:\n+     *\n+     * | Syntax   | STRING | INT | BOOL | STRING|BOOL | INT|BOOL |\n+     * | -------- | ------ | --- | ---- | ----------- | -------- |\n+     * | -foo=abc |   X    |     |      |      X      |          |\n+     * | -foo=123 |   X    |  X  |      |      X      |    X     |\n+     * | -foo=0   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo=1   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo     |        |     |  X   |      X      |    X     |\n+     * | -foo=    |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo   |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo=1 |   X    |  X  |  X   |      X      |    X     |",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 56,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1697601679,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Just to make sure I understand the point, you are saying a user could mistakenly add -nologfile to their command line expecting it unset the logfile setting and change the log file path back to the default path.\r\n\r\nYes. Thanks for helping me start to see the light of negated args. :)",
      "created_at": "2024-07-31T21:23:19Z",
      "updated_at": "2024-07-31T21:23:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1699122048",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699122048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699130558",
      "pull_request_review_id": 2211170816,
      "id": 1699130558,
      "node_id": "PRRC_kwDOABII585lRqy-",
      "diff_hunk": "@@ -152,12 +226,67 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *   GetArg(\"-foo\") returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *   GetIntArg(\"-foo\") returns 123 if -foo=123 was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns true if -foo was specified, or nullopt if unset\n+     *   GetBoolArg(\"-foo\") returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors like\n+     * parsing -foo=true as boolean false, or -nofoo as string \"0\", which legacy\n+     * code relies on.\n+     *\n+     * If any type flags are set:\n+     *\n+     * - It is an error to call GetArg functions with nonmatching types. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecifed or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.\n+     *\n+     * - \"Narrowing\" type conversions in the other direction are not done even\n+     *   when they would be unambiguous. This makes it possible to distinguish\n+     *   values by type by checking for narrow types first. For example, to\n+     *   handle boolean settings.json or command line values (-foo -nofoo)\n+     *   differently than string values (-foo=abc), you can write:\n+     *\n+     *     if (auto foo{args.GetBoolArg(\"-foo\")}) {\n+     *         // handle bool foo.value()\n+     *     } else if (auto foo{args.GetArg(\"-foo\")}) {\n+     *         // handle string foo.value()\n+     *     } else {\n+     *         // handle unset setting\n+     *     }\n+     *@{*/\n+    std::optional<std::string> GetArg(const std::string& strArg) const;\n+    std::optional<int64_t> GetIntArg(const std::string& strArg) const;\n+    std::optional<bool> GetBoolArg(const std::string& strArg) const;\n+    /**@}*/\n+\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unspecified, true if `-setting`",
      "path": "src/common/args.h",
      "position": 166,
      "original_position": 183,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "29d932b18559a360f7fade67ad8172ff04f80345",
      "in_reply_to_id": 1697624715,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Alright, makes me wish the overall behavior was simpler somehow. But we have to work with what we've got. :+1: ",
      "created_at": "2024-07-31T21:33:39Z",
      "updated_at": "2024-07-31T21:33:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1699130558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699130558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 276,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699171640",
      "pull_request_review_id": 2211234589,
      "id": 1699171640,
      "node_id": "PRRC_kwDOABII585lR004",
      "diff_hunk": "@@ -85,27 +85,99 @@ struct SectionInfo {\n };\n \n std::string SettingToString(const common::SettingsValue&, const std::string&);\n-std::optional<std::string> SettingToString(const common::SettingsValue&);\n-\n int64_t SettingToInt(const common::SettingsValue&, int64_t);\n-std::optional<int64_t> SettingToInt(const common::SettingsValue&);\n-\n bool SettingToBool(const common::SettingsValue&, bool);\n-std::optional<bool> SettingToBool(const common::SettingsValue&);\n \n class ArgsManager\n {\n public:\n     /**\n-     * Flags controlling how config and command line arguments are validated and\n-     * interpreted.\n+     * Flags controlling how config and command line arguments are parsed.\n+     *\n+     * The flags below provide very basic type checking, designed to catch\n+     * obvious configuration mistakes and provide helpful error messages.\n+     * Specifying these flags is not a substitute for actually validating\n+     * setting values that are parsed and making sure they are legitimate.\n+     *\n+     * Summary of recommended flags:\n+     *\n+     * - For most settings, just use standalone ALLOW_BOOL, ALLOW_INT, or\n+     *   ALLOW_STRING flags.\n+     *\n+     * - If your setting accepts multiple values and you want to read all the\n+     *   values, not just the last value, add | ALLOW_LIST to the flags.\n+     *\n+     * - If your setting is a command that causes a new action to be performed,\n+     *   and does not require a value, add | ALLOW_BOOL to the flags. Adding it\n+     *   just allows the setting to be specified alone on the command line\n+     *   without a value, as \"-foo\" instead of \"-foo=value\".\n+     *\n+     * - Only use the DISALLOW_NEGATION flag if your setting really cannot\n+     *   function without a value, so the command line interface will generally\n+     *   support negation and be more consistent.\n+     *\n+     * Detailed description of flags:\n+     *\n+     * The ALLOW_STRING, ALLOW_INT, and ALLOW_BOOL flags control what syntaxes are\n+     * accepted, according to the following chart:\n+     *\n+     * | Syntax   | STRING | INT | BOOL | STRING|BOOL | INT|BOOL |\n+     * | -------- | ------ | --- | ---- | ----------- | -------- |\n+     * | -foo=abc |   X    |     |      |      X      |          |\n+     * | -foo=123 |   X    |  X  |      |      X      |    X     |\n+     * | -foo=0   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo=1   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo     |        |     |  X   |      X      |    X     |\n+     * | -foo=    |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo   |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo=1 |   X    |  X  |  X   |      X      |    X     |",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 56,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "c3a8536155afc2e402e864a60958696e9dc6137b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Possible fixes for Doxygen issues I found:\r\n* Table generation failure due to `|` in headers. (Tried to surround headers with markdown backticks but couldn't get it working that way).\r\n* Code blocks not being generated due to insufficient indentation.\r\n* File reference not becoming a link.\r\n```diff\r\ndiff --git a/src/common/args.h b/src/common/args.h\r\nindex d36b491d0b..23ced9e3e3 100644\r\n--- a/src/common/args.h\r\n+++ b/src/common/args.h\r\n@@ -121,16 +121,16 @@ public:\r\n      * The ALLOW_STRING, ALLOW_INT, and ALLOW_BOOL flags control what syntaxes are\r\n      * accepted, according to the following chart:\r\n      *\r\n-     * | Syntax   | STRING | INT | BOOL | STRING|BOOL | INT|BOOL |\r\n-     * | -------- | ------ | --- | ---- | ----------- | -------- |\r\n-     * | -foo=abc |   X    |     |      |      X      |          |\r\n-     * | -foo=123 |   X    |  X  |      |      X      |    X     |\r\n-     * | -foo=0   |   X    |  X  |  X   |      X      |    X     |\r\n-     * | -foo=1   |   X    |  X  |  X   |      X      |    X     |\r\n-     * | -foo     |        |     |  X   |      X      |    X     |\r\n-     * | -foo=    |   X    |  X  |  X   |      X      |    X     |\r\n-     * | -nofoo   |   X    |  X  |  X   |      X      |    X     |\r\n-     * | -nofoo=1 |   X    |  X  |  X   |      X      |    X     |\r\n+     * | Syntax   | STRING | INT | BOOL | STRING\\|BOOL | INT\\|BOOL |\r\n+     * | -------- | :----: | :-: | :--: | :----------: | :-------: |\r\n+     * | -foo=abc |   X    |     |      |      X       |           |\r\n+     * | -foo=123 |   X    |  X  |      |      X       |     X     |\r\n+     * | -foo=0   |   X    |  X  |  X   |      X       |     X     |\r\n+     * | -foo=1   |   X    |  X  |  X   |      X       |     X     |\r\n+     * | -foo     |        |     |  X   |      X       |     X     |\r\n+     * | -foo=    |   X    |  X  |  X   |      X       |     X     |\r\n+     * | -nofoo   |   X    |  X  |  X   |      X       |     X     |\r\n+     * | -nofoo=1 |   X    |  X  |  X   |      X       |     X     |\r\n      *\r\n      * Once validated, settings can be retrieved by called GetSetting(),\r\n      * GetArg(), GetIntArg(), and GetBoolArg(). GetSetting() is the most general\r\n@@ -234,10 +234,10 @@ protected:\r\n      *\r\n      * Examples:\r\n      *\r\n-     *   GetArg(\"-foo\") returns \"abc\" if -foo=abc was specified, or nullopt if unset\r\n-     *   GetIntArg(\"-foo\") returns 123 if -foo=123 was specified, or nullopt if unset\r\n-     *   GetBoolArg(\"-foo\") returns true if -foo was specified, or nullopt if unset\r\n-     *   GetBoolArg(\"-foo\") returns false if -nofoo was specified, or nullopt if unset\r\n+     *     GetArg(\"-foo\")     // returns \"abc\" if -foo=abc was specified, or nullopt if unset\r\n+     *     GetIntArg(\"-foo\")  // returns 123 if -foo=123 was specified, or nullopt if unset\r\n+     *     GetBoolArg(\"-foo\") // returns true if -foo was specified, or nullopt if unset\r\n+     *     GetBoolArg(\"-foo\") // returns false if -nofoo was specified, or nullopt if unset\r\n      *\r\n      * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOO* Table generation failure due to `|` in headersL) are set, GetArg\r\n      * functions do many type coercions and can have surprising behaviors which\r\n@@ -263,17 +263,17 @@ protected:\r\n      *   handle boolean settings.json or command line values (-foo -nofoo)\r\n      *   differently than string values (-foo=abc), you can write:\r\n      *\r\n-     *     if (auto foo{args.GetBoolArg(\"-foo\")}) {\r\n-     *         // handle bool foo.value()\r\n-     *     } else if (auto foo{args.GetArg(\"-foo\")}) {\r\n-     *         // handle string foo.value()\r\n-     *     } else {\r\n-     *         // handle unset setting\r\n-     *     }\r\n+     *       if (auto foo{args.GetBoolArg(\"-foo\")}) {\r\n+     *           // handle bool foo.value()\r\n+     *       } else if (auto foo{args.GetArg(\"-foo\")}) {\r\n+     *           // handle string foo.value()\r\n+     *       } else {\r\n+     *           // handle unset setting\r\n+     *       }\r\n      *\r\n      * More examples of GetArg function usage can be found in the\r\n      * @ref example_options::ReadOptions() function in\r\n-     * @ref ../test/argsman_tests.cpp\r\n+     * @ref argsman_tests.cpp\r\n      *@{*/\r\n     std::optional<std::string> GetArg(const std::string& strArg) const;\r\n     std::optional<int64_t> GetIntArg(const std::string& strArg) const;\r\n```\r\n",
      "created_at": "2024-07-31T22:30:22Z",
      "updated_at": "2024-07-31T22:30:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1699171640",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1699171640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700825422",
      "pull_request_review_id": 2213902760,
      "id": 1700825422,
      "node_id": "PRRC_kwDOABII585lYIlO",
      "diff_hunk": "@@ -152,12 +224,71 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**",
      "path": "src/common/args.h",
      "position": 114,
      "original_position": 119,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "c3a8536155afc2e402e864a60958696e9dc6137b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This grouping isn't fully working due to the lack of a group name: https://www.doxygen.nl/manual/grouping.html#memgroup",
      "created_at": "2024-08-01T20:47:25Z",
      "updated_at": "2024-08-01T20:47:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1700825422",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1700825422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 227,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1703499281",
      "pull_request_review_id": 2217955390,
      "id": 1703499281,
      "node_id": "PRRC_kwDOABII585liVYR",
      "diff_hunk": "@@ -85,27 +85,99 @@ struct SectionInfo {\n };\n \n std::string SettingToString(const common::SettingsValue&, const std::string&);\n-std::optional<std::string> SettingToString(const common::SettingsValue&);\n-\n int64_t SettingToInt(const common::SettingsValue&, int64_t);\n-std::optional<int64_t> SettingToInt(const common::SettingsValue&);\n-\n bool SettingToBool(const common::SettingsValue&, bool);\n-std::optional<bool> SettingToBool(const common::SettingsValue&);\n \n class ArgsManager\n {\n public:\n     /**\n-     * Flags controlling how config and command line arguments are validated and\n-     * interpreted.\n+     * Flags controlling how config and command line arguments are parsed.\n+     *\n+     * The flags below provide very basic type checking, designed to catch\n+     * obvious configuration mistakes and provide helpful error messages.\n+     * Specifying these flags is not a substitute for actually validating\n+     * setting values that are parsed and making sure they are legitimate.\n+     *\n+     * Summary of recommended flags:\n+     *\n+     * - For most settings, just use standalone ALLOW_BOOL, ALLOW_INT, or\n+     *   ALLOW_STRING flags.\n+     *\n+     * - If your setting accepts multiple values and you want to read all the\n+     *   values, not just the last value, add | ALLOW_LIST to the flags.\n+     *\n+     * - If your setting is a command that causes a new action to be performed,\n+     *   and does not require a value, add | ALLOW_BOOL to the flags. Adding it\n+     *   just allows the setting to be specified alone on the command line\n+     *   without a value, as \"-foo\" instead of \"-foo=value\".\n+     *\n+     * - Only use the DISALLOW_NEGATION flag if your setting really cannot\n+     *   function without a value, so the command line interface will generally\n+     *   support negation and be more consistent.\n+     *\n+     * Detailed description of flags:\n+     *\n+     * The ALLOW_STRING, ALLOW_INT, and ALLOW_BOOL flags control what syntaxes are\n+     * accepted, according to the following chart:\n+     *\n+     * | Syntax   | STRING | INT | BOOL | STRING|BOOL | INT|BOOL |\n+     * | -------- | ------ | --- | ---- | ----------- | -------- |\n+     * | -foo=abc |   X    |     |      |      X      |          |\n+     * | -foo=123 |   X    |  X  |      |      X      |    X     |\n+     * | -foo=0   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo=1   |   X    |  X  |  X   |      X      |    X     |\n+     * | -foo     |        |     |  X   |      X      |    X     |\n+     * | -foo=    |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo   |   X    |  X  |  X   |      X      |    X     |\n+     * | -nofoo=1 |   X    |  X  |  X   |      X      |    X     |",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 56,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "c3a8536155afc2e402e864a60958696e9dc6137b",
      "in_reply_to_id": 1699171640,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1699171640\r\n\r\nThank you! I should try building the docs myself, but I did apply your patch and added a @name to try to fix the grouping",
      "created_at": "2024-08-05T03:37:00Z",
      "updated_at": "2024-08-05T03:38:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1703499281",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1703499281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1703839679",
      "pull_request_review_id": 2218528901,
      "id": 1703839679,
      "node_id": "PRRC_kwDOABII585ljoe_",
      "diff_hunk": "@@ -185,6 +579,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\"));\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 521,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I fail to see how this is different from https://github.com/bitcoin/bitcoin/pull/30529#issuecomment-2252854223\r\n\r\nWhy should `-novalue` and `-value=0` silently behave differently? See `git grep 'connect=0'` and `git grep 'noconnect'`.\r\n\r\nI understand that this is a \"refactor\", but what is the point of adding the features, when they can't be applied to existing options, or applying them would be a silently breaking change. Merging this as-is and unlocking the footgun just seems too risky to me.\r\n\r\nThis is why I asked to make this an `enum class` for now, disallowing combinations, so that they can be reviewed and added later on (if reviewers want them).\r\n\r\nIntroducing a verification feature like `ALLOW_BOOL` in a minimal changeset would allow existing options (and new options) to use it, without having reviewers to go through all the other changes (and implicit implications here).\r\n\r\nI know that you disagree and want to introduce all features in one go all at once, but the fact that this pull request is sitting for more than half a decade without a single full review ACK could be a mild hint that the current state may not be the one that reviewers want to review?",
      "created_at": "2024-08-05T09:36:31Z",
      "updated_at": "2024-08-05T09:36:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1703839679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1703839679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704340847",
      "pull_request_review_id": 2219374791,
      "id": 1704340847,
      "node_id": "PRRC_kwDOABII585lli1v",
      "diff_hunk": "@@ -185,6 +579,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\"));\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 521,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "in_reply_to_id": 1703839679,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1703839679\r\n\r\nMarco if you look at my PR list, a half decade PR is fresh and new. But seriously, I think the reason this PR has been open so long is one reviewer gave a lot of pushback, and other potential reviewers were scared off, and I was previously very slow to update this and respond to comments. Given the previous state of the PR, even if other reviewers were interested in it, and wanted to help, and would agree with the PR's approach after looking into it, it's extremely unlikely any new reviewer would be invested enough in this topic to want read the long threads here and wade into an ongoing debate.\r\n\r\nAs of last week though, I made major improvements to the PR adding a detailed documentation commit explaining the design of the API, and a new test commit that demonstrates features of the API and how they can realistically be used. The new tests are much different with than previous tests which exhaustively verified correctness of the implementation but did not try to show real use cases. So I'm ready to reengage on this PR and related issues #22978, #17508, #30529, #17783, #17581, #17580, #17493, \r\n\r\nTo get to your specific concerns and suggestions, I understand why the approach you are suggesting seems appealing conceptually, but I think if you look at the details it will either (1) bake footguns and misfeatures into the API which will be harder to get rid in the long run or (2) result in a series of changes which cause unnecessary pain for users and also be unnecessarily confusing to developers.\r\n\r\nThe appealing thing about your approach is it can let us apply type flags in bulk, and be assured that the flags will only restrict what settings values are allowed, without changing the way any setting value is interpreted once allowed. The problem with this approach is that the way a lot of current settings are interpreted is [broken](https://github.com/bitcoin/bitcoin/pull/30529) and [crazy](https://github.com/bitcoin/bitcoin/issues/17508) so I think it would be a mistake to introduce typed settings and either bake in bad design and behavior permanently, or force ourselves to need sweeping changes instead of targeted changes to fix bad behavior in the future.\r\n\r\nI think a better approach is to introduce flags which are internally coherent and actually support features we know we will use, and then roll the flags slowly, to one setting at a time, changing behavior of each setting once rather than multiple times, and documenting changes explicitly. I think this is a better approach because it will allow us to iterate and provide the best API for developers and best configuration interface for users in each specific case, and also provide the least confusing experience for upgrading and reasoning about backwards compatibility, because changes will be described concretely in terms of individual settings rather than abstractly about settings in bulk.\r\n\r\nTwo more things:\r\n\r\n1. On -noconnect and -nolisten, I don't think we have any disagreement and I don't think anything in this PR adds any footguns or gets in the way of anything you would want to do. If you look at the new `ExampleOptions` test here, there is even a `-nolisten` setting implemented with these flags, and I think it looks pretty good but you can let me know if you disagree. Again though, please be aware there are two separate parts to this change because the flags control both (1) validation behavior and (2) behavior of the GetArg convenience functions. If there are disagreements about validation behavior, we should sort those out because there are are limited number of flags we should add and it may be difficult to change meaning of existing flags. But I do not think we should spend too much time disagreeing about behavior of GetArg convenience functions because they are just wrappers around GetSetting(). So if we find a situation where GetArg functions do not work well, or you want a different behavior, they are relatively easy to change or work around by introducing a new convenience function for your use-case.\r\n\r\n2. If you don't like `ALLOW_BOOL | ALLOW_STRING` and think `std::variant<bool, string>` or `std::variant<Disabled, std::string>` would be better, I'm working on a change to implement that in https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-2265757710. Right now that change is implemented on top of this PR, but it could be implemented as a replacement for this PR so ALLOW_ flags don't even need to exist. The nice thing about this PR being so old is that now we have C++20, so that change is much easier than implement than it would have been previously.\r\n",
      "created_at": "2024-08-05T15:59:56Z",
      "updated_at": "2024-08-05T15:59:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1704340847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1704340847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706731123",
      "pull_request_review_id": 2223855782,
      "id": 1706731123,
      "node_id": "PRRC_kwDOABII585luqZz",
      "diff_hunk": "@@ -185,6 +579,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\"));\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 521,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "in_reply_to_id": 1703839679,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think a better approach is to introduce flags which are internally coherent and actually support features we know we will use, and then roll the flags slowly, to one setting at a time, changing behavior of each setting once rather than multiple times, and documenting changes explicitly.\r\n\r\nI agree, but I don't think it is incompatible with my suggestion. (In fact, what you say in the quote is what I was trying to say myself). It seems possible to just implement bool error checking (and only that, or any other single feature), and make sure it is coherent and will be used, and then roll out the feature to one bool-only setting at a time, changing the behavior only once for this setting.\r\n\r\nThis is what I meant when saying \"allow existing options (and new options) to use it\", and I don't think I mentioned or otherwise implied that the appeal of my suggestion is to \"bulk change\".\r\n\r\nPersonally, I just find it a bit hard to read the docs in this change (even if they are great and self-consistent) and then say \"Yes, this makes sense in the context of all settings, their individual parsing (which may interact with their validation, their GetArg convenience function, as well as the surrounding code of the GetArg function), their historic and current usage, backwards-compatibility of user configs, and provides a way forward to apply to all settings eventually consistently)\".\r\n\r\nWhereas seeing the change for just bool-only settings could make it easier, but maybe I am wrong.",
      "created_at": "2024-08-07T09:58:01Z",
      "updated_at": "2024-08-10T11:50:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1706731123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1706731123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711689242",
      "pull_request_review_id": 2230505700,
      "id": 1711689242,
      "node_id": "PRRC_kwDOABII585mBk4a",
      "diff_hunk": "@@ -45,6 +45,23 @@ std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::os\n {\n     return stream << static_cast<typename std::underlying_type<T>::type>(e);\n }\n+\n+// Enable BOOST_CHECK_EQUAL for std::optional",
      "path": "src/test/util/setup_common.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "16fe0c57637dbc83c569a407b1f36c30a24081f5",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Pulled these to another PR: [`d1e3f0e` (#30618)](https://github.com/bitcoin/bitcoin/pull/30618/commits/d1e3f0e8a9df410317a120b81087fa4a0cddc480)\r\n\r\nnote1: nit: `// Enable BOOST_CHECK_EQUAL for enum class types` could be put inside the `std` now that we have multiple\r\nnote2: we might want to move the remaining ones in the cpp file here as well (inline-ing them all, of course)",
      "created_at": "2024-08-09T15:35:50Z",
      "updated_at": "2024-08-09T15:35:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1711689242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1711689242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718228472",
      "pull_request_review_id": 2240110993,
      "id": 1718228472,
      "node_id": "PRRC_kwDOABII585mahX4",
      "diff_hunk": "@@ -291,7 +425,6 @@ class ArgsManager\n      * @return command-line argument (0 if invalid number) or default value\n      */\n     int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;",
      "path": "src/common/args.h",
      "position": 196,
      "original_position": 198,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "d2c9af993a0c8b8f872d2f4ef9c1e1f3a5e69622",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The example for `ALLOW_INT | ALLOW_BOOL` in 6865a198f5db30bd494b3a2540f47ee728963908 is a bit worrying.\r\n\r\n```diff\r\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\r\nindex 2f2931cef1..e34bb35b7c 100644\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -3622,8 +3622,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\r\n     int prev_version = walletInstance->GetVersion();\r\n     if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\r\n     {\r\n-        int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\r\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\r\n+        int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 1);\r\n+        if (nMaxVersion == 1) // the -upgradewallet without argument case\r\n         {\r\n             walletInstance->WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\r\n             nMaxVersion = FEATURE_LATEST;\r\n```\r\n\r\n(`GetArg()` taking an integer default value has been replaced in unrelated changes by `GetIntArg()`, the given example code is out of date but that's beside the point).\r\n\r\nMaybe the `GetIntArg()` overload not taking a default value and returning an optional could be used here instead, as long as it returns `nullopt` for the `-upgradewallet`/`ALLOW_INT | ALLOW_BOOL` case. Better than suddenly requiring a different integer default (1 instead of 0 above).\r\n\r\n```C++\r\n     if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\r\n     {\r\n         std::optional<int64_t> nMaxVersion = gArgs.GetIntArg(\"-upgradewallet\");\r\n         if (!nMaxVersion) // the -upgradewallet without argument case\r\n         {\r\n```",
      "created_at": "2024-08-15T10:17:29Z",
      "updated_at": "2024-08-15T11:42:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1718228472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718228472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 410,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728104674",
      "pull_request_review_id": 2256044988,
      "id": 1728104674,
      "node_id": "PRRC_kwDOABII585nAMji",
      "diff_hunk": "@@ -185,6 +579,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\"));\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 521,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "in_reply_to_id": 1703839679,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1706731123\r\n\r\n> I agree, but I don't think it is incompatible with my suggestion. It seems possible to just implement bool error checking (and only that, or any other single feature), and make sure it is coherent and will be used, and then roll out the feature to one bool-only setting at a time, changing the behavior only once for this setting.\r\n\r\nThanks for pushing this, and that approach does sound ok to me. I think your advice to split up this PR is basically the same advice you are giving in #25665 to split up that PR, and my resistance in both PRs has been counterproductive. Resistance to break these up has been based on fear that because different parts of the PRs are designed to work together, that I may get review suggestions on the first part that sound good and I implement, but mess up the second part or make it less consistent. Most of the design of the util::Result class and these ArgsManager flags came from trial and error, using the APIs in real code, encountering things that didn't work, and then updating APIs again in cycles until they seemed usable and complete. It was easy to come up with ideas that seemed appealing but didn't generalize, and I was afraid it would be harder to recognize problematic changes if the PRs could not be complete. Also I felt like criticism of the PRs that was present was fairly surface level, so I was happy to wait for deeper reviews. But I guess it should be obvious more progress won't happen by itself and I need to do more to make these changes accessible.",
      "created_at": "2024-08-23T01:29:25Z",
      "updated_at": "2024-08-23T01:50:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1728104674",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728104674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728104758",
      "pull_request_review_id": 2256044988,
      "id": 1728104758,
      "node_id": "PRRC_kwDOABII585nAMk2",
      "diff_hunk": "@@ -291,7 +425,6 @@ class ArgsManager\n      * @return command-line argument (0 if invalid number) or default value\n      */\n     int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;",
      "path": "src/common/args.h",
      "position": 196,
      "original_position": 198,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "d2c9af993a0c8b8f872d2f4ef9c1e1f3a5e69622",
      "in_reply_to_id": 1718228472,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1718228472\r\n\r\n> The example for `ALLOW_INT | ALLOW_BOOL` in 6865a198f5db30bd494b3a2540f47ee728963908 is a bit worrying.\r\n\r\nThanks, and yes that example is very out of date. I removed it from the PR description. Now that std::optional GetArg overloads exist, there is little reason to use the other GetArg functions, and their behavior has also been simplified. The way this would be written with the current PR would look more like the `-rescan` example from example_tests, and should be more readable:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1e37bcf9fc11562baaedea24685c31f60ef2de31/src/test/argsman_tests.cpp#L145-L153",
      "created_at": "2024-08-23T01:29:34Z",
      "updated_at": "2024-08-23T01:50:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1728104758",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728104758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 410,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767576075",
      "pull_request_review_id": 2316714013,
      "id": 1767576075,
      "node_id": "PRRC_kwDOABII585pWxIL",
      "diff_hunk": "@@ -578,6 +670,24 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    // Disallow flag combinations that would result in nonsensical behavior or a bad UX.\n+    if ((flags & ALLOW_ANY) && (flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING))) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags are incompatible with \"\n+                                         \"ALLOW_ANY (typed arguments need to be type checked)\", arg_name));\n+    }\n+    if ((flags & ALLOW_BOOL) && (flags & DISALLOW_ELISION)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_BOOL flag is incompatible with DISALLOW_ELISION \"\n+                                         \" (boolean arguments should not require argument values)\", arg_name));\n+    }\n+    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT flag is incompatible with ALLOW_STRING \"\n+                                         \"(any valid integer is also a valid string)\", arg_name));\n+    }\n+    if ((flags & ALLOW_BOOL) && (flags & (ALLOW_INT | ALLOW_STRING))) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_BOOL flag may not currently be specified with ALLOW_INT or ALLOW_STRING \"\n+                                         \" (integer and string argument values cannot currently be omitted)\", arg_name));",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 280,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "41bdf3d025f900a59ec14d5b497a31a2d84eea52",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Remove double spaces\r\n```suggestion\r\n        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_BOOL flag is incompatible with DISALLOW_ELISION \"\r\n                                         \"(boolean arguments should not require argument values)\", arg_name));\r\n    }\r\n    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\r\n        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT flag is incompatible with ALLOW_STRING \"\r\n                                         \"(any valid integer is also a valid string)\", arg_name));\r\n    }\r\n    if ((flags & ALLOW_BOOL) && (flags & (ALLOW_INT | ALLOW_STRING))) {\r\n        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_BOOL flag may not currently be specified with ALLOW_INT or ALLOW_STRING \"\r\n                                         \"(integer and string argument values cannot currently be omitted)\", arg_name));\r\n```",
      "created_at": "2024-09-19T20:51:48Z",
      "updated_at": "2024-09-23T12:53:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1767576075",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767576075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 680,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771310361",
      "pull_request_review_id": 2316714013,
      "id": 1771310361,
      "node_id": "PRRC_kwDOABII585plA0Z",
      "diff_hunk": "@@ -152,12 +224,73 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * @name GetArg Functions\n+     *\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *     GetArg(\"-foo\")     // returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *     GetIntArg(\"-foo\")  // returns 123 if -foo=123 was specified, or nullopt if unset\n+     *     GetBoolArg(\"-foo\") // returns true if -foo was specified, or nullopt if unset\n+     *     GetBoolArg(\"-foo\") // returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors which\n+     * legacy code relies on, like parsing -nofoo as string \"0\" or -foo=true as\n+     * boolean false.\n+     *\n+     * If any type flags are set, then:\n+     *\n+     * - Only GetArg functions with types matching the flags can be called. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecified or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.\n+     *\n+     * - \"Narrowing\" type conversions in the other direction are not done even\n+     *   when they would be unambiguous. This makes it possible to distinguish\n+     *   values by type by checking for narrow types first. For example, to\n+     *   handle boolean settings.json or command line values (-foo -nofoo)\n+     *   differently than string values (-foo=abc), you can write:\n+     *\n+     *       if (auto foo{args.GetBoolArg(\"-foo\")}) {\n+     *           // handle -foo or -nofoo bool in foo.value()\n+     *       } else if (auto foo{args.GetArg(\"-foo\")}) {\n+     *           // handle -foo=abc string in foo.value()\n+     *       } else {\n+     *           // handle unset setting\n+     *       }",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 146,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a27b423fc33f138d4c5ebf54ff649b85eacd069",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Feels like this is encouraging `BOOL | STRING` usage and should be broken out too if we are postponing that support.",
      "created_at": "2024-09-23T12:28:49Z",
      "updated_at": "2024-09-23T12:53:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1771310361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771310361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 262,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771467223",
      "pull_request_review_id": 2322282706,
      "id": 1771467223,
      "node_id": "PRRC_kwDOABII585plnHX",
      "diff_hunk": "@@ -185,6 +579,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. Please specify value with -value=value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\"));\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('0').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('2').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting a value ('abc').\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 521,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "1e37bcf9fc11562baaedea24685c31f60ef2de31",
      "in_reply_to_id": 1703839679,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think your advice to split up this PR is basically the same advice you are giving in #25665 to split up that PR, and my resistance in both PRs has been counterproductive.\r\n\r\nIt is certainly useful to have a working end-result that reviewers can look at, than not to have one. However, given an end-result, splitting up stuff for review (where it makes sense on a case-by-case basis) should have no downside, because reviewers can confirm that they agree with the overall goal and that the stuff is directly moving toward that goal.\r\n\r\nSince you mentioned 25665: For example commit 5f49cb1bc8e6ba0671c21bf6292d2d3de43fd001 was split up more than a year ago and it was trivial to review it conformed to the end-goal and trivial to review by itself. However, 25665 is still sitting in a state with hundreds of comments (many of which are irrelevant due to changes in master, or only relevant for historic purposes). Using smaller chunks could also allow to have review comments live in smaller and closely related scopes (pull requests). For example, one can jump into https://github.com/bitcoin/bitcoin/pull/25977#issue-1359327472 and have a full list of all relevant comments around `Result<void>`, instead of having to read the \"end-result\" pull and weed through hundreds of comments, where less than 1% are relevant to the specific topic at hand.",
      "created_at": "2024-09-23T13:40:42Z",
      "updated_at": "2024-09-23T13:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1771467223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771467223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771575039",
      "pull_request_review_id": 2322473530,
      "id": 1771575039,
      "node_id": "PRRC_kwDOABII585pmBb_",
      "diff_hunk": "@@ -45,6 +45,23 @@ std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::os\n {\n     return stream << static_cast<typename std::underlying_type<T>::type>(e);\n }\n+\n+// Enable BOOST_CHECK_EQUAL for std::optional",
      "path": "src/test/util/setup_common.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "16fe0c57637dbc83c569a407b1f36c30a24081f5",
      "in_reply_to_id": 1711689242,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Was [merged](https://github.com/bitcoin/bitcoin/commit/743ac30e349e181c26a2d2af0bcb93b0835ce521#diff-d4a2fb26adedc27f16bd3778424fa94c473342a695b228220a1810119028be5bR257-R261) since (added you as co-author), you should be able to remove this now",
      "created_at": "2024-09-23T14:32:05Z",
      "updated_at": "2024-09-23T14:33:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1771575039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771575039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771696767",
      "pull_request_review_id": 2322682262,
      "id": 1771696767,
      "node_id": "PRRC_kwDOABII585pmfJ_",
      "diff_hunk": "@@ -578,6 +670,24 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    // Disallow flag combinations that would result in nonsensical behavior or a bad UX.\n+    if ((flags & ALLOW_ANY) && (flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING))) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags are incompatible with \"\n+                                         \"ALLOW_ANY (typed arguments need to be type checked)\", arg_name));\n+    }\n+    if ((flags & ALLOW_BOOL) && (flags & DISALLOW_ELISION)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_BOOL flag is incompatible with DISALLOW_ELISION \"\n+                                         \" (boolean arguments should not require argument values)\", arg_name));\n+    }\n+    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT flag is incompatible with ALLOW_STRING \"\n+                                         \"(any valid integer is also a valid string)\", arg_name));\n+    }\n+    if ((flags & ALLOW_BOOL) && (flags & (ALLOW_INT | ALLOW_STRING))) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_BOOL flag may not currently be specified with ALLOW_INT or ALLOW_STRING \"\n+                                         \" (integer and string argument values cannot currently be omitted)\", arg_name));",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 280,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "41bdf3d025f900a59ec14d5b497a31a2d84eea52",
      "in_reply_to_id": 1767576075,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1767576075\r\n\r\n> nit: Remove double spaces\r\n\r\nThanks! Applied suggestion\r\n",
      "created_at": "2024-09-23T15:42:10Z",
      "updated_at": "2024-09-23T16:02:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1771696767",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771696767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 680,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771700848",
      "pull_request_review_id": 2322682262,
      "id": 1771700848,
      "node_id": "PRRC_kwDOABII585pmgJw",
      "diff_hunk": "@@ -152,12 +224,73 @@ class ArgsManager\n     bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);\n \n  public:\n+    ArgsManager();\n+    ~ArgsManager();\n+\n+    /**\n+     * @name GetArg Functions\n+     *\n+     * GetArg functions are an easy way to access most settings. They are\n+     * wrappers around the lower-level GetSetting() function that provide\n+     * greater convenience.\n+     *\n+     * Examples:\n+     *\n+     *     GetArg(\"-foo\")     // returns \"abc\" if -foo=abc was specified, or nullopt if unset\n+     *     GetIntArg(\"-foo\")  // returns 123 if -foo=123 was specified, or nullopt if unset\n+     *     GetBoolArg(\"-foo\") // returns true if -foo was specified, or nullopt if unset\n+     *     GetBoolArg(\"-foo\") // returns false if -nofoo was specified, or nullopt if unset\n+     *\n+     * If no type flags (ALLOW_STRING, ALLOW_INT, or ALLOW_BOOL) are set, GetArg\n+     * functions do many type coercions and can have surprising behaviors which\n+     * legacy code relies on, like parsing -nofoo as string \"0\" or -foo=true as\n+     * boolean false.\n+     *\n+     * If any type flags are set, then:\n+     *\n+     * - Only GetArg functions with types matching the flags can be called. For\n+     *   example, it is an error to call GetIntArg() if ALLOW_INT is not set.\n+     *\n+     * - GetArg functions act like std::get_if<T>(), returning null if the\n+     *   requested type is not available or the setting is unspecified or empty.\n+     *\n+     * - \"Widening\" type conversions from smaller to bigger types are done if\n+     *   unambiguous (bool -> int -> string). For example, if settings.json\n+     *   contains {\"foo\":123}, GetArg(\"-foo\") will return \"123\". If it contains\n+     *   {\"foo\":true}, GetIntArg(\"-foo\") will return 1.\n+     *\n+     * - \"Narrowing\" type conversions in the other direction are not done even\n+     *   when they would be unambiguous. This makes it possible to distinguish\n+     *   values by type by checking for narrow types first. For example, to\n+     *   handle boolean settings.json or command line values (-foo -nofoo)\n+     *   differently than string values (-foo=abc), you can write:\n+     *\n+     *       if (auto foo{args.GetBoolArg(\"-foo\")}) {\n+     *           // handle -foo or -nofoo bool in foo.value()\n+     *       } else if (auto foo{args.GetArg(\"-foo\")}) {\n+     *           // handle -foo=abc string in foo.value()\n+     *       } else {\n+     *           // handle unset setting\n+     *       }",
      "path": "src/common/args.h",
      "position": 1,
      "original_position": 146,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a27b423fc33f138d4c5ebf54ff649b85eacd069",
      "in_reply_to_id": 1771310361,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1771310361\r\n\r\n> Feels like this is encouraging `BOOL | STRING` usage and should be broken out too if we are postponing that support.\r\n\r\nGood catch. Makes sense to drop the example since it doesn't work yet.",
      "created_at": "2024-09-23T15:45:10Z",
      "updated_at": "2024-09-23T16:02:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1771700848",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1771700848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 262,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1773221823",
      "pull_request_review_id": 2325050760,
      "id": 1773221823,
      "node_id": "PRRC_kwDOABII585psTe_",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Can not negate -%s at the same time as setting a value ('%s').\", key.name, *value);",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 48,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: you're using both `can not` and `cannot` in the errors",
      "created_at": "2024-09-24T12:13:12Z",
      "updated_at": "2024-09-24T13:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1773221823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1773221823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1773291395",
      "pull_request_review_id": 2325050760,
      "id": 1773291395,
      "node_id": "PRRC_kwDOABII585pskeD",
      "diff_hunk": "@@ -103,6 +103,38 @@ KeyInfo InterpretKey(std::string key)\n  *\n  * @return parsed settings value if it is valid, otherwise nullopt accompanied",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 2,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * @return parsed settings value if it is valid, otherwise `nullopt` accompanied\r\n```\r\n\r\n<img width=\"645\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f11f67dd-04ae-492d-b053-07471e6e4ecc\">\r\n",
      "created_at": "2024-09-24T12:55:01Z",
      "updated_at": "2024-09-24T13:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1773291395",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1773291395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1773293766",
      "pull_request_review_id": 2325050760,
      "id": 1773293766,
      "node_id": "PRRC_kwDOABII585pslDG",
      "diff_hunk": "@@ -102,6 +102,38 @@ KeyInfo InterpretKey(std::string key)\n  *\n  * @return parsed settings value if it is valid, otherwise nullopt accompanied\n  * by a descriptive error string\n+ *",
      "path": "src/common/args.cpp",
      "position": 7,
      "original_position": 4,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": 1688179608,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I haven't seen this style used here, it's meant to keep the note's formatting, right? (edit, I see @hodlinator already noticed the same, but now it's `cmake --build build --target docs`)\r\nIt seems to me we can achieve the same by removing the line completely:\r\n<img width=\"356\" alt=\"image\" src=\"https://github.com/user-attachments/assets/99080cad-1be4-4524-bd23-14d093762dde\">\r\n",
      "created_at": "2024-09-24T12:56:36Z",
      "updated_at": "2024-09-24T13:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1773293766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1773293766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775766244",
      "pull_request_review_id": 2329185957,
      "id": 1775766244,
      "node_id": "PRRC_kwDOABII585p2Ark",
      "diff_hunk": "@@ -103,6 +103,38 @@ KeyInfo InterpretKey(std::string key)\n  *\n  * @return parsed settings value if it is valid, otherwise nullopt accompanied",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 2,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43",
      "in_reply_to_id": 1773291395,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1773291395\r\n\r\nThanks, applied suggestion",
      "created_at": "2024-09-25T18:32:41Z",
      "updated_at": "2024-09-25T19:17:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775766244",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775766244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775792589",
      "pull_request_review_id": 2329185957,
      "id": 1775792589,
      "node_id": "PRRC_kwDOABII585p2HHN",
      "diff_hunk": "@@ -102,6 +102,38 @@ KeyInfo InterpretKey(std::string key)\n  *\n  * @return parsed settings value if it is valid, otherwise nullopt accompanied\n  * by a descriptive error string\n+ *",
      "path": "src/common/args.cpp",
      "position": 7,
      "original_position": 4,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "9196cfe26da4784029500da482c6f7d55fca5ac2",
      "in_reply_to_id": 1688179608,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1773293766\r\n\r\nHappy to change, but I'm not really sure what to do here. I always just look at plaintext comments, not generated documentation, and I do think having breaks between list items makes the plaintext comment more readable since most of the items are paragraphs. I could get rid of the break before the first item while keeping the breaks before the other items, though, if that works and would be preferred.",
      "created_at": "2024-09-25T18:56:22Z",
      "updated_at": "2024-09-25T19:17:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775792589",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775792589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775793996",
      "pull_request_review_id": 2329185957,
      "id": 1775793996,
      "node_id": "PRRC_kwDOABII585p2HdM",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Can not negate -%s at the same time as setting a value ('%s').\", key.name, *value);",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 48,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "87b6d4cb5a5c04f6c8542c633c3bfa5f76901d43",
      "in_reply_to_id": 1773221823,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1773221823\r\n\r\n> nit: you're using both `can not` and `cannot` in the errors\r\n\r\nSeems like cannot is better so switched to that, thanks!",
      "created_at": "2024-09-25T18:57:31Z",
      "updated_at": "2024-09-25T19:17:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775793996",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775793996"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775897208",
      "pull_request_review_id": 2329375556,
      "id": 1775897208,
      "node_id": "PRRC_kwDOABII585p2gp4",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {",
      "path": "src/common/args.cpp",
      "position": 54,
      "original_position": 50,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "seems to me we're treating the input `value` as an implicit optional, even though originally it's an actual `std::optional<std::string>`.\r\nGiven that we're already returning an `std::optional`, can we consider avoiding pointers and using a `std::optional<std::string_view> value` parameter instead?",
      "created_at": "2024-09-25T19:34:59Z",
      "updated_at": "2024-09-25T22:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775897208",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775897208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775897382",
      "pull_request_review_id": 2329375556,
      "id": 1775897382,
      "node_id": "PRRC_kwDOABII585p2gsm",
      "diff_hunk": "@@ -101,8 +101,40 @@ KeyInfo InterpretKey(std::string key)\n  * @param[in]   flags    ArgsManager registered argument flags\n  * @param[out]  error    Error description if settings value is not valid\n  *\n- * @return parsed settings value if it is valid, otherwise nullopt accompanied\n+ * @return parsed settings value if it is valid, otherwise `nullopt` accompanied\n  * by a descriptive error string\n+ *\n+ * @note By design, the \\ref InterpretValue function does mostly lossless\n+ * conversions of command line arguments and configuration file values to JSON\n+ * `common::SettingsValue` values, so higher level application code and GetArg\n+ * helper methods can unambiguously determine original configuration strings\n+ * from the JSON values, and flexibly interpret settings and provide good error\n+ * feedback. Specifically:\n+ * \\n\n+ * - JSON `null` value is never returned and is reserved for settings that were\n+ *   not configured at all.\n+ *\n+ * - JSON `false` value is returned for negated settings like `-nosetting` or\n+ *   `-nosetting=1`. `false` is also returned for boolean-only settings that\n+ *   have the ALLOW_BOOL flag and false values like `setting=0`.\n+ *\n+ * - JSON `true` value is returned for settings that have the ALLOW_BOOL flag\n+ *   and are specified on the command line without a value like `-setting`.\n+ *   `true` is also returned for boolean-only settings that have the ALLOW_BOOL\n+ *   flag and true values like `setting=1`. `true` is also returned for untyped\n+ *   legacy settings (see \\ref IsTypedArg) that use double negation like\n+ *   `-nosetting=0`.\n+ *\n+ * - JSON `\"\"` empty string value is returned for settings like `-setting=`\n+ *   that specify empty values. `\"\"` is also returned for untyped legacy\n+ *   settings (see \\ref IsTypedArg) that are specified on the command line\n+ *   without a value like `-setting`.\n+ *\n+ * - JSON strings like `\"abc\"` are returned for settings like `-setting=abc` if\n+ *   the setting has the ALLOW_STRING flag or is an untyped legacy setting.\n+ *\n+ * - JSON numbers like `123` are returned for settings like `-setting=123` if\n+ *   the setting enables integer parsing with the ALLOW_INT flag.\n  */\n std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const std::string* value,\n                                                   unsigned int flags, std::string& error)",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: alignment",
      "created_at": "2024-09-25T19:35:11Z",
      "updated_at": "2024-09-25T22:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775897382",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775897382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775905567",
      "pull_request_review_id": 2329375556,
      "id": 1775905567,
      "node_id": "PRRC_kwDOABII585p2isf",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 67,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this is only used once, maybe we could have a local `TryParseInt64` next to `InterpretBool` - details below",
      "created_at": "2024-09-25T19:42:54Z",
      "updated_at": "2024-09-25T22:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775905567",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775905567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775907489",
      "pull_request_review_id": 2329375556,
      "id": 1775907489,
      "node_id": "PRRC_kwDOABII585p2jKh",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;\n+        if ((flags & ArgsManager::ALLOW_INT) && ParseInt64(*value, &parsed_int)) return parsed_int;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"0\") return false;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"1\") return true;",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 71,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could group the two bools and use an optional for the in parsing (assuming `std::optional` `value` parameter):\r\n```suggestion\r\n        if (flags & ArgsManager::ALLOW_INT) {\r\n            if (auto parsed = TryParseInt64(*value)) return *parsed;\r\n        }\r\n        if (flags & ArgsManager::ALLOW_BOOL) {\r\n            if (value == \"0\") return false;\r\n            if (value == \"1\") return true;\r\n        }\r\n```\r\n\r\n<details>\r\n<summary>TryParseInt64</summary>\r\n\r\n```C++\r\nstd::optional<int64_t> TryParseInt64(std::string_view str) {\r\n    int64_t parsed_int;\r\n    if (ParseInt64(str, &parsed_int)) return parsed_int;\r\n    return std::nullopt;\r\n}\r\n```\r\n\r\n</details>",
      "created_at": "2024-09-25T19:44:45Z",
      "updated_at": "2024-09-25T22:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775907489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1775907489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 168,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776007657",
      "pull_request_review_id": 2329375556,
      "id": 1776007657,
      "node_id": "PRRC_kwDOABII585p27np",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);",
      "path": "src/common/args.cpp",
      "position": 62,
      "original_position": 58,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find it quite confusing that have a return value, and error return value and even warning as possible outcomes.",
      "created_at": "2024-09-25T21:21:47Z",
      "updated_at": "2024-09-25T22:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776007657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776007657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776017230",
      "pull_request_review_id": 2329375556,
      "id": 1776017230,
      "node_id": "PRRC_kwDOABII585p299O",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;",
      "path": "src/common/args.cpp",
      "position": 71,
      "original_position": 68,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could divide this method into typed and untyped parsing, would simplify the logic slightly:\r\n```C++\r\nstd::optional<common::SettingsValue> HandleTypedArg(const KeyInfo& key, std::optional<std::string_view> value,\r\n                                                    unsigned int flags, std::string& error)\r\n{\r\n    if (key.negated) {\r\n        // If argument is typed, only allow negation with no value or with\r\n        // literal \"1\" value. Avoid calling InterpretBool and accepting\r\n        // other values which could be ambiguous.\r\n        if (value && value != \"1\") {\r\n            error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\r\n            return std::nullopt;\r\n        }\r\n        return false;\r\n    }\r\n    if (value) {\r\n        if (IsStringArg(flags) || value->empty()) return *value;\r\n        if (IsIntArg(flags)) {\r\n            if (auto parsed = TryParseInt64(*value)) return *parsed;\r\n        }\r\n        if (IsBoolArg(flags)) {\r\n            if (value == \"0\") return false;\r\n            if (value == \"1\") return true;\r\n        }\r\n        error = strprintf(\"Cannot set -%s value to '%s'.\", key.name, *value);\r\n    } else {\r\n        if (IsBoolArg(flags)) return true;\r\n        error = strprintf(\"Cannot set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\r\n    }\r\n\r\n    auto type_str = IsStringArg(flags) ? \"a string\" : IsIntArg(flags) ? \"an integer\" : \"0 or 1\";\r\n    error += strprintf(\" It must be set to %s.\", type_str);\r\n    return std::nullopt;\r\n}\r\n\r\nstd::optional<common::SettingsValue> HandleUntypedArg(const KeyInfo& key, std::optional<std::string_view> value,\r\n                                                      unsigned int flags, std::string& error)\r\n{\r\n    if (key.negated) {\r\n        // Double negatives like -nofoo=0 are supported (but discouraged)\r\n        if (value && !InterpretBool(*value)) {\r\n            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    if (value) return *value;\r\n    if (!DisallowElision(flags)) return \"\";\r\n    error = strprintf(\"Cannot set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\r\n    return std::nullopt;\r\n}\r\n\r\nstd::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, std::optional<std::string_view> value,\r\n                                                    unsigned int flags, std::string& error)\r\n{\r\n    // Check for disallowed negation\r\n    if (key.negated && DisallowNegation(flags)) {\r\n        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\r\n        return std::nullopt;\r\n    }\r\n\r\n    return IsTypedArg(flags)\r\n         ? HandleTypedArg(key, value, flags, error)\r\n         : HandleUntypedArg(key, value, flags, error);\r\n}\r\n```",
      "created_at": "2024-09-25T21:32:44Z",
      "updated_at": "2024-09-25T22:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776017230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776017230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776018821",
      "pull_request_review_id": 2329375556,
      "id": 1776018821,
      "node_id": "PRRC_kwDOABII585p2-WF",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;\n+        if ((flags & ArgsManager::ALLOW_INT) && ParseInt64(*value, &parsed_int)) return parsed_int;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"0\") return false;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"1\") return true;\n+        error = strprintf(\"Cannot set -%s value to '%s'.\", key.name, *value);\n+    } else {\n+        if (flags & ArgsManager::ALLOW_BOOL) return true;\n+        if (!(flags & ArgsManager::DISALLOW_ELISION) && !IsTypedArg(flags)) return \"\";\n+        error = strprintf(\"Cannot set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n+    }\n+    if (flags & ArgsManager::ALLOW_STRING) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to a string.\");\n+    } else if (flags & ArgsManager::ALLOW_INT) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to an integer.\");\n+    } else if (flags & ArgsManager::ALLOW_BOOL) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to 0 or 1.\");\n+    }",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 84,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could change this to an `error += ` syntax:\r\n```C++\r\nauto type_str = IsStringArg(flags) ? \"a string\" : IsIntArg(flags) ? \"an integer\" : \"0 or 1\";\r\nerror += strprintf(\" It must be set to %s.\", type_str);\r\n```",
      "created_at": "2024-09-25T21:34:31Z",
      "updated_at": "2024-09-25T22:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776018821",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776018821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 177,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776023938",
      "pull_request_review_id": 2329375556,
      "id": 1776023938,
      "node_id": "PRRC_kwDOABII585p2_mC",
      "diff_hunk": "@@ -580,6 +672,24 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    // Disallow flag combinations that would result in nonsensical behavior or a bad UX.\n+    if ((flags & ALLOW_ANY) && (flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING))) {",
      "path": "src/common/args.cpp",
      "position": 277,
      "original_position": 270,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "* the last part seems to check if we're typed\r\n* what if we introduced flag helpers to make this more readable and easier to transition later:\r\n```C++\r\n//! Whether the type of the argument has been specified and extra validation rules should apply.\r\ninline bool DisallowNegation(uint32_t flags) { return flags & ArgsManager::DISALLOW_NEGATION; }\r\ninline bool DisallowElision(uint32_t flags) { return flags & ArgsManager::DISALLOW_ELISION; }\r\n\r\ninline bool IsAnyArg(uint32_t flags) { return flags & ArgsManager::ALLOW_ANY; }\r\ninline bool IsBoolArg(uint32_t flags) { return flags & ArgsManager::ALLOW_BOOL; }\r\ninline bool IsIntArg(uint32_t flags) { return flags & ArgsManager::ALLOW_INT; }\r\ninline bool IsStringArg(uint32_t flags) { return flags & ArgsManager::ALLOW_STRING; }\r\ninline bool IsListArg(uint32_t flags) { return flags & ArgsManager::ALLOW_LIST; }\r\ninline bool IsTypedArg(uint32_t flags) { return IsBoolArg(flags) || IsIntArg(flags) || IsStringArg(flags); }\r\n```\r\nand this line would become:\r\n```C++\r\n    if (IsAnyArg(flags) && IsTypedArg(flags)) {\r\n```",
      "created_at": "2024-09-25T21:40:27Z",
      "updated_at": "2024-09-25T22:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776023938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776023938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 680,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776026761",
      "pull_request_review_id": 2329375556,
      "id": 1776026761,
      "node_id": "PRRC_kwDOABII585p3ASJ",
      "diff_hunk": "@@ -24,6 +24,313 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block : options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitrarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");",
      "path": "src/test/argsman_tests.cpp",
      "position": 179,
      "original_position": 179,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n        std::string error;\r\n        BOOST_REQUIRE_MESSAGE(args.ParseParameters(argv.size(), argv.data(), error), error);\r\n        BOOST_CHECK_EQUAL(error, \"\");\r\n```\r\n(though I guess this is needed for your testing style that I commented on later)",
      "created_at": "2024-09-25T21:43:59Z",
      "updated_at": "2024-09-25T22:02:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776026761",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776026761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": 198,
      "original_start_line": 198,
      "start_side": "RIGHT",
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776028495",
      "pull_request_review_id": 2329375556,
      "id": 1776028495,
      "node_id": "PRRC_kwDOABII585p3AtP",
      "diff_hunk": "@@ -24,6 +24,313 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block : options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitrarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        Options options;\n+        ReadOptions(args, options);\n+        return options;\n+    }\n+};\n+} // namespace example_options\n+\n+BOOST_FIXTURE_TEST_CASE(ExampleOptions, example_options::TestSetup)\n+{\n+    // Check default upnp value is false\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_upnp, false);\n+    // Check passing -upnp makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp\"}).enable_upnp, true);\n+    // Check passing -upnp=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\"}).enable_upnp, true);\n+    // Check adding -upnp= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\", \"-upnp=\"}).enable_upnp, false);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-upnp=yes\"}), std::exception, HasReason{\"Cannot set -upnp value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default rpcserver value is true.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_rpc_server, true);\n+    // Check passing -norpcserver makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-norpcserver\"}).enable_rpc_server, false);\n+    // Check passing -rpcserver=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\"}).enable_rpc_server, false);\n+    // Check adding -rpcserver= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\", \"-rpcserver=\"}).enable_rpc_server, true);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-rpcserver=yes\"}), std::exception, HasReason{\"Cannot set -rpcserver value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default dnsseed value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_dns_seed, std::nullopt);\n+    // Check passing -dnsseed makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed\"}).enable_dns_seed, true);\n+    // Check passing -dnsseed=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\"}).enable_dns_seed, true);\n+    // Check passing -nodnsseed makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nodnsseed\"}).enable_dns_seed, false);\n+    // Check passing -dnsseed=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=0\"}).enable_dns_seed, false);\n+    // Check adding -dnsseed= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed, std::nullopt);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-dnsseed=yes\"}), std::exception, HasReason{\"Cannot set -dnsseed value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default bantime value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bantime.count(), 86400);\n+    // Check passing -bantime=3600 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\"}).bantime.count(), 3600);\n+    // Check passing -nobantime makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nobantime\"}).bantime.count(), 0);\n+    // Check passing -bantime=0 makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=0\"}).bantime.count(), 0);\n+    // Check adding -bantime= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\", \"-bantime=\"}).bantime.count(), 86400);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime\"}), std::exception, HasReason{\"Cannot set -bantime with no value. Please specify value with -bantime=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=abc\"}), std::exception, HasReason{\"Cannot set -bantime value to 'abc'. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=-1000\"}), std::exception, HasReason{\"-bantime value -1000 is negative\"});\n+\n+    // Check default bytespersigop value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bytes_per_sigop, 20);\n+    // Check passing -bytespersigop=30 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\"}).bytes_per_sigop, 30);\n+    // Check adding -bytespersigop= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\", \"-bytespersigop=\"}).bytes_per_sigop, 20);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop\"}), std::exception, HasReason{\"Cannot set -bytespersigop with no value. Please specify value with -bytespersigop=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-nobytespersigop\"}), std::exception, HasReason{\"Negating of -bytespersigop is meaningless and therefore forbidden\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=0\"}), std::exception, HasReason{\"-bytespersigop value 0 is less than 1\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=abc\"}), std::exception, HasReason{\"Cannot set -bytespersigop value to 'abc'. It must be set to an integer.\"});\n+\n+    // Check default assumevalid value is unset.\n+    BOOST_CHECK(!ParseOptions({}).assumevalid);\n+    // Check passing -assumevalid=<hash> makes it set that hash.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid.value().ToString(), \"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\");",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 256,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid, uint256{\"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"});\r\n```",
      "created_at": "2024-09-25T21:46:07Z",
      "updated_at": "2024-09-25T22:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776028495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776028495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776031435",
      "pull_request_review_id": 2329375556,
      "id": 1776031435,
      "node_id": "PRRC_kwDOABII585p3BbL",
      "diff_hunk": "@@ -46,7 +46,11 @@ FUZZ_TARGET(system, .init = initialize_system)\n             [&] {\n                 auto str_arg = fuzzed_data_provider.ConsumeRandomLengthString(16);\n                 auto str_value = fuzzed_data_provider.ConsumeRandomLengthString(16);\n-                args_manager.SoftSetArg(str_arg, str_value);\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(str_arg, str_value);\n+                } catch (const std::logic_error&) {\n+                }",
      "path": "src/test/fuzz/system.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "doesn't this defeat the purpose and give us false confidence?\r\nCan we at least assert something in the message to make sure it's not an unrelated exception?",
      "created_at": "2024-09-25T21:49:51Z",
      "updated_at": "2024-09-25T22:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776031435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776031435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776031755",
      "pull_request_review_id": 2329375556,
      "id": 1776031755,
      "node_id": "PRRC_kwDOABII585p3BgL",
      "diff_hunk": "@@ -68,6 +76,11 @@ FUZZ_TARGET(system, .init = initialize_system)\n                 }\n                 auto help = fuzzed_data_provider.ConsumeRandomLengthString(16);\n                 auto flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND;\n+                // Avoid hitting \"ALLOW_INT flag is incompatible with ALLOW_STRING\", etc exceptions\n+                if (flags & ArgsManager::ALLOW_ANY) flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);",
      "path": "src/test/fuzz/system.cpp",
      "position": 33,
      "original_position": 31,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "let's use the flag helper methods here as well",
      "created_at": "2024-09-25T21:50:15Z",
      "updated_at": "2024-09-25T22:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776031755",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776031755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776032308",
      "pull_request_review_id": 2329375556,
      "id": 1776032308,
      "node_id": "PRRC_kwDOABII585p3Bo0",
      "diff_hunk": "@@ -259,6 +259,10 @@ inline std::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\n     return v ? os << *v\n              : os << \"std::nullopt\";\n }\n+inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is this still needed? Though I understand If you think the error messages might be better than:\r\n```C++\r\nBOOST_CHECK(!ParseOptions({}).enable_dns_seed);\r\nBOOST_CHECK(!ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed);\r\n```",
      "created_at": "2024-09-25T21:50:59Z",
      "updated_at": "2024-09-25T22:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776032308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1776032308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 262,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784705471",
      "pull_request_review_id": 2343217508,
      "id": 1784705471,
      "node_id": "PRRC_kwDOABII585qYHG_",
      "diff_hunk": "@@ -101,8 +101,40 @@ KeyInfo InterpretKey(std::string key)\n  * @param[in]   flags    ArgsManager registered argument flags\n  * @param[out]  error    Error description if settings value is not valid\n  *\n- * @return parsed settings value if it is valid, otherwise nullopt accompanied\n+ * @return parsed settings value if it is valid, otherwise `nullopt` accompanied\n  * by a descriptive error string\n+ *\n+ * @note By design, the \\ref InterpretValue function does mostly lossless\n+ * conversions of command line arguments and configuration file values to JSON\n+ * `common::SettingsValue` values, so higher level application code and GetArg\n+ * helper methods can unambiguously determine original configuration strings\n+ * from the JSON values, and flexibly interpret settings and provide good error\n+ * feedback. Specifically:\n+ * \\n\n+ * - JSON `null` value is never returned and is reserved for settings that were\n+ *   not configured at all.\n+ *\n+ * - JSON `false` value is returned for negated settings like `-nosetting` or\n+ *   `-nosetting=1`. `false` is also returned for boolean-only settings that\n+ *   have the ALLOW_BOOL flag and false values like `setting=0`.\n+ *\n+ * - JSON `true` value is returned for settings that have the ALLOW_BOOL flag\n+ *   and are specified on the command line without a value like `-setting`.\n+ *   `true` is also returned for boolean-only settings that have the ALLOW_BOOL\n+ *   flag and true values like `setting=1`. `true` is also returned for untyped\n+ *   legacy settings (see \\ref IsTypedArg) that use double negation like\n+ *   `-nosetting=0`.\n+ *\n+ * - JSON `\"\"` empty string value is returned for settings like `-setting=`\n+ *   that specify empty values. `\"\"` is also returned for untyped legacy\n+ *   settings (see \\ref IsTypedArg) that are specified on the command line\n+ *   without a value like `-setting`.\n+ *\n+ * - JSON strings like `\"abc\"` are returned for settings like `-setting=abc` if\n+ *   the setting has the ALLOW_STRING flag or is an untyped legacy setting.\n+ *\n+ * - JSON numbers like `123` are returned for settings like `-setting=123` if\n+ *   the setting enables integer parsing with the ALLOW_INT flag.\n  */\n std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const std::string* value,\n                                                   unsigned int flags, std::string& error)",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1775897382,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775897382\r\n\r\n> nit: alignment\r\n\r\nThanks, updated",
      "created_at": "2024-10-02T14:57:22Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784705471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784705471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784744305",
      "pull_request_review_id": 2343217508,
      "id": 1784744305,
      "node_id": "PRRC_kwDOABII585qYQlx",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {",
      "path": "src/common/args.cpp",
      "position": 54,
      "original_position": 50,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1775897208,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775897208\r\n\r\n(note: This comment is about previous code unaffected by this PR)\r\n\r\n> seems to me we're treating the input `value` as an implicit optional, even though originally it's an actual `std::optional<std::string>`.\r\n\r\nAbsolutely yes. In C and C++ `T*` is semantically equivalent to `std::optional<T&>`.\r\n\r\n> Given that we're already returning an `std::optional`, can we consider avoiding pointers and using a `std::optional<std::string_view> value` parameter instead?\r\n\r\nAgree `std::optional<std::string_view> value` would be slightly better than `const std::string*` here but I'd be reluctant to change it in this PR, because I don't want to expand the PR to change the function signature and callers when they aren't already changing for a minor cleanup.",
      "created_at": "2024-10-02T15:11:15Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784744305",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784744305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784758735",
      "pull_request_review_id": 2343217508,
      "id": 1784758735,
      "node_id": "PRRC_kwDOABII585qYUHP",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);",
      "path": "src/common/args.cpp",
      "position": 62,
      "original_position": 58,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776007657,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776007657\r\n\r\n(note: This comment is about previous code unaffected by this PR)\r\n\r\n> I find it quite confusing that have a return value, and error return value and even warning as possible outcomes.\r\n\r\nIt would probably be better for this to return util::Result, but in fairness this function is only called two places and intended for internal use, so exact form of its API hopefully doesn't matter too much.\r\n\r\n",
      "created_at": "2024-10-02T15:17:37Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784758735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784758735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784804173",
      "pull_request_review_id": 2343217508,
      "id": 1784804173,
      "node_id": "PRRC_kwDOABII585qYfNN",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 67,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1775905567,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775907489\r\n\r\n> nit: this is only used once, maybe we could have a local `TryParseInt64` next to `InterpretBool` - details below\r\n\r\nThanks, adopted suggested approach.\r\n\r\nNote: other comment with details is: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775907489",
      "created_at": "2024-10-02T15:42:58Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784804173",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784804173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784831993",
      "pull_request_review_id": 2343217508,
      "id": 1784831993,
      "node_id": "PRRC_kwDOABII585qYl_5",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;",
      "path": "src/common/args.cpp",
      "position": 71,
      "original_position": 68,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776017230,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776017230\r\n\r\nIt's interesting to see what that looks like but I see few disadvantages to that approach:\r\n\r\n- Superficially, the resulting code is longer and the diff is bigger. Current PR is trying to minimally change this function.\r\n- It seems to be duplicating some code like \"Cannot set -%s with no value\" error, increasing risk that differences between the two copies of code will be introduced accidentally, and introducing unintended differences in behavior for typed and untyped arguments.\r\n- It seems to make it harder to get a high level sense of how argument parsing is intended to work, for example parsing of negated arguments is split up across three functions instead of being handled one place.\r\n- It seems to do more string manipulation, breaking up error messages into smaller strings that might be harder to search for and translate (if we want to support that later).\r\n- It might not work as well with my branch in #22978. In this PR, distinction between typed and legacy arguments is all-or-nothing, while in the other branch I want allow supporting and disabling legacy behavior with granular options like `SettingOptions::allow_double_negation` to make code clearer and offer more flexibility for migrating away from legacy behaviors.",
      "created_at": "2024-10-02T16:02:31Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784831993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784831993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784833826",
      "pull_request_review_id": 2343217508,
      "id": 1784833826,
      "node_id": "PRRC_kwDOABII585qYmci",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;\n+        if ((flags & ArgsManager::ALLOW_INT) && ParseInt64(*value, &parsed_int)) return parsed_int;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"0\") return false;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"1\") return true;",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 71,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1775907489,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1775907489\r\n\r\n> we could group the two bools and use an optional for the in parsing (assuming `std::optional` `value` parameter):\r\n> TryParseInt64\r\n\r\nThanks, switched to this approach.",
      "created_at": "2024-10-02T16:03:56Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784833826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784833826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 168,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784840267",
      "pull_request_review_id": 2343217508,
      "id": 1784840267,
      "node_id": "PRRC_kwDOABII585qYoBL",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;\n+        if ((flags & ArgsManager::ALLOW_INT) && ParseInt64(*value, &parsed_int)) return parsed_int;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"0\") return false;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"1\") return true;\n+        error = strprintf(\"Cannot set -%s value to '%s'.\", key.name, *value);\n+    } else {\n+        if (flags & ArgsManager::ALLOW_BOOL) return true;\n+        if (!(flags & ArgsManager::DISALLOW_ELISION) && !IsTypedArg(flags)) return \"\";\n+        error = strprintf(\"Cannot set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n+    }\n+    if (flags & ArgsManager::ALLOW_STRING) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to a string.\");\n+    } else if (flags & ArgsManager::ALLOW_INT) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to an integer.\");\n+    } else if (flags & ArgsManager::ALLOW_BOOL) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to 0 or 1.\");\n+    }",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 84,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776018821,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776018821\r\n\r\n> we could change this to an `error += ` syntax:\r\n\r\nUnsure about this, I feel like this could make strings harder to search for and translate. And since the new code does not explicitly check for bool type it could lead to a bug if support for other types is added. Leaving alone for now. I can see appeal of this approach but it doesn't seem like a clear win.",
      "created_at": "2024-10-02T16:09:09Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784840267",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784840267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 177,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784852608",
      "pull_request_review_id": 2343217508,
      "id": 1784852608,
      "node_id": "PRRC_kwDOABII585qYrCA",
      "diff_hunk": "@@ -580,6 +672,24 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    // Disallow flag combinations that would result in nonsensical behavior or a bad UX.\n+    if ((flags & ALLOW_ANY) && (flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING))) {",
      "path": "src/common/args.cpp",
      "position": 277,
      "original_position": 270,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776023938,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776023938\r\n\r\nAgain, it's interesting to see what this looks like. so thanks for spelling it out. I don't love the `flags & ALLOW` syntax, so it's nice that helper functions hide it, but I feel the helper functions add a level of indirection that make it harder to plainly see what the code is doing.\r\n\r\nSpecifically they make this checking code less clear because of instead of checking the flags and then mentioning the flags just checked for in error messages, the errors would now be mentioning flags not directly checked for. I don't think I would complain if code were written this way, but it's not the way I would prefer to see it written.",
      "created_at": "2024-10-02T16:18:41Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784852608",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784852608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 680,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784855921",
      "pull_request_review_id": 2343217508,
      "id": 1784855921,
      "node_id": "PRRC_kwDOABII585qYr1x",
      "diff_hunk": "@@ -68,6 +76,11 @@ FUZZ_TARGET(system, .init = initialize_system)\n                 }\n                 auto help = fuzzed_data_provider.ConsumeRandomLengthString(16);\n                 auto flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND;\n+                // Avoid hitting \"ALLOW_INT flag is incompatible with ALLOW_STRING\", etc exceptions\n+                if (flags & ArgsManager::ALLOW_ANY) flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);",
      "path": "src/test/fuzz/system.cpp",
      "position": 33,
      "original_position": 31,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776031755,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776031755\r\n\r\n> let's use the flag helper methods here as well\r\n\r\nCan see response to https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776023938, but logic in this fuzzing code is already obscure and I feel like hiding the flags in the `if` conditions while continuing to use the flags in the body of the `if` statements would only make it more obscure.",
      "created_at": "2024-10-02T16:21:14Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784855921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784855921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784867708",
      "pull_request_review_id": 2343217508,
      "id": 1784867708,
      "node_id": "PRRC_kwDOABII585qYut8",
      "diff_hunk": "@@ -46,7 +46,11 @@ FUZZ_TARGET(system, .init = initialize_system)\n             [&] {\n                 auto str_arg = fuzzed_data_provider.ConsumeRandomLengthString(16);\n                 auto str_value = fuzzed_data_provider.ConsumeRandomLengthString(16);\n-                args_manager.SoftSetArg(str_arg, str_value);\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(str_arg, str_value);\n+                } catch (const std::logic_error&) {\n+                }",
      "path": "src/test/fuzz/system.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776031435,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776031435\r\n\r\n> doesn't this defeat the purpose and give us false confidence? Can we at least assert something in the message to make sure it's not an unrelated exception?\r\n\r\nI think the purpose of this fuzz test is more to check for vulnerabilities and crashes than to check for implementation details of the argument parsing framework. I'd be happy to update this if you have a specific suggestion, but I also think it's fine for this particular fuzz test to just verify that ArgsManager methods can throw logic_errors if called with inconsistent types, and then move onto other cases, without trying to skip these cases or check error messages in fine detail.",
      "created_at": "2024-10-02T16:28:56Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784867708",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784867708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784877248",
      "pull_request_review_id": 2343217508,
      "id": 1784877248,
      "node_id": "PRRC_kwDOABII585qYxDA",
      "diff_hunk": "@@ -259,6 +259,10 @@ inline std::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\n     return v ? os << *v\n              : os << \"std::nullopt\";\n }\n+inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776032308,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776032308\r\n\r\nIt's not needed, and main motivation is not to improve error messages (though it can definitely help to see what value is being returned if not null)\r\n\r\nMain motivation is to be able to write tests like:\r\n\r\n```c++\r\nBOOST_CHECK_EQUAL(fun(val1), std::nullopt);\r\nBOOST_CHECK_EQUAL(fun(val2), val3);\r\n```\r\n\r\ninstead of:\r\n\r\n```c++\r\nBOOST_CHECK(!fun(val1));\r\nBOOST_CHECK_EQUAL(fun(val2), val3);\r\n```\r\n\r\nIMO, former is more consistent, readable, and explicit.",
      "created_at": "2024-10-02T16:35:57Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784877248",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784877248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 262,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784898444",
      "pull_request_review_id": 2343217508,
      "id": 1784898444,
      "node_id": "PRRC_kwDOABII585qY2OM",
      "diff_hunk": "@@ -24,6 +24,313 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block : options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitrarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");",
      "path": "src/test/argsman_tests.cpp",
      "position": 179,
      "original_position": 179,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776026761,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776026761\r\n\r\nRight, as far as I know this suggestion would not allow checking for specific error messages, but if I am missing something or you do want another change here just let me know.\r\n\r\n",
      "created_at": "2024-10-02T16:51:39Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784898444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784898444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": 198,
      "original_start_line": 198,
      "start_side": "RIGHT",
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784899977",
      "pull_request_review_id": 2343217508,
      "id": 1784899977,
      "node_id": "PRRC_kwDOABII585qY2mJ",
      "diff_hunk": "@@ -24,6 +24,313 @@ using util::ToString;\n \n BOOST_FIXTURE_TEST_SUITE(argsman_tests, BasicTestingSetup)\n \n+//! Example code showing how to declare and parse options using ArgsManager flags.\n+namespace example_options {\n+struct Address {\n+    std::string host;\n+    uint16_t port;\n+};\n+\n+struct RescanOptions {\n+    std::optional<int> start_height;\n+};\n+\n+struct Options {\n+    //! Whether to use UPnP to map the listening port.\n+    //! Example of a boolean option defaulting to false.\n+    bool enable_upnp{false};\n+\n+    //! Whether to listen for RPC commands.\n+    //! Example of a boolean option defaulting to true.\n+    bool enable_rpc_server{true};\n+\n+    //! Whether to look for peers with DNS lookup.\n+    //! Example of a boolean option without a default value. (If unspecified,\n+    //! default behavior depends on other options.)\n+    std::optional<bool> enable_dns_seed;\n+\n+    //! Amount of time to ban peers\n+    //! Example of a simple integer setting.\n+    std::chrono::seconds bantime{86400};\n+\n+    //! Equivalent bytes per sigop.\n+    //! Example of a where negation should be disallowed.\n+    int bytes_per_sigop{20};\n+\n+    //! Hash of block to assume valid and skip script verification.\n+    //! Example of a simple string option.\n+    std::optional<uint256> assumevalid;\n+\n+    //! Path to log file\n+    //! Example of a simple string option with a default value.\n+    fs::path log_file{\"debug.log\"};\n+\n+    //! Chain name.\n+    //! Example of a simple string option that canoot be negated\n+    ChainType chain{ChainType::MAIN};\n+\n+    //! Paths of block files to load before starting.\n+    //! Example of a simple string list setting.\n+    std::vector<fs::path> load_block;\n+\n+    //! Addresses to listen on.\n+    //! Example of a list setting where negating the setting is different than\n+    //! not specifying it.\n+    std::optional<std::vector<Address>> listen_addresses;\n+};\n+\n+void RegisterArgs(ArgsManager& args)\n+{\n+    args.AddArg(\"-upnp\", \"\",          ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-rpcserver\", \"\",     ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-dnsseed\", \"\",       ArgsManager::ALLOW_BOOL, {});\n+    args.AddArg(\"-bantime\", \"\",       ArgsManager::ALLOW_INT, {});\n+    args.AddArg(\"-bytespersigop\", \"\", ArgsManager::ALLOW_INT | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-assumevalid\", \"\",   ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-logfile\", \"\",       ArgsManager::ALLOW_STRING, {});\n+    args.AddArg(\"-chain\", \"\",         ArgsManager::ALLOW_STRING | ArgsManager::DISALLOW_NEGATION, {});\n+    args.AddArg(\"-loadblock\", \"\",     ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+    args.AddArg(\"-listen\", \"\",        ArgsManager::ALLOW_STRING | ArgsManager::ALLOW_LIST, {});\n+}\n+\n+void ReadOptions(const ArgsManager& args, Options& options)\n+{\n+    if (auto value = args.GetBoolArg(\"-upnp\")) options.enable_upnp = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-rpcserver\")) options.enable_rpc_server = *value;\n+\n+    if (auto value = args.GetBoolArg(\"-dnsseed\")) options.enable_dns_seed = *value;\n+\n+    if (auto value = args.GetIntArg(\"-bantime\")) {\n+        if (*value < 0) throw std::runtime_error(strprintf(\"-bantime value %i is negative\", *value));\n+        options.bantime = std::chrono::seconds{*value};\n+    }\n+\n+    if (auto value = args.GetIntArg(\"-bytespersigop\")) {\n+        if (*value < 1) throw std::runtime_error(strprintf(\"-bytespersigop value %i is less than 1\", *value));\n+        options.bytes_per_sigop = *value;\n+    }\n+\n+    if (auto value = args.GetArg(\"-assumevalid\"); value && !value->empty()) {\n+        if (auto hash{uint256::FromHex(*value)}) {\n+            options.assumevalid = *hash;\n+        } else {\n+            throw std::runtime_error(strprintf(\"-assumevalid value '%s' is not a valid hash\", *value));\n+        }\n+    }\n+\n+    if (auto value = args.GetArg(\"-logfile\")) {\n+        options.log_file = fs::PathFromString(*value);\n+    }\n+\n+    if (auto value = args.GetArg(\"-chain\")) {\n+        if (auto chain_type{ChainTypeFromString(*value)}) {\n+           options.chain = *chain_type;\n+        } else {\n+            throw std::runtime_error(strprintf(\"Invalid chain type '%s'\", *value));\n+        }\n+    }\n+\n+    for (const std::string& value : args.GetArgs(\"-loadblock\")) {\n+        if (value.empty()) throw std::runtime_error(strprintf(\"-loadblock value '%s' is not a valid file path\", value));\n+        options.load_block.push_back(fs::PathFromString(value));\n+    }\n+\n+    if (args.IsArgNegated(\"-listen\")) {\n+        // If -nolisten was passed, disable listening by assigning an empty list\n+        // of listening addresses.\n+        options.listen_addresses.emplace();\n+    } else if (auto addresses{args.GetArgs(\"-listen\")}; !addresses.empty()) {\n+        // If -listen=<addresses> options were passed, explicitly add these as\n+        // listening addresses, otherwise leave listening option unset to enable\n+        // default listening behavior.\n+        options.listen_addresses.emplace();\n+        for (const std::string& value : addresses) {\n+            Address addr{\"\", 8333};\n+            if (!SplitHostPort(value, addr.port, addr.host) || addr.host.empty()) {\n+                throw std::runtime_error(strprintf(\"-listen address '%s' is not a valid host[:port]\", value));\n+            }\n+            options.listen_addresses->emplace_back(std::move(addr));\n+        }\n+    }\n+}\n+\n+//! Return Options::load_block as a human readable string for easier testing.\n+std::string LoadBlockStr(const Options& options)\n+{\n+    std::string ret;\n+    for (const auto& block : options.load_block) {\n+        if (!ret.empty()) ret += \" \";\n+        ret += fs::PathToString(block);\n+    }\n+    return ret;\n+}\n+\n+//! Return Options::listen_addresses as a human readable string for easier\n+//! testing.\n+std::string ListenStr(const Options& options)\n+{\n+    if (!options.listen_addresses) {\n+        // Default listening behavior in this example is just to listen on port\n+        // 8333. In reality, it could be arbitrarily complicated and depend on\n+        // other settings.\n+        return \"0.0.0.0:8333\";\n+    } else {\n+        std::string ret;\n+        for (const auto& addr : *options.listen_addresses) {\n+            if (!ret.empty()) ret += \" \";\n+            ret += strprintf(\"%s:%d\", addr.host, addr.port);\n+        }\n+        return ret;\n+    }\n+}\n+\n+struct TestSetup : public BasicTestingSetup\n+{\n+    Options ParseOptions(const std::vector<std::string>& opts)\n+    {\n+        ArgsManager args;\n+        RegisterArgs(args);\n+        std::vector<const char*> argv{\"ignored\"};\n+        for (const auto& opt : opts) {\n+            argv.push_back(opt.c_str());\n+        }\n+        std::string error;\n+        if (!args.ParseParameters(argv.size(), argv.data(), error)) {\n+            throw std::runtime_error(error);\n+        }\n+        BOOST_CHECK_EQUAL(error, \"\");\n+        Options options;\n+        ReadOptions(args, options);\n+        return options;\n+    }\n+};\n+} // namespace example_options\n+\n+BOOST_FIXTURE_TEST_CASE(ExampleOptions, example_options::TestSetup)\n+{\n+    // Check default upnp value is false\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_upnp, false);\n+    // Check passing -upnp makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp\"}).enable_upnp, true);\n+    // Check passing -upnp=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\"}).enable_upnp, true);\n+    // Check adding -upnp= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-upnp=1\", \"-upnp=\"}).enable_upnp, false);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-upnp=yes\"}), std::exception, HasReason{\"Cannot set -upnp value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default rpcserver value is true.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_rpc_server, true);\n+    // Check passing -norpcserver makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-norpcserver\"}).enable_rpc_server, false);\n+    // Check passing -rpcserver=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\"}).enable_rpc_server, false);\n+    // Check adding -rpcserver= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-rpcserver=0\", \"-rpcserver=\"}).enable_rpc_server, true);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-rpcserver=yes\"}), std::exception, HasReason{\"Cannot set -rpcserver value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default dnsseed value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).enable_dns_seed, std::nullopt);\n+    // Check passing -dnsseed makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed\"}).enable_dns_seed, true);\n+    // Check passing -dnsseed=1 makes it true.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\"}).enable_dns_seed, true);\n+    // Check passing -nodnsseed makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nodnsseed\"}).enable_dns_seed, false);\n+    // Check passing -dnsseed=0 makes it false.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=0\"}).enable_dns_seed, false);\n+    // Check adding -dnsseed= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-dnsseed=1\", \"-dnsseed=\"}).enable_dns_seed, std::nullopt);\n+    // Check passing invalid value.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-dnsseed=yes\"}), std::exception, HasReason{\"Cannot set -dnsseed value to 'yes'. It must be set to 0 or 1.\"});\n+\n+    // Check default bantime value is unset.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bantime.count(), 86400);\n+    // Check passing -bantime=3600 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\"}).bantime.count(), 3600);\n+    // Check passing -nobantime makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-nobantime\"}).bantime.count(), 0);\n+    // Check passing -bantime=0 makes it 0.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=0\"}).bantime.count(), 0);\n+    // Check adding -bantime= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bantime=3600\", \"-bantime=\"}).bantime.count(), 86400);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime\"}), std::exception, HasReason{\"Cannot set -bantime with no value. Please specify value with -bantime=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=abc\"}), std::exception, HasReason{\"Cannot set -bantime value to 'abc'. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bantime=-1000\"}), std::exception, HasReason{\"-bantime value -1000 is negative\"});\n+\n+    // Check default bytespersigop value.\n+    BOOST_CHECK_EQUAL(ParseOptions({}).bytes_per_sigop, 20);\n+    // Check passing -bytespersigop=30 overrides it.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\"}).bytes_per_sigop, 30);\n+    // Check adding -bytespersigop= sets it back to default.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-bytespersigop=30\", \"-bytespersigop=\"}).bytes_per_sigop, 20);\n+    // Check passing invalid values.\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop\"}), std::exception, HasReason{\"Cannot set -bytespersigop with no value. Please specify value with -bytespersigop=value. It must be set to an integer.\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-nobytespersigop\"}), std::exception, HasReason{\"Negating of -bytespersigop is meaningless and therefore forbidden\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=0\"}), std::exception, HasReason{\"-bytespersigop value 0 is less than 1\"});\n+    BOOST_CHECK_EXCEPTION(ParseOptions({\"-bytespersigop=abc\"}), std::exception, HasReason{\"Cannot set -bytespersigop value to 'abc'. It must be set to an integer.\"});\n+\n+    // Check default assumevalid value is unset.\n+    BOOST_CHECK(!ParseOptions({}).assumevalid);\n+    // Check passing -assumevalid=<hash> makes it set that hash.\n+    BOOST_CHECK_EQUAL(ParseOptions({\"-assumevalid=0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\"}).assumevalid.value().ToString(), \"0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff\");",
      "path": "src/test/argsman_tests.cpp",
      "position": 1,
      "original_position": 256,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776028495,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1776028495\r\n\r\nThanks, applied suggestion",
      "created_at": "2024-10-02T16:52:38Z",
      "updated_at": "2024-10-02T17:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784899977",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784899977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784969353",
      "pull_request_review_id": 2343661161,
      "id": 1784969353,
      "node_id": "PRRC_kwDOABII585qZHiJ",
      "diff_hunk": "@@ -46,7 +46,11 @@ FUZZ_TARGET(system, .init = initialize_system)\n             [&] {\n                 auto str_arg = fuzzed_data_provider.ConsumeRandomLengthString(16);\n                 auto str_value = fuzzed_data_provider.ConsumeRandomLengthString(16);\n-                args_manager.SoftSetArg(str_arg, str_value);\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(str_arg, str_value);\n+                } catch (const std::logic_error&) {\n+                }",
      "path": "src/test/fuzz/system.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776031435,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we at least make absolutely sure we're only catching allowed exceptions (either by type or message) and not something unexpected bubbling up?",
      "created_at": "2024-10-02T17:51:02Z",
      "updated_at": "2024-10-02T17:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784969353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784969353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784970051",
      "pull_request_review_id": 2343662295,
      "id": 1784970051,
      "node_id": "PRRC_kwDOABII585qZHtD",
      "diff_hunk": "@@ -68,6 +76,11 @@ FUZZ_TARGET(system, .init = initialize_system)\n                 }\n                 auto help = fuzzed_data_provider.ConsumeRandomLengthString(16);\n                 auto flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND;\n+                // Avoid hitting \"ALLOW_INT flag is incompatible with ALLOW_STRING\", etc exceptions\n+                if (flags & ArgsManager::ALLOW_ANY) flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);",
      "path": "src/test/fuzz/system.cpp",
      "position": 33,
      "original_position": 31,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776031755,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I mean, you've already extracted a `IsTypedArg(flags)` method for `ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING`, right?",
      "created_at": "2024-10-02T17:51:41Z",
      "updated_at": "2024-10-02T17:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784970051",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784970051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784970693",
      "pull_request_review_id": 2343663317,
      "id": 1784970693,
      "node_id": "PRRC_kwDOABII585qZH3F",
      "diff_hunk": "@@ -259,6 +259,10 @@ inline std::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\n     return v ? os << *v\n              : os << \"std::nullopt\";\n }\n+inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776032308,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see you went the other way - I'm fine with that as well, it's more verbose, but at least consistent",
      "created_at": "2024-10-02T17:52:15Z",
      "updated_at": "2024-10-02T17:52:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784970693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784970693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 262,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784970850",
      "pull_request_review_id": 2343663627,
      "id": 1784970850,
      "node_id": "PRRC_kwDOABII585qZH5i",
      "diff_hunk": "@@ -580,6 +672,24 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    // Disallow flag combinations that would result in nonsensical behavior or a bad UX.\n+    if ((flags & ALLOW_ANY) && (flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING))) {",
      "path": "src/common/args.cpp",
      "position": 277,
      "original_position": 270,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776023938,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "* We could still use the`IsTypedArg(flags)` on this line\r\n* Eventually we will hopefully migrate away from flags, I would personally prefer we encapsulate them early",
      "created_at": "2024-10-02T17:52:26Z",
      "updated_at": "2024-10-02T17:52:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784970850",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784970850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 680,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784970987",
      "pull_request_review_id": 2343663848,
      "id": 1784970987,
      "node_id": "PRRC_kwDOABII585qZH7r",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;\n+        if ((flags & ArgsManager::ALLOW_INT) && ParseInt64(*value, &parsed_int)) return parsed_int;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"0\") return false;\n+        if ((flags & ArgsManager::ALLOW_BOOL) && *value == \"1\") return true;\n+        error = strprintf(\"Cannot set -%s value to '%s'.\", key.name, *value);\n+    } else {\n+        if (flags & ArgsManager::ALLOW_BOOL) return true;\n+        if (!(flags & ArgsManager::DISALLOW_ELISION) && !IsTypedArg(flags)) return \"\";\n+        error = strprintf(\"Cannot set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n+    }\n+    if (flags & ArgsManager::ALLOW_STRING) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to a string.\");\n+    } else if (flags & ArgsManager::ALLOW_INT) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to an integer.\");\n+    } else if (flags & ArgsManager::ALLOW_BOOL) {\n+        error = strprintf(\"%s %s\", error, \"It must be set to 0 or 1.\");\n+    }",
      "path": "src/common/args.cpp",
      "position": 1,
      "original_position": 84,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776018821,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree, it was an alternative, both are fine",
      "created_at": "2024-10-02T17:52:34Z",
      "updated_at": "2024-10-02T17:52:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784970987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784970987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 177,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784971122",
      "pull_request_review_id": 2343664038,
      "id": 1784971122,
      "node_id": "PRRC_kwDOABII585qZH9y",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;",
      "path": "src/common/args.cpp",
      "position": 71,
      "original_position": 68,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776017230,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Your criticism is reasonable, do you see a clearer way of breaking up this method?\r\nCurrently I need to know too much about the possible states on a single level, would prefer excluding some states while I'm reviewing.",
      "created_at": "2024-10-02T17:52:41Z",
      "updated_at": "2024-10-02T17:52:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784971122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784971122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784971346",
      "pull_request_review_id": 2343664405,
      "id": 1784971346,
      "node_id": "PRRC_kwDOABII585qZIBS",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);",
      "path": "src/common/args.cpp",
      "position": 62,
      "original_position": 58,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776007657,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for considering",
      "created_at": "2024-10-02T17:52:53Z",
      "updated_at": "2024-10-02T17:52:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784971346",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784971346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784971572",
      "pull_request_review_id": 2343664777,
      "id": 1784971572,
      "node_id": "PRRC_kwDOABII585qZIE0",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {",
      "path": "src/common/args.cpp",
      "position": 54,
      "original_position": 50,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1775897208,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The change seems small, since we're already converting an optional variable into a pointer parameter (seems simpler to just pass it along) - but of course will leave it up to you, just want to make sure we're on the same page here.",
      "created_at": "2024-10-02T17:53:06Z",
      "updated_at": "2024-10-02T17:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784971572",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1784971572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785146799",
      "pull_request_review_id": 2343943766,
      "id": 1785146799,
      "node_id": "PRRC_kwDOABII585qZy2v",
      "diff_hunk": "@@ -259,6 +259,10 @@ inline std::ostream& operator<<(std::ostream& os, const std::optional<T>& v)\n     return v ? os << *v\n              : os << \"std::nullopt\";\n }\n+inline std::ostream& operator<<(std::ostream& os, const std::nullopt_t)",
      "path": "src/test/util/setup_common.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776032308,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also note that `BOOST_CHECK()` is deprecated for unclear reasons: https://github.com/boostorg/test/blob/develop/include/boost/test/tools/interface.hpp#L273-L276 ([Commit](https://github.com/boostorg/test/commit/bae8de14b4b54481c5bd77e19befe9ebec2b9936#diff-fcba8b2de1aa5e32c7d0b3556513209f9791d2a149f546d7b8822a79b02562a4))",
      "created_at": "2024-10-02T19:52:12Z",
      "updated_at": "2024-10-02T19:52:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1785146799",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785146799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 262,
      "original_line": 262,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1876674173",
      "pull_request_review_id": 2489945399,
      "id": 1876674173,
      "node_id": "PRRC_kwDOABII585v28Z9",
      "diff_hunk": "@@ -113,18 +145,77 @@ std::optional<common::SettingsValue> InterpretValue(const KeyInfo& key, const st\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n+        if (IsTypedArg(flags)) {\n+            // If argument is typed, only allow negation with no value or with\n+            // literal \"1\" value. Avoid calling InterpretBool and accepting\n+            // other values which could be ambiguous.\n+            if (value && *value != \"1\") {\n+                error = strprintf(\"Cannot negate -%s at the same time as setting a value ('%s').\", key.name, *value);\n+                return std::nullopt;\n+            }\n+            return false;\n+        }\n         // Double negatives like -nofoo=0 are supported (but discouraged)\n         if (value && !InterpretBool(*value)) {\n             LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n             return true;\n         }\n         return false;\n     }\n-    if (!value && (flags & ArgsManager::DISALLOW_ELISION)) {\n-        error = strprintf(\"Can not set -%s with no value. Please specify value with -%s=value.\", key.name, key.name);\n-        return std::nullopt;\n+    if (value) {\n+        int64_t parsed_int;\n+        if ((flags & ArgsManager::ALLOW_STRING) || !IsTypedArg(flags) || value->empty()) return *value;",
      "path": "src/common/args.cpp",
      "position": 71,
      "original_position": 68,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776017230,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784971122\r\n\r\n> Currently I need to know too much about the possible states on a single level, would prefer excluding some states while I'm reviewing.\r\n\r\nI think a good strategy is to review the function twice. Review it one time assuming the argument is typed, and another time assuming the argument is untyped, and make sure behavior makes sense in both cases. This approach should also make it easier to see that there aren't unnecessary inconsistencies between the two cases, since there aren't two functions that need to be compared.\r\n\r\nAlso, I expect this function to get simpler if #31260 is merged first and this is rebased on top. The int/string/bool parsing logic currently here should move into the SettingTraits classes introduced in that PR.",
      "created_at": "2024-12-09T19:59:53Z",
      "updated_at": "2024-12-09T20:28:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1876674173",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1876674173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1876677972",
      "pull_request_review_id": 2489945399,
      "id": 1876677972,
      "node_id": "PRRC_kwDOABII585v29VU",
      "diff_hunk": "@@ -580,6 +672,24 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    // Disallow flag combinations that would result in nonsensical behavior or a bad UX.\n+    if ((flags & ALLOW_ANY) && (flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING))) {",
      "path": "src/common/args.cpp",
      "position": 277,
      "original_position": 270,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776023938,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784970850\r\n\r\nI wouldn't really consider this encapsulating. It is adding a level of indirection and changing syntax used to access flags without reducing the need for callers to know everything about them. #31260 adds a better way of specifying types without flags so that could be a way forward here.",
      "created_at": "2024-12-09T20:00:52Z",
      "updated_at": "2024-12-09T20:28:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1876677972",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1876677972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 680,
      "original_line": 680,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1876703710",
      "pull_request_review_id": 2489945399,
      "id": 1876703710,
      "node_id": "PRRC_kwDOABII585v3Dne",
      "diff_hunk": "@@ -68,6 +76,11 @@ FUZZ_TARGET(system, .init = initialize_system)\n                 }\n                 auto help = fuzzed_data_provider.ConsumeRandomLengthString(16);\n                 auto flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND;\n+                // Avoid hitting \"ALLOW_INT flag is incompatible with ALLOW_STRING\", etc exceptions\n+                if (flags & ArgsManager::ALLOW_ANY) flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);",
      "path": "src/test/fuzz/system.cpp",
      "position": 33,
      "original_position": 31,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776031755,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784970051\r\n\r\n> I mean, you've already extracted a `IsTypedArg(flags)` method for `ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING`, right?\r\n\r\nIsTypedArg is used in higher level code to determine if type checking and coercion should be done. I think that code is easier to understand if the distinction between typed and untyped arguments is explicit and it is not dealing with individual flags.\r\n\r\nBy contrast, this code is low level fuzz code directly dealing with interactions between the flags, and I think it is clearer if it can reference them directly.",
      "created_at": "2024-12-09T20:19:45Z",
      "updated_at": "2024-12-09T20:28:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1876703710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1876703710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1876704713",
      "pull_request_review_id": 2489945399,
      "id": 1876704713,
      "node_id": "PRRC_kwDOABII585v3D3J",
      "diff_hunk": "@@ -46,7 +46,11 @@ FUZZ_TARGET(system, .init = initialize_system)\n             [&] {\n                 auto str_arg = fuzzed_data_provider.ConsumeRandomLengthString(16);\n                 auto str_value = fuzzed_data_provider.ConsumeRandomLengthString(16);\n-                args_manager.SoftSetArg(str_arg, str_value);\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(str_arg, str_value);\n+                } catch (const std::logic_error&) {\n+                }",
      "path": "src/test/fuzz/system.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "4090dcf6cfda2e21b7a7323de0e0499092ea900c",
      "original_commit_id": "5a945600451037693a032e6df94f99a666dd581f",
      "in_reply_to_id": 1776031435,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1784969353\r\n\r\n> Can we at least make absolutely sure we're only catching allowed exceptions (either by type or message) and not something unexpected bubbling up?\r\n\r\nYes, added checks. I don't think most existing fuzz tests are so strict about what exceptions are thrown when they are expecting exceptions. But I understand being more strict could potentially catch more bugs and make fuzz tests easier to understand even if it adds some maintenance burden.\r\n",
      "created_at": "2024-12-09T20:20:42Z",
      "updated_at": "2024-12-09T20:28:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r1876704713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1876704713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
        }
      },
      "start_line": null,
      "original_start_line": 50,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    }
  ]
}
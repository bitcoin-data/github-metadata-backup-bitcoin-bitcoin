{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579",
    "id": 2534470522,
    "node_id": "PR_kwDOABII586XEPN6",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32579",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32579.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32579.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
    "number": 32579,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "p2p: Correct unrealistic headerssync unit test behavior",
    "user": {
      "login": "hodlinator",
      "id": 172445034,
      "node_id": "U_kgDOCkdNag",
      "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hodlinator",
      "html_url": "https://github.com/hodlinator",
      "followers_url": "https://api.github.com/users/hodlinator/followers",
      "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
      "organizations_url": "https://api.github.com/users/hodlinator/orgs",
      "repos_url": "https://api.github.com/users/hodlinator/repos",
      "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hodlinator/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "### Background\r\n\r\nAs part of the release process we often run *contrib/devtools/headerssync-params.py* and increase the values of the constants `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` in *src/headerssync.cpp* as per *doc/release-process.md* (example: 11a2d3a63e90cdc1920ede3c67d52a9c72860e6b). This helps fine tune the memory consumption per `HeadersSyncState`-instance in the face of malicious peers.\r\n\r\n(The `REDOWNLOAD_BUFFER_SIZE`/`HEADER_COMMITMENT_PERIOD` ratio determines how many Headers Sync commitment bits must match between PRESYNC & REDOWNLOAD phases before we start permanently storing headers from a peer. For more details see comments in *src/headerssync.h* and *contrib/devtools/headerssync-params.py*).\r\n\r\n\r\n### Problem: Not feeding back headers until completing sync\r\n\r\nDuring v30 release process #33274 made `REDOWNLOAD_BUFFER_SIZE` exceed the `target_blocks` constant used to control the length of chains generated for testing Headers Sync (`15000`, *headers_sync_chainwork_tests.cpp*).\r\n\r\nThe `HeadersSyncState::m_redownloaded_headers`-buffer now does not reach the `REDOWNLOAD_BUFFER_SIZE`-threshold during those unit tests. As a consequence `HeadersSyncState::PopHeadersReadyForAcceptance()` will not start feeding back headers until the PoW threshold has been met. While this will not cause the unit test to start failing on master, it means we have gone from testing behavior that resembles mainnet (way more than `REDOWNLOAD_BUFFER_SIZE` headers to reach the PoW limit), to behavior that is not possible/expected there.\r\n\r\n\r\n### Solution\r\n\r\nAvoid testing this unrealistic condition of completing Headers Sync before reaching `REDOWNLOAD_BUFFER_SIZE` by making tests able to define their own values through the new `HeadersSyncParams` instead of having them hard-coded for all chains & tests.\r\n\r\n\r\n### Commits\r\n\r\n* First 6 commits refactor and improve the unit tests in order to clarify latter changes.\r\n* We then add checks for the behavior around the `REDOWNLOAD_BUFFER_SIZE` threshold.\r\n* The main change: we extract the section from *headerssync.cpp* containing the constants to *kernel/chainparams.cpp*, making `HeadersSyncState` no longer hard-coded to mainnet.\r\n\r\n\r\n### Notes\r\n\r\nThis PR used to be called \"headerssync: Preempt unrealistic unit test behavior\".",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2025-05-21T13:48:16Z",
    "updated_at": "2025-10-23T10:20:00Z",
    "closed_at": "2025-10-23T10:20:00Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2025-10-23T10:20:00Z",
    "merged_by": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "161864a038ea345968bec8850caa8dbccae8ae69",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "hodlinator:2025/05/headerssync_params",
      "ref": "2025/05/headerssync_params",
      "sha": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 813856282,
        "node_id": "R_kgDOMIJ2Gg",
        "name": "bitcoin",
        "full_name": "hodlinator/bitcoin",
        "owner": {
          "login": "hodlinator",
          "id": 172445034,
          "node_id": "U_kgDOCkdNag",
          "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hodlinator",
          "html_url": "https://github.com/hodlinator",
          "followers_url": "https://api.github.com/users/hodlinator/followers",
          "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
          "organizations_url": "https://api.github.com/users/hodlinator/orgs",
          "repos_url": "https://api.github.com/users/hodlinator/repos",
          "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/hodlinator/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/hodlinator/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/hodlinator/bitcoin",
        "archive_url": "https://api.github.com/repos/hodlinator/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/hodlinator/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/hodlinator/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/hodlinator/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/hodlinator/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/hodlinator/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/hodlinator/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/hodlinator/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/hodlinator/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/hodlinator/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/hodlinator/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/hodlinator/bitcoin/events",
        "forks_url": "https://api.github.com/repos/hodlinator/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/hodlinator/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/hodlinator/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/hodlinator/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/hodlinator/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/hodlinator/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/hodlinator/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/hodlinator/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/hodlinator/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/hodlinator/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/hodlinator/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/hodlinator/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/hodlinator/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:hodlinator/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/hodlinator/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/hodlinator/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/hodlinator/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/hodlinator/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/hodlinator/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/hodlinator/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/hodlinator/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/hodlinator/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/hodlinator/bitcoin/hooks",
        "svn_url": "https://github.com/hodlinator/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 252479,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-22T21:54:32Z",
        "created_at": "2024-06-11T22:00:51Z",
        "updated_at": "2025-09-09T13:03:15Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d20f10affba83601f1855bc87d0f47e9dfd5caae",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38073,
        "stargazers_count": 86368,
        "watchers_count": 86368,
        "size": 295141,
        "default_branch": "master",
        "open_issues_count": 745,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-23T10:19:58Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-23T10:30:59Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 293,
    "deletions": 137,
    "changed_files": 11,
    "commits": 8,
    "review_comments": 205,
    "comments": 19
  },
  "events": [
    {
      "event": "commented",
      "id": 2898039292,
      "node_id": "IC_kwDOABII586svJH8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2898039292",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T13:48:19Z",
      "updated_at": "2025-10-20T17:36:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32579.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3290253231), [marcofleon](https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3230419017), [danielabrozzoni](https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3295765688) |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2921899092), [jonatack](https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2931826727) |\n| Stale ACK | [davidgumberg](https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3208186878), [sipa](https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3202085490) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32740](https://github.com/bitcoin/bitcoin/pull/32740) (refactor: Header sync optimisations & simplifications by danielabrozzoni)\n* [#31974](https://github.com/bitcoin/bitcoin/pull/31974) (Drop testnet3 by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2898039292",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17754814597,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAQiRPiF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17754814597",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "created_at": "2025-05-21T14:14:33Z"
    },
    {
      "event": "labeled",
      "id": 17754823710,
      "node_id": "LE_lADOABII5863mcpzzwAAAAQiRRwe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17754823710",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T14:15:02Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2898132507,
      "node_id": "IC_kwDOABII586svf4b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2898132507",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T14:15:04Z",
      "updated_at": "2025-05-21T14:15:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/42636718296</sub>\n<sub>LLM reason (✨ experimental): The CI failure is due to a missing include guard in the `src/headerssync-params.h` file, as reported by the lint checks.\n</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2898132507",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "unlabeled",
      "id": 17759263704,
      "node_id": "UNLE_lADOABII5863mcpzzwAAAAQiiNvY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17759263704",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T18:49:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 17795020980,
      "node_id": "UE_lADOABII5863mcpzzwAAAAQkqni0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17795020980",
      "actor": {
        "login": "deehochberg",
        "id": 185879065,
        "node_id": "U_kgDOCxRKGQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/185879065?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deehochberg",
        "html_url": "https://github.com/deehochberg",
        "followers_url": "https://api.github.com/users/deehochberg/followers",
        "following_url": "https://api.github.com/users/deehochberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deehochberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deehochberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deehochberg/subscriptions",
        "organizations_url": "https://api.github.com/users/deehochberg/orgs",
        "repos_url": "https://api.github.com/users/deehochberg/repos",
        "events_url": "https://api.github.com/users/deehochberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deehochberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T18:59:28Z"
    },
    {
      "event": "reviewed",
      "id": 2857912770,
      "node_id": "PRR_kwDOABII586qWEnC",
      "url": null,
      "actor": null,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-05-27T11:35:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK – this PR replaces the imminently outdated hard-coded test target of 15'000 headers with a value derived from the live `REDOWNLOAD_BUFFER_SIZE` constant.\r\nMoving both header-sync tuning constants into a shared header, and making the unit test reference them, keeps the test exercising the 'buffer-full' path as the parameters grow each release.\r\n\r\nRecommendations:\r\n* split the series into more commits, separating low-risk refactors from ones that change behaviour: strict move-only; refactor / cleanup with no behavioural change; extra assertions; wiring the test to the new parameter header;\r\n* in the test file, wrap each independent `ProcessNextHeaders` call inside `{}` blocks and use structured bindings so temporary variables aren’t reused accidentally;\r\n* rename the new file to `headerssync_params.h` (underscore instead of `-`) for consistency with other similar headers;\r\n* update `contrib/devtools/README.md` to reference the header instead of the .cpp;\r\n* Tweak a few comments whose wording is unclear or slightly misleading.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2857912770",
      "submitted_at": "2025-05-27T11:35:26Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "commented",
      "id": 2921899092,
      "node_id": "IC_kwDOABII586uKKRU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2921899092",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T10:09:35Z",
      "updated_at": "2025-05-30T10:09:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2921899092",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17891371614,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAQqaKpe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17891371614",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "486e8caab01c5a129f0269d846fa4b7191afd389",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/486e8caab01c5a129f0269d846fa4b7191afd389",
      "created_at": "2025-05-30T20:35:03Z"
    },
    {
      "event": "reviewed",
      "id": 2881152192,
      "node_id": "PRR_kwDOABII586ruuTA",
      "url": null,
      "actor": null,
      "commit_id": "486e8caab01c5a129f0269d846fa4b7191afd389",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-05-30T20:37:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your feedback so far @l0rinc! Took most of your suggestions (https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2857912770).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2881152192",
      "submitted_at": "2025-05-30T20:37:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17892103990,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAQqc9c2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17892103990",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/bbe5609b84211c49a522da9dd5d987ab454ef912",
      "created_at": "2025-05-30T21:40:29Z"
    },
    {
      "event": "commented",
      "id": 2931826727,
      "node_id": "IC_kwDOABII586uwCAn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2931826727",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T17:55:54Z",
      "updated_at": "2025-06-02T17:55:54Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2931826727",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "reviewed",
      "id": 2889669324,
      "node_id": "PRR_kwDOABII586sPNrM",
      "url": null,
      "actor": null,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-02T21:46:51Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2889669324",
      "submitted_at": "2025-06-02T21:46:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17983263917,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAQv4tSt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17983263917",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/42e746096b93b8026569817d8925750089d6daf4",
      "created_at": "2025-06-04T14:35:13Z"
    },
    {
      "event": "reviewed",
      "id": 2896798619,
      "node_id": "PRR_kwDOABII586sqaOb",
      "url": null,
      "actor": null,
      "commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-04T14:49:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Latest push (42e746096b93b8026569817d8925750089d6daf4, [compare](https://github.com/bitcoin/bitcoin/compare/bbe5609b84211c49a522da9dd5d987ab454ef912..42e746096b93b8026569817d8925750089d6daf4)):\r\n* Relaxes the hardcoding of the header commitment period and the redownload buffer size in `HeadersSyncState`.\r\n  - This makes things more consistent with the constructor already taking `Consensus::Params` (implying different chains are supported).\r\n  - Moves specification of the above constants from the top of *headerssync.cpp* into *kernel/chainparams.cpp* (similar to many other constants).\r\n  - Returns the chainwork test suite back to only using an integer literal for `TARGET_BLOCKS` (instead of depending on an #included constant). Also now uses test-local values for commitment period and redownload buffer size.\r\n* Adds a warning in `HeadersSyncState::PopHeadersReadyForAcceptance()` for the case when we reach minimum PoW before exceeding the redownload buffer size together with tests.\r\n\r\n(Updated PR description).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2896798619",
      "submitted_at": "2025-06-04T14:39:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "renamed",
      "id": 17987534715,
      "node_id": "RTE_lADOABII5863mcpzzwAAAAQwI_97",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17987534715",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-04T18:57:31Z",
      "rename": {
        "from": "headerssync: Keep tests ahead of increasing params",
        "to": "headerssync: Preempt unrealistic unit test behavior"
      }
    },
    {
      "event": "reviewed",
      "id": 2935575232,
      "node_id": "PRR_kwDOABII586u-VLA",
      "url": null,
      "actor": null,
      "commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-23T18:57:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "I might have gone a bit overboard with the test review, but I think we can make it a lot less noisy - here's the patch of many of my suggestions for convenience:\r\n\r\n<details>\r\n<summary>Patch</summary>\r\n\r\n```patch\r\ndiff --git a/src/kernel/chainparams.cpp b/src/kernel/chainparams.cpp\r\nindex d64dd43aba..658ea7f2c3 100644\r\n--- a/src/kernel/chainparams.cpp\r\n+++ b/src/kernel/chainparams.cpp\r\n@@ -193,8 +193,7 @@ public:\r\n         // Generated by headerssync-params.py on 2025-03-04.\r\n         m_headers_sync_params = HeadersSyncParams{\r\n             .commitment_period = 624,\r\n-            .redownload_buffer_size = 14827, // 14827/624 = ~23.8 commitments\r\n-        };\r\n+            .redownload_buffer_size = 14827}; // ~24 commitments\r\n     }\r\n };\r\n \r\ndiff --git a/src/test/headers_sync_chainwork_tests.cpp b/src/test/headers_sync_chainwork_tests.cpp\r\nindex 1f85c69838..ccbbc1be50 100644\r\n--- a/src/test/headers_sync_chainwork_tests.cpp\r\n+++ b/src/test/headers_sync_chainwork_tests.cpp\r\n@@ -13,10 +13,13 @@\r\n #include <validation.h>\r\n \r\n #include <cstddef>\r\n+#include <optional>\r\n #include <vector>\r\n \r\n #include <boost/test/unit_test.hpp>\r\n \r\n+using State = HeadersSyncState::State;\r\n+\r\n constexpr size_t TARGET_BLOCKS{15'000};\r\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\r\n constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\r\n@@ -37,18 +40,18 @@ static void FindProofOfWork(CBlockHeader& starting_header)\r\n  * prev_time, and with a fixed merkle root hash.\r\n  */\r\n static void GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n-        const uint256& merkle_root, const uint32_t nBits)\r\n+                            size_t count, const uint256& starting_hash, int nVersion, int prev_time,\r\n+                            const uint256& merkle_root, uint32_t nBits)\r\n {\r\n-    uint256 prev_hash = starting_hash;\r\n+    uint256 prev_hash{starting_hash};\r\n \r\n     while (headers.size() < count) {\r\n         headers.emplace_back();\r\n-        CBlockHeader& next_header = headers.back();\r\n+        CBlockHeader& next_header{headers.back()};\r\n         next_header.nVersion = nVersion;\r\n         next_header.hashPrevBlock = prev_hash;\r\n         next_header.hashMerkleRoot = merkle_root;\r\n-        next_header.nTime = prev_time+1;\r\n+        next_header.nTime = prev_time + 1;\r\n         next_header.nBits = nBits;\r\n \r\n         FindProofOfWork(next_header);\r\n@@ -57,220 +60,167 @@ static void GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n     }\r\n }\r\n \r\n-static HeadersSyncState CreateState(const CBlockIndex* chain_start, const CChainParams& chain_params)\r\n+static HeadersSyncState CreateState(const CChainParams& chain_params, const HeadersSyncParams& sync_params, const CBlockIndex* chain_start)\r\n {\r\n     return {/*id=*/0,\r\n             chain_params.GetConsensus(),\r\n-            HeadersSyncParams{\r\n-                .commitment_period = COMMITMENT_PERIOD,\r\n-                .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\r\n-            },\r\n+            sync_params,\r\n             chain_start,\r\n-            /*minimum_required_work=*/CHAIN_WORK};\r\n+           /*minimum_required_work=*/CHAIN_WORK};\r\n }\r\n \r\n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\r\n-\r\n-// In this test, we construct two sets of headers from genesis, one with\r\n-// sufficient proof of work and one without.\r\n-// 1. We deliver the first set of headers and verify that the headers sync state\r\n-//    updates to the REDOWNLOAD phase successfully.\r\n-// 2. Then we deliver the second set of headers and verify that they fail\r\n-//    processing (presumably due to commitments not matching).\r\n-static void SneakyRedownload(const CBlockIndex* chain_start,\r\n-        const std::vector<CBlockHeader>& first_chain,\r\n-        const std::vector<CBlockHeader>& second_chain);\r\n-// 3. Verify that repeating with the first set of headers in both phases is\r\n-//    successful.\r\n-static void HappyPath(const CBlockIndex* chain_start,\r\n-        const std::vector<CBlockHeader>& first_chain);\r\n-// 4. Finally, repeat the second set of headers in both phases to demonstrate\r\n-//    behavior when the chain a peer provides has too little work.\r\n-static void TooLittleWork(const CBlockIndex* chain_start,\r\n-        const std::vector<CBlockHeader>& second_chain);\r\n-\r\n-static void TooBigBuffer(const CBlockIndex* chain_start,\r\n-        const std::vector<CBlockHeader>& first_chain);\r\n-\r\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n+// Standard set of checks common to all scenarios; macro keeps failure lines at the call-site.\r\n+#define CHECK_RESULT(res, state, exp_state, exp_success, exp_request_more, exp_headers_size) \\\r\n+    do {                                                                                     \\\r\n+        const auto& [res_headers, res_success, res_request_more]{res};                       \\\r\n+        BOOST_REQUIRE_EQUAL(state.GetState(), exp_state);                                    \\\r\n+        BOOST_CHECK_EQUAL(res_headers.size(), exp_headers_size);                             \\\r\n+        BOOST_CHECK_EQUAL(res_success, exp_success);                                         \\\r\n+        BOOST_CHECK_EQUAL(res_request_more, exp_request_more);                               \\\r\n+    } while (false)\r\n+\r\n+// Deliver the first set of headers from genesis to reach REDOWNLOAD,\r\n+// then deliver the second set and verify that commitments don’t match.\r\n+static void SneakyRedownload(const CBlockIndex* chain_start, const std::vector<CBlockHeader>& chain1, const std::vector<CBlockHeader>& chain2)\r\n {\r\n-    std::vector<CBlockHeader> first_chain;\r\n-    std::vector<CBlockHeader> second_chain;\r\n-\r\n-    const auto genesis{Params().GenesisBlock()};\r\n-\r\n-    // Generate headers for two different chains (using differing merkle roots\r\n-    // to ensure the headers are different).\r\n-    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\r\n-                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\r\n-    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\r\n-                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\r\n-\r\n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\r\n+    HeadersSyncState state{CreateState(Params(), HeadersSyncParams{COMMITMENT_PERIOD, REDOWNLOAD_BUFFER_SIZE}, chain_start)};\r\n+    const auto genesis_hash{Params().GenesisBlock().GetHash()};\r\n \r\n-    SneakyRedownload(chain_start, first_chain, second_chain);\r\n-    HappyPath(chain_start, first_chain);\r\n-    TooLittleWork(chain_start, second_chain);\r\n-    TooBigBuffer(chain_start, first_chain);\r\n+    const std::span headers{chain1};\r\n+    CHECK_RESULT(state.ProcessNextHeaders(headers.first(1), /*full_headers_message=*/true),\r\n+                 state, State::PRESYNC,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/true,\r\n+                 /*exp_headers_size=*/0);\r\n+    BOOST_CHECK_EQUAL(state.NextHeadersRequestLocator().vHave.front(), chain1.front().GetHash());\r\n+\r\n+    // Pretend the message is still \"full\", so we don't abort.\r\n+    // This chain should look valid, and we should have met the proof-of-work\r\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\r\n+    CHECK_RESULT(state.ProcessNextHeaders(headers.last(headers.size() - 1), /*full_headers_message=*/true),\r\n+                 state, State::REDOWNLOAD,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/true,\r\n+                 /*exp_headers_size=*/0);\r\n+    BOOST_CHECK_EQUAL(state.NextHeadersRequestLocator().vHave.front(), genesis_hash);\r\n+\r\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\r\n+    CHECK_RESULT(state.ProcessNextHeaders(chain2, /*full_headers_message=*/true),\r\n+                 state, State::FINAL,\r\n+                 /*exp_success=*/false,\r\n+                 /*exp_request_more=*/false,\r\n+                 /*exp_headers_size=*/0);\r\n }\r\n \r\n-static void SneakyRedownload(const CBlockIndex* chain_start,\r\n-        const std::vector<CBlockHeader>& first_chain,\r\n-        const std::vector<CBlockHeader>& second_chain)\r\n+// Verify that repeating with the first set of headers in both phases is successful.\r\n+static void HappyPath(const CBlockIndex* chain_start, const std::vector<CBlockHeader>& chain1)\r\n {\r\n-    // Feed the first chain to HeadersSyncState, by delivering 1 header\r\n-    // initially and then the rest.\r\n-    HeadersSyncState hss{CreateState(chain_start, Params())};\r\n-    {\r\n-        // Just feed one header and check state.\r\n-        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n-        BOOST_CHECK(result.success);\r\n-        BOOST_CHECK(result.request_more);\r\n-        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\r\n-    }\r\n-\r\n-    {\r\n-        // Pretend the message is still \"full\", so we don't abort.\r\n-        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\r\n-        // This chain should look valid, and we should have met the proof-of-work\r\n-        // requirement during PRESYNC and transitioned to REDOWNLOAD.\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-        BOOST_CHECK(result.success);\r\n-        BOOST_CHECK(result.request_more);\r\n-        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-        // The locator should reset to genesis.\r\n-        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n-    }\r\n+    // Feed the first chain twice.\r\n+    HeadersSyncState state{CreateState(Params(), HeadersSyncParams{COMMITMENT_PERIOD, REDOWNLOAD_BUFFER_SIZE}, chain_start)};\r\n+    const auto genesis_hash{Params().GenesisBlock().GetHash()};\r\n+    const std::span headers{chain1};\r\n \r\n-    {\r\n-        // Try to sneakily feed back the second chain during REDOWNLOAD.\r\n-        auto result{hss.ProcessNextHeaders(second_chain, true)};\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-        BOOST_CHECK(!result.success); // Foiled! We detected mismatching headers.\r\n-        BOOST_CHECK(!result.request_more);\r\n-        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    }\r\n+    // During normal operation we shouldn't get the redownload buffer size warning.\r\n+    ASSERT_NO_DEBUG_LOG(BUFFER_SIZE_WARNING);\r\n+\r\n+    // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\r\n+    CHECK_RESULT(state.ProcessNextHeaders(headers, /*full_headers_message=*/true),\r\n+                 state, State::REDOWNLOAD,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/true,\r\n+                 /*exp_headers_size=*/0);\r\n+    BOOST_CHECK_EQUAL(state.NextHeadersRequestLocator().vHave.front(), genesis_hash);\r\n+\r\n+    // Process only so that the internal threshold isn't met, meaning validated headers shouldn't be returned yet:\r\n+    CHECK_RESULT(state.ProcessNextHeaders(headers.first(REDOWNLOAD_BUFFER_SIZE), /*full_headers_message=*/true),\r\n+                 state, State::REDOWNLOAD,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/true,\r\n+                 /*exp_headers_size=*/0);\r\n+    BOOST_CHECK_EQUAL(state.NextHeadersRequestLocator().vHave.front(), chain1[REDOWNLOAD_BUFFER_SIZE - 1].GetHash());\r\n+\r\n+    // Next header should make us exceed the threshold, but still not be done:\r\n+    const auto res_threshold{state.ProcessNextHeaders(headers.subspan(REDOWNLOAD_BUFFER_SIZE, 1), /*full_headers_message=*/true)};\r\n+    CHECK_RESULT(res_threshold,\r\n+                 state, State::REDOWNLOAD,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/true,\r\n+                 /*exp_headers_size=*/1);\r\n+    BOOST_CHECK_EQUAL(state.NextHeadersRequestLocator().vHave.front(), chain1[REDOWNLOAD_BUFFER_SIZE].GetHash());\r\n+\r\n+    // Feed in remaining headers, meeting the work threshold again and completing the REDOWNLOAD phase:\r\n+    CHECK_RESULT(state.ProcessNextHeaders(headers.subspan(REDOWNLOAD_BUFFER_SIZE + 1), /*full_headers_message=*/true),\r\n+                 state, State::FINAL,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/false,\r\n+                 /*exp_headers_size=*/chain1.size() - 1);\r\n+    BOOST_CHECK_EQUAL(res_threshold.pow_validated_headers.front().hashPrevBlock, genesis_hash);\r\n }\r\n \r\n-static void HappyPath(const CBlockIndex* chain_start,\r\n-        const std::vector<CBlockHeader>& first_chain)\r\n+// Repeat the second set of headers in both phases to demonstrate\r\n+// behavior when the chain a peer provides has too little work.\r\n+static void TooLittleWork(const CBlockIndex* chain_start, const std::vector<CBlockHeader>& chain2)\r\n {\r\n-    // This time we feed the first chain twice.\r\n-    HeadersSyncState hss{CreateState(chain_start, Params())};\r\n-\r\n-    // During normal operation we shouldn't get the redownload buffer size warning.\r\n-    DebugLogHelper forbidden{BUFFER_SIZE_WARNING, [](const std::string* str) {\r\n-        if (str == nullptr) {\r\n-            return false; // Disable exception for not finding a match.\r\n-        } else {\r\n-            throw std::runtime_error{strprintf(\"'%s' should not exist in debug log\\n\", str)};\r\n-        }\r\n-    }};\r\n-\r\n-    const auto genesis_hash{Params().GenesisBlock().GetHash()};\r\n-    {\r\n-        auto result{hss.ProcessNextHeaders(first_chain, true)};\r\n-        // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-        BOOST_CHECK(result.success);\r\n-        BOOST_CHECK(result.request_more);\r\n-        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-        // The locator should reset to genesis.\r\n-        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), genesis_hash);\r\n-    }\r\n-\r\n-    {\r\n-        // Process only so that the internal threshold isn't met, meaning validated\r\n-        // headers shouldn't be returned yet:\r\n-        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, true)};\r\n-        // Not done:\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-        BOOST_CHECK(result.success);\r\n-        BOOST_CHECK(result.request_more);\r\n-        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain[REDOWNLOAD_BUFFER_SIZE - 1].GetHash());\r\n-    }\r\n-\r\n-    CBlockHeader first_after_genesis;\r\n-    {\r\n-        // Next header should make us exceed the threshold, but still not be done:\r\n-        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE, 1}, true)};\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-        BOOST_CHECK(result.success);\r\n-        BOOST_CHECK(result.request_more);\r\n-        BOOST_REQUIRE_EQUAL(result.pow_validated_headers.size(), 1);\r\n-        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain[REDOWNLOAD_BUFFER_SIZE].GetHash());\r\n-        first_after_genesis = result.pow_validated_headers.front();\r\n-        BOOST_CHECK_EQUAL(first_after_genesis.hashPrevBlock, genesis_hash);\r\n-    }\r\n-\r\n-    {\r\n-        // Feed in remaining headers, meeting the work threshold again and\r\n-        // completing the REDOWNLOAD phase.\r\n-        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE + 1, first_chain.end()}, true)};\r\n-        // Nothing left for the sync logic to do:\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-        BOOST_CHECK(result.success);\r\n-        BOOST_CHECK(!result.request_more);\r\n-        // All headers except the one already returned above:\r\n-        BOOST_REQUIRE_EQUAL(result.pow_validated_headers.size(), first_chain.size() - 1);\r\n-        BOOST_CHECK_EQUAL(result.pow_validated_headers.front().hashPrevBlock, first_after_genesis.GetHash());\r\n-    }\r\n+    // Verify that just trying to process the second chain would not succeed (too little work).\r\n+    HeadersSyncState state{CreateState(Params(), HeadersSyncParams{COMMITMENT_PERIOD, REDOWNLOAD_BUFFER_SIZE}, chain_start)};\r\n+    const std::span headers{chain2};\r\n+\r\n+    // Pretend just the first message is \"full\", so we don't abort.\r\n+    CHECK_RESULT(state.ProcessNextHeaders(headers.first(1), /*full_headers_message=*/true),\r\n+                 state, State::PRESYNC,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/true,\r\n+                 /*exp_headers_size=*/0);\r\n+\r\n+    // Non-full message causes sync to end with no headers accepted.\r\n+    CHECK_RESULT(state.ProcessNextHeaders(headers.subspan(1), /*full_headers_message=*/false),\r\n+                 state, State::FINAL,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/false,\r\n+                 /*exp_headers_size=*/0);\r\n }\r\n \r\n-static void TooLittleWork(const CBlockIndex* chain_start,\r\n-        const std::vector<CBlockHeader>& second_chain)\r\n+// Scenario that intentionally uses an oversized buffer to trigger the warning.\r\n+static void TooBigBuffer(const CBlockIndex* chain_start, const std::vector<CBlockHeader>& chain1)\r\n {\r\n-    // Verify that just trying to process the second chain would not succeed\r\n-    // (too little work).\r\n-    HeadersSyncState hss{CreateState(chain_start, Params())};\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n-    {\r\n-        // Pretend just the first message is \"full\", so we don't abort.\r\n-        auto result{hss.ProcessNextHeaders(std::span{second_chain.begin(), 1}, true)};\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n-        BOOST_CHECK(result.success);\r\n-        BOOST_CHECK(result.request_more);\r\n-        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    }\r\n-\r\n-    {\r\n-        // Tell the sync logic that the headers message was not full, implying no\r\n-        // more headers can be requested. For a low-work-chain, this should cause\r\n-        // the sync to end with no headers for acceptance.\r\n-        auto result{hss.ProcessNextHeaders(std::span{second_chain.begin() + 1, second_chain.end()}, false)};\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-        BOOST_CHECK(!result.request_more);\r\n-        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-        // Nevertheless, no validation errors should have been detected with the\r\n-        // chain:\r\n-        BOOST_CHECK(result.success);\r\n-    }\r\n+    // Intentionally too big redownload buffer in order to trigger warning.\r\n+    HeadersSyncState state{CreateState(Params(), HeadersSyncParams{COMMITMENT_PERIOD, chain1.size()}, chain_start)};\r\n+\r\n+    CHECK_RESULT(state.ProcessNextHeaders(chain1, /*full_headers_message=*/true),\r\n+                 state, State::REDOWNLOAD,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/true,\r\n+                 /*exp_headers_size=*/0);\r\n+\r\n+    ASSERT_DEBUG_LOG(BUFFER_SIZE_WARNING);\r\n+    CHECK_RESULT(state.ProcessNextHeaders(chain1, /*full_headers_message=*/true),\r\n+                 state, State::FINAL,\r\n+                 /*exp_success=*/true,\r\n+                 /*exp_request_more=*/false,\r\n+                 /*exp_headers_size=*/chain1.size());\r\n }\r\n \r\n-static void TooBigBuffer(const CBlockIndex* chain_start,\r\n-        const std::vector<CBlockHeader>& first_chain)\r\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\r\n+\r\n+BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n {\r\n-    // Intentionally too big redownload buffer in order to trigger warning.\r\n-    HeadersSyncState hss{/*id=*/0,\r\n-                         Params().GetConsensus(),\r\n-                         HeadersSyncParams{\r\n-                             .commitment_period = COMMITMENT_PERIOD,\r\n-                             .redownload_buffer_size = first_chain.size(),\r\n-                         },\r\n-                         chain_start,\r\n-                         /*minimum_required_work=*/CHAIN_WORK};\r\n-    (void)hss.ProcessNextHeaders(first_chain, true);\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-\r\n-    {\r\n-        ASSERT_DEBUG_LOG(BUFFER_SIZE_WARNING);\r\n-        auto result{hss.ProcessNextHeaders(first_chain, true)};\r\n-        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-        BOOST_CHECK(result.success);\r\n-    }\r\n+    const auto& genesis{Params().GenesisBlock()};\r\n+    const uint256 genesis_hash{genesis.GetHash()};\r\n+\r\n+    // Generate headers for two different chains (using differing merkle roots\r\n+    // to ensure the headers are different).\r\n+    std::vector<CBlockHeader> chain1{};\r\n+    GenerateHeaders(chain1, TARGET_BLOCKS - 1, genesis_hash, genesis.nVersion, genesis.nTime,\r\n+                    /*merkle_root=*/uint256::ZERO, genesis.nBits);\r\n+    std::vector<CBlockHeader> chain2{};\r\n+    GenerateHeaders(chain2, TARGET_BLOCKS - 2, genesis_hash, genesis.nVersion, genesis.nTime,\r\n+                    /*merkle_root=*/uint256::ONE, genesis.nBits);\r\n+\r\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis_hash))};\r\n+    SneakyRedownload(chain_start, chain1, chain2);\r\n+    HappyPath(chain_start, chain1);\r\n+    TooLittleWork(chain_start, chain2);\r\n+    TooBigBuffer(chain_start, chain1);\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\ndiff --git a/src/test/util/logging.h b/src/test/util/logging.h\r\nindex 73ac23825f..622ff58938 100644\r\n--- a/src/test/util/logging.h\r\n+++ b/src/test/util/logging.h\r\n@@ -36,6 +36,16 @@ public:\r\n     ~DebugLogHelper() { check_found(); }\r\n };\r\n \r\n+// Test fails if the pattern *DOES NOT* show up.\r\n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\r\n+// Test fails if the pattern *DOES* show up.\r\n+#define ASSERT_NO_DEBUG_LOG(message)                                              \\\r\n+    DebugLogHelper UNIQUE_NAME(nologhelper){                                      \\\r\n+        message,                                                                  \\\r\n+        [](const std::string* line) {                                             \\\r\n+            if (line) throw std::runtime_error(\"unexpected log line: \" + *line);  \\\r\n+            return false; /* suppress default 'not found' failure */              \\\r\n+        }                                                                         \\\r\n+    }\r\n \r\n #endif // BITCOIN_TEST_UTIL_LOGGING_H\r\n```\r\n\r\n\r\n</details>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2935575232",
      "submitted_at": "2025-06-20T10:17:00Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18278156316,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAARBdogc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18278156316",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b006f4b17767e09bb6c757b74f86a2f68aef34d5",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/b006f4b17767e09bb6c757b74f86a2f68aef34d5",
      "created_at": "2025-06-23T17:32:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18278281616,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAARBeHGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18278281616",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9c4a0458c70e92142b3ebbff1c20f669c336ce8d",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/9c4a0458c70e92142b3ebbff1c20f669c336ce8d",
      "created_at": "2025-06-23T17:41:08Z"
    },
    {
      "event": "labeled",
      "id": 18278285764,
      "node_id": "LE_lADOABII5863mcpzzwAAAARBeIHE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18278285764",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-23T17:41:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2948911547,
      "node_id": "PRR_kwDOABII586vxNG7",
      "url": null,
      "actor": null,
      "commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-23T17:49:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the extensive review @l0rinc! Implemented many of the suggestions and answered the other points.\r\n\r\nRemoved the commit breaking out scopes in favor of the suggested `CHECK_RESULT` macro (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158508969). Broke out the comment improvements into their own commit ahead of that since it gives a \"skeleton\" for the next commit's diff to hang off of.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2948911547",
      "submitted_at": "2025-06-23T17:49:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18278502362,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAARBe8_a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18278502362",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "14e933ab6a8eef9a968ef7bf82f0f42510fed33a",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/14e933ab6a8eef9a968ef7bf82f0f42510fed33a",
      "created_at": "2025-06-23T17:56:48Z"
    },
    {
      "event": "unlabeled",
      "id": 18279708673,
      "node_id": "UNLE_lADOABII5863mcpzzwAAAARBjjgB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18279708673",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-23T19:14:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2954075447,
      "node_id": "PRR_kwDOABII586wE503",
      "url": null,
      "actor": null,
      "commit_id": "14e933ab6a8eef9a968ef7bf82f0f42510fed33a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-24T14:53:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "I find the current layout of tiny, focused commits a lot easier to follow, thanks!\r\nLeft a few comments, after that I will test it again locally and I can ACK.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2954075447",
      "submitted_at": "2025-06-24T14:53:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18324001010,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAREMhDy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18324001010",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7fe73419dcfe5612765462568e11869c5a7b0f63",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/7fe73419dcfe5612765462568e11869c5a7b0f63",
      "created_at": "2025-06-25T20:38:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18367712900,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAARGzQ6E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18367712900",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c3bc47cfb6f8e55168c6ab7d4544976837abfec0",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/c3bc47cfb6f8e55168c6ab7d4544976837abfec0",
      "created_at": "2025-06-28T07:35:43Z"
    },
    {
      "event": "reviewed",
      "id": 2966948837,
      "node_id": "PRR_kwDOABII586w2Avl",
      "url": null,
      "actor": null,
      "commit_id": "c3bc47cfb6f8e55168c6ab7d4544976837abfec0",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-02T16:28:41Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, I've left a few questions/nits\r\n\r\nI've only done a partial review so far, I still need to go through the last two commits and part of ced2ddb37c957e53d4a8aa40d3512ea3786511b4",
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2966948837",
      "submitted_at": "2025-07-02T16:28:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18498829466,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAROnbya",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18498829466",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "78503a41546f6432045d3f9fd39860ead11d5c95",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/78503a41546f6432045d3f9fd39860ead11d5c95",
      "created_at": "2025-07-07T07:35:32Z"
    },
    {
      "event": "reviewed",
      "id": 2992479971,
      "node_id": "PRR_kwDOABII586yXZ7j",
      "url": null,
      "actor": null,
      "commit_id": "c3bc47cfb6f8e55168c6ab7d4544976837abfec0",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-07T07:35:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for checking this out @danielabrozzoni! Pushed some minor changes based on your feedback.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2992479971",
      "submitted_at": "2025-07-07T07:35:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 2983172052,
      "node_id": "PRR_kwDOABII586xz5fU",
      "url": null,
      "actor": null,
      "commit_id": "78503a41546f6432045d3f9fd39860ead11d5c95",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-09T14:59:12Z",
      "author_association": "MEMBER",
      "body": "Review 78503a41546f6432045d3f9fd39860ead11d5c95\r\n\r\nCode looks good to me, tests are passing locally. Thanks for picking up my comments! I left a couple more.\r\n\r\nI did some additional testing by cherry-picking the latest commit of this PR and applying it to master, setting REDOWNLOAD_BUFFER_SIZE to >15000, and verifying that the warning was logged as expected.\r\n\r\n<details>\r\n<summary> git diff: </summary>\r\n\r\n```diff\r\ndiff --git a/src/headerssync.cpp b/src/headerssync.cpp\r\nindex 9e8b190516..0d0a26d5db 100644\r\n--- a/src/headerssync.cpp\r\n+++ b/src/headerssync.cpp\r\n@@ -17,7 +17,7 @@ constexpr size_t HEADER_COMMITMENT_PERIOD{624};\r\n \r\n //! Only feed headers to validation once this many headers on top have been\r\n //! received and validated against commitments.\r\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\r\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{15002}; // 14827/624 = ~23.8 commitments\r\n \r\n // Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\r\n // re-calculate parameters if we compress further)\r\n@@ -285,11 +285,20 @@ std::vector<CBlockHeader> HeadersSyncState::PopHeadersReadyForAcceptance()\r\n     Assume(m_download_state == State::REDOWNLOAD);\r\n     if (m_download_state != State::REDOWNLOAD) return ret;\r\n \r\n-    while (m_redownloaded_headers.size() > REDOWNLOAD_BUFFER_SIZE ||\r\n+    bool buffer_exceeded{m_redownloaded_headers.size() > REDOWNLOAD_BUFFER_SIZE};\r\n+    if (!buffer_exceeded && m_process_all_remaining_headers && m_chain_start->nHeight == 0 &&\r\n+            m_redownload_buffer_first_prev_hash == m_chain_start->GetBlockHash()) {\r\n+        LogWarning(\"Unexpectedly reached minimum required work before filling the headers sync redownload buffer, even though we started all the way back from genesis \"\r\n+                   \"(m_redownload_buffer_last_height: %u, redownload_buffer_size: %u).\",\r\n+                   m_redownload_buffer_last_height, REDOWNLOAD_BUFFER_SIZE);\r\n+    }\r\n+\r\n+    while (buffer_exceeded ||\r\n             (m_redownloaded_headers.size() > 0 && m_process_all_remaining_headers)) {\r\n         ret.emplace_back(m_redownloaded_headers.front().GetFullHeader(m_redownload_buffer_first_prev_hash));\r\n         m_redownloaded_headers.pop_front();\r\n         m_redownload_buffer_first_prev_hash = ret.back().GetHash();\r\n+        buffer_exceeded = m_redownloaded_headers.size() > REDOWNLOAD_BUFFER_SIZE;\r\n     }\r\n     return ret;\r\n }\r\ndiff --git a/src/test/headers_sync_chainwork_tests.cpp b/src/test/headers_sync_chainwork_tests.cpp\r\nindex b710ad1801..a14aa0ee6d 100644\r\n--- a/src/test/headers_sync_chainwork_tests.cpp\r\n+++ b/src/test/headers_sync_chainwork_tests.cpp\r\n@@ -7,6 +7,7 @@\r\n #include <consensus/params.h>\r\n #include <headerssync.h>\r\n #include <pow.h>\r\n+#include <test/util/logging.h>\r\n #include <test/util/setup_common.h>\r\n #include <validation.h>\r\n #include <vector>\r\n@@ -65,8 +66,12 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\r\n //    processing (presumably due to commitments not matching).\r\n // 3. Finally, we verify that repeating with the first set of headers in both\r\n //    phases is successful.\r\n+\r\n+constexpr char BUFFER_SIZE_WARNING[]{\"Unexpectedly reached minimum required work before filling the headers sync redownload buffer, even though we started all the way back from genesis\"};\r\n+\r\n BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n {\r\n+    ASSERT_NO_DEBUG_LOG(BUFFER_SIZE_WARNING);\r\n     std::vector<CBlockHeader> first_chain;\r\n     std::vector<CBlockHeader> second_chain;\r\n \r\ndiff --git a/src/test/util/logging.h b/src/test/util/logging.h\r\nindex 73ac23825f..af7110b279 100644\r\n--- a/src/test/util/logging.h\r\n+++ b/src/test/util/logging.h\r\n@@ -36,6 +36,17 @@ public:\r\n     ~DebugLogHelper() { check_found(); }\r\n };\r\n \r\n+// Test fails if the pattern *DOES NOT* show up.\r\n #define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\r\n \r\n+// Test fails if the pattern *DOES* show up.\r\n+#define ASSERT_NO_DEBUG_LOG(message)                                                        \\\r\n+    DebugLogHelper UNIQUE_NAME(nologhelper){                                                \\\r\n+        message,                                                                            \\\r\n+        [](const std::string* line) {                                                       \\\r\n+            if (line) throw std::runtime_error{\"Encountered forbidden log line: \" + *line}; \\\r\n+            return false; /* Suppress default 'not found' failure. */                       \\\r\n+        }                                                                                   \\\r\n+    }\r\n+\r\n #endif // BITCOIN_TEST_UTIL_LOGGING_H\t\r\n```\r\n</details>\r\n\r\nTest output:\r\n```\r\n./build/bin/test_bitcoin --run_test=headers_sync_chainwork_tests\r\nRunning 1 test case...\r\nunknown location(0): fatal error: in \"headers_sync_chainwork_tests/headers_sync_state\": std::runtime_error: Encountered forbidden log line: 2025-07-09T14:20:58.691984Z [test] [headerssync.cpp:291] [PopHeadersReadyForAcceptance] [warning] Unexpectedly reached minimum required work before filling the headers sync redownload buffer, even though we started all the way back from genesis (m_redownload_buffer_last_height: 14999, redownload_buffer_size: 15002).\r\n\r\n./test/headers_sync_chainwork_tests.cpp(119): last checkpoint\r\n\r\n*** 1 failure is detected in the test module \"Bitcoin Core Test Suite\"\r\nerror: Recipe `unit-test` failed on line 13 with exit code 201\r\n\r\n```",
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2983172052",
      "submitted_at": "2025-07-09T14:58:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18626414181,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAARWOIZl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18626414181",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "37405238a8c4fe4dff82781c91fb668391eb51d4",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/37405238a8c4fe4dff82781c91fb668391eb51d4",
      "created_at": "2025-07-14T22:04:17Z"
    },
    {
      "event": "reviewed",
      "id": 3017863907,
      "node_id": "PRR_kwDOABII586z4PLj",
      "url": null,
      "actor": null,
      "commit_id": "78503a41546f6432045d3f9fd39860ead11d5c95",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-14T22:05:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @danielabrozzoni for your latest feedback and testing against master with your diff! Added some comments in latest push.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3017863907",
      "submitted_at": "2025-07-14T22:05:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "milestoned",
      "id": 19039144117,
      "node_id": "MIE_lADOABII5863mcpzzwAAAARu0ki1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19039144117",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-07T16:11:45Z",
      "milestone": {
        "title": "30.0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19071197855,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAARwu2Kf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19071197855",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "538b9a4f4ee84749bd1b2fe32e61658c272ee7f9",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/538b9a4f4ee84749bd1b2fe32e61658c272ee7f9",
      "created_at": "2025-08-09T22:24:21Z"
    },
    {
      "event": "reviewed",
      "id": 3103347444,
      "node_id": "PRR_kwDOABII5864-VL0",
      "url": null,
      "actor": null,
      "commit_id": "538b9a4f4ee84749bd1b2fe32e61658c272ee7f9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-09T22:46:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Changes with latest push ([compare](https://github.com/bitcoin/bitcoin/compare/37405238a8c4fe4dff82781c91fb668391eb51d4..538b9a4f4ee84749bd1b2fe32e61658c272ee7f9)):\r\n* Clarified PR description, hopefully better motivation reason for v30 milestone inclusion.\r\n* Moved checks for behavior around `pow_validated_headers` and `REDOWNLOAD_BUFFER_SIZE` to first commit to motivate the rest of the PR instead of being one of the last commits.\r\n* Simplified condition emitting warning for misconfigured `REDOWNLOAD_BUFFER_SIZE`.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3103347444",
      "submitted_at": "2025-08-09T22:46:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "commented",
      "id": 3176928248,
      "node_id": "IC_kwDOABII5869XBP4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3176928248",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-11T21:19:24Z",
      "updated_at": "2025-08-11T21:19:24Z",
      "author_association": "MEMBER",
      "body": "It seems like this PR has several refactors that are really necessary for the goal of getting a configurable redownload window into `HeadersSyncState`.\r\n\r\nI find the last commit to not be compelling. Users are never going to see that warning, and if they did, there's nothing actionalbe for them to do. It's only a warning that is relevant to developers, and even then, it is not done in a way that is extremely obvious to developers as it's only a warning and not a fatal error. When we add checks for developers, they should really be something that causes a crash for developers, e.g. `Assume`. And in that case, there also doesn't need to be a unit test case for that either.\r\n\r\nLastly, changes are made to the chain params, but with no instructions of how or when to update the parameters for the other chains. And really, if the expectation is that these parameters do need to be updated for the other chains, then the `headerssync-params.py` script needs to be made easier to run for those other chains.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3176928248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19106099961,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAARyz_L5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19106099961",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f658af2623e959c39e07661e1c6b5d12b3f9490a",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/f658af2623e959c39e07661e1c6b5d12b3f9490a",
      "created_at": "2025-08-12T08:14:17Z"
    },
    {
      "event": "commented",
      "id": 3178226787,
      "node_id": "IC_kwDOABII5869b-Rj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3178226787",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T08:15:44Z",
      "updated_at": "2025-08-12T08:15:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your feedback @achow101!\r\n\r\n> I find the last commit to not be compelling.\r\n\r\nDropped 538b9a4f4ee84749bd1b2fe32e61658c272ee7f9 as I agree the warning was a bit contrived, and the change feels less necessary, given how the PR has evolved.\r\n\r\nConsidered changing the first commit to add the following in `HeadersSyncState::PopHeadersReadyForAcceptance()`:\r\n```C++\r\n    // We haven't started feeding back headers from genesis but already reached\r\n    // the PoW threshold?! This is an unrealistic situation, maybe a fuzz test?\r\n    Assume(!(m_process_all_remaining_headers && m_chain_start->nHeight == 0 &&\r\n             m_redownload_buffer_first_prev_hash == m_chain_start->GetBlockHash()));\r\n```\r\nBut it would probably cause the fuzz test to fail.\r\n\r\n> ... no instructions of how or when to update the parameters for the other chains. And really, if the expectation is that these parameters do need to be updated for the other chains, then the `headerssync-params.py` script needs to be made easier to run for those other chains.\r\n\r\nAdded documentation to the commit message about how the `HeadersSyncParams` constants were calculated and argued for them not needing to be frequently updated. I could add comments with UTC dates corresponding to genesis block Unix epoch times for all `CreateGenesisBlock()` calls in *kernel/chainparams.cpp* to make it easier to re-run the script if deemed necessary.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3178226787",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "mentioned",
      "id": 19106131481,
      "node_id": "MEE_lADOABII5863mcpzzwAAAARy0G4Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19106131481",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T08:15:45Z"
    },
    {
      "event": "subscribed",
      "id": 19106131504,
      "node_id": "SE_lADOABII5863mcpzzwAAAARy0G4w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19106131504",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T08:15:45Z"
    },
    {
      "event": "reviewed",
      "id": 3112310893,
      "node_id": "PRR_kwDOABII5865ghht",
      "url": null,
      "actor": null,
      "commit_id": "f658af2623e959c39e07661e1c6b5d12b3f9490a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T19:52:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code reviewed until 058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3112310893",
      "submitted_at": "2025-08-12T19:52:24Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19123135987,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAARz0-Xz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19123135987",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/a4191b57b21a0fea871206f368972c7741ad6437",
      "created_at": "2025-08-12T21:37:00Z"
    },
    {
      "event": "reviewed",
      "id": 3112607250,
      "node_id": "PRR_kwDOABII5865hp4S",
      "url": null,
      "actor": null,
      "commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T21:39:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pushed updates based off https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3112310893.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3112607250",
      "submitted_at": "2025-08-12T21:39:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3112824958,
      "node_id": "PRR_kwDOABII5865ifB-",
      "url": null,
      "actor": null,
      "commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T22:04:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Finished the review, my main concern is that the last commit is a bit hard to review (or that I got tired by the end). Left a few more nits as well.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3112824958",
      "submitted_at": "2025-08-12T22:04:31Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3116384902,
      "node_id": "PRR_kwDOABII5865wEKG",
      "url": null,
      "actor": null,
      "commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T15:26:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK a4191b57b21a0fea871206f368972c7741ad6437\r\n\r\nI made sure the new unit test doesn't omit any of the current test's coverage. Breaking it into the three functions (sneaky, happy, and low work) makes this fairly easy to confirm. The `HappyPath` case adds coverage for when we get close to the redownload buffer, making sure that no headers are added to the block index until we cross that threshold.\r\n\r\nRan `headerssync-params.py` to verify that the new params added in `chainparams.cpp` are correct. \r\n\r\nJust some small nits below. I also was thinking that it could be good to have the headers sync fuzz test choose from a reasonable range of different commitment periods and redownload buffers. The current one always uses the mainnet params, which is fine too.",
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3116384902",
      "submitted_at": "2025-08-13T15:26:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "review_requested",
      "id": 19140083505,
      "node_id": "RRE_lADOABII5863mcpzzwAAAAR01n8x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19140083505",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T15:26:45Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19140083804,
      "node_id": "RRE_lADOABII5863mcpzzwAAAAR01oBc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19140083804",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T15:26:47Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19140084162,
      "node_id": "RRE_lADOABII5863mcpzzwAAAAR01oHC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19140084162",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T15:26:48Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19140084440,
      "node_id": "RRE_lADOABII5863mcpzzwAAAAR01oLY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19140084440",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T15:26:49Z",
      "requested_reviewer": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19145865904,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAR1Lrqw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19145865904",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8fc783a95e568c8a5797da1ac6a9922819863175",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/8fc783a95e568c8a5797da1ac6a9922819863175",
      "created_at": "2025-08-13T21:12:57Z"
    },
    {
      "event": "reviewed",
      "id": 3114478843,
      "node_id": "PRR_kwDOABII5865oyz7",
      "url": null,
      "actor": null,
      "commit_id": "8fc783a95e568c8a5797da1ac6a9922819863175",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T21:14:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for joining @marcofleon! :)\r\n\r\nNotable changes in latest push:\r\n* Extracted most unit test-changes from final commit into later commit (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271396010).\r\n* Broke out `max_seconds_since_start` from `m_max_commitments` calculation (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271386176).\r\n* Zero-initialized `HeadersSyncParams`-fields (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2273708568)\r\n* Made `HeadersSyncParams` values fuzzed now as I was pushing anyway (https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3116384902).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3114478843",
      "submitted_at": "2025-08-13T21:14:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3117865169,
      "node_id": "PRR_kwDOABII58651tjR",
      "url": null,
      "actor": null,
      "commit_id": "8fc783a95e568c8a5797da1ac6a9922819863175",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T22:30:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "tested ACK 8fc783a95e568c8a5797da1ac6a9922819863175 (edit: rebased locally to check for conflicts with e.g. https://github.com/bitcoin/bitcoin/pull/33116, but all tests are passing. I also ran a `-reindex` until 400k blocks and all seems fine)\r\n\r\nGeneralized the header sync params for each chain, split the complicated test into smaller, less stateful chunks, updated testing for current mainchain heights, modernized surrounding code - in small, focused, easy to follow, well commented commits.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3117865169",
      "submitted_at": "2025-08-13T22:28:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "review_requested",
      "id": 19146759779,
      "node_id": "RRE_lADOABII5863mcpzzwAAAAR1PF5j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19146759779",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T22:29:04Z",
      "requested_reviewer": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19153337368,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAR1oLwY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19153337368",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a91a5f0070129192dc50ed50452a2788d69f2d97",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/a91a5f0070129192dc50ed50452a2788d69f2d97",
      "created_at": "2025-08-14T07:40:38Z"
    },
    {
      "event": "reviewed",
      "id": 3120345155,
      "node_id": "PRR_kwDOABII5865_LBD",
      "url": null,
      "actor": null,
      "commit_id": "a91a5f0070129192dc50ed50452a2788d69f2d97",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-14T12:12:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re ACK a91a5f0070129192dc50ed50452a2788d69f2d97\r\n\r\n",
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3120345155",
      "submitted_at": "2025-08-14T12:12:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "review_requested",
      "id": 19158203608,
      "node_id": "RRE_lADOABII5863mcpzzwAAAAR16vzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19158203608",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T12:12:21Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19161827303,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAR2Ikfn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19161827303",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "342359f9538874a87b86b67dd98f81cb78237a1e",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/342359f9538874a87b86b67dd98f81cb78237a1e",
      "created_at": "2025-08-14T15:24:03Z"
    },
    {
      "event": "commented",
      "id": 3188881379,
      "node_id": "IC_kwDOABII586-Enfj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3188881379",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T15:30:27Z",
      "updated_at": "2025-08-14T15:31:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 342359f9538874a87b86b67dd98f81cb78237a1e\r\n\r\ntypo fix + `commit_offset` was change since last push to depend on `commitment_period `",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3188881379",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "review_requested",
      "id": 19161954243,
      "node_id": "RRE_lADOABII5863mcpzzwAAAAR2JDfD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19161954243",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T15:30:35Z",
      "requested_reviewer": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3121035009,
      "node_id": "PRR_kwDOABII5866BzcB",
      "url": null,
      "actor": null,
      "commit_id": "342359f9538874a87b86b67dd98f81cb78237a1e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-14T15:30:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for invalidating the ACKs. Implemented suggestion in https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2276448044\r\n* Fixes fuzzing of `commitment_offset` to have min value of 0 instead of 1 as on master, and sets the max depending on the fuzzed `commitment_period`.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3121035009",
      "submitted_at": "2025-08-14T15:30:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "commented",
      "id": 3188990000,
      "node_id": "IC_kwDOABII586-FCAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3188990000",
      "actor": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-14T16:01:35Z",
      "updated_at": "2025-08-14T16:01:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re-ACK 342359f9538874a87b86b67dd98f81cb78237a1e\r\n\r\nNice, everything lgtm. Just some basic cleanups and changing the headers sync fuzz target to choose the params since my original review.",
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3188990000",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "reviewed",
      "id": 3122061330,
      "node_id": "PRR_kwDOABII5866FuAS",
      "url": null,
      "actor": null,
      "commit_id": "342359f9538874a87b86b67dd98f81cb78237a1e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-18T20:40:20Z",
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3122061330",
      "submitted_at": "2025-08-18T20:40:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19221876662,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAR5to-2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19221876662",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/53341ea10dc2f7df371b416060863bbc094b8773",
      "created_at": "2025-08-19T10:40:22Z"
    },
    {
      "event": "reviewed",
      "id": 3131691825,
      "node_id": "PRR_kwDOABII5866qdMx",
      "url": null,
      "actor": null,
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-19T10:41:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Latest push:\r\n* Breaks up test into multiple boost test cases instead of regular functions (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2277678459). In doing so, I changed back to using a custom fixture as on master. Diffing with dimmed-zebra helps show what was just moved and what actually changed `git diff 342359f 53341ea`.\r\n* Removed redundant `assert()` after bringing that block closer to constants (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271294627).\r\n* Minor fixups to comments and local variables so that they are changed less and in more proper commits.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3131691825",
      "submitted_at": "2025-08-19T10:41:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "commented",
      "id": 3201214771,
      "node_id": "IC_kwDOABII586-zqkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3201214771",
      "actor": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T15:24:42Z",
      "updated_at": "2025-08-19T15:24:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Re ACK 53341ea10dc2f7df371b416060863bbc094b8773\r\n\r\nBreaking up the three scenarios into their own test cases makes sense. I checked to make sure the test logic is unchanged.",
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3201214771",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "reviewed",
      "id": 3133743432,
      "node_id": "PRR_kwDOABII5866ySFI",
      "url": null,
      "actor": null,
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-19T20:32:59Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3133743432",
      "submitted_at": "2025-08-19T20:32:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3133883103,
      "node_id": "PRR_kwDOABII5866y0Lf",
      "url": null,
      "actor": null,
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-19T21:20:19Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3133883103",
      "submitted_at": "2025-08-19T21:20:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3133885518,
      "node_id": "PRR_kwDOABII5866y0xO",
      "url": null,
      "actor": null,
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-19T21:21:33Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3133885518",
      "submitted_at": "2025-08-19T21:21:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3133939732,
      "node_id": "PRR_kwDOABII5866zCAU",
      "url": null,
      "actor": null,
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-19T21:45:55Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3133939732",
      "submitted_at": "2025-08-19T21:45:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3133941229,
      "node_id": "PRR_kwDOABII5866zCXt",
      "url": null,
      "actor": null,
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-19T21:46:45Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3133941229",
      "submitted_at": "2025-08-19T21:46:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3133948523,
      "node_id": "PRR_kwDOABII5866zEJr",
      "url": null,
      "actor": null,
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-19T21:50:31Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3133948523",
      "submitted_at": "2025-08-19T21:50:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3137421954,
      "node_id": "PRR_kwDOABII5867AUKC",
      "url": null,
      "actor": null,
      "commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-20T16:36:42Z",
      "author_association": "MEMBER",
      "body": "Code Review ACK 53341ea10dc2f7df371b416060863bbc094b8773\r\n\r\nI reviewed the code and checked that tests were passing locally, but didn't do any extensive testing.\r\n\r\nThis PR makes the `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` configurable by the tests, instead of using an hardcoded value, to avoid ending up testing an unrealistic behavior once `REDOWNLOAD_BUFFER_SIZE` surpasses 15_000 in 0.30.\r\n\r\n(I like how we can test what could happen using the first commit and investigating the weird behavior!)\r\n\r\nAdditionally, the PR makes it easier to follow the `headers_sync_chainwork_test`, by cleaning up code and expanding comments. It also makes the test more extensive, by making sure to check every parameter of ProcessingResult using the `CHECK_RESULT` macro.",
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3137421954",
      "submitted_at": "2025-08-20T16:36:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "commented",
      "id": 3208186878,
      "node_id": "IC_kwDOABII586_OQv-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3208186878",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T21:50:31Z",
      "updated_at": "2025-08-20T21:52:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "crACK 53341ea10dc2f7df3\r\n\r\nThe test changes here look good to me. I left some nits that can be addressed if following-up or rebasing. I sanity checked that a fresh node doing headers syncing for mainnet, testnet, and signet work on my machine with this branch.\r\n\r\nI think it would be good to have input from one of the authors/reviewers of #25717 on the non-test changes to headers sync in this PR (https://github.com/bitcoin/bitcoin/pull/32579/commits/4aea5fa3690310bfc2617e3bf31f555dae7d9337 and https://github.com/bitcoin/bitcoin/pull/32579/commits/1771e59f1a1fcaa6a1d79c93bc0c0c3b1003cf82) before merging.\r\n\r\n",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3208186878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "review_requested",
      "id": 19254667926,
      "node_id": "RRE_lADOABII5863mcpzzwAAAAR7quqW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19254667926",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T21:50:39Z",
      "requested_reviewer": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3210338335,
      "node_id": "IC_kwDOABII586_WeAf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3210338335",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T12:09:28Z",
      "updated_at": "2025-08-21T12:09:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Sjors or @sdaftuar: would you mind doing some light review of 1771e59f1a1fcaa6a1d79c93bc0c0c3b1003cf82? It represents the meat of this PR, making the headers sync state params that affect memory usage able to be configured for tests/other chains instead of hard-coded to mainnet conditions.\r\n\r\n(davidgumberg also suggested (https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3208186878) reviewing 4aea5fa3690310bfc2617e3bf31f555dae7d9337 which also touches the `HeadersSyncState` implementation, replacing `vector`s with `span`s).\r\n\r\n(Made a list of author+reviewers from #25717 and used a RNG to select 2 to ping).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3210338335",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "mentioned",
      "id": 19265006611,
      "node_id": "MEE_lADOABII5863mcpzzwAAAAR8SKwT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19265006611",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T12:09:29Z"
    },
    {
      "event": "subscribed",
      "id": 19265006642,
      "node_id": "SE_lADOABII5863mcpzzwAAAAR8SKwy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19265006642",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T12:09:29Z"
    },
    {
      "event": "mentioned",
      "id": 19265006668,
      "node_id": "MEE_lADOABII5863mcpzzwAAAAR8SKxM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19265006668",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T12:09:29Z"
    },
    {
      "event": "subscribed",
      "id": 19265006695,
      "node_id": "SE_lADOABII5863mcpzzwAAAAR8SKxn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19265006695",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T12:09:29Z"
    },
    {
      "event": "commented",
      "id": 3211267309,
      "node_id": "IC_kwDOABII586_aAzt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3211267309",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T16:15:30Z",
      "updated_at": "2025-08-21T16:15:30Z",
      "author_association": "MEMBER",
      "body": "I generally disagree with the approach in this PR. It's doing a lot of refactoring that feels too much like refactoring for the sake of refactoring. I think this can be dropped from the milestone.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3211267309",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "demilestoned",
      "id": 19270141888,
      "node_id": "DEME_lADOABII5863mcpzzwAAAAR8lwfA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19270141888",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T16:15:36Z",
      "milestone": {
        "title": "30.0"
      }
    },
    {
      "event": "commented",
      "id": 3211783052,
      "node_id": "IC_kwDOABII586_b-uM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3211783052",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T19:12:29Z",
      "updated_at": "2025-08-21T19:12:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "@achow101:\r\n\r\n> I generally disagree with the approach in this PR. It's doing a lot of refactoring that feels too much like refactoring for the sake of refactoring. I think this can be dropped from the milestone.\r\n\r\n### Commit order\r\n\r\n**I understand that given the current order of commits, the test refactorings seem less motivated.** Order used to be refactorings + main commit + illustrative test + additional log test (https://github.com/bitcoin/bitcoin/compare/37405238a8c4fe4dff82781c91fb668391eb51d4~9...37405238a8c4fe4dff82781c91fb668391eb51d4). Having all the refactoring first got the tests in better shape so that later behavior changes could be expressed clearer.\r\n\r\n@fanquake wrote on IRC 2 weeks ago (https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2025-08-07#1142169;):\r\n\r\n> would be good if it's clearer why #32579 needs to go into 30, or not\r\n\r\nThat made me think it would be better to have an independent commit at the beginning of the PR which breaks once the `REDOWNLOAD_BUFFER_SIZE` is increased. If you prefer the order: all refactorings + illustrative test + main commit, that also makes sense.\r\n\r\n### Context of headers sync changes\r\n\r\nI also must admit that the refactoring began in the context of my other WIP changes for `HeadersSyncState` - adding a cache (https://github.com/l0rinc/bitcoin/pull/3). Before proposing that one on the main repo, I'm also working on another change to make the number of parallel `HeadersSyncState` instances in *net_processing.cpp* more predictable, based off an old comment from 2022 (https://github.com/bitcoin/bitcoin/pull/25720#discussion_r936707629). Maybe I should have a tracking issue to show my larger interest in this area, rather than this PR appearing like a random drive-by.\r\n\r\n### Refactoring direction\r\n\r\nIf you think the test refactorings go in arbitrary directions, I would be curious to hear which parts you still disagree with now that I've used multiple test cases as you suggested (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2277678459).\r\n\r\n## Finishing thoughts\r\n\r\nIf you think that the changes in the main commit 1771e59f1a1fcaa6a1d79c93bc0c0c3b1003cf82 are also refactoring for the sake of refactoring, rather than parameters ending up where they should be to enable better testing, that's a different conversation.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3211783052",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "mentioned",
      "id": 19273142510,
      "node_id": "MEE_lADOABII5863mcpzzwAAAAR8xNDu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19273142510",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T19:12:31Z"
    },
    {
      "event": "subscribed",
      "id": 19273142529,
      "node_id": "SE_lADOABII5863mcpzzwAAAAR8xNEB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19273142529",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T19:12:31Z"
    },
    {
      "event": "mentioned",
      "id": 19273142550,
      "node_id": "MEE_lADOABII5863mcpzzwAAAAR8xNEW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19273142550",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T19:12:31Z"
    },
    {
      "event": "subscribed",
      "id": 19273142565,
      "node_id": "SE_lADOABII5863mcpzzwAAAAR8xNEl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19273142565",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T19:12:31Z"
    },
    {
      "event": "commented",
      "id": 3211797289,
      "node_id": "IC_kwDOABII586_cCMp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3211797289",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-21T19:17:09Z",
      "updated_at": "2025-08-21T19:17:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "(As I said on IRC, I respect the decision to drop it from the milestone. There's enough moving parts in the release process. It would've been neat to fix ahead of bumping `REDOWNLOAD_BUFFER_SIZE`, the tests on master will not fail when it happens though).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3211797289",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "commented",
      "id": 3212632223,
      "node_id": "IC_kwDOABII586_fOCf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3212632223",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-22T01:13:46Z",
      "updated_at": "2025-09-01T21:58:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Given that the current PR already demonstrates the production code is still correct, I tend to agree that we don't have to rush. Would have been cleaner, but it's not urgent.\r\n\r\nI do think however that the refactorings are necessary - but I'd keep the commits before the final fix, and if other reviewers think it's too risky, maybe we can do it in a separate PR - unifying it with @danielabrozzoni's change and your other related proposal either through a tracking issue or pushing the rest as drafts. I am fine with doing the refactorings here.\r\n\r\nEdit: note that [`42393d6` (#33274)](https://github.com/bitcoin/bitcoin/pull/33274/commits/42393d6447ad2b3e780aee2d99766f4844c22a06) was updated since",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3212632223",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "mentioned",
      "id": 19277599266,
      "node_id": "MEE_lADOABII5863mcpzzwAAAAR9CNIi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19277599266",
      "actor": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-22T01:13:47Z"
    },
    {
      "event": "subscribed",
      "id": 19277599284,
      "node_id": "SE_lADOABII5863mcpzzwAAAAR9CNI0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19277599284",
      "actor": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-22T01:13:47Z"
    },
    {
      "event": "labeled",
      "id": 19479450720,
      "node_id": "LE_lADOABII5863mcpzzwAAAASJENRg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19479450720",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-03T10:45:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 19481515837,
      "node_id": "RTE_lADOABII5863mcpzzwAAAASJMFc9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19481515837",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-03T12:42:52Z",
      "rename": {
        "from": "headerssync: Preempt unrealistic unit test behavior",
        "to": "headerssync: Correct unrealistic unit test behavior"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19497858232,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAASKKbS4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19497858232",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "created_at": "2025-09-04T07:44:38Z"
    },
    {
      "event": "reviewed",
      "id": 3182000020,
      "node_id": "PRR_kwDOABII5869qXeU",
      "url": null,
      "actor": null,
      "commit_id": "eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-04T07:48:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "Changes since last push:\r\n* Rebased to resolve conflict with #33274.\r\n* Moved checks for buffering-behavior during redownload from the first commit to after the refactoring commits.\r\n* Since #33274 updated the `REDOWNLOAD_BUFFER_SIZE` constant to surpass `TARGET_BLOCKS` (as predicted), we now have to temporarily increase `TARGET_BLOCKS` for these new checks to pass.\r\n* Switched from temporarily introducing `g_latest_result` and having commit at the end to remove it (53341ea10dc2f7df371b416060863bbc094b8773), to introducing a local copy of the `REDOWNLOAD_BUFFER_SIZE` constant. This means that there is less churn on the lines.\r\n* Added comment about probability of spurious test failure in `sneaky_redownload`-case (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286383684).\r\n* Moved comment `Pretend the message is still \"full\", so we don't abort.` within `sneaky_redownload`-case (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2287189020)\r\n* Added coverage for non-full headers messages in `happy_path`-case (https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286437807)\r\n* Changed `max_seconds_since_start`-constant to use initialization-braces instead of assignment (reducing column width by 2 chars).\r\n* Updated `HeadersSyncParams` for the various chains based upon #33274 and re-running *headerssync-params.py*.\r\n\r\nA sense of how the resulting end state of the PR has changed (excluding the rebase) can be viewed by something like:\r\n```shell\r\nmeld <(git diff 53341ea10dc2f7df371b416060863bbc094b8773~9..53341ea10dc2f7df371b416060863bbc094b8773) <(git diff eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d~8..eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d)\r\n```",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3182000020",
      "submitted_at": "2025-09-04T07:48:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "unlabeled",
      "id": 19498498770,
      "node_id": "UNLE_lADOABII5863mcpzzwAAAASKM3rS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19498498770",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T08:19:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3187302261,
      "node_id": "PRR_kwDOABII5869-l91",
      "url": null,
      "actor": null,
      "commit_id": "eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-04T22:02:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d\r\n\r\nI have checked the diffs after rebase, regenerated and verified the mainchain params, looked for leftovers of decommissioned constants and went over the code again quickly to make sure I still agree with everything after the new changes.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3187302261",
      "submitted_at": "2025-09-04T22:02:22Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "review_requested",
      "id": 19516707155,
      "node_id": "RRE_lADOABII5863mcpzzwAAAASLSVFT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19516707155",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-04T22:02:28Z",
      "requested_reviewer": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19525414874,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAASLzi_a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19525414874",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "33d550d3044f9075cc866093c453158288f12dec",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/33d550d3044f9075cc866093c453158288f12dec",
      "created_at": "2025-09-05T09:33:15Z"
    },
    {
      "event": "commented",
      "id": 3258918462,
      "node_id": "IC_kwDOABII587CPyY-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3258918462",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T16:13:01Z",
      "updated_at": "2025-09-05T16:13:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 33d550d3044f9075cc866093c453158288f12dec\r\n\r\nWould be great if @sipa or @sdaftuar could also take a look.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3258918462",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "mentioned",
      "id": 19532132908,
      "node_id": "MEE_lADOABII5863mcpzzwAAAASMNLIs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19532132908",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T16:13:02Z"
    },
    {
      "event": "subscribed",
      "id": 19532132928,
      "node_id": "SE_lADOABII5863mcpzzwAAAASMNLJA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19532132928",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T16:13:02Z"
    },
    {
      "event": "mentioned",
      "id": 19532132956,
      "node_id": "MEE_lADOABII5863mcpzzwAAAASMNLJc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19532132956",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T16:13:02Z"
    },
    {
      "event": "subscribed",
      "id": 19532132968,
      "node_id": "SE_lADOABII5863mcpzzwAAAASMNLJo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19532132968",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T16:13:02Z"
    },
    {
      "event": "reviewed",
      "id": 3202085490,
      "node_id": "PRR_kwDOABII586-2_Jy",
      "url": null,
      "actor": null,
      "commit_id": "33d550d3044f9075cc866093c453158288f12dec",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-09T15:28:16Z",
      "author_association": "MEMBER",
      "body": "utACK 33d550d3044f9075cc866093c453158288f12dec",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3202085490",
      "submitted_at": "2025-09-09T15:28:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19597063574,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAASQE3WW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19597063574",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "794a17186d3019713d29213bedd866baa1c81378",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/794a17186d3019713d29213bedd866baa1c81378",
      "created_at": "2025-09-09T19:19:12Z"
    },
    {
      "event": "commented",
      "id": 3271990036,
      "node_id": "IC_kwDOABII587DBpsU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3271990036",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T19:21:17Z",
      "updated_at": "2025-09-09T19:21:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 794a17186d3019713d29213bedd866baa1c81378 - the only change since last ACK was the span nits being applied",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3271990036",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "review_requested",
      "id": 19597095521,
      "node_id": "RRE_lADOABII5863mcpzzwAAAASQE_Jh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19597095521",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T19:21:24Z",
      "requested_reviewer": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "renamed",
      "id": 19620613772,
      "node_id": "RTE_lADOABII5863mcpzzwAAAASRes6M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19620613772",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T19:50:28Z",
      "rename": {
        "from": "headerssync: Correct unrealistic unit test behavior",
        "to": "p2p: Correct unrealistic headerssync unit test behavior"
      }
    },
    {
      "event": "labeled",
      "id": 19620614792,
      "node_id": "LE_lADOABII5863mcpzzwAAAASRetKI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19620614792",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T19:50:31Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 19648067224,
      "node_id": "LE_lADOABII5863mcpzzwAAAASTHbaY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19648067224",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T23:39:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE0YWM5OTE1YTk1ZWI4NjU3NzljZjQ2MjdkZDUxOGQ5NGMwMTAzMmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4ac9915a95eb865779cf4627dd518d94c01032b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a4ac9915a95eb865779cf4627dd518d94c01032b",
      "tree": {
        "sha": "dd5901a0e8aa5ce7ecfd1c7d84650bea12b3aef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd5901a0e8aa5ce7ecfd1c7d84650bea12b3aef2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dd5901a0e8aa5ce7ecfd1c7d84650bea12b3aef2\nparent d20f10affba83601f1855bc87d0f47e9dfd5caae\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1755592585 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757708921 +0200\n\nrefactor(headerssync): Extract test constants ahead of breakup into functions\n\nMade arith_uint256 constexpr-constructible so it can be used for compile time constants.\n\nCo-authored-by: Lőrinc <pap.lorinc@gmail.com>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQNZhdYY/vz0JLlX970aeYEb0fUv3UvRztu5mrty/hji23WvAJAxsA9KzsZyzhojgwE\n3Vyc+6KROMOi9xaVRlows=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d20f10affba83601f1855bc87d0f47e9dfd5caae",
          "sha": "d20f10affba83601f1855bc87d0f47e9dfd5caae",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d20f10affba83601f1855bc87d0f47e9dfd5caae"
        }
      ],
      "message": "refactor(headerssync): Extract test constants ahead of breakup into functions\n\nMade arith_uint256 constexpr-constructible so it can be used for compile time constants.\n\nCo-authored-by: Lőrinc <pap.lorinc@gmail.com>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-12T20:28:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-08-19T08:36:25Z"
      },
      "sha": "a4ac9915a95eb865779cf4627dd518d94c01032b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU5ODQ2MThkMGI5OTQ2ZGMxMWYxMDg3YWRmMjJhNGNmYmY5YzFhNzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e984618d0b9946dc11f1087adf22a4cfbf9c1a77",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e984618d0b9946dc11f1087adf22a4cfbf9c1a77",
      "tree": {
        "sha": "65e29005a3d4ef13ea987ff36ca01d936d17c967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65e29005a3d4ef13ea987ff36ca01d936d17c967"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 65e29005a3d4ef13ea987ff36ca01d936d17c967\nparent a4ac9915a95eb865779cf4627dd518d94c01032b\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757444687 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757708921 +0200\n\nrefactor(headerssync): Process spans of headers\n\nMore lightweight than vectors which needed to be copied in tests. Also good to get rid of headers_batch-vector before breaking up test.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQGtYLoof/WicPcuu+e1rnMhG3jYkcll9Q1I5SSRV0akiVqtrXB1hOI517Z8zNGwelZ\nTnBlgmt9q966oXFB6ouQg=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4ac9915a95eb865779cf4627dd518d94c01032b",
          "sha": "a4ac9915a95eb865779cf4627dd518d94c01032b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a4ac9915a95eb865779cf4627dd518d94c01032b"
        }
      ],
      "message": "refactor(headerssync): Process spans of headers\n\nMore lightweight than vectors which needed to be copied in tests. Also good to get rid of headers_batch-vector before breaking up test.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-12T20:28:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-09T19:04:47Z"
      },
      "sha": "e984618d0b9946dc11f1087adf22a4cfbf9c1a77"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYwMzY4Njg5MmE5YzA3ZTg3ZTZkZDEyMDI3ZDk4OGZlMTg4YjFmOWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f03686892a9c07e87e6dd12027d988fe188b1f9e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f03686892a9c07e87e6dd12027d988fe188b1f9e",
      "tree": {
        "sha": "4cc050d952789251718a5a461c7c6ae9e7d2caec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cc050d952789251718a5a461c7c6ae9e7d2caec"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4cc050d952789251718a5a461c7c6ae9e7d2caec\nparent e984618d0b9946dc11f1087adf22a4cfbf9c1a77\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1755592692 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757708921 +0200\n\nrefactor(test): Break up headers_sync_state\n\nHelps logically separate the scenarios being tested.\n\nAlso adds missing comment for part 4.\n\n(unique_ptrs and ProcessingResults will be cleaned up in next commit).\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQN35QbXpmbMWuQIVsTS0pv1cOmAkDoCB5TeKV/nffV4k3WZG+IGPreBafS5jq9puif\nw9yInDVJ5qIJY91G3GOQQ=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e984618d0b9946dc11f1087adf22a4cfbf9c1a77",
          "sha": "e984618d0b9946dc11f1087adf22a4cfbf9c1a77",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e984618d0b9946dc11f1087adf22a4cfbf9c1a77"
        }
      ],
      "message": "refactor(test): Break up headers_sync_state\n\nHelps logically separate the scenarios being tested.\n\nAlso adds missing comment for part 4.\n\n(unique_ptrs and ProcessingResults will be cleaned up in next commit).",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-12T20:28:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-08-19T08:38:12Z"
      },
      "sha": "f03686892a9c07e87e6dd12027d988fe188b1f9e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZlODk2ZjhmYWE3ODgzZjMzMTY5ZmUzZTZkZGRiOTFmZWFjYTIzZTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe896f8faa7883f33169fe3e6dddb91feaca23e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fe896f8faa7883f33169fe3e6dddb91feaca23e1",
      "tree": {
        "sha": "acaf617c27a80c8d0db08f94491d5380d0234359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acaf617c27a80c8d0db08f94491d5380d0234359"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree acaf617c27a80c8d0db08f94491d5380d0234359\nparent f03686892a9c07e87e6dd12027d988fe188b1f9e\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1756933444 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757708921 +0200\n\nrefactor(test): Store HeadersSyncState on the stack\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQMCw2ScKg000QBnL3BoE5efLEHuAx+k2ZKi8rB27KOQS1MUA7i7/qyC/f8vCQtHcLz\n4AwZllhrcTdKhpi+NZEgs=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f03686892a9c07e87e6dd12027d988fe188b1f9e",
          "sha": "f03686892a9c07e87e6dd12027d988fe188b1f9e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f03686892a9c07e87e6dd12027d988fe188b1f9e"
        }
      ],
      "message": "refactor(test): Store HeadersSyncState on the stack",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-12T20:28:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-03T21:04:04Z"
      },
      "sha": "fe896f8faa7883f33169fe3e6dddb91feaca23e1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA0ZWViOTU3OGM2MGNlNTY2MWYyODVmNmJkZTk5NjU2OWZhZmRjYzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04eeb9578c60ce5661f285f6bde996569fafdcc3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/04eeb9578c60ce5661f285f6bde996569fafdcc3",
      "tree": {
        "sha": "2b001a81d1c67dfd70d2bb33a5bf8b0f8af01e8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b001a81d1c67dfd70d2bb33a5bf8b0f8af01e8b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2b001a81d1c67dfd70d2bb33a5bf8b0f8af01e8b\nparent fe896f8faa7883f33169fe3e6dddb91feaca23e1\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1756927274 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757708921 +0200\n\ndoc(test): Improve comments\n\n+ new assert helping explain why CHAIN_WORK == TARGET_BLOCKS * 2.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQNFu2Tu859zwAePMG8G6uBm2kwd8sjbS1j5HWOXDbXv67Ex2P1VaBDatQa9OZgLrl5\navpC9sH1Rix+laRO1ToQs=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe896f8faa7883f33169fe3e6dddb91feaca23e1",
          "sha": "fe896f8faa7883f33169fe3e6dddb91feaca23e1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fe896f8faa7883f33169fe3e6dddb91feaca23e1"
        }
      ],
      "message": "doc(test): Improve comments\n\n+ new assert helping explain why CHAIN_WORK == TARGET_BLOCKS * 2.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-12T20:28:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-03T19:21:14Z"
      },
      "sha": "04eeb9578c60ce5661f285f6bde996569fafdcc3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdiMDA2NDNlZjVmOTMyMTE2ZWUzMDNhZjk5ODQzMTJiMjdjMDQwZjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b00643ef5f932116ee303af9984312b27c040f1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7b00643ef5f932116ee303af9984312b27c040f1",
      "tree": {
        "sha": "0baeaa6f09b6d79f017c6dd3e543164756fde42a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0baeaa6f09b6d79f017c6dd3e543164756fde42a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0baeaa6f09b6d79f017c6dd3e543164756fde42a\nparent 04eeb9578c60ce5661f285f6bde996569fafdcc3\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1756928200 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757708921 +0200\n\ntest(headerssync): headers_sync_chainwork test improvements\n\nIntroduces CHECK_RESULT for consistently validating ProcessingResult.\n* Verifies HeadersSyncState::State directly after ProcessNextHeaders().\n* Uses BOOST_REQUIRE_EQUAL for HeadersSyncState::State - Nicer failure output and prevents continuing test in nonsensical state.\n* Encourages checking Locator and result.pow_validated_headers.\n\nChanges happy_path to test both full & non-full headers messages.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQKPepiuzO7kU4hOyMzhvoae9HQx1qldSz/B1grmikvom7y7WdzkEj/YQhWT3Cy0wyl\nwXHaHKEpifYH5Hd0R32As=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04eeb9578c60ce5661f285f6bde996569fafdcc3",
          "sha": "04eeb9578c60ce5661f285f6bde996569fafdcc3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/04eeb9578c60ce5661f285f6bde996569fafdcc3"
        }
      ],
      "message": "test(headerssync): headers_sync_chainwork test improvements\n\nIntroduces CHECK_RESULT for consistently validating ProcessingResult.\n* Verifies HeadersSyncState::State directly after ProcessNextHeaders().\n* Uses BOOST_REQUIRE_EQUAL for HeadersSyncState::State - Nicer failure output and prevents continuing test in nonsensical state.\n* Encourages checking Locator and result.pow_validated_headers.\n\nChanges happy_path to test both full & non-full headers messages.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-12T20:28:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-03T19:36:40Z"
      },
      "sha": "7b00643ef5f932116ee303af9984312b27c040f1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhmZDFjMjg5M2U2NzY4MjIzMDY5ZDhiMmZkZWMwMzNiMDI2Y2IyZWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fd1c2893e6768223069d8b2fdec033b026cb2eb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8fd1c2893e6768223069d8b2fdec033b026cb2eb",
      "tree": {
        "sha": "475759baf5adaca002662c8d90c19d8583fbb416",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/475759baf5adaca002662c8d90c19d8583fbb416"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 475759baf5adaca002662c8d90c19d8583fbb416\nparent 7b00643ef5f932116ee303af9984312b27c040f1\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1756935899 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757708921 +0200\n\ntest(headerssync): Test returning of pow_validated_headers behavior\n\nAdding these checks necessitates increasing the length of the generated test chains so that we can properly exceed the REDOWNLOAD_BUFFER_SIZE during the test.\n\nOne can check out this commit and locally revert the TARGET_BLOCKS value change to prove the need for tests being able to control the buffer size, as is done by the next commit. Beyond the current REDOWNLOAD_BUFFER_SIZE of 15'009 we need 3 extra - 15'012 TARGET_BLOCKS:\n* 1 for the genesis block.\n* 1 for the test wanting to check that we start receiving headers for permanent storage *before* the final header (first_chain.back()).\n* 1 to exceed REDOWNLOAD_BUFFER_SIZE in HeadersSyncState::PopHeadersReadyForAcceptance().\n\n(The release process includes an occasional increase of the REDOWNLOAD_BUFFER_SIZE value, see release-process.md and history of headerssync.cpp).\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFfzAkpz2UgF+ZUpyRjR/ubIkxSaVNIkq41mQ8Eho0Eydz6ZWuNkpBETxcvA6NHFe1\nK1aBZeF2sS3XoBcEmyWwM=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b00643ef5f932116ee303af9984312b27c040f1",
          "sha": "7b00643ef5f932116ee303af9984312b27c040f1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7b00643ef5f932116ee303af9984312b27c040f1"
        }
      ],
      "message": "test(headerssync): Test returning of pow_validated_headers behavior\n\nAdding these checks necessitates increasing the length of the generated test chains so that we can properly exceed the REDOWNLOAD_BUFFER_SIZE during the test.\n\nOne can check out this commit and locally revert the TARGET_BLOCKS value change to prove the need for tests being able to control the buffer size, as is done by the next commit. Beyond the current REDOWNLOAD_BUFFER_SIZE of 15'009 we need 3 extra - 15'012 TARGET_BLOCKS:\n* 1 for the genesis block.\n* 1 for the test wanting to check that we start receiving headers for permanent storage *before* the final header (first_chain.back()).\n* 1 to exceed REDOWNLOAD_BUFFER_SIZE in HeadersSyncState::PopHeadersReadyForAcceptance().\n\n(The release process includes an occasional increase of the REDOWNLOAD_BUFFER_SIZE value, see release-process.md and history of headerssync.cpp).",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-12T20:28:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-03T21:44:59Z"
      },
      "sha": "8fd1c2893e6768223069d8b2fdec033b026cb2eb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNjNWRkYTFkZTMzM2NmN2FhMTBlMjIzN2VlMmM5MjIxZjcwNWRiZDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "tree": {
        "sha": "8ff5bc58baac341ef605ac9b58659a9a05945a3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ff5bc58baac341ef605ac9b58659a9a05945a3e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8ff5bc58baac341ef605ac9b58659a9a05945a3e\nparent 8fd1c2893e6768223069d8b2fdec033b026cb2eb\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1756970220 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1757708921 +0200\n\nheaderssync: Make HeadersSyncState more flexible and move constants\n\nMove calculated constants from the top of src/headerssync.cpp into src/kernel/chainparams.cpp.\n\nInstead of being hardcoded to mainnet parameters, HeadersSyncState can now vary depending on chain or test. (This means we can reset TARGET_BLOCKS back to the nice round number of 15'000).\n\nSignet and testnets got new HeadersSyncParams constants through temporarily altering headerssync-params.py with corresponding GENESIS_TIME and MINCHAINWORK_HEADERS (based off defaultAssumeValid block height comments, corresponding to nMinimumChainWork). Regtest doesn't have a default assume valid block height, so the values are copied from Testnet 4. Since the constants only affect memory usage, and have very low impact unless dealing with a largely malicious chain, it's not that critical to keep updating them for non-mainnet chains.\n\nGENESIS_TIMEs (UTC):\nTestnet3: 1296688602 = datetime(2011, 2, 2)\nTestnet4: 1714777860 = datetime(2024, 5, 3)\nSignet: 1598918400 = datetime(2020, 9, 1)\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQL/e9E0FP58QM9YvNl5yql7MTMsbdfPMBiqZsnHQqTuTeGaCU3Sp0JdvtxvXNZHoZD\nGng6KbucZbZf39d+2Mtwg=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fd1c2893e6768223069d8b2fdec033b026cb2eb",
          "sha": "8fd1c2893e6768223069d8b2fdec033b026cb2eb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8fd1c2893e6768223069d8b2fdec033b026cb2eb"
        }
      ],
      "message": "headerssync: Make HeadersSyncState more flexible and move constants\n\nMove calculated constants from the top of src/headerssync.cpp into src/kernel/chainparams.cpp.\n\nInstead of being hardcoded to mainnet parameters, HeadersSyncState can now vary depending on chain or test. (This means we can reset TARGET_BLOCKS back to the nice round number of 15'000).\n\nSignet and testnets got new HeadersSyncParams constants through temporarily altering headerssync-params.py with corresponding GENESIS_TIME and MINCHAINWORK_HEADERS (based off defaultAssumeValid block height comments, corresponding to nMinimumChainWork). Regtest doesn't have a default assume valid block height, so the values are copied from Testnet 4. Since the constants only affect memory usage, and have very low impact unless dealing with a largely malicious chain, it's not that critical to keep updating them for non-mainnet chains.\n\nGENESIS_TIMEs (UTC):\nTestnet3: 1296688602 = datetime(2011, 2, 2)\nTestnet4: 1714777860 = datetime(2024, 5, 3)\nSignet: 1598918400 = datetime(2020, 9, 1)",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-12T20:28:41Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-09-04T07:17:00Z"
      },
      "sha": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19668764644,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAASUWYfk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19668764644",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "created_at": "2025-09-12T20:33:09Z"
    },
    {
      "event": "unlabeled",
      "id": 19669733463,
      "node_id": "UNLE_lADOABII5863mcpzzwAAAASUaFBX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19669733463",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-12T21:51:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3287698877,
      "node_id": "IC_kwDOABII587D9k29",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3287698877",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-13T06:54:51Z",
      "updated_at": "2025-09-13T06:54:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Latest push resolves conflict with #33332.\r\n\r\n(Also changed PR-title (category) from \"headerssync:\" to \"p2p:\" based off https://github.com/maflcko/DrahtBot/blob/14ccfd94bc7cc584e547e09582373cb87a0e4553/webhook_features/config.yml and the fact that #25717 used that topic. Maybe one could advocate for expanding the number of categories, but I'll punt on it for now. Hat-tip to l0rinc for the DrahtBot reference).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3287698877",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "commented",
      "id": 3290253231,
      "node_id": "IC_kwDOABII587EHUev",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3290253231",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T02:20:54Z",
      "updated_at": "2025-09-15T02:20:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK cc5dda1de333cf7aa10e2237ee2c9221f705dbd9\r\n\r\nThe only difference after the rebase is a removal of a `constexpr` in one of the `base_uint` constructors.\r\n\r\n> changed PR-title (category) from \"headerssync:\" to \"p2p\r\n\r\nnit: the commits still state `headerssync` (fine by me, just noticed)",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3290253231",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "reviewed",
      "id": 3230419017,
      "node_id": "PRR_kwDOABII587AjEhJ",
      "url": null,
      "actor": null,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T15:06:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "code review ACK cc5dda1de333cf7aa10e2237ee2c9221f705dbd9\r\n\r\nI don't have a strong opinion on the refactors or commit order, although I can see how this PR might not be the most straightforward to review. Overall, the core changes in 8fd1c2893e6768223069d8b2fdec033b026cb2eb and cc5dda1de333cf7aa10e2237ee2c9221f705dbd9 lgtm. Making the headers sync params configurable ensures that the new test can cover the redownload buffer boundary logic.\r\n\r\nedit: I should clarify that I think the refactor of the unit test in 7b00643ef5f932116ee303af9984312b27c040f1 is a clear improvement. Just no strong opinion on the structure/order of the commits themselves.",
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3230419017",
      "submitted_at": "2025-09-16T14:56:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "reviewed",
      "id": 3295765688,
      "node_id": "PRR_kwDOABII587EcWS4",
      "url": null,
      "actor": null,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-02T17:56:25Z",
      "author_association": "MEMBER",
      "body": "reACK cc5dda1de333cf7aa10e2237ee2c9221f705dbd9\r\n\r\nI checked the diff since my last view (https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3182000020 + subspan nit + https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-3287698877), and read the whole code once again to make sure I still understand what's going on :)\r\n",
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-3295765688",
      "submitted_at": "2025-10-02T17:56:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "merged",
      "id": 20450554595,
      "node_id": "ME_lADOABII5863mcpzzwAAAATC8rLj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20450554595",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "161864a038ea345968bec8850caa8dbccae8ae69",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/161864a038ea345968bec8850caa8dbccae8ae69",
      "created_at": "2025-10-23T10:20:00Z"
    },
    {
      "event": "closed",
      "id": 20450554623,
      "node_id": "CE_lADOABII5863mcpzzwAAAATC8rL_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20450554623",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-23T10:20:00Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100413257",
      "pull_request_review_id": 2857912770,
      "id": 2100413257,
      "node_id": "PRRC_kwDOABII5859McNJ",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n+constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n+\n+//! Only feed headers to validation once this many headers on top have been\n+//! received and validated against commitments.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "0c1978b70dd262ffbabf6f034a210a90ff07bb75",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I know this is just a move, but instead of just bare magic number + magic comment (which also has to be [manually updated every time](https://github.com/bitcoin/bitcoin/commit/11a2d3a63e90cdc1920ede3c67d52a9c72860e6b)), could we have the something like : `Generated by headerssync-params.py (on 2025-03-04)`",
      "created_at": "2025-05-21T14:13:47Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2100413257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100413257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108774510",
      "pull_request_review_id": 2857912770,
      "id": 2108774510,
      "node_id": "PRRC_kwDOABII5859sVhu",
      "diff_hunk": "@@ -63,15 +63,19 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "34e1513efeb193a46d37f184b9ab41bcda974afa",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "34e1513efeb193a46d37f184b9ab41bcda974afa:\r\nI have inlined the methods and verified that the remaining changes are only comments, reused-and-cleared pointers and vectors 👍 \r\n\r\n<details>\r\n<summary>A few more refactoring nits that could be considered to make this test even more readable and consistent</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/headers_sync_chainwork_tests.cpp b/src/test/headers_sync_chainwork_tests.cpp\r\nindex 054853bbbf..89bb6682d1 100644\r\n--- a/src/test/headers_sync_chainwork_tests.cpp\r\n+++ b/src/test/headers_sync_chainwork_tests.cpp\r\n@@ -13,29 +13,32 @@\r\n \r\n #include <boost/test/unit_test.hpp>\r\n \r\n-struct HeadersGeneratorSetup : public RegTestingSetup {\r\n+struct HeadersGeneratorSetup : RegTestingSetup\r\n+{\r\n     /** Search for a nonce to meet (regtest) proof of work */\r\n-    void FindProofOfWork(CBlockHeader& starting_header);\r\n+    static void FindProofOfWork(CBlockHeader& starting_header);\r\n     /**\r\n      * Generate headers in a chain that build off a given starting hash, using\r\n      * the given nVersion, advancing time by 1 second from the starting\r\n      * prev_time, and with a fixed merkle root hash.\r\n      */\r\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\r\n-            const uint256& starting_hash, const int nVersion, int prev_time,\r\n-            const uint256& merkle_root, const uint32_t nBits);\r\n+    static void GenerateHeaders(\r\n+        std::vector<CBlockHeader>& headers, size_t count,\r\n+        const uint256& starting_hash, int nVersion, int prev_time,\r\n+        const uint256& merkle_root, uint32_t nBits);\r\n };\r\n \r\n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\r\n {\r\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\r\n-        ++(starting_header.nNonce);\r\n+        ++starting_header.nNonce;\r\n     }\r\n }\r\n \r\n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n-        const uint256& merkle_root, const uint32_t nBits)\r\n+void HeadersGeneratorSetup::GenerateHeaders(\r\n+    std::vector<CBlockHeader>& headers,\r\n+    const size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n+    const uint256& merkle_root, const uint32_t nBits)\r\n {\r\n     uint256 prev_hash = starting_hash;\r\n \r\n@@ -45,14 +48,13 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n         next_header.nVersion = nVersion;\r\n         next_header.hashPrevBlock = prev_hash;\r\n         next_header.hashMerkleRoot = merkle_root;\r\n-        next_header.nTime = prev_time+1;\r\n+        next_header.nTime = prev_time + 1;\r\n         next_header.nBits = nBits;\r\n \r\n         FindProofOfWork(next_header);\r\n         prev_hash = next_header.GetHash();\r\n         prev_time = next_header.nTime;\r\n     }\r\n-    return;\r\n }\r\n \r\n BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\r\n@@ -63,31 +65,41 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\r\n //    updates to the REDOWNLOAD phase successfully.\r\n // 2. Then we deliver the second set of headers and verify that they fail\r\n //    processing (presumably due to commitments not matching).\r\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\r\n+static void SneakyRedownload(\r\n+    const std::vector<CBlockHeader>& first_chain,\r\n+    const std::vector<CBlockHeader>& second_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work);\r\n // 3. Verify that repeating with the first set of headers in both phases is\r\n //    successful.\r\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\r\n+static void HappyPath(\r\n+    const std::vector<CBlockHeader>& first_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work);\r\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\r\n //    behavior when the chain a peer provides has too little work.\r\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\r\n+static void TooLittleWork(\r\n+    const std::vector<CBlockHeader>& second_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work);\r\n \r\n BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n {\r\n     std::vector<CBlockHeader> first_chain;\r\n     std::vector<CBlockHeader> second_chain;\r\n \r\n-    const int target_blocks = 15000;\r\n-    arith_uint256 chain_work = target_blocks*2;\r\n+    constexpr int target_blocks = 15000;\r\n+    const arith_uint256 chain_work = target_blocks * 2;\r\n \r\n     // Generate headers for two different chains (using differing merkle roots\r\n     // to ensure the headers are different).\r\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\r\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\r\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\r\n+    GenerateHeaders(first_chain, target_blocks - 1, Params().GenesisBlock().GetHash(),\r\n+                    Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\r\n+                    ArithToUint256(0), Params().GenesisBlock().nBits);\r\n \r\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\r\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\r\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\r\n+    GenerateHeaders(second_chain, target_blocks - 2, Params().GenesisBlock().GetHash(),\r\n+                    Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\r\n+                    ArithToUint256(1), Params().GenesisBlock().nBits);\r\n \r\n     const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\r\n \r\n@@ -96,7 +108,10 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n     TooLittleWork(second_chain, chain_start, chain_work);\r\n }\r\n \r\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\r\n+static void SneakyRedownload(\r\n+    const std::vector<CBlockHeader>& first_chain,\r\n+    const std::vector<CBlockHeader>& second_chain,\r\n+    const CBlockIndex* chain_start, const arith_uint256& chain_work)\r\n {\r\n     std::vector<CBlockHeader> headers_batch;\r\n \r\n@@ -109,56 +124,59 @@ static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const\r\n     // Pretend the first header is still \"full\", so we don't abort.\r\n     auto result = hss.ProcessNextHeaders(headers_batch, true);\r\n \r\n-    // This chain should look valid, and we should have met the proof-of-work\r\n-    // requirement.\r\n+    // This chain should look valid, and we should have met the proof-of-work requirement.\r\n     BOOST_CHECK(result.success);\r\n     BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\r\n+    BOOST_CHECK_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n \r\n     // Try to sneakily feed back the second chain.\r\n     result = hss.ProcessNextHeaders(second_chain, true);\r\n     BOOST_CHECK(!result.success); // foiled!\r\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\r\n+    BOOST_CHECK_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n }\r\n \r\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\r\n+static void HappyPath(\r\n+    const std::vector<CBlockHeader>& first_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work)\r\n {\r\n     // This time we feed the first chain twice.\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\r\n     (void)hss.ProcessNextHeaders(first_chain, true);\r\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\r\n+    BOOST_CHECK_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n \r\n-    auto result = hss.ProcessNextHeaders(first_chain, true);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(!result.request_more);\r\n+    const auto [pow_validated_headers, success, request_more] = hss.ProcessNextHeaders(first_chain, true);\r\n+    BOOST_CHECK(success);\r\n+    BOOST_CHECK(!request_more);\r\n     // All headers should be ready for acceptance:\r\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\r\n+    BOOST_CHECK_EQUAL(pow_validated_headers.size(), first_chain.size());\r\n     // Nothing left for the sync logic to do:\r\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\r\n+    BOOST_CHECK_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n }\r\n \r\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\r\n+static void TooLittleWork(\r\n+    const std::vector<CBlockHeader>& second_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work)\r\n {\r\n-    // Verify that just trying to process the second chain would not succeed\r\n-    // (too little work).\r\n+    // Verify that just trying to process the second chain would not succeed (too little work).\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\r\n     BOOST_CHECK(hss.GetState() == HeadersSyncState::State::PRESYNC);\r\n-     // Pretend just the first message is \"full\", so we don't abort.\r\n+    // Pretend just the first message is \"full\", so we don't abort.\r\n     (void)hss.ProcessNextHeaders({second_chain.front()}, true);\r\n     BOOST_CHECK(hss.GetState() == HeadersSyncState::State::PRESYNC);\r\n \r\n     std::vector<CBlockHeader> headers_batch;\r\n     headers_batch.insert(headers_batch.end(), std::next(second_chain.begin(), 1), second_chain.end());\r\n     // Tell the sync logic that the headers message was not full, implying no\r\n-    // more headers can be requested. For a low-work-chain, this should causes\r\n+    // more headers can be requested. For a low-work-chain, this should cause\r\n     // the sync to end with no headers for acceptance.\r\n-    auto result = hss.ProcessNextHeaders(headers_batch, false);\r\n+    const auto [pow_validated_headers, success, request_more] = hss.ProcessNextHeaders(headers_batch, false);\r\n     BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\r\n-    BOOST_CHECK(result.pow_validated_headers.empty());\r\n-    BOOST_CHECK(!result.request_more);\r\n-    // Nevertheless, no validation errors should have been detected with the\r\n-    // chain:\r\n-    BOOST_CHECK(result.success);\r\n+    BOOST_CHECK(pow_validated_headers.empty());\r\n+    BOOST_CHECK(!request_more);\r\n+    // Nevertheless, no validation errors should have been detected with the chain:\r\n+    BOOST_CHECK(success);\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n\r\n</details>\r\n\r\nI see that some of these were done in next commits, but I'd prefer doing either moves or refactors or adding new checks in the commits to simplify review",
      "created_at": "2025-05-27T10:02:29Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108774510",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108774510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108808636",
      "pull_request_review_id": 2857912770,
      "id": 2108808636,
      "node_id": "PRRC_kwDOABII5859sd28",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 115,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we're reusing the previous `result` (which was brace initialized), what if we used braces to delimit the two independent code parts (+ a few other nits you might want to consider):\r\n```suggestion\r\n// Verify that just trying to process the second chain would not succeed (too little work).\r\nHeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\r\nBOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n// Pretend just the first message is \"full\", so we don't abort.\r\n{\r\n    const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({second_chain.begin(), 1}, true)};\r\n    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n    BOOST_CHECK(success);\r\n    BOOST_CHECK(request_more);\r\n    BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n}\r\n\r\n// Tell the sync logic that the headers message was not full, implying no\r\n// more headers can be requested. For a low-work-chain, this should cause\r\n// the sync to end with no headers for acceptance.\r\n{\r\n    const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({second_chain.begin() + 1, second_chain.end()}, false)};\r\n    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n    BOOST_CHECK(!request_more);\r\n    BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n    // Nevertheless, no validation errors should have been detected with the chain:\r\n    BOOST_CHECK(success);\r\n}\r\n```",
      "created_at": "2025-05-27T10:20:14Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108808636",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108808636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108817538",
      "pull_request_review_id": 2857912770,
      "id": 2108817538,
      "node_id": "PRRC_kwDOABII5859sgCC",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 113,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems to be the only place where `request_more` isn't validated.\r\n\r\nnit: what's the meaning of \"foiled\" here?\r\n",
      "created_at": "2025-05-27T10:25:04Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108817538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108817538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108830588",
      "pull_request_review_id": 2857912770,
      "id": 2108830588,
      "node_id": "PRRC_kwDOABII5859sjN8",
      "diff_hunk": "@@ -21,23 +21,23 @@ class uint_error : public std::runtime_error {\n };\n \n /** Template base class for unsigned big integers. */\n-template<unsigned int BITS>\n+template <unsigned int BITS>\n class base_uint\n {\n protected:\n     static_assert(BITS / 32 > 0 && BITS % 32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n     static constexpr int WIDTH = BITS / 32;\n     /** Big integer represented with 32-bit digits, least-significant first. */\n     uint32_t pn[WIDTH];\n-public:\n \n-    base_uint()\n+public:\n+    constexpr base_uint()",
      "path": "src/arith_uint256.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should we make any of these `explicit`?",
      "created_at": "2025-05-27T10:32:02Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108830588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108830588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108831717",
      "pull_request_review_id": 2857912770,
      "id": 2108831717,
      "node_id": "PRRC_kwDOABII5859sjfl",
      "diff_hunk": "@@ -13,6 +13,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n+constexpr int TARGET_BLOCKS{15000};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`size_t` might me more fitting here since `GenerateHeaders` accepts that instead of an `int`:\r\n```suggestion\r\nconstexpr size_t TARGET_BLOCKS{15'000};\r\n```",
      "created_at": "2025-05-27T10:32:42Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108831717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108831717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108844548",
      "pull_request_review_id": 2857912770,
      "id": 2108844548,
      "node_id": "PRRC_kwDOABII5859smoE",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we use `const std::span<const CBlockHeader>` in these helpers as well? And maybe split these long lines.",
      "created_at": "2025-05-27T10:39:52Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108844548",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108844548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108846074",
      "pull_request_review_id": 2857912770,
      "id": 2108846074,
      "node_id": "PRRC_kwDOABII5859sm_6",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n }\n \n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start)\n {\n     // This time we feed the first chain twice.\n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(first_chain, true)};\n+    // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 131,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 for comparing size instead of empty - the failure message would likely be more meaningful",
      "created_at": "2025-05-27T10:40:36Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108846074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108846074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108851720",
      "pull_request_review_id": 2857912770,
      "id": 2108851720,
      "node_id": "PRRC_kwDOABII5859soYI",
      "diff_hunk": "@@ -41,7 +44,7 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n \n     while (headers.size() < count) {\n         headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+        CBlockHeader& next_header = headers.back();",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think we could do these in the previous refactor commit instead - to separate low risk changes from ones where we have to may more attention, while keeping the first one about move-only changes + minor ones. Or do the first commit as strictly move-only and add a second one with these tiny refactors (I'd like the latter more).",
      "created_at": "2025-05-27T10:43:22Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108851720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108851720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108854570",
      "pull_request_review_id": 2857912770,
      "id": 2108854570,
      "node_id": "PRRC_kwDOABII5859spEq",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "full patch for 13aa0b860e9692715d96b13acacb3f83a537b905\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```diff\r\ndiff --git a/src/arith_uint256.h b/src/arith_uint256.h\r\nindex e021947381..b07e8e9f41 100644\r\n--- a/src/arith_uint256.h\r\n+++ b/src/arith_uint256.h\r\n@@ -31,7 +31,7 @@ protected:\r\n     uint32_t pn[WIDTH];\r\n \r\n public:\r\n-    constexpr base_uint()\r\n+    explicit constexpr base_uint()\r\n     {\r\n         for (int i = 0; i < WIDTH; i++)\r\n             pn[i] = 0;\r\n@@ -243,8 +243,8 @@ class arith_uint256 : public base_uint<256>\r\n {\r\n public:\r\n     constexpr arith_uint256() = default;\r\n-    constexpr arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}\r\n-    constexpr arith_uint256(uint64_t b) : base_uint<256>(b) {}\r\n+    constexpr arith_uint256(const base_uint& b) : base_uint(b) {}\r\n+    constexpr arith_uint256(const uint64_t b) : base_uint(b) {}\r\n \r\n     /**\r\n      * The \"compact\" format is a representation of a whole\r\ndiff --git a/src/test/headers_sync_chainwork_tests.cpp b/src/test/headers_sync_chainwork_tests.cpp\r\nindex b696285d0e..264959f8c3 100644\r\n--- a/src/test/headers_sync_chainwork_tests.cpp\r\n+++ b/src/test/headers_sync_chainwork_tests.cpp\r\n@@ -13,32 +13,35 @@\r\n \r\n #include <boost/test/unit_test.hpp>\r\n \r\n-constexpr int TARGET_BLOCKS{15000};\r\n+constexpr size_t TARGET_BLOCKS{15'000};\r\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\r\n \r\n-struct HeadersGeneratorSetup : public RegTestingSetup {\r\n+struct HeadersGeneratorSetup : RegTestingSetup\r\n+{\r\n     /** Search for a nonce to meet (regtest) proof of work */\r\n-    void FindProofOfWork(CBlockHeader& starting_header);\r\n+    static void FindProofOfWork(CBlockHeader& starting_header);\r\n     /**\r\n      * Generate headers in a chain that build off a given starting hash, using\r\n      * the given nVersion, advancing time by 1 second from the starting\r\n      * prev_time, and with a fixed merkle root hash.\r\n      */\r\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\r\n-            const uint256& starting_hash, const int nVersion, int prev_time,\r\n-            const uint256& merkle_root, const uint32_t nBits);\r\n+    static void GenerateHeaders(\r\n+        std::vector<CBlockHeader>& headers, size_t count,\r\n+        const uint256& starting_hash, int nVersion, int prev_time,\r\n+        const uint256& merkle_root, uint32_t nBits);\r\n };\r\n \r\n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\r\n {\r\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\r\n-        ++(starting_header.nNonce);\r\n+        ++starting_header.nNonce;\r\n     }\r\n }\r\n \r\n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n-        const uint256& merkle_root, const uint32_t nBits)\r\n+void HeadersGeneratorSetup::GenerateHeaders(\r\n+    std::vector<CBlockHeader>& headers,\r\n+    const size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n+    const uint256& merkle_root, const uint32_t nBits)\r\n {\r\n     uint256 prev_hash = starting_hash;\r\n \r\n@@ -48,7 +51,7 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n         next_header.nVersion = nVersion;\r\n         next_header.hashPrevBlock = prev_hash;\r\n         next_header.hashMerkleRoot = merkle_root;\r\n-        next_header.nTime = prev_time+1;\r\n+        next_header.nTime = prev_time + 1;\r\n         next_header.nBits = nBits;\r\n \r\n         FindProofOfWork(next_header);\r\n@@ -65,13 +68,20 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\r\n //    updates to the REDOWNLOAD phase successfully.\r\n // 2. Then we deliver the second set of headers and verify that they fail\r\n //    processing (presumably due to commitments not matching).\r\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\r\n+static void SneakyRedownload(\r\n+    const std::span<const CBlockHeader> first_chain,\r\n+    const std::span<const CBlockHeader> second_chain,\r\n+    const CBlockIndex* chain_start);\r\n // 3. Verify that repeating with the first set of headers in both phases is\r\n //    successful.\r\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\r\n+static void HappyPath(\r\n+    const std::span<const CBlockHeader> first_chain,\r\n+    const CBlockIndex* chain_start);\r\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\r\n //    behavior when the chain a peer provides has too little work.\r\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\r\n+static void TooLittleWork(\r\n+    const std::span<const CBlockHeader> second_chain,\r\n+    const CBlockIndex* chain_start);\r\n \r\n BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n {\r\n@@ -94,81 +104,101 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n     TooLittleWork(second_chain, chain_start);\r\n }\r\n \r\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\r\n+static void SneakyRedownload(\r\n+    const std::span<const CBlockHeader> first_chain,\r\n+    const std::span<const CBlockHeader> second_chain,\r\n+    const CBlockIndex* chain_start)\r\n {\r\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\r\n     // initially and then the rest.\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\r\n-    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({first_chain.begin(), 1}, true)};\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\r\n+    }\r\n \r\n     // Pretend the first header is still \"full\", so we don't abort.\r\n-    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\r\n-    // This chain should look valid, and we should have met the proof-of-work\r\n-    // requirement during PRESYNC and transitioned to REDOWNLOAD.\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    // The locator should reset to genesis.\r\n-    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({first_chain.begin() + 1, first_chain.end()}, true)};\r\n+        // This chain should look valid, and we should have met the proof-of-work\r\n+        // requirement during PRESYNC and transitioned to REDOWNLOAD.\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+        // The locator should reset to genesis.\r\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n+    }\r\n \r\n     // Try to sneakily feed back the second chain during REDOWNLOAD.\r\n-    result = hss.ProcessNextHeaders(second_chain, true);\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-    BOOST_CHECK(!result.success); // foiled!\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders(second_chain, true)};\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n+        BOOST_CHECK(!success); // foiled!\r\n+        BOOST_CHECK(!request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+    }\r\n }\r\n \r\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start)\r\n+static void HappyPath(\r\n+    const std::span<const CBlockHeader> first_chain,\r\n+    const CBlockIndex* chain_start)\r\n {\r\n     // This time we feed the first chain twice.\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\r\n-    auto result{hss.ProcessNextHeaders(first_chain, true)};\r\n-    // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    // The locator should reset to genesis.\r\n-    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n-\r\n-    result = hss.ProcessNextHeaders(first_chain, true);\r\n-    // Nothing left for the sync logic to do:\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(!result.request_more);\r\n-    // All headers should be ready for acceptance:\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), first_chain.size());\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders(first_chain, true)};\r\n+        // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+        // The locator should reset to genesis.\r\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n+    }\r\n+\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders(first_chain, true)};\r\n+        // Nothing left for the sync logic to do:\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(!request_more);\r\n+        // All headers should be ready for acceptance:\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), first_chain.size());\r\n+    }\r\n }\r\n \r\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\r\n+static void TooLittleWork(\r\n+    const std::span<const CBlockHeader> second_chain,\r\n+    const CBlockIndex* chain_start)\r\n {\r\n-    // Verify that just trying to process the second chain would not succeed\r\n-    // (too little work).\r\n+    // Verify that just trying to process the second chain would not succeed (too little work).\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\r\n     BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n     // Pretend just the first message is \"full\", so we don't abort.\r\n-    auto result{hss.ProcessNextHeaders(std::span{second_chain.begin(), 1}, true)};\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({second_chain.begin(), 1}, true)};\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+    }\r\n \r\n     // Tell the sync logic that the headers message was not full, implying no\r\n     // more headers can be requested. For a low-work-chain, this should cause\r\n     // the sync to end with no headers for acceptance.\r\n-    result = hss.ProcessNextHeaders(std::span{second_chain.begin() + 1, second_chain.end()}, false);\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-    BOOST_CHECK(!result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    // Nevertheless, no validation errors should have been detected with the\r\n-    // chain:\r\n-    BOOST_CHECK(result.success);\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({second_chain.begin() + 1, second_chain.end()}, false)};\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n+        BOOST_CHECK(!request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+        // Nevertheless, no validation errors should have been detected with the chain:\r\n+        BOOST_CHECK(success);\r\n+    }\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n\r\n</details>",
      "created_at": "2025-05-27T10:44:53Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108854570",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108854570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108862657",
      "pull_request_review_id": 2857912770,
      "id": 2108862657,
      "node_id": "PRRC_kwDOABII5859srDB",
      "diff_hunk": "",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For other headers we've used an underscore instead of a hyphen in the file name: `src/headerssync_params.h`",
      "created_at": "2025-05-27T10:49:22Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108862657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108862657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108864154",
      "pull_request_review_id": 2857912770,
      "id": 2108864154,
      "node_id": "PRRC_kwDOABII5859sraa",
      "diff_hunk": "@@ -53,7 +53,7 @@ Release Process\n     - Set `MINCHAINWORK_HEADERS` to the height used for the `nMinimumChainWork` calculation above.\n     - Check that the other variables still look reasonable.\n   - Run the script. It works fine in CPython, but PyPy is much faster (seconds instead of minutes): `pypy3 contrib/devtools/headerssync-params.py`.\n-  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into the top of [`src/headerssync.cpp`](/src/headerssync.cpp).\n+  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into [`src/headerssync-params.h`](/src/headerssync-params.h).",
      "path": "doc/release-process.md",
      "position": 1,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should we update https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md?plain=1#L140 as well?",
      "created_at": "2025-05-27T10:50:16Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108864154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108864154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108871856",
      "pull_request_review_id": 2857912770,
      "id": 2108871856,
      "node_id": "PRRC_kwDOABII5859stSw",
      "diff_hunk": "@@ -1,26 +1,18 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n+#include <headerssync-params.h>\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes 48 bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find the new comment slightly more confusing - the point is that the cpp and py assumptions should align, right?\r\n```suggestion\r\nstatic_assert(sizeof(CompressedHeader) == 48); // align with headerssync-params.py\r\n```",
      "created_at": "2025-05-27T10:54:20Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108871856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108871856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108874990",
      "pull_request_review_id": 2857912770,
      "id": 2108874990,
      "node_id": "PRRC_kwDOABII5859suDu",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I find it a bit circular that the comment explaining a constant references the upcoming constant itself\r\n```suggestion\r\n//! Commitment period, in blocks\r\n```",
      "created_at": "2025-05-27T10:56:06Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108874990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108874990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115807522",
      "pull_request_review_id": 2881152192,
      "id": 2115807522,
      "node_id": "PRRC_kwDOABII585-HKki",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108854570,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What's the point of making a constructor that takes no arguments `explicit`?",
      "created_at": "2025-05-30T12:06:00Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115807522",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115807522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115831187",
      "pull_request_review_id": 2881152192,
      "id": 2115831187,
      "node_id": "PRRC_kwDOABII585-HQWT",
      "diff_hunk": "@@ -21,23 +21,23 @@ class uint_error : public std::runtime_error {\n };\n \n /** Template base class for unsigned big integers. */\n-template<unsigned int BITS>\n+template <unsigned int BITS>\n class base_uint\n {\n protected:\n     static_assert(BITS / 32 > 0 && BITS % 32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n     static constexpr int WIDTH = BITS / 32;\n     /** Big integer represented with 32-bit digits, least-significant first. */\n     uint32_t pn[WIDTH];\n-public:\n \n-    base_uint()\n+public:\n+    constexpr base_uint()",
      "path": "src/arith_uint256.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108830588,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "One could argue at least the `uint64_t`-taking ctor here and in `arith_uint256` should be explicit, but I'd rather not have to change src/pow.cpp in this PR.",
      "created_at": "2025-05-30T12:23:05Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115831187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115831187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115848183",
      "pull_request_review_id": 2881152192,
      "id": 2115848183,
      "node_id": "PRRC_kwDOABII585-HUf3",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n+constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n+\n+//! Only feed headers to validation once this many headers on top have been\n+//! received and validated against commitments.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "0c1978b70dd262ffbabf6f034a210a90ff07bb75",
      "in_reply_to_id": 2100413257,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I like the idea of including the generation date, and was including changes to the Python generator file in an unpublished version of this PR, but decided to keep that separate. Added to that separate WIP branch.\r\n\r\nThe magic numbers are not updated manually, they are included in the calculated output:\r\nhttps://github.com/bitcoin/bitcoin/blob/11a2d3a63e90cdc1920ede3c67d52a9c72860e6b/contrib/devtools/headerssync-params.py#L347-L348",
      "created_at": "2025-05-30T12:35:25Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115848183",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115848183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115856000",
      "pull_request_review_id": 2881152192,
      "id": 2115856000,
      "node_id": "PRRC_kwDOABII585-HWaA",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 113,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108817538,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we didn't succeed, then `request_more` shouldn't matter, but agree it's best to have it be false (just like `pow_validated_headers` should be empty). It would be better if `ProcessNextHeaders` returned something like `std::optional<ProcessingResult>` instead of having a `bool` field to indicate success, but this PR already feels large enough.\r\n\r\n\"foiled\" means the attack attempt was detected and therefore failed. Elaborated the comment a bit in next push.",
      "created_at": "2025-05-30T12:40:53Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115856000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115856000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115857753",
      "pull_request_review_id": 2881152192,
      "id": 2115857753,
      "node_id": "PRRC_kwDOABII585-HW1Z",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108844548,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree on the split but what would be the point of changing the type?",
      "created_at": "2025-05-30T12:42:02Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115857753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115857753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115868402",
      "pull_request_review_id": 2881152192,
      "id": 2115868402,
      "node_id": "PRRC_kwDOABII585-HZby",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108874990,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added to separate WIP branch modifying generator script.",
      "created_at": "2025-05-30T12:49:03Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115868402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115868402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115879398",
      "pull_request_review_id": 2881152192,
      "id": 2115879398,
      "node_id": "PRRC_kwDOABII585-HcHm",
      "diff_hunk": "@@ -1,26 +1,18 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n+#include <headerssync-params.h>\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes 48 bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108871856,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The new comment is replacing the first (mention of python file) and last comments here:\r\nhttps://github.com/bitcoin/bitcoin/blob/11a2d3a63e90cdc1920ede3c67d52a9c72860e6b/src/headerssync.cpp#L12-L25\r\n\r\nYour comment would probably be enough but I'd rather keep some more context.",
      "created_at": "2025-05-30T12:55:58Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115879398",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115879398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115884389",
      "pull_request_review_id": 2881152192,
      "id": 2115884389,
      "node_id": "PRRC_kwDOABII585-HdVl",
      "diff_hunk": "@@ -53,7 +53,7 @@ Release Process\n     - Set `MINCHAINWORK_HEADERS` to the height used for the `nMinimumChainWork` calculation above.\n     - Check that the other variables still look reasonable.\n   - Run the script. It works fine in CPython, but PyPy is much faster (seconds instead of minutes): `pypy3 contrib/devtools/headerssync-params.py`.\n-  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into the top of [`src/headerssync.cpp`](/src/headerssync.cpp).\n+  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into [`src/headerssync-params.h`](/src/headerssync-params.h).",
      "path": "doc/release-process.md",
      "position": 1,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108864154,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, missed that!",
      "created_at": "2025-05-30T12:59:04Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115884389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115884389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116580384",
      "pull_request_review_id": 2881152192,
      "id": 2116580384,
      "node_id": "PRRC_kwDOABII585-KHQg",
      "diff_hunk": "",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108862657,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Started renaming but then realized that we already have *headerssync-params.py*. It's not obvious to me that underscores would be more correct for C++ files. We do have other C++ files with hyphens.",
      "created_at": "2025-05-30T20:18:21Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2116580384",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116580384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116586810",
      "pull_request_review_id": 2881152192,
      "id": 2116586810,
      "node_id": "PRRC_kwDOABII585-KI06",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 115,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Took the scoping idea, still not sure about the structured bindings.",
      "created_at": "2025-05-30T20:22:40Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2116586810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116586810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116614226",
      "pull_request_review_id": 2882477803,
      "id": 2116614226,
      "node_id": "PRRC_kwDOABII585-KPhS",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 113,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108817538,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hm.. my `std::optional<ProcessingResult>` suggestion would ~not work~ not clarify things here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a7b9cc4a0af0dbe4031ec5848d403f61dc9c3356/src/test/headers_sync_chainwork_tests.cpp#L127-L136\r\n\r\nSuccess seems to mean that PRESYNC- and REDOWNLOAD-headers matched, even if the chain is too short.",
      "created_at": "2025-05-30T20:45:37Z",
      "updated_at": "2025-05-30T20:47:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2116614226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116614226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120449098",
      "pull_request_review_id": 2887351042,
      "id": 2120449098,
      "node_id": "PRRC_kwDOABII585-Y3xK",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 115,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> not sure about the structured bindings\r\n\r\nThat's what helped me in [noticing](https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108817538) that we weren't checking `request_more`",
      "created_at": "2025-06-02T08:39:31Z",
      "updated_at": "2025-06-02T08:39:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120449098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120449098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120449675",
      "pull_request_review_id": 2887351923,
      "id": 2120449675,
      "node_id": "PRRC_kwDOABII585-Y36L",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108844548,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "* they're simpler/less specific\r\n* they're shorter (matters for these long lines)\r\n* you're already changing them in other places\r\n\r\ni.e. what's the point of keeping them as vectors when we don't actually need so much power? ",
      "created_at": "2025-06-02T08:39:50Z",
      "updated_at": "2025-06-02T08:39:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120449675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120449675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120450540",
      "pull_request_review_id": 2887353340,
      "id": 2120450540,
      "node_id": "PRRC_kwDOABII585-Y4Hs",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108854570,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Based on the [Sonarcloud](https://corecheck.dev/bitcoin/bitcoin/pulls/32579) recommendations I eagerly checked which other constructors can be explicit, but [exploring](https://cplusplus.com/forum/general/168292/) your question in more detail it seems there's barely any advantage in explicit default constructors.",
      "created_at": "2025-06-02T08:40:21Z",
      "updated_at": "2025-06-02T08:40:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120450540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120450540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120450728",
      "pull_request_review_id": 2887353657,
      "id": 2120450728,
      "node_id": "PRRC_kwDOABII585-Y4Ko",
      "diff_hunk": "",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108862657,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to be a mix indeed:\r\n```bash\r\n% find . -name \"*.h\" | grep '_' | wc -l\r\n185\r\n```\r\nvs\r\n```bash\r\n% find . -name \"*.h\" | grep '-' | wc -l\r\n39\r\n```\r\nand most of those are from the recent `ipc` changes:\r\n```bash\r\n% find . -name \"*.h\" | grep '-' | grep -v ipc | wc -l            \r\n11\r\n```\r\n\r\nit's just a nit from my part, but standard lib also uses underscores mostly (e.g. `string_view`) and in many [regexes](https://www.w3schools.com/jsref/jsref_regexp_wordchar.asp) the `\\w`, i.e. a word character includes `_` but usually not `-` (if I remember it correctly some bash implementations can also trip on `-`, but that's likely not a problem here).",
      "created_at": "2025-06-02T08:40:27Z",
      "updated_at": "2025-06-02T08:40:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120450728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120450728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120817742",
      "pull_request_review_id": 2887893367,
      "id": 2120817742,
      "node_id": "PRRC_kwDOABII585-aRxO",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108854570,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, the Sonarcloud recommendation was actually for the `uint64_t`-ctor, similar to my response here: https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115831187.\r\n\r\nTested out making it explicit, modifying 13 additional files. It did uncover some implicit casts that went from `int64_t Params::nPowTargetTimespan` to `arith_uint256`... But the rest felt a bit forced. I think it is intentional and makes sense for u64s to implicitly cast to u256.",
      "created_at": "2025-06-02T11:08:10Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120817742",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120817742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120826619",
      "pull_request_review_id": 2887893367,
      "id": 2120826619,
      "node_id": "PRRC_kwDOABII585-aT77",
      "diff_hunk": "@@ -63,15 +63,19 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "34e1513efeb193a46d37f184b9ab41bcda974afa",
      "in_reply_to_id": 2108774510,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Incorporated most of this, breaking out commits, expanding function prototypes into multiple lines, even removing the `HeadersGeneratorSetup` type in favor of free functions).",
      "created_at": "2025-06-02T11:13:39Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120826619",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120826619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120833106",
      "pull_request_review_id": 2887893367,
      "id": 2120833106,
      "node_id": "PRRC_kwDOABII585-aVhS",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 115,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there anything to catch wrong order?\r\n```C++\r\nconst auto [pow_validated_headers, success, request_more] = ...\r\n```\r\nvs\r\n```C++\r\nconst auto [pow_validated_headers, request_more, success] = ...\r\n```\r\n(There's clang-tidy logic to catch `/*paramname=*/true` mismatches for function calls).",
      "created_at": "2025-06-02T11:17:41Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120833106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120833106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120844393",
      "pull_request_review_id": 2887893367,
      "id": 2120844393,
      "node_id": "PRRC_kwDOABII585-aYRp",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108844548,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Using `const vector&` communicates that we are sending in the entire chain, not some subset. I like the specificity. `const vector`s feel more neutered than spans IMO.",
      "created_at": "2025-06-02T11:21:44Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120844393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120844393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120864823",
      "pull_request_review_id": 2887893367,
      "id": 2120864823,
      "node_id": "PRRC_kwDOABII585-adQ3",
      "diff_hunk": "",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108862657,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, seems src/ipc/ really went all in on `-`. Holding off on changing for now to see what others think.",
      "created_at": "2025-06-02T11:29:44Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120864823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120864823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121282517",
      "pull_request_review_id": 2888616979,
      "id": 2121282517,
      "node_id": "PRRC_kwDOABII585-cDPV",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 115,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think there could/should be, you could name them as `const auto [x, y, z]{hss.ProcessNextHeaders(std::span{second_chain.begin() + 1, second_chain.end()}, false)};` as well",
      "created_at": "2025-06-02T14:13:31Z",
      "updated_at": "2025-06-02T14:13:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2121282517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121282517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121291449",
      "pull_request_review_id": 2888631347,
      "id": 2121291449,
      "node_id": "PRRC_kwDOABII585-cFa5",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108844548,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "When we're only iterating inside, it makes sense to have a fine-grained, segregated interface and only define the narrowest functionality which supports the operations we actually need inside. It announces to the reader that we shouldn't expect any extra complexity, only the ones that the interface implements. But if you think vector does it better, I'm also fine with that. For me span is not about a subset of teh data but a subset of the functionality - just a narrowed view to rule out certain operations that we definitely won't need.",
      "created_at": "2025-06-02T14:17:23Z",
      "updated_at": "2025-06-02T14:17:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2121291449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121291449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121293497",
      "pull_request_review_id": 2888634450,
      "id": 2121293497,
      "node_id": "PRRC_kwDOABII585-cF65",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108854570,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for checking!",
      "created_at": "2025-06-02T14:18:15Z",
      "updated_at": "2025-06-02T14:18:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2121293497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121293497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121983471",
      "pull_request_review_id": 2889669324,
      "id": 2121983471,
      "node_id": "PRRC_kwDOABII585-euXv",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 115,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, but when breaking apart a struct and two of the new variable names match struct field names with identical types, it would be nice to have some kind of guard rail.",
      "created_at": "2025-06-02T19:27:00Z",
      "updated_at": "2025-06-02T21:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2121983471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121983471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2122154034",
      "pull_request_review_id": 2889669324,
      "id": 2122154034,
      "node_id": "PRRC_kwDOABII585-fYAy",
      "diff_hunk": "@@ -1,26 +1,18 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n+#include <headerssync-params.h>\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes 48 bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,",
      "path": "src/headerssync.cpp",
      "position": 30,
      "original_position": 31,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just realized a different possible approach: passing `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` values into the `HeadersSyncState`-ctor. Right now that aspect of the class is hardcoded for mainnet, despite the ctor accepting `Consensus::Params`. Having these values be sent in would enable tests to send in different (smaller) variables for regtest, while still testing behavior around the threshold.\r\n\r\nIn fact, it would fit nicely with other values updated during the release process to have them written into the corresponding section (mainnet/regtest/etc) of *src/kernel/chainparams.cpp*.\r\n\r\nStarted implementing that approach to see how it pans out.",
      "created_at": "2025-06-02T21:04:45Z",
      "updated_at": "2025-06-02T21:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2122154034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2122154034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126641973",
      "pull_request_review_id": 2896798619,
      "id": 2126641973,
      "node_id": "PRRC_kwDOABII585-wfs1",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n+constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n+\n+//! Only feed headers to validation once this many headers on top have been\n+//! received and validated against commitments.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "0c1978b70dd262ffbabf6f034a210a90ff07bb75",
      "in_reply_to_id": 2100413257,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added generation date in latest push as it was making modifications to the Python script anyway.",
      "created_at": "2025-06-04T13:43:16Z",
      "updated_at": "2025-06-04T14:39:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2126641973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126641973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126644715",
      "pull_request_review_id": 2896798619,
      "id": 2126644715,
      "node_id": "PRRC_kwDOABII585-wgXr",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108874990,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Latest push has:\r\n```C++\r\nstruct HeadersSyncParams {\r\n    //! Distance in blocks between header commitments.\r\n    size_t commitment_period;\r\n...\r\n```\r\nin *src/kernel/chainparams.h*.",
      "created_at": "2025-06-04T13:44:14Z",
      "updated_at": "2025-06-04T14:39:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2126644715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126644715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126653972",
      "pull_request_review_id": 2896798619,
      "id": 2126653972,
      "node_id": "PRRC_kwDOABII585-wioU",
      "diff_hunk": "@@ -1,26 +1,18 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n+#include <headerssync-params.h>\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes 48 bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,",
      "path": "src/headerssync.cpp",
      "position": 30,
      "original_position": 31,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "in_reply_to_id": 2122154034,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Implemented in latest push.",
      "created_at": "2025-06-04T13:48:16Z",
      "updated_at": "2025-06-04T14:39:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2126653972",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126653972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152215463",
      "pull_request_review_id": 2935575232,
      "id": 2152215463,
      "node_id": "PRRC_kwDOABII586ASDOn",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 33,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it's regtest specific - is it?",
      "created_at": "2025-06-17T13:00:40Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2152215463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152215463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152231103",
      "pull_request_review_id": 2935575232,
      "id": 2152231103,
      "node_id": "PRRC_kwDOABII586ASHC_",
      "diff_hunk": "@@ -79,16 +79,13 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n                     genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n     const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n-    std::vector<CBlockHeader> headers_batch;\n \n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n-\n     hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders({first_chain.front()}, true);\n+    (void)hss->ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "7d45872a056145754c993bd642c3b49a6f7c14c5",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Doc states: `by delivering 1 header initially and then the rest`. Could we clarify this by code instead?\r\nWe don't really have `head`/`tail` like in many functional programming languages, but maybe we could do:\r\n```C++\r\n    const std::span headers_batch{second_chain};\r\n    (void)hss->ProcessNextHeaders(headers_batch.first(1), true);\r\n...\r\n    result = hss->ProcessNextHeaders(headers_batch.last(headers_batch.size() - 1), false);\r\n```",
      "created_at": "2025-06-17T13:07:19Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2152231103",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152231103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152271938",
      "pull_request_review_id": 2935575232,
      "id": 2152271938,
      "node_id": "PRRC_kwDOABII586ASRBC",
      "diff_hunk": "@@ -119,15 +116,13 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n      // Pretend just the first message is \"full\", so we don't abort.\n-    (void)hss->ProcessNextHeaders({second_chain.front()}, true);\n+    (void)hss->ProcessNextHeaders(std::span{second_chain.begin(), 1}, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n \n-    headers_batch.clear();",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 317,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "7d45872a056145754c993bd642c3b49a6f7c14c5",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 for getting rid of this",
      "created_at": "2025-06-17T13:24:26Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2152271938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152271938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152292721",
      "pull_request_review_id": 2935575232,
      "id": 2152292721,
      "node_id": "PRRC_kwDOABII586ASWFx",
      "diff_hunk": "@@ -60,15 +60,23 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 for splitting these up. \r\nIs it important to keep 1) and 2) as a single method, given that we thought it's best described in two separate list items? Since you grouped them into a \"redownload\", it's probably the comments that should be adjusted.",
      "created_at": "2025-06-17T13:32:59Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2152292721",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152292721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152307017",
      "pull_request_review_id": 2935575232,
      "id": 2152307017,
      "node_id": "PRRC_kwDOABII586ASZlJ",
      "diff_hunk": "@@ -97,64 +105,58 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& first_chain,\n         const std::vector<CBlockHeader>& second_chain)\n {\n-    std::unique_ptr<HeadersSyncState> hss;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "79be6f7744790472ca92862e044390c5e65e0eb5",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Maybe mention in the [previous commit message](a0cd196d2fb4fd1bfae206ffaece531b73277896) that \"don't worry, I'm not gonna' leave the inits like that\" :D",
      "created_at": "2025-06-17T13:39:16Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2152307017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152307017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152317411",
      "pull_request_review_id": 2935575232,
      "id": 2152317411,
      "node_id": "PRRC_kwDOABII586AScHj",
      "diff_hunk": "@@ -97,64 +105,58 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& first_chain,\n         const std::vector<CBlockHeader>& second_chain)\n {\n-    std::unique_ptr<HeadersSyncState> hss;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+    (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss->ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n \n     // This chain should look valid, and we should have met the proof-of-work\n     // requirement.\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n     // Try to sneakily feed back the second chain.\n-    result = hss->ProcessNextHeaders(second_chain, true);\n+    result = hss.ProcessNextHeaders(second_chain, true);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n }\n \n static void HappyPath(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& first_chain)\n {\n-    std::unique_ptr<HeadersSyncState> hss;\n-    HeadersSyncState::ProcessingResult result;\n     // This time we feed the first chain twice.\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+    (void)hss.ProcessNextHeaders(first_chain, true);\n+    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    auto result{hss.ProcessNextHeaders(first_chain, true)};\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(!result.request_more);\n     // All headers should be ready for acceptance:\n     BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n     // Nothing left for the sync logic to do:\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n }\n \n static void TooLittleWork(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& second_chain)\n {\n-    std::unique_ptr<HeadersSyncState> hss;\n-    HeadersSyncState::ProcessingResult result;\n     // Verify that just trying to process the second chain would not succeed\n     // (too little work).\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "79be6f7744790472ca92862e044390c5e65e0eb5",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I don't particularly like the abbreviated `hss` name - would `const auto sync_state{CreateState(chain_start, Params())};` maybe be more descriptive?",
      "created_at": "2025-06-17T13:43:23Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2152317411",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2152317411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158237711",
      "pull_request_review_id": 2935575232,
      "id": 2158237711,
      "node_id": "PRRC_kwDOABII586ApBgP",
      "diff_hunk": "@@ -109,24 +109,35 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n     // initially and then the rest.\n     HeadersSyncState hss{CreateState(chain_start, Params())};\n     {\n-        (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+        // Just feed one header and check state.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "667fd31e740decc25471bb153e5e0547b3463d4d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n        const auto result{hss.ProcessNextHeaders({first_chain.begin(), 1}, /*full_headers_message=*/true)};\r\n```",
      "created_at": "2025-06-20T07:24:50Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158237711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158237711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158259661",
      "pull_request_review_id": 2935575232,
      "id": 2158259661,
      "node_id": "PRRC_kwDOABII586ApG3N",
      "diff_hunk": "@@ -109,24 +109,35 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n     // initially and then the rest.\n     HeadersSyncState hss{CreateState(chain_start, Params())};\n     {\n-        (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+        // Just feed one header and check state.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "667fd31e740decc25471bb153e5e0547b3463d4d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`HeadersSyncState::State::PRESYNC` is very verbose in a file called `headers_sync_chainwork_tests` - can we `using State = HeadersSyncState::State;` here instead to reduce the noise somewhat?",
      "created_at": "2025-06-20T07:39:19Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158259661",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158259661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158283917",
      "pull_request_review_id": 2935575232,
      "id": 2158283917,
      "node_id": "PRRC_kwDOABII586ApMyN",
      "diff_hunk": "@@ -60,15 +60,23 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we really need these forward declarations here? Wouldn't it be simpler to just put the test at the end of the file like we're doing in other places e.g. https://github.com/bitcoin/bitcoin/blob/master/src/test/addrman_tests.cpp#L23-L61 ?\r\nIf we do need the prototypes can we maybe remove the arg names to reduce the noise?",
      "created_at": "2025-06-20T07:54:34Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158283917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158283917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158437463",
      "pull_request_review_id": 2935575232,
      "id": 2158437463,
      "node_id": "PRRC_kwDOABII586ApyRX",
      "diff_hunk": "@@ -52,95 +55,222 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n         prev_hash = next_header.GetHash();\n         prev_time = next_header.nTime;\n     }\n-    return;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+static HeadersSyncState CreateState(const CBlockIndex* chain_start, const CChainParams& chain_params)\n+{\n+    return {/*id=*/0,\n+            chain_params.GetConsensus(),\n+            HeadersSyncParams{\n+                .commitment_period = COMMITMENT_PERIOD,\n+                .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+            },\n+            chain_start,\n+            /*minimum_required_work=*/CHAIN_WORK};\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n \n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain);\n+// 4. Finally, repeat the second set of headers in both phases to demonstrate\n+//    behavior when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain);\n+\n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    std::unique_ptr<HeadersSyncState> hss;\n-\n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n-    std::vector<CBlockHeader> headers_batch;\n+    SneakyRedownload(chain_start, first_chain, second_chain);\n+    HappyPath(chain_start, first_chain);\n+    TooLittleWork(chain_start, second_chain);\n+    TooBigBuffer(chain_start, first_chain);\n+}\n \n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain)\n+{\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n-\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    (void)hss->ProcessNextHeaders({first_chain.front()}, true);\n-    // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss->ProcessNextHeaders(headers_batch, true);\n-\n-    // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    // Try to sneakily feed back the second chain.\n-    result = hss->ProcessNextHeaders(second_chain, true);\n-    BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-\n-    // Now try again, this time feeding the first chain twice.\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    (void)hss->ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    result = hss->ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(!result.request_more);\n-    // All headers should be ready for acceptance:\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n-    // Nothing left for the sync logic to do:\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-\n-    // Finally, verify that just trying to process the second chain would not\n-    // succeed (too little work)\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n-     // Pretend just the first message is \"full\", so we don't abort.\n-    (void)hss->ProcessNextHeaders({second_chain.front()}, true);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n-\n-    headers_batch.clear();\n-    headers_batch.insert(headers_batch.end(), std::next(second_chain.begin(), 1), second_chain.end());\n-    // Tell the sync logic that the headers message was not full, implying no\n-    // more headers can be requested. For a low-work-chain, this should causes\n-    // the sync to end with no headers for acceptance.\n-    result = hss->ProcessNextHeaders(headers_batch, false);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-    BOOST_CHECK(result.pow_validated_headers.empty());\n-    BOOST_CHECK(!result.request_more);\n-    // Nevertheless, no validation errors should have been detected with the\n-    // chain:\n-    BOOST_CHECK(result.success);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+    {\n+        // Just feed one header and check state.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n+    }\n+\n+    {\n+        // Pretend the message is still \"full\", so we don't abort.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n+        // This chain should look valid, and we should have met the proof-of-work\n+        // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        // The locator should reset to genesis.\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n+    }\n+\n+    {\n+        // Try to sneakily feed back the second chain during REDOWNLOAD.\n+        auto result{hss.ProcessNextHeaders(second_chain, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n+        BOOST_CHECK(!result.success); // Foiled! We detected mismatching headers.\n+        BOOST_CHECK(!result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    }\n+}\n+\n+static void HappyPath(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // This time we feed the first chain twice.\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+\n+    // During normal operation we shouldn't get the redownload buffer size warning.\n+    DebugLogHelper forbidden{BUFFER_SIZE_WARNING, [](const std::string* str) {\n+        if (str == nullptr) {\n+            return false; // Disable exception for not finding a match.\n+        } else {\n+            throw std::runtime_error{strprintf(\"'%s' should not exist in debug log\\n\", str)};\n+        }\n+    }};\n+\n+    const auto genesis_hash{Params().GenesisBlock().GetHash()};\n+    {\n+        auto result{hss.ProcessNextHeaders(first_chain, true)};\n+        // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        // The locator should reset to genesis.\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), genesis_hash);\n+    }\n+\n+    {\n+        // Process only so that the internal threshold isn't met, meaning validated\n+        // headers shouldn't be returned yet:\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, true)};\n+        // Not done:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain[REDOWNLOAD_BUFFER_SIZE - 1].GetHash());\n+    }\n+\n+    CBlockHeader first_after_genesis;\n+    {\n+        // Next header should make us exceed the threshold, but still not be done:\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE, 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_REQUIRE_EQUAL(result.pow_validated_headers.size(), 1);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain[REDOWNLOAD_BUFFER_SIZE].GetHash());\n+        first_after_genesis = result.pow_validated_headers.front();\n+        BOOST_CHECK_EQUAL(first_after_genesis.hashPrevBlock, genesis_hash);\n+    }\n+\n+    {\n+        // Feed in remaining headers, meeting the work threshold again and\n+        // completing the REDOWNLOAD phase.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE + 1, first_chain.end()}, true)};\n+        // Nothing left for the sync logic to do:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(!result.request_more);\n+        // All headers except the one already returned above:\n+        BOOST_REQUIRE_EQUAL(result.pow_validated_headers.size(), first_chain.size() - 1);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.front().hashPrevBlock, first_after_genesis.GetHash());\n+    }\n+}\n+\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain)",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 306,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`first_chain`/`second_chain` is a bit verbose given how often we're using them",
      "created_at": "2025-06-20T09:12:11Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158437463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158437463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158463219",
      "pull_request_review_id": 2935575232,
      "id": 2158463219,
      "node_id": "PRRC_kwDOABII586Ap4jz",
      "diff_hunk": "",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "typo in commit message of 42e746096b93b8026569817d8925750089d6daf4",
      "created_at": "2025-06-20T09:23:37Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158463219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158463219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158464358",
      "pull_request_review_id": 2935575232,
      "id": 2158464358,
      "node_id": "PRRC_kwDOABII586Ap41m",
      "diff_hunk": "@@ -87,6 +89,9 @@ static void HappyPath(const CBlockIndex* chain_start,\n static void TooLittleWork(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& second_chain);\n \n+static void TooBigBuffer(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this scenario could also use a comment like the rest",
      "created_at": "2025-06-20T09:24:14Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158464358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158464358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158492230",
      "pull_request_review_id": 2935575232,
      "id": 2158492230,
      "node_id": "PRRC_kwDOABII586Ap_pG",
      "diff_hunk": "@@ -153,6 +159,16 @@ static void HappyPath(const CBlockIndex* chain_start,\n {\n     // This time we feed the first chain twice.\n     HeadersSyncState hss{CreateState(chain_start, Params())};\n+\n+    // During normal operation we shouldn't get the redownload buffer size warning.\n+    DebugLogHelper forbidden{BUFFER_SIZE_WARNING, [](const std::string* str) {\n+        if (str == nullptr) {\n+            return false; // Disable exception for not finding a match.\n+        } else {\n+            throw std::runtime_error{strprintf(\"'%s' should not exist in debug log\\n\", str)};\n+        }\n+    }};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is a bit hacky - can we add a negated helper to `logging.h`?\r\n```C++\r\n// Test fails if the pattern *DOES NOT* show up.\r\n#define ASSERT_DEBUG_LOG(message) DebugLogHelper UNIQUE_NAME(debugloghelper)(message)\r\n// Test fails if the pattern *DOES* show up.\r\n#define ASSERT_NO_DEBUG_LOG(message)                                              \\\r\n    DebugLogHelper UNIQUE_NAME(nologhelper){                                      \\\r\n        message,                                                                  \\\r\n        [](const std::string* line) {                                             \\\r\n            if (line) throw std::runtime_error(\"unexpected log line: \" + *line);  \\\r\n            return false; /* suppress default 'not found' failure */              \\\r\n        }                                                                         \\\r\n    }\r\n```\r\nAnd use it here as:\r\n```C++\r\n    // During normal operation we shouldn't get the redownload buffer size warning.\r\n    ASSERT_NO_DEBUG_LOG(BUFFER_SIZE_WARNING);\r\n```",
      "created_at": "2025-06-20T09:35:14Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158492230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158492230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158495479",
      "pull_request_review_id": 2935575232,
      "id": 2158495479,
      "node_id": "PRRC_kwDOABII586AqAb3",
      "diff_hunk": "@@ -234,4 +250,27 @@ static void TooLittleWork(const CBlockIndex* chain_start,\n     }\n }\n \n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // Intentionally too big redownload buffer in order to trigger warning.\n+    HeadersSyncState hss{/*id=*/0,\n+                         Params().GetConsensus(),\n+                         HeadersSyncParams{\n+                             .commitment_period = COMMITMENT_PERIOD,\n+                             .redownload_buffer_size = first_chain.size(),\n+                         },\n+                         chain_start,\n+                         /*minimum_required_work=*/CHAIN_WORK};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we should be able to reuse `CreateState` here - if we make `HeadersSyncParams` configurable:\r\n```C++\r\nstatic HeadersSyncState CreateState(const CChainParams& chain_params, const HeadersSyncParams& sync_params, const CBlockIndex* chain_start)\r\n{\r\n    return {/*id=*/0,\r\n            chain_params.GetConsensus(),\r\n            sync_params,\r\n            chain_start,\r\n            /*minimum_required_work=*/CHAIN_WORK};\r\n}\r\n```\r\nand\r\n```C++\r\n// Scenario that intentionally uses an oversized buffer to trigger the warning.\r\nstatic void TooBigBuffer(const CBlockIndex* chain_start, const std::vector<CBlockHeader>& chain1)\r\n{\r\n    // Intentionally too big redownload buffer in order to trigger warning.\r\n    HeadersSyncState state{CreateState(Params(), HeadersSyncParams{COMMITMENT_PERIOD, chain1.size()}, chain_start)};\r\n    ...\r\n```",
      "created_at": "2025-06-20T09:36:40Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158495479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158495479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 257,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158497691",
      "pull_request_review_id": 2935575232,
      "id": 2158497691,
      "node_id": "PRRC_kwDOABII586AqA-b",
      "diff_hunk": "@@ -234,4 +250,27 @@ static void TooLittleWork(const CBlockIndex* chain_start,\n     }\n }\n \n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // Intentionally too big redownload buffer in order to trigger warning.\n+    HeadersSyncState hss{/*id=*/0,\n+                         Params().GetConsensus(),\n+                         HeadersSyncParams{\n+                             .commitment_period = COMMITMENT_PERIOD,\n+                             .redownload_buffer_size = first_chain.size(),\n+                         },\n+                         chain_start,\n+                         /*minimum_required_work=*/CHAIN_WORK};\n+    (void)hss.ProcessNextHeaders(first_chain, true);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 67,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we validate this as well instead of just voiding it?\r\n```C++\r\nCHECK_RESULT(state.ProcessNextHeaders(chain1, /*full_headers_message=*/true),\r\n             state, State::REDOWNLOAD,\r\n             /*exp_success=*/true,\r\n             /*exp_request_more=*/true,\r\n             /*exp_headers_size=*/0);\r\n```",
      "created_at": "2025-06-20T09:37:43Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158497691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158497691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158502439",
      "pull_request_review_id": 2935575232,
      "id": 2158502439,
      "node_id": "PRRC_kwDOABII586AqCIn",
      "diff_hunk": "@@ -52,95 +55,222 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n         prev_hash = next_header.GetHash();\n         prev_time = next_header.nTime;\n     }\n-    return;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+static HeadersSyncState CreateState(const CBlockIndex* chain_start, const CChainParams& chain_params)\n+{\n+    return {/*id=*/0,\n+            chain_params.GetConsensus(),\n+            HeadersSyncParams{\n+                .commitment_period = COMMITMENT_PERIOD,\n+                .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+            },\n+            chain_start,\n+            /*minimum_required_work=*/CHAIN_WORK};\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n \n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain);\n+// 4. Finally, repeat the second set of headers in both phases to demonstrate\n+//    behavior when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain);\n+\n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    std::unique_ptr<HeadersSyncState> hss;\n-\n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n-    std::vector<CBlockHeader> headers_batch;\n+    SneakyRedownload(chain_start, first_chain, second_chain);\n+    HappyPath(chain_start, first_chain);\n+    TooLittleWork(chain_start, second_chain);\n+    TooBigBuffer(chain_start, first_chain);\n+}\n \n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain)\n+{\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n-\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    (void)hss->ProcessNextHeaders({first_chain.front()}, true);\n-    // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss->ProcessNextHeaders(headers_batch, true);\n-\n-    // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    // Try to sneakily feed back the second chain.\n-    result = hss->ProcessNextHeaders(second_chain, true);\n-    BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-\n-    // Now try again, this time feeding the first chain twice.\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    (void)hss->ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    result = hss->ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(!result.request_more);\n-    // All headers should be ready for acceptance:\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n-    // Nothing left for the sync logic to do:\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-\n-    // Finally, verify that just trying to process the second chain would not\n-    // succeed (too little work)\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n-     // Pretend just the first message is \"full\", so we don't abort.\n-    (void)hss->ProcessNextHeaders({second_chain.front()}, true);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n-\n-    headers_batch.clear();\n-    headers_batch.insert(headers_batch.end(), std::next(second_chain.begin(), 1), second_chain.end());\n-    // Tell the sync logic that the headers message was not full, implying no\n-    // more headers can be requested. For a low-work-chain, this should causes\n-    // the sync to end with no headers for acceptance.\n-    result = hss->ProcessNextHeaders(headers_batch, false);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-    BOOST_CHECK(result.pow_validated_headers.empty());\n-    BOOST_CHECK(!result.request_more);\n-    // Nevertheless, no validation errors should have been detected with the\n-    // chain:\n-    BOOST_CHECK(result.success);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+    {\n+        // Just feed one header and check state.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n+    }\n+\n+    {\n+        // Pretend the message is still \"full\", so we don't abort.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n+        // This chain should look valid, and we should have met the proof-of-work\n+        // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        // The locator should reset to genesis.\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n+    }\n+\n+    {\n+        // Try to sneakily feed back the second chain during REDOWNLOAD.\n+        auto result{hss.ProcessNextHeaders(second_chain, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n+        BOOST_CHECK(!result.success); // Foiled! We detected mismatching headers.\n+        BOOST_CHECK(!result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    }\n+}\n+\n+static void HappyPath(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // This time we feed the first chain twice.\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+\n+    // During normal operation we shouldn't get the redownload buffer size warning.\n+    DebugLogHelper forbidden{BUFFER_SIZE_WARNING, [](const std::string* str) {\n+        if (str == nullptr) {\n+            return false; // Disable exception for not finding a match.\n+        } else {\n+            throw std::runtime_error{strprintf(\"'%s' should not exist in debug log\\n\", str)};\n+        }\n+    }};\n+\n+    const auto genesis_hash{Params().GenesisBlock().GetHash()};\n+    {\n+        auto result{hss.ProcessNextHeaders(first_chain, true)};\n+        // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        // The locator should reset to genesis.\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), genesis_hash);\n+    }\n+\n+    {\n+        // Process only so that the internal threshold isn't met, meaning validated\n+        // headers shouldn't be returned yet:\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, true)};\n+        // Not done:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain[REDOWNLOAD_BUFFER_SIZE - 1].GetHash());\n+    }\n+\n+    CBlockHeader first_after_genesis;\n+    {\n+        // Next header should make us exceed the threshold, but still not be done:\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE, 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_REQUIRE_EQUAL(result.pow_validated_headers.size(), 1);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain[REDOWNLOAD_BUFFER_SIZE].GetHash());\n+        first_after_genesis = result.pow_validated_headers.front();\n+        BOOST_CHECK_EQUAL(first_after_genesis.hashPrevBlock, genesis_hash);\n+    }\n+\n+    {\n+        // Feed in remaining headers, meeting the work threshold again and\n+        // completing the REDOWNLOAD phase.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE + 1, first_chain.end()}, true)};\n+        // Nothing left for the sync logic to do:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(!result.request_more);\n+        // All headers except the one already returned above:\n+        BOOST_REQUIRE_EQUAL(result.pow_validated_headers.size(), first_chain.size() - 1);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.front().hashPrevBlock, first_after_genesis.GetHash());\n+    }\n+}\n+\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain)\n+{\n+    // Verify that just trying to process the second chain would not succeed\n+    // (too little work).\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    {\n+        // Pretend just the first message is \"full\", so we don't abort.\n+        auto result{hss.ProcessNextHeaders(std::span{second_chain.begin(), 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    }\n+\n+    {\n+        // Tell the sync logic that the headers message was not full, implying no\n+        // more headers can be requested. For a low-work-chain, this should cause\n+        // the sync to end with no headers for acceptance.\n+        auto result{hss.ProcessNextHeaders(std::span{second_chain.begin() + 1, second_chain.end()}, false)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n+        BOOST_CHECK(!result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        // Nevertheless, no validation errors should have been detected with the\n+        // chain:\n+        BOOST_CHECK(result.success);\n+    }\n+}\n+\n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // Intentionally too big redownload buffer in order to trigger warning.\n+    HeadersSyncState hss{/*id=*/0,\n+                         Params().GetConsensus(),\n+                         HeadersSyncParams{\n+                             .commitment_period = COMMITMENT_PERIOD,\n+                             .redownload_buffer_size = first_chain.size(),\n+                         },\n+                         chain_start,\n+                         /*minimum_required_work=*/CHAIN_WORK};\n+    (void)hss.ProcessNextHeaders(first_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+\n+    {\n+        ASSERT_DEBUG_LOG(BUFFER_SIZE_WARNING);\n+        auto result{hss.ProcessNextHeaders(first_chain, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n+        BOOST_CHECK(result.success);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 354,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We could validate `request_more` and `pow_validated_headers` here as well:\r\n```C++\r\nCHECK_RESULT(state.ProcessNextHeaders(chain1, /*full_headers_message=*/true),\r\n             state, State::FINAL,\r\n             /*exp_success=*/true,\r\n             /*exp_request_more=*/false,\r\n             /*exp_headers_size=*/chain1.size());\r\n ```",
      "created_at": "2025-06-20T09:39:32Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158502439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158502439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158508969",
      "pull_request_review_id": 2935575232,
      "id": 2158508969,
      "node_id": "PRRC_kwDOABII586AqDup",
      "diff_hunk": "@@ -108,37 +108,47 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n     HeadersSyncState hss{CreateState(chain_start, Params())};\n-    (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n-    // Pretend the first header is still \"full\", so we don't abort.\n-    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n-\n-    // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    // Try to sneakily feed back the second chain.\n-    result = hss.ProcessNextHeaders(second_chain, true);\n-    BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    {\n+        (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+    }\n+\n+    {\n+        // Pretend the first header is still \"full\", so we don't abort.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n+        // This chain should look valid, and we should have met the proof-of-work\n+        // requirement.\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    }\n+\n+    {\n+        // Try to sneakily feed back the second chain.\n+        auto result{hss.ProcessNextHeaders(second_chain, true)};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 34,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "875e89c82ff3362c40f2add395dc0f87a2206746",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 for reducing the scope of each separate check.\r\n\r\nWas hoping we could compare the result object directly as:\r\n```C++\r\nBOOST_CHECK_EQUAL(result, (HeadersSyncState::ProcessingResult{\r\n    .pow_validated_headers = {},\r\n    .success = true,\r\n    .request_more = true,\r\n}));\r\n```\r\nBut unfortunately we'd need to add equality operators to `ProcessingResult` and `CBlockHeader` which would defeat the purpose (+ the `operator<<(std::ostream&` for printing)...\r\n\r\nBut if we extract a validation helper function instead, we'd have keep the scope reduction and make the differences between the checks less noisy:\r\n```C++\r\n// Standard set of checks common to all scenarios; macro keeps failure lines at the call-site.\r\n#define CHECK_RESULT(res, state, exp_state, exp_success, exp_request_more, exp_headers_size) \\\r\n    do {                                                                                     \\\r\n        const auto& [res_headers, res_success, res_request_more]{res};                       \\\r\n        BOOST_REQUIRE_EQUAL(state.GetState(), exp_state);                                    \\\r\n        BOOST_CHECK_EQUAL(res_headers.size(), exp_headers_size);                             \\\r\n        BOOST_CHECK_EQUAL(res_success, exp_success);                                         \\\r\n        BOOST_CHECK_EQUAL(res_request_more, exp_request_more);                               \\\r\n    } while (false)\r\n```\r\n\r\nand using it as e.g.\r\n```C++\r\n// Repeat the second set of headers in both phases to demonstrate\r\n// behavior when the chain a peer provides has too little work.\r\nstatic void TooLittleWork(const CBlockIndex* chain_start, const std::vector<CBlockHeader>& chain2)\r\n{\r\n    // Verify that just trying to process the second chain would not succeed (too little work).\r\n    HeadersSyncState state{CreateState(Params(), HeadersSyncParams{COMMITMENT_PERIOD, REDOWNLOAD_BUFFER_SIZE}, chain_start)};\r\n\r\n    // Pretend just the first message is \"full\", so we don't abort.\r\n    CHECK_RESULT(state.ProcessNextHeaders({chain2.begin(), 1}, /*full_headers_message=*/true),\r\n                 state, State::PRESYNC,\r\n                 /*exp_success=*/true,\r\n                 /*exp_request_more=*/true,\r\n                 /*exp_headers_size=*/0);\r\n\r\n    // Tell the sync logic that the headers message was not full, implying no\r\n    // more headers can be requested. For a low-work-chain, this should cause\r\n    // the sync to end with no headers for acceptance.\r\n    CHECK_RESULT(state.ProcessNextHeaders({chain2.begin() + 1, chain2.end()}, /*full_headers_message=*/false),\r\n                 state, State::FINAL,\r\n                 /*exp_success=*/true,\r\n                 /*exp_request_more=*/false,\r\n                 /*exp_headers_size=*/0);\r\n}\r\n```\r\n",
      "created_at": "2025-06-20T09:42:30Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158508969",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158508969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158521568",
      "pull_request_review_id": 2935575232,
      "id": 2158521568,
      "node_id": "PRRC_kwDOABII586AqGzg",
      "diff_hunk": "@@ -189,6 +189,12 @@ class CMainParams : public CChainParams {\n             .tx_count = 1161875261,\n             .dTxRate  = 4.620728156243148,\n         };\n+\n+        // Generated by headerssync-params.py on 2025-03-04.",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "6a5914ea5f11b43d75699c42dc30775c01c1ad60",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We'll update this during the v30 release?",
      "created_at": "2025-06-20T09:48:13Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158521568",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158521568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158523047",
      "pull_request_review_id": 2935575232,
      "id": 2158523047,
      "node_id": "PRRC_kwDOABII586AqHKn",
      "diff_hunk": "@@ -337,15 +337,15 @@ def analyze(when):\n     attack_volume = NET_HEADER_SIZE * MINCHAINWORK_HEADERS\n     # And report them.\n     print()\n-    print(\"Optimal configuration:\")\n-    print()\n-    print(\"//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\")\n-    print(f\"constexpr size_t HEADER_COMMITMENT_PERIOD{{{period}}};\")\n+    print(f\"Given current min chainwork headers of {MINCHAINWORK_HEADERS}, the optimal parameters for low\")\n+    print(f\"memory usage on mainchain for release until {TIME:%Y-%m-%d} is:\")\n     print()\n-    print(\"//! Only feed headers to validation once this many headers on top have been\")\n-    print(\"//! received and validated against commitments.\")\n-    print(f\"constexpr size_t REDOWNLOAD_BUFFER_SIZE{{{bufsize}}};\"\n+    print(f\"        // Generated by headerssync-params.py on {datetime.today():%Y-%m-%d}.\")",
      "path": "contrib/devtools/headerssync-params.py",
      "position": 24,
      "original_position": 24,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "6a5914ea5f11b43d75699c42dc30775c01c1ad60",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 ",
      "created_at": "2025-06-20T09:48:50Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158523047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158523047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 343,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158525306",
      "pull_request_review_id": 2935575232,
      "id": 2158525306,
      "node_id": "PRRC_kwDOABII586AqHt6",
      "diff_hunk": "@@ -337,15 +337,15 @@ def analyze(when):\n     attack_volume = NET_HEADER_SIZE * MINCHAINWORK_HEADERS\n     # And report them.\n     print()\n-    print(\"Optimal configuration:\")\n-    print()\n-    print(\"//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\")\n-    print(f\"constexpr size_t HEADER_COMMITMENT_PERIOD{{{period}}};\")\n+    print(f\"Given current min chainwork headers of {MINCHAINWORK_HEADERS}, the optimal parameters for low\")\n+    print(f\"memory usage on mainchain for release until {TIME:%Y-%m-%d} is:\")\n     print()\n-    print(\"//! Only feed headers to validation once this many headers on top have been\")\n-    print(\"//! received and validated against commitments.\")\n-    print(f\"constexpr size_t REDOWNLOAD_BUFFER_SIZE{{{bufsize}}};\"\n+    print(f\"        // Generated by headerssync-params.py on {datetime.today():%Y-%m-%d}.\")\n+    print( \"        m_headers_sync_params = HeadersSyncParams{\")\n+    print(f\"            .commitment_period = {period},\")\n+    print(f\"            .redownload_buffer_size = {bufsize},\"\n           f\" // {bufsize}/{period} = ~{bufsize/period:.1f} commitments\")",
      "path": "contrib/devtools/headerssync-params.py",
      "position": 28,
      "original_position": 28,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "6a5914ea5f11b43d75699c42dc30775c01c1ad60",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I'd join this with the previous line, it's just confusing this way.\r\nAnd can we round this (given we already have a leading `~`) instead of adding a weird decimal (what is 0.8 commitment mean?)\r\n\r\nAnd why are we repeating the division in the comment, why not just:\r\n```python\r\nprint(f\"            .redownload_buffer_size = {bufsize}}; // ~{round(bufsize / period)} commitments\")\r\n```\r\n\r\nresulting in something like:\r\n```C++\r\n        // Generated by headerssync-params.py on 2025-03-04.\r\n        m_headers_sync_params = HeadersSyncParams{\r\n            .commitment_period = 624,\r\n            .redownload_buffer_size = 14827}; // ~24 commitments\r\n```",
      "created_at": "2025-06-20T09:49:48Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158525306",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158525306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 347,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158527941",
      "pull_request_review_id": 2935575232,
      "id": 2158527941,
      "node_id": "PRRC_kwDOABII586AqIXF",
      "diff_hunk": "@@ -3,30 +3,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes 48 bytes for a",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "6a5914ea5f11b43d75699c42dc30775c01c1ad60",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "* `48` is already stated in the code, no need to repeat it in the comment\r\n* `we should re-calculate parameters if we compress further` - doesn't the static assert already obviate that?",
      "created_at": "2025-06-20T09:51:00Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158527941",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158527941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158545087",
      "pull_request_review_id": 2935575232,
      "id": 2158545087,
      "node_id": "PRRC_kwDOABII586AqMi_",
      "diff_hunk": "@@ -161,17 +162,45 @@ static void HappyPath(const CBlockIndex* chain_start,\n         BOOST_CHECK(result.request_more);\n         BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n         // The locator should reset to genesis.\n-        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), genesis_hash);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "04a0b6609f3b9d2ec2fe41765904d867c191a698",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nice, we don't need the comment anymore after this change",
      "created_at": "2025-06-20T09:59:23Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158545087",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158545087"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158549217",
      "pull_request_review_id": 2935575232,
      "id": 2158549217,
      "node_id": "PRRC_kwDOABII586AqNjh",
      "diff_hunk": "@@ -278,6 +278,14 @@ std::vector<CBlockHeader> HeadersSyncState::PopHeadersReadyForAcceptance()\n     Assume(m_download_state == State::REDOWNLOAD);\n     if (m_download_state != State::REDOWNLOAD) return ret;\n \n+    if (m_process_all_remaining_headers && m_chain_start->nHeight == 0 &&\n+        m_redownload_buffer_first_prev_hash == m_chain_start->GetBlockHash() &&\n+        m_redownloaded_headers.size() <= m_params.redownload_buffer_size) {",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Q: I can't immediately tell if this should be triggered for equality as well - please just resolve if it's a stupid question.",
      "created_at": "2025-06-20T10:01:41Z",
      "updated_at": "2025-06-20T10:17:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158549217",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158549217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160875134",
      "pull_request_review_id": 2948911547,
      "id": 2160875134,
      "node_id": "PRRC_kwDOABII586AzFZ-",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 33,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
      "in_reply_to_id": 2152215463,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The test is running on RegTest:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/42e746096b93b8026569817d8925750089d6daf4/src/test/headers_sync_chainwork_tests.cpp#L72\r\n\r\nI'm guessing including the comment is meant to assuage fears that this would be an intensive operation.",
      "created_at": "2025-06-23T07:08:32Z",
      "updated_at": "2025-06-23T17:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2160875134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160875134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160916993",
      "pull_request_review_id": 2948911547,
      "id": 2160916993,
      "node_id": "PRRC_kwDOABII586AzPoB",
      "diff_hunk": "@@ -79,16 +79,13 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n                     genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n     const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n-    std::vector<CBlockHeader> headers_batch;\n \n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n-\n     hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders({first_chain.front()}, true);\n+    (void)hss->ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "7d45872a056145754c993bd642c3b49a6f7c14c5",
      "in_reply_to_id": 2152231103,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would rather not go back to having an intermediate `headers_batch` variable. Changed to `{{second_chain.front()}}` + `std::span{second_chain}.last(second_chain.size() - 1)`.\r\n\r\nKept the almost the existing style in `HappyPath` since I couldn't see an improvement to `{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE, 1}`.",
      "created_at": "2025-06-23T07:32:55Z",
      "updated_at": "2025-06-23T17:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2160916993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160916993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160925771",
      "pull_request_review_id": 2948911547,
      "id": 2160925771,
      "node_id": "PRRC_kwDOABII586AzRxL",
      "diff_hunk": "@@ -60,15 +60,23 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "in_reply_to_id": 2152292721,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed that 1 & 2 should ideally be combined if this were written from scratch, but I prefer keeping the current approach to make the diff less jarring compared to master. Open to re-evaluate if other reviewers weigh in.",
      "created_at": "2025-06-23T07:38:02Z",
      "updated_at": "2025-06-23T17:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2160925771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160925771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160944219",
      "pull_request_review_id": 2948911547,
      "id": 2160944219,
      "node_id": "PRRC_kwDOABII586AzWRb",
      "diff_hunk": "@@ -97,64 +105,58 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& first_chain,\n         const std::vector<CBlockHeader>& second_chain)\n {\n-    std::unique_ptr<HeadersSyncState> hss;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+    (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss->ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n \n     // This chain should look valid, and we should have met the proof-of-work\n     // requirement.\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n     // Try to sneakily feed back the second chain.\n-    result = hss->ProcessNextHeaders(second_chain, true);\n+    result = hss.ProcessNextHeaders(second_chain, true);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n }\n \n static void HappyPath(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& first_chain)\n {\n-    std::unique_ptr<HeadersSyncState> hss;\n-    HeadersSyncState::ProcessingResult result;\n     // This time we feed the first chain twice.\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+    (void)hss.ProcessNextHeaders(first_chain, true);\n+    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    auto result{hss.ProcessNextHeaders(first_chain, true)};\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(!result.request_more);\n     // All headers should be ready for acceptance:\n     BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n     // Nothing left for the sync logic to do:\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n }\n \n static void TooLittleWork(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& second_chain)\n {\n-    std::unique_ptr<HeadersSyncState> hss;\n-    HeadersSyncState::ProcessingResult result;\n     // Verify that just trying to process the second chain would not succeed\n     // (too little work).\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "79be6f7744790472ca92862e044390c5e65e0eb5",
      "in_reply_to_id": 2152317411,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "*net_processing.cpp* uses `m_headers_sync`, but I'm totally fine with `hss`-abbreviation, especially if we keep spelling out `HeadersSyncState`. Makes for a slightly less stark diff with master.",
      "created_at": "2025-06-23T07:48:12Z",
      "updated_at": "2025-06-23T17:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2160944219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160944219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160951738",
      "pull_request_review_id": 2948911547,
      "id": 2160951738,
      "node_id": "PRRC_kwDOABII586AzYG6",
      "diff_hunk": "@@ -109,24 +109,35 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n     // initially and then the rest.\n     HeadersSyncState hss{CreateState(chain_start, Params())};\n     {\n-        (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+        // Just feed one header and check state.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "667fd31e740decc25471bb153e5e0547b3463d4d",
      "in_reply_to_id": 2158259661,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in the same commit as we switch to `BOOST_REQUIRE_EQUAL`.",
      "created_at": "2025-06-23T07:52:20Z",
      "updated_at": "2025-06-23T17:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2160951738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160951738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160977472",
      "pull_request_review_id": 2948911547,
      "id": 2160977472,
      "node_id": "PRRC_kwDOABII586AzeZA",
      "diff_hunk": "@@ -109,24 +109,35 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n     // initially and then the rest.\n     HeadersSyncState hss{CreateState(chain_start, Params())};\n     {\n-        (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+        // Just feed one header and check state.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "667fd31e740decc25471bb153e5e0547b3463d4d",
      "in_reply_to_id": 2158237711,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Replaced with `CHECK_RESULT()` macro from your suggestion in https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2158508969. Sprinkled some less obvious `/*full_headers_message=*/` around.",
      "created_at": "2025-06-23T08:05:02Z",
      "updated_at": "2025-06-23T17:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2160977472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2160977472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161005747",
      "pull_request_review_id": 2948911547,
      "id": 2161005747,
      "node_id": "PRRC_kwDOABII586AzlSz",
      "diff_hunk": "@@ -60,15 +60,23 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "in_reply_to_id": 2158283917,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> do we really need these forward declarations here? Wouldn't it be simpler to just put the test at the end of the file like we're doing in other places e.g. https://github.com/bitcoin/bitcoin/blob/master/src/test/addrman_tests.cpp#L23-L61 ?\r\n\r\nDid it in order to weave the breakup into the existing comments, while avoiding to re-order chunks of code to minimize diffs.\r\n\r\n> If we do need the prototypes can we maybe remove the arg names to reduce the noise?\r\n\r\nDone - not used to this style, but warming up to it. :)",
      "created_at": "2025-06-23T08:19:59Z",
      "updated_at": "2025-06-23T17:49:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161005747",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161005747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161009475",
      "pull_request_review_id": 2948911547,
      "id": 2161009475,
      "node_id": "PRRC_kwDOABII586AzmND",
      "diff_hunk": "@@ -52,95 +55,222 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n         prev_hash = next_header.GetHash();\n         prev_time = next_header.nTime;\n     }\n-    return;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+static HeadersSyncState CreateState(const CBlockIndex* chain_start, const CChainParams& chain_params)\n+{\n+    return {/*id=*/0,\n+            chain_params.GetConsensus(),\n+            HeadersSyncParams{\n+                .commitment_period = COMMITMENT_PERIOD,\n+                .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+            },\n+            chain_start,\n+            /*minimum_required_work=*/CHAIN_WORK};\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n \n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain);\n+// 4. Finally, repeat the second set of headers in both phases to demonstrate\n+//    behavior when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain);\n+\n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    std::unique_ptr<HeadersSyncState> hss;\n-\n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n-    std::vector<CBlockHeader> headers_batch;\n+    SneakyRedownload(chain_start, first_chain, second_chain);\n+    HappyPath(chain_start, first_chain);\n+    TooLittleWork(chain_start, second_chain);\n+    TooBigBuffer(chain_start, first_chain);\n+}\n \n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain)\n+{\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n-\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    (void)hss->ProcessNextHeaders({first_chain.front()}, true);\n-    // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss->ProcessNextHeaders(headers_batch, true);\n-\n-    // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    // Try to sneakily feed back the second chain.\n-    result = hss->ProcessNextHeaders(second_chain, true);\n-    BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-\n-    // Now try again, this time feeding the first chain twice.\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    (void)hss->ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    result = hss->ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(!result.request_more);\n-    // All headers should be ready for acceptance:\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n-    // Nothing left for the sync logic to do:\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-\n-    // Finally, verify that just trying to process the second chain would not\n-    // succeed (too little work)\n-    hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, chain_work));\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n-     // Pretend just the first message is \"full\", so we don't abort.\n-    (void)hss->ProcessNextHeaders({second_chain.front()}, true);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n-\n-    headers_batch.clear();\n-    headers_batch.insert(headers_batch.end(), std::next(second_chain.begin(), 1), second_chain.end());\n-    // Tell the sync logic that the headers message was not full, implying no\n-    // more headers can be requested. For a low-work-chain, this should causes\n-    // the sync to end with no headers for acceptance.\n-    result = hss->ProcessNextHeaders(headers_batch, false);\n-    BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n-    BOOST_CHECK(result.pow_validated_headers.empty());\n-    BOOST_CHECK(!result.request_more);\n-    // Nevertheless, no validation errors should have been detected with the\n-    // chain:\n-    BOOST_CHECK(result.success);\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+    {\n+        // Just feed one header and check state.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n+    }\n+\n+    {\n+        // Pretend the message is still \"full\", so we don't abort.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n+        // This chain should look valid, and we should have met the proof-of-work\n+        // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        // The locator should reset to genesis.\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n+    }\n+\n+    {\n+        // Try to sneakily feed back the second chain during REDOWNLOAD.\n+        auto result{hss.ProcessNextHeaders(second_chain, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n+        BOOST_CHECK(!result.success); // Foiled! We detected mismatching headers.\n+        BOOST_CHECK(!result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    }\n+}\n+\n+static void HappyPath(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // This time we feed the first chain twice.\n+    HeadersSyncState hss{CreateState(chain_start, Params())};\n+\n+    // During normal operation we shouldn't get the redownload buffer size warning.\n+    DebugLogHelper forbidden{BUFFER_SIZE_WARNING, [](const std::string* str) {\n+        if (str == nullptr) {\n+            return false; // Disable exception for not finding a match.\n+        } else {\n+            throw std::runtime_error{strprintf(\"'%s' should not exist in debug log\\n\", str)};\n+        }\n+    }};\n+\n+    const auto genesis_hash{Params().GenesisBlock().GetHash()};\n+    {\n+        auto result{hss.ProcessNextHeaders(first_chain, true)};\n+        // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        // The locator should reset to genesis.\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), genesis_hash);\n+    }\n+\n+    {\n+        // Process only so that the internal threshold isn't met, meaning validated\n+        // headers shouldn't be returned yet:\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, true)};\n+        // Not done:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain[REDOWNLOAD_BUFFER_SIZE - 1].GetHash());\n+    }\n+\n+    CBlockHeader first_after_genesis;\n+    {\n+        // Next header should make us exceed the threshold, but still not be done:\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE, 1}, true)};\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_REQUIRE_EQUAL(result.pow_validated_headers.size(), 1);\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain[REDOWNLOAD_BUFFER_SIZE].GetHash());\n+        first_after_genesis = result.pow_validated_headers.front();\n+        BOOST_CHECK_EQUAL(first_after_genesis.hashPrevBlock, genesis_hash);\n+    }\n+\n+    {\n+        // Feed in remaining headers, meeting the work threshold again and\n+        // completing the REDOWNLOAD phase.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + REDOWNLOAD_BUFFER_SIZE + 1, first_chain.end()}, true)};\n+        // Nothing left for the sync logic to do:\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(!result.request_more);\n+        // All headers except the one already returned above:\n+        BOOST_REQUIRE_EQUAL(result.pow_validated_headers.size(), first_chain.size() - 1);\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.front().hashPrevBlock, first_after_genesis.GetHash());\n+    }\n+}\n+\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain)",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 306,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158437463,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would rather keep the names to minimize diffs. `sufficient_chain` & `insufficient_chain` would have been more descriptive but longer.",
      "created_at": "2025-06-23T08:21:50Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161009475",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161009475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161009906",
      "pull_request_review_id": 2948911547,
      "id": 2161009906,
      "node_id": "PRRC_kwDOABII586AzmTy",
      "diff_hunk": "",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158463219,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-06-23T08:22:04Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161009906",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161009906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161031656",
      "pull_request_review_id": 2948911547,
      "id": 2161031656,
      "node_id": "PRRC_kwDOABII586Azrno",
      "diff_hunk": "@@ -189,6 +189,12 @@ class CMainParams : public CChainParams {\n             .tx_count = 1161875261,\n             .dTxRate  = 4.620728156243148,\n         };\n+\n+        // Generated by headerssync-params.py on 2025-03-04.",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "6a5914ea5f11b43d75699c42dc30775c01c1ad60",
      "in_reply_to_id": 2158521568,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As *release-process.md* documents, it's not critical to update on every release. It's mostly about fine-tuning memory usage under adversarial conditions, and the values don't tend to change that much. But I would not be surprised if it were updated since it was updated during the previous 2 releases:\r\n\r\n* v29: 11a2d3a63e90cdc1920ede3c67d52a9c72860e6b\r\n* v28: 221809b81cfcecb04050915eebacffda2599da42\r\n\r\nAlso, we're slated to remove checkpoints (#31649) in v30 which might further encourage the release manager to do this.",
      "created_at": "2025-06-23T08:32:44Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161031656",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161031656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161077412",
      "pull_request_review_id": 2948911547,
      "id": 2161077412,
      "node_id": "PRRC_kwDOABII586Az2yk",
      "diff_hunk": "@@ -337,15 +337,15 @@ def analyze(when):\n     attack_volume = NET_HEADER_SIZE * MINCHAINWORK_HEADERS\n     # And report them.\n     print()\n-    print(\"Optimal configuration:\")\n-    print()\n-    print(\"//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\")\n-    print(f\"constexpr size_t HEADER_COMMITMENT_PERIOD{{{period}}};\")\n+    print(f\"Given current min chainwork headers of {MINCHAINWORK_HEADERS}, the optimal parameters for low\")\n+    print(f\"memory usage on mainchain for release until {TIME:%Y-%m-%d} is:\")\n     print()\n-    print(\"//! Only feed headers to validation once this many headers on top have been\")\n-    print(\"//! received and validated against commitments.\")\n-    print(f\"constexpr size_t REDOWNLOAD_BUFFER_SIZE{{{bufsize}}};\"\n+    print(f\"        // Generated by headerssync-params.py on {datetime.today():%Y-%m-%d}.\")\n+    print( \"        m_headers_sync_params = HeadersSyncParams{\")\n+    print(f\"            .commitment_period = {period},\")\n+    print(f\"            .redownload_buffer_size = {bufsize},\"\n           f\" // {bufsize}/{period} = ~{bufsize/period:.1f} commitments\")",
      "path": "contrib/devtools/headerssync-params.py",
      "position": 28,
      "original_position": 28,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "6a5914ea5f11b43d75699c42dc30775c01c1ad60",
      "in_reply_to_id": 2158525306,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I'd join this with the previous line, it's just confusing this way.\r\n\r\nPrefer keeping this line unchanged compared to master (would rather have lines closer to 80 than 120 chars here).\r\n\r\n> can we round this (given we already have a leading `~`) instead of adding a weird decimal (what is 0.8 commitment mean?)\r\n\r\nIncluding one decimal makes it more likely that the number changes between releases, indicating some kind of usefulness + precision of simulation. Not sure if that was what the original authors intended.\r\n\r\n> And why are we repeating the division in the comment\r\n\r\nI think keeping the division makes it slightly clearer what the number is to readers of the C++ source.",
      "created_at": "2025-06-23T08:54:31Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161077412",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161077412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 347,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161102157",
      "pull_request_review_id": 2948911547,
      "id": 2161102157,
      "node_id": "PRRC_kwDOABII586Az81N",
      "diff_hunk": "@@ -87,6 +89,9 @@ static void HappyPath(const CBlockIndex* chain_start,\n static void TooLittleWork(const CBlockIndex* chain_start,\n         const std::vector<CBlockHeader>& second_chain);\n \n+static void TooBigBuffer(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158464358,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-06-23T09:06:46Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161102157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161102157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161130709",
      "pull_request_review_id": 2948911547,
      "id": 2161130709,
      "node_id": "PRRC_kwDOABII586A0DzV",
      "diff_hunk": "@@ -153,6 +159,16 @@ static void HappyPath(const CBlockIndex* chain_start,\n {\n     // This time we feed the first chain twice.\n     HeadersSyncState hss{CreateState(chain_start, Params())};\n+\n+    // During normal operation we shouldn't get the redownload buffer size warning.\n+    DebugLogHelper forbidden{BUFFER_SIZE_WARNING, [](const std::string* str) {\n+        if (str == nullptr) {\n+            return false; // Disable exception for not finding a match.\n+        } else {\n+            throw std::runtime_error{strprintf(\"'%s' should not exist in debug log\\n\", str)};\n+        }\n+    }};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158492230,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Originally resisted the impulse since there is only one case, but done now. It mirrors what we do in functional Python tests after all.",
      "created_at": "2025-06-23T09:20:55Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161130709",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161130709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161152465",
      "pull_request_review_id": 2948911547,
      "id": 2161152465,
      "node_id": "PRRC_kwDOABII586A0JHR",
      "diff_hunk": "@@ -234,4 +250,27 @@ static void TooLittleWork(const CBlockIndex* chain_start,\n     }\n }\n \n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // Intentionally too big redownload buffer in order to trigger warning.\n+    HeadersSyncState hss{/*id=*/0,\n+                         Params().GetConsensus(),\n+                         HeadersSyncParams{\n+                             .commitment_period = COMMITMENT_PERIOD,\n+                             .redownload_buffer_size = first_chain.size(),\n+                         },\n+                         chain_start,\n+                         /*minimum_required_work=*/CHAIN_WORK};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158495479,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken in broad strokes.",
      "created_at": "2025-06-23T09:31:26Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161152465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161152465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 257,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161494657",
      "pull_request_review_id": 2948911547,
      "id": 2161494657,
      "node_id": "PRRC_kwDOABII586A1cqB",
      "diff_hunk": "@@ -161,17 +162,45 @@ static void HappyPath(const CBlockIndex* chain_start,\n         BOOST_CHECK(result.request_more);\n         BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n         // The locator should reset to genesis.\n-        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), genesis_hash);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "04a0b6609f3b9d2ec2fe41765904d867c191a698",
      "in_reply_to_id": 2158545087,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Still think it is good to document *why* something is expected.",
      "created_at": "2025-06-23T12:22:51Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161494657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161494657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161502615",
      "pull_request_review_id": 2948911547,
      "id": 2161502615,
      "node_id": "PRRC_kwDOABII586A1emX",
      "diff_hunk": "@@ -3,30 +3,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes 48 bytes for a",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "6a5914ea5f11b43d75699c42dc30775c01c1ad60",
      "in_reply_to_id": 2158527941,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> `48` is already stated in the code, no need to repeat it in the comment\r\n\r\nReplaced with \"this many\".\r\n\r\n> `we should re-calculate parameters if we compress further` - doesn't the static assert already obviate that?\r\n\r\nDon't think so? This is about prompting whoever changes the struct to also alter and re-run the Python script.",
      "created_at": "2025-06-23T12:27:06Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161502615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161502615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161516453",
      "pull_request_review_id": 2948911547,
      "id": 2161516453,
      "node_id": "PRRC_kwDOABII586A1h-l",
      "diff_hunk": "@@ -278,6 +278,14 @@ std::vector<CBlockHeader> HeadersSyncState::PopHeadersReadyForAcceptance()\n     Assume(m_download_state == State::REDOWNLOAD);\n     if (m_download_state != State::REDOWNLOAD) return ret;\n \n+    if (m_process_all_remaining_headers && m_chain_start->nHeight == 0 &&\n+        m_redownload_buffer_first_prev_hash == m_chain_start->GetBlockHash() &&\n+        m_redownloaded_headers.size() <= m_params.redownload_buffer_size) {",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158549217,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Appreciate feedback on this!\r\n\r\nAre you asking whether `m_redownloaded_headers.size() < m_params.redownload_buffer_size` might be more correct?\r\n\r\nThe `while`-condition below includes `m_redownloaded_headers.size() > m_params.redownload_buffer_size` as one of the conditions to start feeding back PoW-validated headers. This means using `m_redownloaded_headers.size() < m_params.redownload_buffer_size` for the condition above would give us no headers and no warning when the buffer size equals the parameter.",
      "created_at": "2025-06-23T12:34:27Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161516453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161516453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161536608",
      "pull_request_review_id": 2948911547,
      "id": 2161536608,
      "node_id": "PRRC_kwDOABII586A1m5g",
      "diff_hunk": "@@ -108,37 +108,47 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n     HeadersSyncState hss{CreateState(chain_start, Params())};\n-    (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n-    // Pretend the first header is still \"full\", so we don't abort.\n-    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n-\n-    // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    // Try to sneakily feed back the second chain.\n-    result = hss.ProcessNextHeaders(second_chain, true);\n-    BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    {\n+        (void)hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true);\n+    }\n+\n+    {\n+        // Pretend the first header is still \"full\", so we don't abort.\n+        auto result{hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true)};\n+        // This chain should look valid, and we should have met the proof-of-work\n+        // requirement.\n+        BOOST_CHECK(result.success);\n+        BOOST_CHECK(result.request_more);\n+        BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    }\n+\n+    {\n+        // Try to sneakily feed back the second chain.\n+        auto result{hss.ProcessNextHeaders(second_chain, true)};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 34,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "875e89c82ff3362c40f2add395dc0f87a2206746",
      "in_reply_to_id": 2158508969,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken, added `exp_pow_validated_prev` and `exp_locator_hash`-parameters. Feels good to verify all parameters, also always in the same order.",
      "created_at": "2025-06-23T12:45:06Z",
      "updated_at": "2025-06-23T17:49:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2161536608",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161536608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164149745",
      "pull_request_review_id": 2954075447,
      "id": 2164149745,
      "node_id": "PRRC_kwDOABII586A_k3x",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 33,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
      "in_reply_to_id": 2152215463,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ah, so it's jut a reassurance that it doesn't need a fancy asic, it can mine a block in no time - makes sense",
      "created_at": "2025-06-24T14:14:41Z",
      "updated_at": "2025-06-24T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164149745",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164149745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164194785",
      "pull_request_review_id": 2954075447,
      "id": 2164194785,
      "node_id": "PRRC_kwDOABII586A_v3h",
      "diff_hunk": "@@ -15,9 +15,36 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n \n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                     \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                           \\\n+    do {                                                                                                   \\\n+        const auto result = result_expression;                                                             \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                    \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                    \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                          \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                          \\\n+        std::optional<uint256> locator_hash_opt{exp_locator_hash};                                         \\\n+        if (locator_hash_opt == std::nullopt) {                                                            \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                    \\\n+        } else {                                                                                           \\\n+            BOOST_REQUIRE_GT(hss.NextHeadersRequestLocator().vHave.size(), 0);                             \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "8c96be330659a0f2d1dcd19ba3b6d087c24ed606",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would't an `.at(0)` suffice?",
      "created_at": "2025-06-24T14:33:57Z",
      "updated_at": "2025-06-24T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164194785",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164194785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164197118",
      "pull_request_review_id": 2954075447,
      "id": 2164197118,
      "node_id": "PRRC_kwDOABII586A_wb-",
      "diff_hunk": "@@ -130,16 +165,20 @@ static void HappyPath(const CBlockIndex* chain_start,\n     HeadersSyncState hss{CreateState(chain_start)};\n \n     // Sufficient work transitions us from PRESYNC to REDOWNLOAD:\n-    (void)hss.ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n-\n-    const auto result{hss.ProcessNextHeaders(first_chain, true)};\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(!result.request_more);\n-    // All headers should be ready for acceptance:\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n-    // Nothing left for the sync logic to do:\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    CHECK_RESULT(hss.ProcessNextHeaders(first_chain, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        // The locator should reset to genesis.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 95,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "8c96be330659a0f2d1dcd19ba3b6d087c24ed606",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this comment is obvious from the code now: `/*exp_locator_hash=*/Params().GenesisBlock().GetHash()` or `/*exp_locator_hash=*/genesis_hash` later in 65a96b507c11b3f34efa996919892fa1a2fcf49c",
      "created_at": "2025-06-24T14:35:02Z",
      "updated_at": "2025-06-24T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164197118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164197118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164207447",
      "pull_request_review_id": 2954075447,
      "id": 2164207447,
      "node_id": "PRRC_kwDOABII586A_y9X",
      "diff_hunk": "@@ -337,15 +337,15 @@ def analyze(when):\n     attack_volume = NET_HEADER_SIZE * MINCHAINWORK_HEADERS\n     # And report them.\n     print()\n-    print(\"Optimal configuration:\")\n-    print()\n-    print(\"//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\")\n-    print(f\"constexpr size_t HEADER_COMMITMENT_PERIOD{{{period}}};\")\n+    print(f\"Given current min chainwork headers of {MINCHAINWORK_HEADERS}, the optimal parameters for low\")\n+    print(f\"memory usage on mainchain for release until {TIME:%Y-%m-%d} is:\")\n     print()\n-    print(\"//! Only feed headers to validation once this many headers on top have been\")\n-    print(\"//! received and validated against commitments.\")\n-    print(f\"constexpr size_t REDOWNLOAD_BUFFER_SIZE{{{bufsize}}};\"\n+    print(f\"        // Generated by headerssync-params.py on {datetime.today():%Y-%m-%d}.\")\n+    print( \"        m_headers_sync_params = HeadersSyncParams{\")\n+    print(f\"            .commitment_period = {period},\")\n+    print(f\"            .redownload_buffer_size = {bufsize},\"\n           f\" // {bufsize}/{period} = ~{bufsize/period:.1f} commitments\")",
      "path": "contrib/devtools/headerssync-params.py",
      "position": 28,
      "original_position": 28,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "6a5914ea5f11b43d75699c42dc30775c01c1ad60",
      "in_reply_to_id": 2158525306,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> makes it more likely that the number changes between releases\r\n\r\nThat sounds like a counter-argument to me, but don't have strong feelings about it, if you disagree, I don't mind, please resolve it.",
      "created_at": "2025-06-24T14:38:29Z",
      "updated_at": "2025-06-24T14:53:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164207447",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164207447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 347,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164212315",
      "pull_request_review_id": 2954075447,
      "id": 2164212315,
      "node_id": "PRRC_kwDOABII586A_0Jb",
      "diff_hunk": "@@ -61,6 +61,17 @@ struct ChainTxData {\n     double dTxRate;   //!< estimated number of transactions per second after that timestamp\n };\n \n+/**\n+ * Used to configure Headers Sync memory usage.\n+ */\n+struct HeadersSyncParams {\n+    //! Distance in blocks between header commitments.\n+    size_t commitment_period;\n+    //! Only feed headers to validation once this many headers on top have been\n+    //! received and validated against commitments.",
      "path": "src/kernel/chainparams.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "1032f52791221a7fd28ab9a951aa94642220d840",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure what \"this many headers *on top* have been received\"",
      "created_at": "2025-06-24T14:39:49Z",
      "updated_at": "2025-06-24T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164212315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164212315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 70,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164220997",
      "pull_request_review_id": 2954075447,
      "id": 2164220997,
      "node_id": "PRRC_kwDOABII586A_2RF",
      "diff_hunk": "@@ -172,19 +172,37 @@ static void HappyPath(const CBlockIndex* chain_start,\n     HeadersSyncState hss{CreateState(chain_start)};\n \n     // Sufficient work transitions us from PRESYNC to REDOWNLOAD:\n+    const auto genesis_hash{Params().GenesisBlock().GetHash()};\n     CHECK_RESULT(hss.ProcessNextHeaders(first_chain, /*full_headers_message=*/true),\n         hss, /*exp_state=*/State::REDOWNLOAD,\n         /*exp_success*/true, /*exp_request_more=*/true,\n         // The locator should reset to genesis.\n         /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n-        /*exp_locator_hash=*/Params().GenesisBlock().GetHash());\n+        /*exp_locator_hash=*/genesis_hash);\n \n-    CHECK_RESULT(hss.ProcessNextHeaders(first_chain, /*full_headers_message=*/true),\n-        // Nothing left for the sync logic to do:\n+    // Process only so that the internal threshold isn't met, meaning validated\n+    // headers shouldn't be returned yet:\n+    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, /*full_headers_message=*/true),\n+        // Not done:\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        // The locator should reset to genesis.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "65a96b507c11b3f34efa996919892fa1a2fcf49c",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is this comment accurate?",
      "created_at": "2025-06-24T14:42:00Z",
      "updated_at": "2025-06-24T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164220997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164220997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164233013",
      "pull_request_review_id": 2954075447,
      "id": 2164233013,
      "node_id": "PRRC_kwDOABII586A_5M1",
      "diff_hunk": "@@ -278,6 +278,14 @@ std::vector<CBlockHeader> HeadersSyncState::PopHeadersReadyForAcceptance()\n     Assume(m_download_state == State::REDOWNLOAD);\n     if (m_download_state != State::REDOWNLOAD) return ret;\n \n+    if (m_process_all_remaining_headers && m_chain_start->nHeight == 0 &&\n+        m_redownload_buffer_first_prev_hash == m_chain_start->GetBlockHash() &&\n+        m_redownloaded_headers.size() <= m_params.redownload_buffer_size) {",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158549217,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmmm, if it has to be the opposite of the while below, would it make sense to extract the common parts to explain it with code (your explanation makes sense, would prefer if the code already made it simpler so that I don't have to check the code that's after the current one to understand it).",
      "created_at": "2025-06-24T14:46:31Z",
      "updated_at": "2025-06-24T14:53:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164233013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164233013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164235547",
      "pull_request_review_id": 2954075447,
      "id": 2164235547,
      "node_id": "PRRC_kwDOABII586A_50b",
      "diff_hunk": "@@ -109,6 +112,9 @@ static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n // 4. Repeat the second set of headers in both phases to demonstrate behavior\n //    when the chain a peer provides has too little work.\n static void TooLittleWork(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 5. Sets the redownload buffer size to be large enough large enough that we",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "14e933ab6a8eef9a968ef7bf82f0f42510fed33a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n// 5. Sets the redownload buffer size to be large enough that we\r\n```",
      "created_at": "2025-06-24T14:47:31Z",
      "updated_at": "2025-06-24T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164235547",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164235547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164239931",
      "pull_request_review_id": 2954075447,
      "id": 2164239931,
      "node_id": "PRRC_kwDOABII586A_647",
      "diff_hunk": "@@ -234,4 +244,28 @@ static void TooLittleWork(const CBlockIndex* chain_start,\n         /*exp_locator_hash=*/std::nullopt);\n }\n \n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // Intentionally too big redownload buffer in order to trigger warning.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 72,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "14e933ab6a8eef9a968ef7bf82f0f42510fed33a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nice, this is exactly how comments should be used to augment what the code cannot easily tell <3",
      "created_at": "2025-06-24T14:49:29Z",
      "updated_at": "2025-06-24T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164239931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164239931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164245384",
      "pull_request_review_id": 2954075447,
      "id": 2164245384,
      "node_id": "PRRC_kwDOABII586A_8OI",
      "diff_hunk": "@@ -234,4 +244,28 @@ static void TooLittleWork(const CBlockIndex* chain_start,\n         /*exp_locator_hash=*/std::nullopt);\n }\n \n+static void TooBigBuffer(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain)\n+{\n+    // Intentionally too big redownload buffer in order to trigger warning.\n+    HeadersSyncState hss{CreateState(chain_start,\n+                                     HeadersSyncParams{\n+                                         .commitment_period = COMMITMENT_PERIOD,\n+                                         .redownload_buffer_size = first_chain.size(),\n+                                     })};\n+\n+    CHECK_RESULT(hss.ProcessNextHeaders(first_chain, true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/Params().GenesisBlock().GetHash());",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 83,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "14e933ab6a8eef9a968ef7bf82f0f42510fed33a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "might make sense to extract genesis hash here as well like we did in `HappyPath`",
      "created_at": "2025-06-24T14:51:48Z",
      "updated_at": "2025-06-24T14:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164245384",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164245384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164253700",
      "pull_request_review_id": 2954241103,
      "id": 2164253700,
      "node_id": "PRRC_kwDOABII586A_-QE",
      "diff_hunk": "@@ -60,15 +60,23 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "in_reply_to_id": 2152292721,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we add 2 helpers in that case? I really dislike that the comments don't follow the code's structure.",
      "created_at": "2025-06-24T14:55:27Z",
      "updated_at": "2025-06-27T12:27:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164253700",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164253700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164260873",
      "pull_request_review_id": 2954251977,
      "id": 2164260873,
      "node_id": "PRRC_kwDOABII586BAAAJ",
      "diff_hunk": "@@ -60,15 +60,23 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& first_chain,\n+        const std::vector<CBlockHeader>& second_chain);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 11,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "in_reply_to_id": 2158283917,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> chunks of code to minimize diffs\r\n\r\nWe've rewritten the tests at this stage, diffs and the function prototypes don't help in my opinion.\r\nBut if you insist, I don't mind, please resolve the comment",
      "created_at": "2025-06-24T14:58:30Z",
      "updated_at": "2025-06-24T14:58:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164260873",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164260873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164267943",
      "pull_request_review_id": 2954263125,
      "id": 2164267943,
      "node_id": "PRRC_kwDOABII586BABun",
      "diff_hunk": "@@ -161,17 +162,45 @@ static void HappyPath(const CBlockIndex* chain_start,\n         BOOST_CHECK(result.request_more);\n         BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n         // The locator should reset to genesis.\n-        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), genesis_hash);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "04a0b6609f3b9d2ec2fe41765904d867c191a698",
      "in_reply_to_id": 2158545087,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure I understand, especially in the new code which states something like `locator == genesis` - which is basically the same as the comment",
      "created_at": "2025-06-24T15:01:40Z",
      "updated_at": "2025-06-24T15:01:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2164267943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164267943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167506799",
      "pull_request_review_id": 2959466839,
      "id": 2167506799,
      "node_id": "PRRC_kwDOABII586BMYdv",
      "diff_hunk": "@@ -15,9 +15,36 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n \n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                     \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                           \\\n+    do {                                                                                                   \\\n+        const auto result = result_expression;                                                             \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                    \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                    \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                          \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                          \\\n+        std::optional<uint256> locator_hash_opt{exp_locator_hash};                                         \\\n+        if (locator_hash_opt == std::nullopt) {                                                            \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                    \\\n+        } else {                                                                                           \\\n+            BOOST_REQUIRE_GT(hss.NextHeadersRequestLocator().vHave.size(), 0);                             \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "8c96be330659a0f2d1dcd19ba3b6d087c24ed606",
      "in_reply_to_id": 2164194785,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Slightly more confusing error, but like that it's more terse. Taken.",
      "created_at": "2025-06-25T19:56:43Z",
      "updated_at": "2025-06-25T20:39:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2167506799",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167506799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167525791",
      "pull_request_review_id": 2959466839,
      "id": 2167525791,
      "node_id": "PRRC_kwDOABII586BMdGf",
      "diff_hunk": "@@ -172,19 +172,37 @@ static void HappyPath(const CBlockIndex* chain_start,\n     HeadersSyncState hss{CreateState(chain_start)};\n \n     // Sufficient work transitions us from PRESYNC to REDOWNLOAD:\n+    const auto genesis_hash{Params().GenesisBlock().GetHash()};\n     CHECK_RESULT(hss.ProcessNextHeaders(first_chain, /*full_headers_message=*/true),\n         hss, /*exp_state=*/State::REDOWNLOAD,\n         /*exp_success*/true, /*exp_request_more=*/true,\n         // The locator should reset to genesis.\n         /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n-        /*exp_locator_hash=*/Params().GenesisBlock().GetHash());\n+        /*exp_locator_hash=*/genesis_hash);\n \n-    CHECK_RESULT(hss.ProcessNextHeaders(first_chain, /*full_headers_message=*/true),\n-        // Nothing left for the sync logic to do:\n+    // Process only so that the internal threshold isn't met, meaning validated\n+    // headers shouldn't be returned yet:\n+    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, /*full_headers_message=*/true),\n+        // Not done:\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        // The locator should reset to genesis.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "65a96b507c11b3f34efa996919892fa1a2fcf49c",
      "in_reply_to_id": 2164220997,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No, rebase mishap. Thanks for catching!",
      "created_at": "2025-06-25T20:01:57Z",
      "updated_at": "2025-06-25T20:39:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2167525791",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167525791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167541369",
      "pull_request_review_id": 2959466839,
      "id": 2167541369,
      "node_id": "PRRC_kwDOABII586BMg55",
      "diff_hunk": "@@ -61,6 +61,17 @@ struct ChainTxData {\n     double dTxRate;   //!< estimated number of transactions per second after that timestamp\n };\n \n+/**\n+ * Used to configure Headers Sync memory usage.\n+ */\n+struct HeadersSyncParams {\n+    //! Distance in blocks between header commitments.\n+    size_t commitment_period;\n+    //! Only feed headers to validation once this many headers on top have been\n+    //! received and validated against commitments.",
      "path": "src/kernel/chainparams.h",
      "position": 1,
      "original_position": 11,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "1032f52791221a7fd28ab9a951aa94642220d840",
      "in_reply_to_id": 2164212315,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree. New attempt:\r\n```C++\r\n//! Only start outputting headers once this many headers have been received\r\n//! and validated against commitments.\r\n```",
      "created_at": "2025-06-25T20:11:28Z",
      "updated_at": "2025-06-25T20:39:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2167541369",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167541369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 70,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167578566",
      "pull_request_review_id": 2959466839,
      "id": 2167578566,
      "node_id": "PRRC_kwDOABII586BMp_G",
      "diff_hunk": "@@ -60,15 +60,23 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex* chain_start,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "in_reply_to_id": 2152292721,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Renumbered in the \"Improve comments\"-commit.",
      "created_at": "2025-06-25T20:33:30Z",
      "updated_at": "2025-06-25T20:39:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2167578566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167578566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167580914",
      "pull_request_review_id": 2959466839,
      "id": 2167580914,
      "node_id": "PRRC_kwDOABII586BMqjy",
      "diff_hunk": "@@ -278,6 +278,14 @@ std::vector<CBlockHeader> HeadersSyncState::PopHeadersReadyForAcceptance()\n     Assume(m_download_state == State::REDOWNLOAD);\n     if (m_download_state != State::REDOWNLOAD) return ret;\n \n+    if (m_process_all_remaining_headers && m_chain_start->nHeight == 0 &&\n+        m_redownload_buffer_first_prev_hash == m_chain_start->GetBlockHash() &&\n+        m_redownloaded_headers.size() <= m_params.redownload_buffer_size) {",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158549217,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Broke out `bool buffer_exceeded`, let me know if you think it's an improvement.",
      "created_at": "2025-06-25T20:34:46Z",
      "updated_at": "2025-06-25T20:39:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2167580914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2167580914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172171331",
      "pull_request_review_id": 2966807611,
      "id": 2172171331,
      "node_id": "PRRC_kwDOABII586BeLRD",
      "diff_hunk": "@@ -15,9 +15,36 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n \n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                     \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                           \\\n+    do {                                                                                                   \\\n+        const auto result = result_expression;                                                             \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                    \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                    \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                          \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                          \\\n+        std::optional<uint256> locator_hash_opt{exp_locator_hash};                                         \\\n+        if (locator_hash_opt == std::nullopt) {                                                            \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                    \\\n+        } else {                                                                                           \\\n+            BOOST_REQUIRE_GT(hss.NextHeadersRequestLocator().vHave.size(), 0);                             \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "8c96be330659a0f2d1dcd19ba3b6d087c24ed606",
      "in_reply_to_id": 2164194785,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it applies to `BOOST_REQUIRE_GT(result.pow_validated_headers.size(), 0);` as well",
      "created_at": "2025-06-27T14:28:38Z",
      "updated_at": "2025-06-27T14:28:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2172171331",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172171331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172173668",
      "pull_request_review_id": 2966811694,
      "id": 2172173668,
      "node_id": "PRRC_kwDOABII586BeL1k",
      "diff_hunk": "@@ -278,6 +278,14 @@ std::vector<CBlockHeader> HeadersSyncState::PopHeadersReadyForAcceptance()\n     Assume(m_download_state == State::REDOWNLOAD);\n     if (m_download_state != State::REDOWNLOAD) return ret;\n \n+    if (m_process_all_remaining_headers && m_chain_start->nHeight == 0 &&\n+        m_redownload_buffer_first_prev_hash == m_chain_start->GetBlockHash() &&\n+        m_redownloaded_headers.size() <= m_params.redownload_buffer_size) {",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158549217,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't like the new repetition - will have to debug it locally to understand why we run the condition outside of the loop in the first place 🤔 ",
      "created_at": "2025-06-27T14:29:49Z",
      "updated_at": "2025-06-27T14:29:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2172173668",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172173668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172253857",
      "pull_request_review_id": 2966948837,
      "id": 2172253857,
      "node_id": "PRRC_kwDOABII586Befah",
      "diff_hunk": "@@ -239,11 +239,12 @@ class base_uint\n };\n \n /** 256-bit unsigned big integer. */\n-class arith_uint256 : public base_uint<256> {\n+class arith_uint256 : public base_uint<256>\n+{\n public:\n-    arith_uint256() = default;\n-    arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}\n-    arith_uint256(uint64_t b) : base_uint<256>(b) {}\n+    constexpr arith_uint256() = default;\n+    constexpr arith_uint256(const base_uint& b) : base_uint(b) {}\n+    constexpr arith_uint256(uint64_t b) : base_uint(b) {}",
      "path": "src/arith_uint256.h",
      "position": 50,
      "original_position": 57,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
      "in_reply_to_id": null,
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just to confirm that I understand this correctly, are you removing the `<256>` because it's implicit?",
      "created_at": "2025-06-27T15:09:15Z",
      "updated_at": "2025-07-02T16:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2172253857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172253857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 234,
      "original_start_line": 246,
      "start_side": "RIGHT",
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2173159314",
      "pull_request_review_id": 2968431022,
      "id": 2173159314,
      "node_id": "PRRC_kwDOABII586Bh8eS",
      "diff_hunk": "@@ -15,9 +15,36 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n \n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                     \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                           \\\n+    do {                                                                                                   \\\n+        const auto result = result_expression;                                                             \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                    \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                    \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                          \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                          \\\n+        std::optional<uint256> locator_hash_opt{exp_locator_hash};                                         \\\n+        if (locator_hash_opt == std::nullopt) {                                                            \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                    \\\n+        } else {                                                                                           \\\n+            BOOST_REQUIRE_GT(hss.NextHeadersRequestLocator().vHave.size(), 0);                             \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "8c96be330659a0f2d1dcd19ba3b6d087c24ed606",
      "in_reply_to_id": 2164194785,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "True, sole change in latest push.",
      "created_at": "2025-06-28T07:36:37Z",
      "updated_at": "2025-06-28T07:36:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2173159314",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2173159314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180235458",
      "pull_request_review_id": 2966948837,
      "id": 2180235458,
      "node_id": "PRRC_kwDOABII586B88DC",
      "diff_hunk": "@@ -105,22 +130,29 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n     // initially and then the rest.\n     HeadersSyncState hss{CreateState(chain_start)};\n \n-    // Just feed one header.\n-    (void)hss.ProcessNextHeaders({{first_chain.front()}}, true);\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n     // Pretend the message is still \"full\", so we don't abort.\n-    auto result{hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true)};\n-\n     // This chain should look valid, and we should have met the proof-of-work\n     // requirement during PRESYNC and transitioned to REDOWNLOAD.\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    CHECK_RESULT(hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true),",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 56,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "79bdc6a785bca96dababc698336c04b8625b7d1c",
      "in_reply_to_id": null,
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 79bdc6a785bca96dababc698336c04b8625b7d1c: in some CHECK_RESULT you are putting `/*full_headers_message=*/`, in some others you're not, like this one, the one below, and the ones in TooLittleWork",
      "created_at": "2025-07-02T14:37:47Z",
      "updated_at": "2025-07-02T16:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2180235458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180235458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180366086",
      "pull_request_review_id": 2966948837,
      "id": 2180366086,
      "node_id": "PRRC_kwDOABII586B9b8G",
      "diff_hunk": "@@ -61,6 +61,17 @@ struct ChainTxData {\n     double dTxRate;   //!< estimated number of transactions per second after that timestamp\n };\n \n+/**\n+ * Used to configure Headers Sync memory usage.\n+ */\n+struct HeadersSyncParams {\n+    //! Distance in blocks between header commitments.\n+    size_t commitment_period;\n+    //! Only start outputting headers once this many headers have been received",
      "path": "src/kernel/chainparams.h",
      "position": 1,
      "original_position": 10,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "ced2ddb37c957e53d4a8aa40d3512ea3786511b4",
      "in_reply_to_id": null,
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in ced2ddb37c957e53d4a8aa40d3512ea3786511b4: the previous comment (in headerssync.cpp) said:\r\n\"Only **feed headers to validation** once this many headers..\"\r\n\r\nI think that phrasing was a bit clearer than “outputting”",
      "created_at": "2025-07-02T15:29:08Z",
      "updated_at": "2025-07-02T16:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2180366086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180366086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180450887",
      "pull_request_review_id": 2966948837,
      "id": 2180450887,
      "node_id": "PRRC_kwDOABII586B9wpH",
      "diff_hunk": "@@ -15,9 +15,34 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n \n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result = result_expression;                                                           \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        std::optional<uint256> locator_hash_opt{exp_locator_hash};                                       \\\n+        if (locator_hash_opt == std::nullopt) {                                                          \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        }                                                                                                \\\n+        std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                           \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "79bdc6a785bca96dababc698336c04b8625b7d1c",
      "in_reply_to_id": null,
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "micro nit in 79bdc6a785bca96dababc698336c04b8625b7d1c: you could check `exp_pow_validated_prev` first and `exp_locator_hash` second, to maintain the same order as the macro parameters",
      "created_at": "2025-07-02T16:06:29Z",
      "updated_at": "2025-07-02T16:28:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2180450887",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180450887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180509361",
      "pull_request_review_id": 2979875214,
      "id": 2180509361,
      "node_id": "PRRC_kwDOABII586B9-6x",
      "diff_hunk": "@@ -239,11 +239,12 @@ class base_uint\n };\n \n /** 256-bit unsigned big integer. */\n-class arith_uint256 : public base_uint<256> {\n+class arith_uint256 : public base_uint<256>\n+{\n public:\n-    arith_uint256() = default;\n-    arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}\n-    arith_uint256(uint64_t b) : base_uint<256>(b) {}\n+    constexpr arith_uint256() = default;\n+    constexpr arith_uint256(const base_uint& b) : base_uint(b) {}\n+    constexpr arith_uint256(uint64_t b) : base_uint(b) {}",
      "path": "src/arith_uint256.h",
      "position": 50,
      "original_position": 57,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
      "in_reply_to_id": 2172253857,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, they're redundant, can be deduced by the compiler",
      "created_at": "2025-07-02T16:35:34Z",
      "updated_at": "2025-07-02T16:35:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2180509361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180509361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 234,
      "original_start_line": 246,
      "start_side": "RIGHT",
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182784980",
      "pull_request_review_id": 2983172052,
      "id": 2182784980,
      "node_id": "PRRC_kwDOABII586CGqfU",
      "diff_hunk": "@@ -52,95 +80,188 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n         prev_hash = next_header.GetHash();\n         prev_time = next_header.nTime;\n     }\n-    return;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+static HeadersSyncState CreateState(const CBlockIndex* chain_start,\n+        const HeadersSyncParams& params = {\n+            .commitment_period = COMMITMENT_PERIOD,\n+            .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+        })\n+{\n+    return {/*id=*/0,\n+            Params().GetConsensus(),\n+            params,\n+            chain_start,\n+            /*minimum_required_work=*/CHAIN_WORK};\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n \n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex*, const std::vector<CBlockHeader>&, const std::vector<CBlockHeader>&);\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 4. Sets the redownload buffer size to be large enough that we reach the PoW\n+//    threshold before returning any headers, resulting in a warning.\n+static void TooBigBuffer(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    std::unique_ptr<HeadersSyncState> hss;\n-\n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 153,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "c3bc47cfb6f8e55168c6ab7d4544976837abfec0",
      "in_reply_to_id": null,
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It took me a while to figure this out - I was initially wondering why the chains have `TARGET_BLOCKS - 1` and `TARGET_BLOCKS - 2` blocks, until I realized that I wasn't counting the genesis block 😅 \r\n\r\nI'm not sure if it might be worth it to add a comment like\r\n`// The first chain will contain TARGET_BLOCKS, the second one TARGET_BLOCKS - 1`\r\n\r\nIt might be obvious already, feel free to drop the suggestion",
      "created_at": "2025-07-03T13:26:44Z",
      "updated_at": "2025-07-09T14:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2182784980",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182784980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182856283",
      "pull_request_review_id": 2983172052,
      "id": 2182856283,
      "node_id": "PRRC_kwDOABII586CG75b",
      "diff_hunk": "@@ -19,6 +20,8 @@ using State = HeadersSyncState::State;\n \n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "ced2ddb37c957e53d4a8aa40d3512ea3786511b4",
      "in_reply_to_id": null,
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A couple of questions regarding these two:\r\n- REDOWNLOAD_BUFFER_SIZE: can we add a comment explaining why subtracting MAX_HEADERS_RESULT + 123? Copy-pasting what's in the commit description is ok\r\n- COMMITMENT_PERIOD = 600: I suppose this is just mimicking the mainnet value? ",
      "created_at": "2025-07-03T13:52:22Z",
      "updated_at": "2025-07-09T14:58:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2182856283",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182856283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189176855",
      "pull_request_review_id": 2992479971,
      "id": 2189176855,
      "node_id": "PRRC_kwDOABII586CfDAX",
      "diff_hunk": "@@ -15,9 +15,34 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n \n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result = result_expression;                                                           \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        std::optional<uint256> locator_hash_opt{exp_locator_hash};                                       \\\n+        if (locator_hash_opt == std::nullopt) {                                                          \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        }                                                                                                \\\n+        std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                           \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "79bdc6a785bca96dababc698336c04b8625b7d1c",
      "in_reply_to_id": 2180450887,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree that's cleaner, fixed!\r\nAlso changed from\r\n`== std::nullopt` to\r\n`.has_value()`.",
      "created_at": "2025-07-07T07:18:41Z",
      "updated_at": "2025-07-07T07:35:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2189176855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189176855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189181808",
      "pull_request_review_id": 2992479971,
      "id": 2189181808,
      "node_id": "PRRC_kwDOABII586CfENw",
      "diff_hunk": "@@ -61,6 +61,17 @@ struct ChainTxData {\n     double dTxRate;   //!< estimated number of transactions per second after that timestamp\n };\n \n+/**\n+ * Used to configure Headers Sync memory usage.\n+ */\n+struct HeadersSyncParams {\n+    //! Distance in blocks between header commitments.\n+    size_t commitment_period;\n+    //! Only start outputting headers once this many headers have been received",
      "path": "src/kernel/chainparams.h",
      "position": 1,
      "original_position": 10,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "ced2ddb37c957e53d4a8aa40d3512ea3786511b4",
      "in_reply_to_id": 2180366086,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed to the following, let me know what you have further suggestions:\r\n> Start feeding back headers into the permanent block index once more than this number of them have been received and validated against commitments.",
      "created_at": "2025-07-07T07:20:47Z",
      "updated_at": "2025-07-07T07:35:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2189181808",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189181808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189214990",
      "pull_request_review_id": 2992479971,
      "id": 2189214990,
      "node_id": "PRRC_kwDOABII586CfMUO",
      "diff_hunk": "@@ -105,22 +130,29 @@ static void SneakyRedownload(const CBlockIndex* chain_start,\n     // initially and then the rest.\n     HeadersSyncState hss{CreateState(chain_start)};\n \n-    // Just feed one header.\n-    (void)hss.ProcessNextHeaders({{first_chain.front()}}, true);\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n     // Pretend the message is still \"full\", so we don't abort.\n-    auto result{hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true)};\n-\n     // This chain should look valid, and we should have met the proof-of-work\n     // requirement during PRESYNC and transitioned to REDOWNLOAD.\n-    BOOST_CHECK(result.success);\n-    BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    CHECK_RESULT(hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true),",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 56,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "79bdc6a785bca96dababc698336c04b8625b7d1c",
      "in_reply_to_id": 2180235458,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In this case we have the comment right above describing the same thing:\r\nhttps://github.com/bitcoin/bitcoin/blob/79bdc6a785bca96dababc698336c04b8625b7d1c/src/test/headers_sync_chainwork_tests.cpp#L140\r\n\r\nWent through the code and realized `HappyPath` was repeating `/*full_headers_message=*/` in one piece of newer code, so removed that.\r\n\r\nThis boolean parameter to `ProcessNextHeaders()` is somewhat of a code smell. Maybe could be split into 2 public functions (`ProcessNextHeaders()` + `ProcessLastHeaders()`... but that would make the code as a whole more convoluted I think).",
      "created_at": "2025-07-07T07:29:25Z",
      "updated_at": "2025-07-07T07:35:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2189214990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189214990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2205843009",
      "pull_request_review_id": 3017863907,
      "id": 2205843009,
      "node_id": "PRRC_kwDOABII586Den5B",
      "diff_hunk": "@@ -19,6 +20,8 @@ using State = HeadersSyncState::State;\n \n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "ced2ddb37c957e53d4a8aa40d3512ea3786511b4",
      "in_reply_to_id": 2182856283,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good call - added comments and removed the redundant part from the commit message.",
      "created_at": "2025-07-14T21:14:34Z",
      "updated_at": "2025-07-14T22:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2205843009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2205843009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 23,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2205888037",
      "pull_request_review_id": 3017863907,
      "id": 2205888037,
      "node_id": "PRRC_kwDOABII586Dey4l",
      "diff_hunk": "@@ -52,95 +80,188 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n         prev_hash = next_header.GetHash();\n         prev_time = next_header.nTime;\n     }\n-    return;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+static HeadersSyncState CreateState(const CBlockIndex* chain_start,\n+        const HeadersSyncParams& params = {\n+            .commitment_period = COMMITMENT_PERIOD,\n+            .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+        })\n+{\n+    return {/*id=*/0,\n+            Params().GetConsensus(),\n+            params,\n+            chain_start,\n+            /*minimum_required_work=*/CHAIN_WORK};\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n \n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex*, const std::vector<CBlockHeader>&, const std::vector<CBlockHeader>&);\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 4. Sets the redownload buffer size to be large enough that we reach the PoW\n+//    threshold before returning any headers, resulting in a warning.\n+static void TooBigBuffer(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    std::unique_ptr<HeadersSyncState> hss;\n-\n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 153,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "c3bc47cfb6f8e55168c6ab7d4544976837abfec0",
      "in_reply_to_id": 2182784980,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's not obvious to me, thanks for sending me down a rabbit hole. :) Please correct me if I'm wrong but this is my refreshed understanding:\r\n* `CBlockHeader::nBits` is the PoW target for the current difficulty period (in compact int format). https://learnmeabitcoin.com/technical/block/bits/\r\n* `GetBlockProof()` is somewhat terse in comments (since inception in df9eb5e14fa8072bc8a82b59e712c2ba36f13f4c), but as I understand it:\r\n  Given a target `nBits`, it returns an estimate for how many SHA256 hash-operations on average are required to mine a given block.\r\n* Total PoW of a chain, `CBlockIndex::nChainWork`, is actually the sum of the targets, not the actual block hashes. This somewhat narrows my perception of claims I've heard previously that Bitcoin follows the highest PoW chain rather than the longest chain (so it's true as far as difficulty periods go, but not on a per-block level). This has the gambler side of me a bit disappointed, but okay.\r\n  https://github.com/bitcoin/bitcoin/blob/78503a41546f6432045d3f9fd39860ead11d5c95/src/node/blockstorage.cpp#L227\r\n\r\nBased on the above, I've added comments to the \"doc(test): Improve comments\"-commit.",
      "created_at": "2025-07-14T21:50:16Z",
      "updated_at": "2025-07-14T22:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2205888037",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2205888037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228161506",
      "pull_request_review_id": 3051130832,
      "id": 2228161506,
      "node_id": "PRRC_kwDOABII586Ezwvi",
      "diff_hunk": "@@ -52,95 +80,188 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n         prev_hash = next_header.GetHash();\n         prev_time = next_header.nTime;\n     }\n-    return;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+static HeadersSyncState CreateState(const CBlockIndex* chain_start,\n+        const HeadersSyncParams& params = {\n+            .commitment_period = COMMITMENT_PERIOD,\n+            .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+        })\n+{\n+    return {/*id=*/0,\n+            Params().GetConsensus(),\n+            params,\n+            chain_start,\n+            /*minimum_required_work=*/CHAIN_WORK};\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n \n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex*, const std::vector<CBlockHeader>&, const std::vector<CBlockHeader>&);\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 4. Sets the redownload buffer size to be large enough that we reach the PoW\n+//    threshold before returning any headers, resulting in a warning.\n+static void TooBigBuffer(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    std::unique_ptr<HeadersSyncState> hss;\n-\n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 153,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "c3bc47cfb6f8e55168c6ab7d4544976837abfec0",
      "in_reply_to_id": 2182784980,
      "user": {
        "login": "danielabrozzoni",
        "id": 25042473,
        "node_id": "MDQ6VXNlcjI1MDQyNDcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25042473?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielabrozzoni",
        "html_url": "https://github.com/danielabrozzoni",
        "followers_url": "https://api.github.com/users/danielabrozzoni/followers",
        "following_url": "https://api.github.com/users/danielabrozzoni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/danielabrozzoni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/danielabrozzoni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/danielabrozzoni/subscriptions",
        "organizations_url": "https://api.github.com/users/danielabrozzoni/orgs",
        "repos_url": "https://api.github.com/users/danielabrozzoni/repos",
        "events_url": "https://api.github.com/users/danielabrozzoni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/danielabrozzoni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks a lot for the explanation, and the updated comments! It's much more understandable now.",
      "created_at": "2025-07-24T10:47:10Z",
      "updated_at": "2025-07-24T10:47:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2228161506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228161506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265022601",
      "pull_request_review_id": 3103347444,
      "id": 2265022601,
      "node_id": "PRRC_kwDOABII586HAYCJ",
      "diff_hunk": "@@ -278,6 +278,14 @@ std::vector<CBlockHeader> HeadersSyncState::PopHeadersReadyForAcceptance()\n     Assume(m_download_state == State::REDOWNLOAD);\n     if (m_download_state != State::REDOWNLOAD) return ret;\n \n+    if (m_process_all_remaining_headers && m_chain_start->nHeight == 0 &&\n+        m_redownload_buffer_first_prev_hash == m_chain_start->GetBlockHash() &&\n+        m_redownloaded_headers.size() <= m_params.redownload_buffer_size) {",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "42e746096b93b8026569817d8925750089d6daf4",
      "in_reply_to_id": 2158549217,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Latest push improves this part of the code, please check it out!",
      "created_at": "2025-08-09T22:34:19Z",
      "updated_at": "2025-08-09T22:46:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2265022601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265022601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270854029",
      "pull_request_review_id": 3112310893,
      "id": 2270854029,
      "node_id": "PRRC_kwDOABII586HWnuN",
      "diff_hunk": "@@ -113,11 +113,28 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     (void)hss->ProcessNextHeaders(first_chain, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    // Process so that the internal threshold isn't met, meaning validated",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "57a351912b057d1a2234d4a3b3dd0c745690e3d0",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "57a351912b057d1a2234d4a3b3dd0c745690e3d0: this new addition temporarily invalidates the introductory comment describing the workings of `headers_sync_state`\r\n",
      "created_at": "2025-08-12T18:54:18Z",
      "updated_at": "2025-08-12T19:52:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2270854029",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270854029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270858678",
      "pull_request_review_id": 3112310893,
      "id": 2270858678,
      "node_id": "PRRC_kwDOABII586HWo22",
      "diff_hunk": "@@ -113,11 +113,28 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     (void)hss->ProcessNextHeaders(first_chain, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    // Process so that the internal threshold isn't met, meaning validated\n+    // headers shouldn't be returned yet:\n+    headers_batch.assign(first_chain.begin(), std::next(first_chain.begin()));\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n+    BOOST_CHECK_EQUAL(hss->GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+\n+    // We start receiving headers for permanent storage before completing:\n+    headers_batch.assign(std::next(first_chain.begin()), std::prev(first_chain.end()));\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n+    BOOST_CHECK_EQUAL(hss->GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_GT(result.pow_validated_headers.size(), 0);\n+    const size_t validated_headers_count = result.pow_validated_headers.size();\n+\n+    // Feed final header, meeting the work threshold again and\n+    // completing the REDOWNLOAD phase.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "57a351912b057d1a2234d4a3b3dd0c745690e3d0",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: joining the lines would reduce the noise, we have longer lines than that - which would still be below 100 chars anyway\r\nnit2: in other cases we ended with a `:`, not a `.`",
      "created_at": "2025-08-12T18:55:30Z",
      "updated_at": "2025-08-12T19:52:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2270858678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270858678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270869502",
      "pull_request_review_id": 3112310893,
      "id": 2270869502,
      "node_id": "PRRC_kwDOABII586HWrf-",
      "diff_hunk": "@@ -113,11 +113,28 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     (void)hss->ProcessNextHeaders(first_chain, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    // Process so that the internal threshold isn't met, meaning validated\n+    // headers shouldn't be returned yet:\n+    headers_batch.assign(first_chain.begin(), std::next(first_chain.begin()));\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n+    BOOST_CHECK_EQUAL(hss->GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+\n+    // We start receiving headers for permanent storage before completing:\n+    headers_batch.assign(std::next(first_chain.begin()), std::prev(first_chain.end()));\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n+    BOOST_CHECK_EQUAL(hss->GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_GT(result.pow_validated_headers.size(), 0);\n+    const size_t validated_headers_count = result.pow_validated_headers.size();\n+\n+    // Feed final header, meeting the work threshold again and\n+    // completing the REDOWNLOAD phase.\n+    headers_batch.assign(std::prev(first_chain.end()), first_chain.end());\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(!result.request_more);\n     // All headers should be ready for acceptance:\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n+    BOOST_CHECK_EQUAL(validated_headers_count + result.pow_validated_headers.size(), first_chain.size());",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "57a351912b057d1a2234d4a3b3dd0c745690e3d0",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍, test passes with `REDOWNLOAD_BUFFER_SIZE{15827}` without this commit, fails after the addition, as expected",
      "created_at": "2025-08-12T18:58:23Z",
      "updated_at": "2025-08-12T19:52:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2270869502",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270869502"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270882073",
      "pull_request_review_id": 3112310893,
      "id": 2270882073,
      "node_id": "PRRC_kwDOABII586HWukZ",
      "diff_hunk": "@@ -21,23 +21,23 @@ class uint_error : public std::runtime_error {\n };\n \n /** Template base class for unsigned big integers. */\n-template<unsigned int BITS>\n+template <unsigned int BITS>\n class base_uint\n {\n protected:\n     static_assert(BITS / 32 > 0 && BITS % 32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n     static constexpr int WIDTH = BITS / 32;\n     /** Big integer represented with 32-bit digits, least-significant first. */\n     uint32_t pn[WIDTH];\n-public:\n \n-    base_uint()\n+public:\n+    constexpr base_uint()\n     {\n         for (int i = 0; i < WIDTH; i++)\n             pn[i] = 0;\n     }\n \n-    base_uint(const base_uint& b)\n+    constexpr base_uint(const base_uint& b)",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 31,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: because of these changes the commit message should likely be adjusted: the refactor is not test-only anymore",
      "created_at": "2025-08-12T19:02:09Z",
      "updated_at": "2025-08-12T19:52:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2270882073",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270882073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270952147",
      "pull_request_review_id": 3112310893,
      "id": 2270952147,
      "node_id": "PRRC_kwDOABII586HW_rT",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */\n+static void FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n+/**\n+ * Generate headers in a chain that build off a given starting hash, using\n+ * the given nVersion, advancing time by 1 second from the starting\n+ * prev_time, and with a fixed merkle root hash.\n+ */\n+static void GenerateHeaders(std::vector<CBlockHeader>& headers,\n         size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n         const uint256& merkle_root, const uint32_t nBits)\n {\n     uint256 prev_hash = starting_hash;\n \n     while (headers.size() < count) {",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 54,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8 nit: since we're editing this already, consider removing the primitive consts:\r\n```C++\r\n        size_t count, const uint256& starting_hash, int32_t nVersion, uint32_t prev_time,\r\n        const uint256& merkle_root, uint32_t nBits)\r\n```\r\n\r\n------\r\n\r\nslightly unrelated: this is a fixed iteration, it implicitly assumes `headers` is empty when we get here - maybe we can make that clearer here or in another follow-up by explicitly iterating from `0` or `headers.size()` to `count` instead:\r\n```C++\r\nvoid HeadersGeneratorSetup::GenerateHeaders(\r\n    std::vector<CBlockHeader>& headers,\r\n    size_t count, const uint256& starting_hash, int32_t nVersion, uint32_t prev_time,\r\n    const uint256& merkle_root, uint32_t nBits)\r\n{\r\n    for (size_t i{0}; i < count; ++i) {\r\n        auto prev_hash{i ? headers.back().GetHash() : starting_hash};\r\n        auto& next_header{headers.emplace_back()};\r\n        next_header.nVersion = nVersion;\r\n        next_header.hashPrevBlock = prev_hash;\r\n        next_header.hashMerkleRoot = merkle_root;\r\n        next_header.nTime = ++prev_time;\r\n        next_header.nBits = nBits;\r\n\r\n        FindProofOfWork(next_header);\r\n    }\r\n}\r\n```\r\nOr since we're already reassigning arguments:\r\n```C++\r\nvoid HeadersGeneratorSetup::GenerateHeaders(\r\n    std::vector<CBlockHeader>& headers,\r\n    size_t count, uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\r\n    const uint256& merkle_root, uint32_t nBits)\r\n{\r\n    for (size_t i{0}; i < count; ++i) {\r\n        auto& next_header{headers.emplace_back()};\r\n        next_header.nVersion = nVersion;\r\n        next_header.hashPrevBlock = prev_hash;\r\n        next_header.hashMerkleRoot = merkle_root;\r\n        next_header.nTime = ++prev_time;\r\n        next_header.nBits = nBits;\r\n\r\n        FindProofOfWork(next_header);\r\n        prev_hash = next_header.GetHash();\r\n    }\r\n}\r\n```\r\n\r\nWhat's changed:\r\n* fixed for loop, since we know exactly the number of iterations;\r\n* `prev_hash` can be localized, we don't need to update it based on the iteration's state;\r\n*  or `prev_hash` arg can be copied and reassigned, like we did with `prev_time` already;\r\n* `prev_time` is basically just incremented, no need to assign it back and forth;\r\n* no point in `emplace_back` + `back()`, let's just store the result of the emplace;\r\n* edit: `nVersion` and `nTime` should be a `int32_t` instead.\r\n\r\nMaybe this reduces the need for such a detailed documentation as well (e.g. the advance of 1 second is obvious now - it wasn't obvious before)",
      "created_at": "2025-08-12T19:24:39Z",
      "updated_at": "2025-08-12T21:11:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2270952147",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270952147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270974976",
      "pull_request_review_id": 3112310893,
      "id": 2270974976,
      "node_id": "PRRC_kwDOABII586HXFQA",
      "diff_hunk": "@@ -72,27 +69,23 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     std::unique_ptr<HeadersSyncState> hss;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    const auto& genesis{Params().GenesisBlock()};\r\n```\r\n\r\nnit2: we may want to extract its hash as well",
      "created_at": "2025-08-12T19:33:18Z",
      "updated_at": "2025-08-12T19:52:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2270974976",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270974976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270999399",
      "pull_request_review_id": 3112310893,
      "id": 2270999399,
      "node_id": "PRRC_kwDOABII586HXLNn",
      "diff_hunk": "@@ -52,95 +80,188 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n         prev_hash = next_header.GetHash();\n         prev_time = next_header.nTime;\n     }\n-    return;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+static HeadersSyncState CreateState(const CBlockIndex* chain_start,\n+        const HeadersSyncParams& params = {\n+            .commitment_period = COMMITMENT_PERIOD,\n+            .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+        })\n+{\n+    return {/*id=*/0,\n+            Params().GetConsensus(),\n+            params,\n+            chain_start,\n+            /*minimum_required_work=*/CHAIN_WORK};\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n \n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex*, const std::vector<CBlockHeader>&, const std::vector<CBlockHeader>&);\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 4. Sets the redownload buffer size to be large enough that we reach the PoW\n+//    threshold before returning any headers, resulting in a warning.\n+static void TooBigBuffer(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    std::unique_ptr<HeadersSyncState> hss;\n-\n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 153,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "c3bc47cfb6f8e55168c6ab7d4544976837abfec0",
      "in_reply_to_id": 2182784980,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It also confused me for a second but for a different reason, I though they're heights, maybe adding a `count` hint\r\n```C++\r\nGenerateHeaders(first_chain, /*count=*/TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\r\n```\r\nwould help.",
      "created_at": "2025-08-12T19:42:07Z",
      "updated_at": "2025-08-12T19:52:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2270999399",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270999399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271009449",
      "pull_request_review_id": 3112310893,
      "id": 2271009449,
      "node_id": "PRRC_kwDOABII586HXNqp",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */\n+static void FindProofOfWork(CBlockHeader& starting_header)",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 34,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "not sure what \"starting\" refers to here, since we're mutating it, so it will also store all intermediary and final header states as well",
      "created_at": "2025-08-12T19:45:57Z",
      "updated_at": "2025-08-12T20:59:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271009449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271009449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271025349",
      "pull_request_review_id": 3112310893,
      "id": 2271025349,
      "node_id": "PRRC_kwDOABII586HXRjF",
      "diff_hunk": "@@ -124,9 +145,15 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     BOOST_CHECK_EQUAL(validated_headers_count + result.pow_validated_headers.size(), first_chain.size());\n     // Nothing left for the sync logic to do:\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n+}\n \n-    // Finally, verify that just trying to process the second chain would not\n-    // succeed (too little work)\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain)\n+{\n+    std::unique_ptr<HeadersSyncState> hss;\n+    HeadersSyncState::ProcessingResult result;\n+    // Verify that just trying to process the second chain would not succeed",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 269,
      "original_position": 71,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a: might make sense to phrase the comment like this in the first place to minimize diffs",
      "created_at": "2025-08-12T19:51:59Z",
      "updated_at": "2025-08-12T21:01:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271025349",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271025349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271077346",
      "pull_request_review_id": 3112607250,
      "id": 2271077346,
      "node_id": "PRRC_kwDOABII586HXePi",
      "diff_hunk": "@@ -113,11 +113,28 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     (void)hss->ProcessNextHeaders(first_chain, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    // Process so that the internal threshold isn't met, meaning validated",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "57a351912b057d1a2234d4a3b3dd0c745690e3d0",
      "in_reply_to_id": 2270854029,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are you referring to this?\r\nhttps://github.com/bitcoin/bitcoin/blob/57a351912b057d1a2234d4a3b3dd0c745690e3d0/src/test/headers_sync_chainwork_tests.cpp#L66-L67\r\n\r\nWe are feeding in the same chain twice, it's just that we cut it up in smaller pieces.",
      "created_at": "2025-08-12T20:09:37Z",
      "updated_at": "2025-08-12T21:39:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271077346",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271077346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271219215",
      "pull_request_review_id": 3112607250,
      "id": 2271219215,
      "node_id": "PRRC_kwDOABII586HYA4P",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */\n+static void FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n+/**\n+ * Generate headers in a chain that build off a given starting hash, using\n+ * the given nVersion, advancing time by 1 second from the starting\n+ * prev_time, and with a fixed merkle root hash.\n+ */\n+static void GenerateHeaders(std::vector<CBlockHeader>& headers,\n         size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n         const uint256& merkle_root, const uint32_t nBits)\n {\n     uint256 prev_hash = starting_hash;\n \n     while (headers.size() < count) {",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 54,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": 2270952147,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Incorporated many of your suggestions, latest version:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a4191b57b21a0fea871206f368972c7741ad6437/src/test/headers_sync_chainwork_tests.cpp#L60-L80\r\n\r\n* Return value enables making `first_chain`/`second_chain` `const` from the beginning.\r\n* Looping over `headers` means we don't need the explicit `i`.\r\n* Still keeping `const` on primitive arguments which we do not modify within function body, such as `nVersion`. (Agree that they don't belong if we had a separate function declaration without the body).\r\n* Shortened the comment about advancing 1 second.",
      "created_at": "2025-08-12T20:59:17Z",
      "updated_at": "2025-08-12T21:39:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271219215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271219215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271228582",
      "pull_request_review_id": 3112824958,
      "id": 2271228582,
      "node_id": "PRRC_kwDOABII586HYDKm",
      "diff_hunk": "@@ -52,6 +52,14 @@ static void GenerateHeaders(std::vector<CBlockHeader>& headers,\n     }\n }\n \n+static HeadersSyncState CreateState(const CBlockIndex* chain_start)",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "14f5c34ecedad27bafa51eb918eb636773bc480b",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can it ever be null or can we do `static HeadersSyncState CreateState(const CBlockIndex& chain_start)` by asserting the lookup:\r\n```C++\r\n    const CBlockIndex& chain_start{*Assert(WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash())))};\r\n```",
      "created_at": "2025-08-12T21:02:35Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271228582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271228582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271233399",
      "pull_request_review_id": 3112607250,
      "id": 2271233399,
      "node_id": "PRRC_kwDOABII586HYEV3",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */\n+static void FindProofOfWork(CBlockHeader& starting_header)",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 34,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": 2271009449,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Name could be better, but keeping it for now as it helps make the diff somewhat less jarring.",
      "created_at": "2025-08-12T21:04:16Z",
      "updated_at": "2025-08-12T21:39:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271233399",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271233399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271236427",
      "pull_request_review_id": 3112607250,
      "id": 2271236427,
      "node_id": "PRRC_kwDOABII586HYFFL",
      "diff_hunk": "@@ -124,9 +145,15 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     BOOST_CHECK_EQUAL(validated_headers_count + result.pow_validated_headers.size(), first_chain.size());\n     // Nothing left for the sync logic to do:\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n+}\n \n-    // Finally, verify that just trying to process the second chain would not\n-    // succeed (too little work)\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain)\n+{\n+    std::unique_ptr<HeadersSyncState> hss;\n+    HeadersSyncState::ProcessingResult result;\n+    // Verify that just trying to process the second chain would not succeed",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 269,
      "original_position": 71,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "in_reply_to_id": 2271025349,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Postponed updating this and one other comment until the \"Improve comments\" commit.",
      "created_at": "2025-08-12T21:05:21Z",
      "updated_at": "2025-08-12T21:39:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271236427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271236427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271242029",
      "pull_request_review_id": 3112607250,
      "id": 2271242029,
      "node_id": "PRRC_kwDOABII586HYGct",
      "diff_hunk": "@@ -72,27 +69,23 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     std::unique_ptr<HeadersSyncState> hss;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": 2270974976,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added ampersand but keeping the 3 `GetHash()` calls for now.",
      "created_at": "2025-08-12T21:07:28Z",
      "updated_at": "2025-08-12T21:39:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271242029",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271242029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271254339",
      "pull_request_review_id": 3112607250,
      "id": 2271254339,
      "node_id": "PRRC_kwDOABII586HYJdD",
      "diff_hunk": "@@ -113,11 +113,28 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     (void)hss->ProcessNextHeaders(first_chain, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    // Process so that the internal threshold isn't met, meaning validated\n+    // headers shouldn't be returned yet:\n+    headers_batch.assign(first_chain.begin(), std::next(first_chain.begin()));\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n+    BOOST_CHECK_EQUAL(hss->GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+\n+    // We start receiving headers for permanent storage before completing:\n+    headers_batch.assign(std::next(first_chain.begin()), std::prev(first_chain.end()));\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n+    BOOST_CHECK_EQUAL(hss->GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_GT(result.pow_validated_headers.size(), 0);\n+    const size_t validated_headers_count = result.pow_validated_headers.size();\n+\n+    // Feed final header, meeting the work threshold again and\n+    // completing the REDOWNLOAD phase.\n+    headers_batch.assign(std::prev(first_chain.end()), first_chain.end());\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(!result.request_more);\n     // All headers should be ready for acceptance:\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n+    BOOST_CHECK_EQUAL(validated_headers_count + result.pow_validated_headers.size(), first_chain.size());",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "57a351912b057d1a2234d4a3b3dd0c745690e3d0",
      "in_reply_to_id": 2270869502,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(This is the check that fails for me specifically):\r\nhttps://github.com/bitcoin/bitcoin/blob/57a351912b057d1a2234d4a3b3dd0c745690e3d0/src/test/headers_sync_chainwork_tests.cpp#L127\r\n```\r\n../src/test/headers_sync_chainwork_tests.cpp(127): error: in \"headers_sync_chainwork_tests/headers_sync_state\": check result.pow_validated_headers.size() > 0 has failed [0 <= 0]\r\n```",
      "created_at": "2025-08-12T21:11:00Z",
      "updated_at": "2025-08-12T21:39:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271254339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271254339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271272664",
      "pull_request_review_id": 3112824958,
      "id": 2271272664,
      "node_id": "PRRC_kwDOABII586HYN7Y",
      "diff_hunk": "@@ -60,15 +60,19 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex*, const std::vector<CBlockHeader>&, const std::vector<CBlockHeader>&);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 4. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Arguably this is where the tests start and the above methods are helpers, consider moving `BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)` here",
      "created_at": "2025-08-12T21:16:41Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271272664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271272664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271274481",
      "pull_request_review_id": 3112824958,
      "id": 2271274481,
      "node_id": "PRRC_kwDOABII586HYOXx",
      "diff_hunk": "@@ -60,15 +60,19 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex*, const std::vector<CBlockHeader>&, const std::vector<CBlockHeader>&);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 4. Repeat the second set of headers in both phases to demonstrate behavior",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 10,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: as mentioned, we should only move things around here, this comment should be added to where we've introduced the happy path",
      "created_at": "2025-08-12T21:17:21Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271274481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271274481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271294627",
      "pull_request_review_id": 3112824958,
      "id": 2271294627,
      "node_id": "PRRC_kwDOABII586HYTSj",
      "diff_hunk": "@@ -83,8 +83,18 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const auto genesis{Params().GenesisBlock()};\n \n+    // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+    // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+    assert(genesis.nBits == 0x207fffff);\n+    // ...which implies around every 2nd hash attempt should succeed...\n+    assert(GetBlockProof(CBlockIndex(genesis)) == 2);\n+    // ...and that is where we get our minimum PoW threshold.\n+    assert(CHAIN_WORK == TARGET_BLOCKS * 2);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "95de558590f91e3077024ab5457c3d83724ba7ad",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "why do you think we need this whole new setup?\r\n\r\nI'm not sure I understand why we're checking a constant, we've just assigned it to `TARGET_BLOCKS * 2` a few lines before",
      "created_at": "2025-08-12T21:23:46Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271294627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271294627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271306966",
      "pull_request_review_id": 3112824958,
      "id": 2271306966,
      "node_id": "PRRC_kwDOABII586HYWTW",
      "diff_hunk": "@@ -83,8 +83,18 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const auto genesis{Params().GenesisBlock()};\n \n+    // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+    // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+    assert(genesis.nBits == 0x207fffff);\n+    // ...which implies around every 2nd hash attempt should succeed...\n+    assert(GetBlockProof(CBlockIndex(genesis)) == 2);\n+    // ...and that is where we get our minimum PoW threshold.\n+    assert(CHAIN_WORK == TARGET_BLOCKS * 2);\n+\n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n+    // - 1 since the genesis block also contributes work so we just meet the",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 31,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "95de558590f91e3077024ab5457c3d83724ba7ad",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this looks like a list item, starting with `-`, not sure it helps with understanding the code better.\r\nAlso, explaining `TARGET_BLOCKS - 2` at the `TARGET_BLOCKS - 1` line is also a bit confusing.",
      "created_at": "2025-08-12T21:27:38Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271306966",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271306966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271325643",
      "pull_request_review_id": 3112824958,
      "id": 2271325643,
      "node_id": "PRRC_kwDOABII586HYa3L",
      "diff_hunk": "@@ -15,9 +15,37 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n \n+static HeadersSyncState::ProcessingResult g_latest_result;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     min_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result = result_expression;                                                           \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "59144d5283a4d502bf6eaa7a0070dce58d019549",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: to be consistent with the following lines\r\n```suggestion\r\n        const auto result{result_expression};                                                            \\\r\n```",
      "created_at": "2025-08-12T21:33:07Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271325643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271325643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271336898",
      "pull_request_review_id": 3112824958,
      "id": 2271336898,
      "node_id": "PRRC_kwDOABII586HYdnC",
      "diff_hunk": "@@ -15,9 +15,34 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n constexpr size_t TARGET_BLOCKS{15'000};\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n \n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result = result_expression;                                                           \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        std::optional<uint256> locator_hash_opt{exp_locator_hash};                                       \\\n+        if (locator_hash_opt == std::nullopt) {                                                          \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        }                                                                                                \\\n+        std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                           \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "79bdc6a785bca96dababc698336c04b8625b7d1c",
      "in_reply_to_id": 2180450887,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: we already have `opt` in the name, consider:\r\n```C++\r\nif (pow_validated_prev_opt) {                                                                    \\\r\n```\r\n\r\nnit2: `result` is `const`, consider unifying:\r\n```suggestion\r\n        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\r\n```",
      "created_at": "2025-08-12T21:36:36Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271336898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271336898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271359688",
      "pull_request_review_id": 3112824958,
      "id": 2271359688,
      "node_id": "PRRC_kwDOABII586HYjLI",
      "diff_hunk": "@@ -113,11 +113,28 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     (void)hss->ProcessNextHeaders(first_chain, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    // Process so that the internal threshold isn't met, meaning validated",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "57a351912b057d1a2234d4a3b3dd0c745690e3d0",
      "in_reply_to_id": 2270854029,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "you're updating the comments in a later commit, adding the \"happy path\", but the code that corresponds to it was added here",
      "created_at": "2025-08-12T21:43:23Z",
      "updated_at": "2025-08-12T22:06:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271359688",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271359688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271361299",
      "pull_request_review_id": 3112824958,
      "id": 2271361299,
      "node_id": "PRRC_kwDOABII586HYjkT",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */\n+static void FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n+/**\n+ * Generate headers in a chain that build off a given starting hash, using\n+ * the given nVersion, advancing time by 1 second from the starting\n+ * prev_time, and with a fixed merkle root hash.\n+ */\n+static void GenerateHeaders(std::vector<CBlockHeader>& headers,\n         size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n         const uint256& merkle_root, const uint32_t nBits)\n {\n     uint256 prev_hash = starting_hash;\n \n     while (headers.size() < count) {",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 54,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": 2270952147,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "hah, that's even better!\r\nI still recommend changing `prev_time` and `nVersion` to `uint32_t`",
      "created_at": "2025-08-12T21:44:00Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271361299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271361299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271365918",
      "pull_request_review_id": 3112824958,
      "id": 2271365918,
      "node_id": "PRRC_kwDOABII586HYkse",
      "diff_hunk": "@@ -124,9 +145,15 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     BOOST_CHECK_EQUAL(validated_headers_count + result.pow_validated_headers.size(), first_chain.size());\n     // Nothing left for the sync logic to do:\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n+}\n \n-    // Finally, verify that just trying to process the second chain would not\n-    // succeed (too little work)\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain)\n+{\n+    std::unique_ptr<HeadersSyncState> hss;\n+    HeadersSyncState::ProcessingResult result;\n+    // Verify that just trying to process the second chain would not succeed",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 269,
      "original_position": 71,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "in_reply_to_id": 2271025349,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Didn't we just add this comment a few commits before? I meant it may make sense to phrase it such that we don't need changing later",
      "created_at": "2025-08-12T21:45:48Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271365918",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271365918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271379431",
      "pull_request_review_id": 3112824958,
      "id": 2271379431,
      "node_id": "PRRC_kwDOABII586HYn_n",
      "diff_hunk": "@@ -137,7 +137,7 @@ BUILDDIR=$PWD/my-build-dir contrib/devtools/gen-manpages.py\n headerssync-params.py\n =====================\n \n-A script to generate optimal parameters for the headerssync module (src/headerssync.cpp). It takes no command-line\n+A script to generate optimal parameters for the headerssync module (stored in src/kernel/chainparams.cpp). It takes no command-line\n options, as all its configuration is set at the top of the file. It runs many times faster inside PyPy. Invocation:\n \n ```bash",
      "path": "contrib/devtools/README.md",
      "position": 8,
      "original_position": 8,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍, it seems to generate to correct values currently:\r\n\r\n> pypy3 contrib/devtools/headerssync-params.py             \r\n\r\n```bash\r\nSearching configurations:\r\n- Initial: period=618, buffer=14672, mem=701.418 KiB\r\n- New best: period=629, buffer=14955, mem=701.188 KiB\r\n- New best: period=622, buffer=14775, mem=696.908 KiB\r\n- New best: period=625, buffer=14852, mem=696.360 KiB\r\n- New best: period=623, buffer=14801, mem=695.789 KiB\r\n- New best: period=624, buffer=14827, mem=695.189 KiB\r\n\r\nGiven current min chainwork headers of 886157, the optimal parameters for low\r\nmemory usage on mainchain for release until 2027-10-06 is:\r\n\r\n        // Generated by headerssync-params.py on 2025-08-12.\r\n        m_headers_sync_params = HeadersSyncParams{\r\n            .commitment_period = 624,\r\n            .redownload_buffer_size = 14827, // 14827/624 = ~23.8 commitments\r\n        };\r\n\r\nProperties:\r\n- Per-peer memory for mainchain sync: 695.189 KiB\r\n- Per-peer memory for timewarp attack: 694.674 KiB\r\n- Attack rate: 31382.7 attacks for 1 header of memory growth\r\n  (where each attack costs 68.454 MiB bandwidth)\r\n```",
      "created_at": "2025-08-12T21:52:22Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271379431",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271379431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 143,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271383410",
      "pull_request_review_id": 3112824958,
      "id": 2271383410,
      "node_id": "PRRC_kwDOABII586HYo9y",
      "diff_hunk": "@@ -3,30 +3,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes this many bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,\n-        const CBlockIndex* chain_start, const arith_uint256& minimum_required_work) :\n-    m_commit_offset(FastRandomContext().randrange<unsigned>(HEADER_COMMITMENT_PERIOD)),\n+        const HeadersSyncParams& params, const CBlockIndex* chain_start,\n+        const arith_uint256& minimum_required_work) :\n+    m_commit_offset(FastRandomContext().randrange<unsigned>(params.commitment_period)),",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: given `size_t commitment_period` we might as well:\r\n```suggestion\r\n    m_commit_offset(FastRandomContext().randrange<size_t>(params.commitment_period)),\r\n```",
      "created_at": "2025-08-12T21:55:19Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271383410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271383410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271386176",
      "pull_request_review_id": 3112824958,
      "id": 2271386176,
      "node_id": "PRRC_kwDOABII586HYppA",
      "diff_hunk": "@@ -41,7 +34,7 @@ HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus\n     // exceeds this bound, because it's not possible for a consensus-valid\n     // chain to be longer than this (at the current time -- in the future we\n     // could try again, if necessary, to sync a longer chain).\n-    m_max_commitments = 6*(Ticks<std::chrono::seconds>(NodeClock::now() - NodeSeconds{std::chrono::seconds{chain_start->GetMedianTimePast()}}) + MAX_FUTURE_BLOCK_TIME) / HEADER_COMMITMENT_PERIOD;\n+    m_max_commitments = 6*(Ticks<std::chrono::seconds>(NodeClock::now() - NodeSeconds{std::chrono::seconds{chain_start->GetMedianTimePast()}}) + MAX_FUTURE_BLOCK_TIME) / m_params.commitment_period;",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 43,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: might as well format this monstrosity to reduce conflict with https://github.com/bitcoin/bitcoin/pull/32740/files#diff-d27c4ae51fdaf60573118eb2f5c44276de12c45bd1948da5613a07a136e4d5faR43",
      "created_at": "2025-08-12T21:57:15Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271386176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271386176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271390433",
      "pull_request_review_id": 3112824958,
      "id": 2271390433,
      "node_id": "PRRC_kwDOABII586HYqrh",
      "diff_hunk": "@@ -61,6 +61,17 @@ struct ChainTxData {\n     double dTxRate;   //!< estimated number of transactions per second after that timestamp\n };\n \n+/**\n+ * Used to configure Headers Sync memory usage.\n+ */\n+struct HeadersSyncParams {\n+    //! Distance in blocks between header commitments.\n+    size_t commitment_period;\n+    //! Start feeding back headers into the permanent block index once more than\n+    //! this number of them have been received and validated against commitments.\n+    size_t redownload_buffer_size;\n+};",
      "path": "src/kernel/chainparams.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The comment on `redownload_buffer_size` is quite cumbersome, starts with an instruction and keeps going in circles, please consider:\r\n```suggestion\r\n//! Configuration for Headers-Sync memory usage.\r\nstruct HeadersSyncParams\r\n{\r\n    //! Distance, in blocks, between header commitments.\r\n    size_t commitment_period;\r\n    //! Minimum number of validated headers to accumulate in the redownload\r\n    //! buffer before feeding them into the permanent block index.\r\n    size_t redownload_buffer_size;\r\n};\r\n```",
      "created_at": "2025-08-12T21:59:06Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271390433",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271390433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271396010",
      "pull_request_review_id": 3112824958,
      "id": 2271396010,
      "node_id": "PRRC_kwDOABII586HYsCq",
      "diff_hunk": "@@ -193,7 +186,7 @@ bool HeadersSyncState::ValidateAndProcessSingleHeader(const CBlockHeader& curren\n         return false;\n     }\n \n-    if (next_height % HEADER_COMMITMENT_PERIOD == m_commit_offset) {\n+    if (next_height % m_params.commitment_period == m_commit_offset) {",
      "path": "src/headerssync.cpp",
      "position": 78,
      "original_position": 52,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a4191b57b21a0fea871206f368972c7741ad6437 is a bit complicated, can you split it up to smaller refactors?",
      "created_at": "2025-08-12T22:03:20Z",
      "updated_at": "2025-08-12T22:04:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2271396010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271396010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2272479715",
      "pull_request_review_id": 3114478843,
      "id": 2272479715,
      "node_id": "PRRC_kwDOABII586Hc0nj",
      "diff_hunk": "@@ -52,6 +52,14 @@ static void GenerateHeaders(std::vector<CBlockHeader>& headers,\n     }\n }\n \n+static HeadersSyncState CreateState(const CBlockIndex* chain_start)",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "14f5c34ecedad27bafa51eb918eb636773bc480b",
      "in_reply_to_id": 2271228582,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would rather postpone this until #32740 (which also changes it to a reference type in the `HeadersSyncState`-ctor) has been merged.",
      "created_at": "2025-08-13T08:21:01Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2272479715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2272479715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2272775850",
      "pull_request_review_id": 3114478843,
      "id": 2272775850,
      "node_id": "PRRC_kwDOABII586Hd86q",
      "diff_hunk": "@@ -60,15 +60,19 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex*, const std::vector<CBlockHeader>&, const std::vector<CBlockHeader>&);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 4. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+static void TooLittleWork(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+\n BOOST_AUTO_TEST_CASE(headers_sync_state)",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "in_reply_to_id": 2271272664,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's true that many tests have `BOOST_FIXTURE_TEST_SUITE` directly followed by `BOOST_AUTO_TEST_CASE`, but these methods (`TooLittleWork` etc) are tightly coupled with the `headers_sync_state` test case. They could almost be their own test cases entirely but I'd rather avoid repeated cycles to generate the chains. (Actually (re?)tested implementing separate test cases but fixtures are re-instantiated for each test case, so runtime went from 0.39 to 0.65, added note in commit message breaking up into functions).",
      "created_at": "2025-08-13T09:53:03Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2272775850",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2272775850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2272843236",
      "pull_request_review_id": 3114478843,
      "id": 2272843236,
      "node_id": "PRRC_kwDOABII586HeNXk",
      "diff_hunk": "@@ -3,30 +3,23 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes this many bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,\n-        const CBlockIndex* chain_start, const arith_uint256& minimum_required_work) :\n-    m_commit_offset(FastRandomContext().randrange<unsigned>(HEADER_COMMITMENT_PERIOD)),\n+        const HeadersSyncParams& params, const CBlockIndex* chain_start,\n+        const arith_uint256& minimum_required_work) :\n+    m_commit_offset(FastRandomContext().randrange<unsigned>(params.commitment_period)),",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": 2271383410,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed `HeadersSyncState::m_commit_offset` from `unsigned` to `size_t` as well to remove the explicit template parameter.",
      "created_at": "2025-08-13T10:18:01Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2272843236",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2272843236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273143659",
      "pull_request_review_id": 3114478843,
      "id": 2273143659,
      "node_id": "PRRC_kwDOABII586HfWtr",
      "diff_hunk": "@@ -41,7 +34,7 @@ HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus\n     // exceeds this bound, because it's not possible for a consensus-valid\n     // chain to be longer than this (at the current time -- in the future we\n     // could try again, if necessary, to sync a longer chain).\n-    m_max_commitments = 6*(Ticks<std::chrono::seconds>(NodeClock::now() - NodeSeconds{std::chrono::seconds{chain_start->GetMedianTimePast()}}) + MAX_FUTURE_BLOCK_TIME) / HEADER_COMMITMENT_PERIOD;\n+    m_max_commitments = 6*(Ticks<std::chrono::seconds>(NodeClock::now() - NodeSeconds{std::chrono::seconds{chain_start->GetMedianTimePast()}}) + MAX_FUTURE_BLOCK_TIME) / m_params.commitment_period;",
      "path": "src/headerssync.cpp",
      "position": 1,
      "original_position": 43,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": 2271386176,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Extracted `max_seconds_since_start`.",
      "created_at": "2025-08-13T11:49:33Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2273143659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273143659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273204025",
      "pull_request_review_id": 3114478843,
      "id": 2273204025,
      "node_id": "PRRC_kwDOABII586Hflc5",
      "diff_hunk": "@@ -193,7 +186,7 @@ bool HeadersSyncState::ValidateAndProcessSingleHeader(const CBlockHeader& curren\n         return false;\n     }\n \n-    if (next_height % HEADER_COMMITMENT_PERIOD == m_commit_offset) {\n+    if (next_height % m_params.commitment_period == m_commit_offset) {",
      "path": "src/headerssync.cpp",
      "position": 78,
      "original_position": 52,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": 2271396010,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I broke out many of the chainwork test changes into a later commit. Beyond that, I have a hard time untangling things elegantly.",
      "created_at": "2025-08-13T12:04:44Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2273204025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273204025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273708568",
      "pull_request_review_id": 3116384902,
      "id": 2273708568,
      "node_id": "PRRC_kwDOABII586HhgoY",
      "diff_hunk": "@@ -625,6 +649,12 @@ class CRegTestParams : public CChainParams\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n         bech32_hrp = \"bcrt\";\n+\n+        // Copied from Testnet4.\n+        m_headers_sync_params = HeadersSyncParams{\n+            .commitment_period = 256,\n+            .redownload_buffer_size = 6586, // 6586/256 = ~25.7 commitments\n+        };",
      "path": "src/kernel/chainparams.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": null,
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could change these to zero to better show they aren't needed.",
      "created_at": "2025-08-13T14:47:27Z",
      "updated_at": "2025-08-13T15:26:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2273708568",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273708568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273736563",
      "pull_request_review_id": 3116384902,
      "id": 2273736563,
      "node_id": "PRRC_kwDOABII586Hhndz",
      "diff_hunk": "@@ -83,8 +83,18 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const auto genesis{Params().GenesisBlock()};\n \n+    // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+    // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+    assert(genesis.nBits == 0x207fffff);\n+    // ...which implies around every 2nd hash attempt should succeed...\n+    assert(GetBlockProof(CBlockIndex(genesis)) == 2);\n+    // ...and that is where we get our minimum PoW threshold.\n+    assert(CHAIN_WORK == TARGET_BLOCKS * 2);\n+\n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n+    // - 1 since the genesis block also contributes work so we just meet the",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 31,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "95de558590f91e3077024ab5457c3d83724ba7ad",
      "in_reply_to_id": 2271306966,
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed, the - 1 and -2 part of comment was confusing to me at first.",
      "created_at": "2025-08-13T14:56:54Z",
      "updated_at": "2025-08-13T15:26:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2273736563",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273736563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273828324",
      "pull_request_review_id": 3116549472,
      "id": 2273828324,
      "node_id": "PRRC_kwDOABII586Hh93k",
      "diff_hunk": "@@ -113,11 +113,28 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     (void)hss->ProcessNextHeaders(first_chain, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    // Process so that the internal threshold isn't met, meaning validated\n+    // headers shouldn't be returned yet:\n+    headers_batch.assign(first_chain.begin(), std::next(first_chain.begin()));\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n+    BOOST_CHECK_EQUAL(hss->GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+\n+    // We start receiving headers for permanent storage before completing:\n+    headers_batch.assign(std::next(first_chain.begin()), std::prev(first_chain.end()));\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n+    BOOST_CHECK_EQUAL(hss->GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_GT(result.pow_validated_headers.size(), 0);\n+    const size_t validated_headers_count = result.pow_validated_headers.size();\n+\n+    // Feed final header, meeting the work threshold again and\n+    // completing the REDOWNLOAD phase.\n+    headers_batch.assign(std::prev(first_chain.end()), first_chain.end());\n+    result = hss->ProcessNextHeaders(headers_batch, true);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(!result.request_more);\n     // All headers should be ready for acceptance:\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\n+    BOOST_CHECK_EQUAL(validated_headers_count + result.pow_validated_headers.size(), first_chain.size());",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "57a351912b057d1a2234d4a3b3dd0c745690e3d0",
      "in_reply_to_id": 2270869502,
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same check fails for me too 🤝",
      "created_at": "2025-08-13T15:28:20Z",
      "updated_at": "2025-08-13T15:28:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2273828324",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273828324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273957815",
      "pull_request_review_id": 3114478843,
      "id": 2273957815,
      "node_id": "PRRC_kwDOABII586Hide3",
      "diff_hunk": "@@ -60,15 +60,19 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, RegTestingSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const CBlockIndex*, const std::vector<CBlockHeader>&, const std::vector<CBlockHeader>&);\n+// 3. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+static void HappyPath(const CBlockIndex*, const std::vector<CBlockHeader>&);\n+// 4. Repeat the second set of headers in both phases to demonstrate behavior",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 10,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "in_reply_to_id": 2271274481,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~I find it hard to follow, are you referring to a specific commit?~\r\n\r\nHopefully this is the same as https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274615156",
      "created_at": "2025-08-13T16:19:05Z",
      "updated_at": "2025-08-13T21:17:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2273957815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273957815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274053961",
      "pull_request_review_id": 3114478843,
      "id": 2274053961,
      "node_id": "PRRC_kwDOABII586Hi09J",
      "diff_hunk": "@@ -625,6 +649,12 @@ class CRegTestParams : public CChainParams\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n         bech32_hrp = \"bcrt\";\n+\n+        // Copied from Testnet4.\n+        m_headers_sync_params = HeadersSyncParams{\n+            .commitment_period = 256,\n+            .redownload_buffer_size = 6586, // 6586/256 = ~25.7 commitments\n+        };",
      "path": "src/kernel/chainparams.cpp",
      "position": 61,
      "original_position": 61,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": 2273708568,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `commitment_period` needs to be non-zero for functional tests. Example:\r\n```\r\n₿ ./build/test/functional/p2p_headers_sync_with_minchainwork.py\r\n[1/13] Generating bitcoin-build-info.h\r\n2025-08-13T19:03:34.693000Z TestFramework (INFO): PRNG seed is: 3053858877177300552\r\n2025-08-13T19:03:34.694000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_cm19o0ak\r\n2025-08-13T19:03:35.502000Z TestFramework (INFO): Generate blocks on the node with no required chainwork, and verify nodes 1 and 2 have no new headers in their headers tree\r\n2025-08-13T19:03:35.580000Z TestFramework (INFO): Check that node3 will sync headers (due to noban permissions)\r\n2025-08-13T19:03:35.588000Z TestFramework (INFO): Generate more blocks to satisfy node1's minchainwork requirement, and verify node2 still has no new headers in headers tree\r\n2025-08-13T19:03:35.647000Z TestFramework (INFO): Check that node3 accepted these headers as well\r\n2025-08-13T19:03:35.649000Z TestFramework (INFO): Generate long chain for node0/node1/node3\r\n2025-08-13T19:03:36.337000Z TestFramework (INFO): Verify that node2 and node3 will sync the chain when it gets long enough\r\n2025-08-13T19:03:36.890000Z TestFramework (ERROR): Unexpected exception caught during testing\r\nTraceback (most recent call last):\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 184, in main\r\n    self.run_test()\r\n  File \"/home/hodlinator/bitcoin/./build/test/functional/p2p_headers_sync_with_minchainwork.py\", line 164, in run_test\r\n    self.test_chains_sync_when_long_enough()\r\n  File \"/home/hodlinator/bitcoin/./build/test/functional/p2p_headers_sync_with_minchainwork.py\", line 108, in test_chains_sync_when_long_enough\r\n    self.sync_blocks()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 777, in sync_blocks\r\n    best_hash = [x.getbestblockhash() for x in rpc_connections]\r\n                 ^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/coverage.py\", line 50, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/authproxy.py\", line 132, in __call__\r\n    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))\r\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/authproxy.py\", line 106, in _request\r\n    return self._get_response()\r\n           ^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/authproxy.py\", line 169, in _get_response\r\n    http_response = self.__conn.getresponse()\r\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/nix/store/fqm9bqqlmaqqr02qbalm1bazp810qfiw-python3-3.12.9/lib/python3.12/http/client.py\", line 1430, in getresponse\r\n    response.begin()\r\n  File \"/nix/store/fqm9bqqlmaqqr02qbalm1bazp810qfiw-python3-3.12.9/lib/python3.12/http/client.py\", line 331, in begin\r\n    version, status, reason = self._read_status()\r\n                              ^^^^^^^^^^^^^^^^^^^\r\n  File \"/nix/store/fqm9bqqlmaqqr02qbalm1bazp810qfiw-python3-3.12.9/lib/python3.12/http/client.py\", line 292, in _read_status\r\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/nix/store/fqm9bqqlmaqqr02qbalm1bazp810qfiw-python3-3.12.9/lib/python3.12/socket.py\", line 720, in readinto\r\n    return self._sock.recv_into(b)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^\r\nConnectionResetError: [Errno 104] Connection reset by peer\r\n```\r\n...and it's currently a bit tricky to get functional tests to be able to specify values.\r\n\r\nBut this prompted me to make the fields default to zero in the struct definition and add an assert in the `HeadersSyncState`-ctor.",
      "created_at": "2025-08-13T16:52:26Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274053961",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274053961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 668,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274565893",
      "pull_request_review_id": 3114478843,
      "id": 2274565893,
      "node_id": "PRRC_kwDOABII586Hkx8F",
      "diff_hunk": "@@ -124,9 +145,15 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     BOOST_CHECK_EQUAL(validated_headers_count + result.pow_validated_headers.size(), first_chain.size());\n     // Nothing left for the sync logic to do:\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::FINAL);\n+}\n \n-    // Finally, verify that just trying to process the second chain would not\n-    // succeed (too little work)\n+static void TooLittleWork(const CBlockIndex* chain_start,\n+        const std::vector<CBlockHeader>& second_chain)\n+{\n+    std::unique_ptr<HeadersSyncState> hss;\n+    HeadersSyncState::ProcessingResult result;\n+    // Verify that just trying to process the second chain would not succeed",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 269,
      "original_position": 71,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "058ebc1b02ccfc75bbe5178a4191aebdcf9b4d3a",
      "in_reply_to_id": 2271025349,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~Hm...~ (too trigger happy with publishing)\r\n\r\n> Didn't we just add this comment a few commits before? \r\n\r\nNo\r\n\r\nBased on your initial comment in this thread, I undid modifying the comment from `master` until the `Improve comments` commit (0863bde64e62b040da749161f7bd9c5628759a18, this aspect is unchanged from previous push).",
      "created_at": "2025-08-13T20:34:47Z",
      "updated_at": "2025-08-13T21:26:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274565893",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274565893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274572745",
      "pull_request_review_id": 3114478843,
      "id": 2274572745,
      "node_id": "PRRC_kwDOABII586HkznJ",
      "diff_hunk": "@@ -83,8 +83,18 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const auto genesis{Params().GenesisBlock()};\n \n+    // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+    // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+    assert(genesis.nBits == 0x207fffff);\n+    // ...which implies around every 2nd hash attempt should succeed...\n+    assert(GetBlockProof(CBlockIndex(genesis)) == 2);\n+    // ...and that is where we get our minimum PoW threshold.\n+    assert(CHAIN_WORK == TARGET_BLOCKS * 2);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "95de558590f91e3077024ab5457c3d83724ba7ad",
      "in_reply_to_id": 2271294627,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's my way of documenting why we are multiplying by 2. :) Comes from the research I did in this thread: https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2182784980",
      "created_at": "2025-08-13T20:38:04Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274572745",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274572745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274574285",
      "pull_request_review_id": 3114478843,
      "id": 2274574285,
      "node_id": "PRRC_kwDOABII586Hkz_N",
      "diff_hunk": "@@ -83,8 +83,18 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const auto genesis{Params().GenesisBlock()};\n \n+    // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+    // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+    assert(genesis.nBits == 0x207fffff);\n+    // ...which implies around every 2nd hash attempt should succeed...\n+    assert(GetBlockProof(CBlockIndex(genesis)) == 2);\n+    // ...and that is where we get our minimum PoW threshold.\n+    assert(CHAIN_WORK == TARGET_BLOCKS * 2);\n+\n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n+    // - 1 since the genesis block also contributes work so we just meet the",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 31,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "95de558590f91e3077024ab5457c3d83724ba7ad",
      "in_reply_to_id": 2271306966,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Adjusted comment to avoid list item interpretation.",
      "created_at": "2025-08-13T20:38:51Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274574285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274574285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274582057",
      "pull_request_review_id": 3114478843,
      "id": 2274582057,
      "node_id": "PRRC_kwDOABII586Hk14p",
      "diff_hunk": "@@ -9,39 +9,37 @@\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+/** Search for a nonce to meet (regtest) proof of work */\n+static void FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n+/**\n+ * Generate headers in a chain that build off a given starting hash, using\n+ * the given nVersion, advancing time by 1 second from the starting\n+ * prev_time, and with a fixed merkle root hash.\n+ */\n+static void GenerateHeaders(std::vector<CBlockHeader>& headers,\n         size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n         const uint256& merkle_root, const uint32_t nBits)\n {\n     uint256 prev_hash = starting_hash;\n \n     while (headers.size() < count) {",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 54,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "d9cf9c7c2a1cbe9e99b3b5e641b3a94a149c8ee8",
      "in_reply_to_id": 2270952147,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Adjusted - `CBlockHeader::nVersion` is `int32_t` however, so matched that.",
      "created_at": "2025-08-13T20:42:50Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274582057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274582057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274615156",
      "pull_request_review_id": 3114478843,
      "id": 2274615156,
      "node_id": "PRRC_kwDOABII586Hk990",
      "diff_hunk": "@@ -113,11 +113,28 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     (void)hss->ProcessNextHeaders(first_chain, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::REDOWNLOAD);\n \n-    result = hss->ProcessNextHeaders(first_chain, true);\n+    // Process so that the internal threshold isn't met, meaning validated",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "57a351912b057d1a2234d4a3b3dd0c745690e3d0",
      "in_reply_to_id": 2270854029,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hoping the change to the happy path is clearer now with the extracted final commit.",
      "created_at": "2025-08-13T20:59:09Z",
      "updated_at": "2025-08-13T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274615156",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274615156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274746696",
      "pull_request_review_id": 3117853357,
      "id": 2274746696,
      "node_id": "PRRC_kwDOABII586HleFI",
      "diff_hunk": "@@ -83,8 +83,18 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const auto genesis{Params().GenesisBlock()};\n \n+    // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+    // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+    assert(genesis.nBits == 0x207fffff);\n+    // ...which implies around every 2nd hash attempt should succeed...\n+    assert(GetBlockProof(CBlockIndex(genesis)) == 2);\n+    // ...and that is where we get our minimum PoW threshold.\n+    assert(CHAIN_WORK == TARGET_BLOCKS * 2);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "95de558590f91e3077024ab5457c3d83724ba7ad",
      "in_reply_to_id": 2271294627,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it's useful, it's literally just stating:\r\n```C++\r\nconstexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\r\n...\r\nassert(CHAIN_WORK == TARGET_BLOCKS * 2);\r\n```\r\n",
      "created_at": "2025-08-13T22:04:05Z",
      "updated_at": "2025-08-13T22:04:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274746696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274746696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274754436",
      "pull_request_review_id": 3117865169,
      "id": 2274754436,
      "node_id": "PRRC_kwDOABII586Hlf-E",
      "diff_hunk": "@@ -27,30 +27,27 @@ constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n \n-static HeadersSyncState::ProcessingResult g_latest_result;\n-\n // Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n #define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n-                     min_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n     do {                                                                                                 \\\n         const auto result{result_expression};                                                            \\\n         BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n         BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n         BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n-        BOOST_CHECK_GE(result.pow_validated_headers.size(), min_headers_size);                           \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 30,
      "original_position": 16,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "8fc783a95e568c8a5797da1ac6a9922819863175",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 nice",
      "created_at": "2025-08-13T22:09:13Z",
      "updated_at": "2025-08-13T22:28:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274754436",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274754436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274761689",
      "pull_request_review_id": 3117865169,
      "id": 2274761689,
      "node_id": "PRRC_kwDOABII586HlhvZ",
      "diff_hunk": "@@ -3,30 +3,24 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes this many bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,\n-        const CBlockIndex* chain_start, const arith_uint256& minimum_required_work) :\n-    m_commit_offset(FastRandomContext().randrange<unsigned>(HEADER_COMMITMENT_PERIOD)),\n+        const HeadersSyncParams& params, const CBlockIndex* chain_start,\n+        const arith_uint256& minimum_required_work) :\n+    m_commit_offset((assert(params.commitment_period > 0), // HeadersSyncParams field must be initialized to non-zero.",
      "path": "src/headerssync.cpp",
      "position": 35,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "7016f8aefc83daa01e9c97bee055afa48d6d22aa",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we already have an `Assume(range > 0)` inside, isn't that enough?",
      "created_at": "2025-08-13T22:15:09Z",
      "updated_at": "2025-08-13T22:28:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274761689",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274761689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274773485",
      "pull_request_review_id": 3117865169,
      "id": 2274773485,
      "node_id": "PRRC_kwDOABII586Hlknt",
      "diff_hunk": "@@ -1,146 +1,239 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+using State = HeadersSyncState::State;\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similar to like mainnet.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "8fc783a95e568c8a5797da1ac6a9922819863175",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: the AI gods think this should be:\r\n```suggestion\r\n// required to reach the CHAIN_WORK threshold, to behave like mainnet.\r\n```\r\nor\r\n```suggestion\r\n// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\r\n```",
      "created_at": "2025-08-13T22:25:12Z",
      "updated_at": "2025-08-13T22:28:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2274773485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274773485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2275760921",
      "pull_request_review_id": 3119395217,
      "id": 2275760921,
      "node_id": "PRRC_kwDOABII586HpVsZ",
      "diff_hunk": "@@ -3,30 +3,24 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes this many bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,\n-        const CBlockIndex* chain_start, const arith_uint256& minimum_required_work) :\n-    m_commit_offset(FastRandomContext().randrange<unsigned>(HEADER_COMMITMENT_PERIOD)),\n+        const HeadersSyncParams& params, const CBlockIndex* chain_start,\n+        const arith_uint256& minimum_required_work) :\n+    m_commit_offset((assert(params.commitment_period > 0), // HeadersSyncParams field must be initialized to non-zero.",
      "path": "src/headerssync.cpp",
      "position": 35,
      "original_position": 32,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "7016f8aefc83daa01e9c97bee055afa48d6d22aa",
      "in_reply_to_id": 2274761689,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "True, but `Assume()`s are not always active, and checking it here means we can describe the constraint with a comment as is done in this project.",
      "created_at": "2025-08-14T07:42:31Z",
      "updated_at": "2025-08-14T07:42:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2275760921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2275760921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2275761480",
      "pull_request_review_id": 3119395856,
      "id": 2275761480,
      "node_id": "PRRC_kwDOABII586HpV1I",
      "diff_hunk": "@@ -1,146 +1,239 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n-struct HeadersGeneratorSetup : public RegTestingSetup {\n-    /** Search for a nonce to meet (regtest) proof of work */\n-    void FindProofOfWork(CBlockHeader& starting_header);\n-    /**\n-     * Generate headers in a chain that build off a given starting hash, using\n-     * the given nVersion, advancing time by 1 second from the starting\n-     * prev_time, and with a fixed merkle root hash.\n-     */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n-};\n-\n-void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n+using State = HeadersSyncState::State;\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similar to like mainnet.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "8fc783a95e568c8a5797da1ac6a9922819863175",
      "in_reply_to_id": 2274773485,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Cheers, fixed in latest push!",
      "created_at": "2025-08-14T07:42:43Z",
      "updated_at": "2025-08-14T07:42:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2275761480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2275761480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276448044",
      "pull_request_review_id": 3120345155,
      "id": 2276448044,
      "node_id": "PRRC_kwDOABII586Hr9cs",
      "diff_hunk": "@@ -67,7 +68,11 @@ FUZZ_TARGET(headers_sync_state, .init = initialize_headers_sync_state_fuzz)\n \n     arith_uint256 min_work{UintToArith256(ConsumeUInt256(fuzzed_data_provider))};\n     FuzzedHeadersSyncState headers_sync(\n-        /*commit_offset=*/fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(1, 1024),\n+        /*sync_params=*/HeadersSyncParams{\n+            .commitment_period = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, Params().HeadersSync().commitment_period * 2),\n+            .redownload_buffer_size = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, Params().HeadersSync().redownload_buffer_size * 2),\n+        },\n+        /*commit_offset=*/fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 1024),",
      "path": "src/test/fuzz/headerssync.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a91a5f0070129192dc50ed50452a2788d69f2d97",
      "in_reply_to_id": null,
      "user": {
        "login": "marcofleon",
        "id": 95179662,
        "node_id": "U_kgDOBaxTjg",
        "avatar_url": "https://avatars.githubusercontent.com/u/95179662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/marcofleon",
        "html_url": "https://github.com/marcofleon",
        "followers_url": "https://api.github.com/users/marcofleon/followers",
        "following_url": "https://api.github.com/users/marcofleon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/marcofleon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/marcofleon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/marcofleon/subscriptions",
        "organizations_url": "https://api.github.com/users/marcofleon/orgs",
        "repos_url": "https://api.github.com/users/marcofleon/repos",
        "events_url": "https://api.github.com/users/marcofleon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/marcofleon/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Because `commit_offset` will never be greater than `commitment_period`:\r\n```suggestion\r\n         const HeadersSyncParams params{\r\n        .commitment_period = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, Params().HeadersSync().commitment_period * 2),\r\n        .redownload_buffer_size = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, Params().HeadersSync().redownload_buffer_size * 2),\r\n    };\r\n    const size_t commit_offset = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, params.commitment_period - 1);\r\n    FuzzedHeadersSyncState headers_sync(\r\n        params,\r\n        commit_offset,\r\n        /*chain_start=*/&start_index,\r\n        /*minimum_required_work=*/min_work);\r\n```\r\n\r\nAlthough the fuzzer will come up with correct values at some point, so this isn't too critical.",
      "created_at": "2025-08-14T12:08:53Z",
      "updated_at": "2025-08-14T12:12:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2276448044",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276448044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276963628",
      "pull_request_review_id": 3121035009,
      "id": 2276963628,
      "node_id": "PRRC_kwDOABII586Ht7Us",
      "diff_hunk": "@@ -67,7 +68,11 @@ FUZZ_TARGET(headers_sync_state, .init = initialize_headers_sync_state_fuzz)\n \n     arith_uint256 min_work{UintToArith256(ConsumeUInt256(fuzzed_data_provider))};\n     FuzzedHeadersSyncState headers_sync(\n-        /*commit_offset=*/fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(1, 1024),\n+        /*sync_params=*/HeadersSyncParams{\n+            .commitment_period = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, Params().HeadersSync().commitment_period * 2),\n+            .redownload_buffer_size = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, Params().HeadersSync().redownload_buffer_size * 2),\n+        },\n+        /*commit_offset=*/fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 1024),",
      "path": "src/test/fuzz/headerssync.cpp",
      "position": 1,
      "original_position": 24,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a91a5f0070129192dc50ed50452a2788d69f2d97",
      "in_reply_to_id": 2276448044,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! Pushed almost the same.",
      "created_at": "2025-08-14T15:26:34Z",
      "updated_at": "2025-08-14T15:30:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2276963628",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276963628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277678459",
      "pull_request_review_id": 3122061330,
      "id": 2277678459,
      "node_id": "PRRC_kwDOABII586Hwp17",
      "diff_hunk": "@@ -73,6 +79,17 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n+    SneakyRedownload(chain_start, first_chain, second_chain);\n+    HappyPath(chain_start, first_chain);\n+    TooLittleWork(chain_start, second_chain);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "232485d2486f08221203224212d5451a47eb4fc8",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 232485d2486f08221203224212d5451a47eb4fc8 \"refactor(test): Break up headers_sync_chainwork_tests\"\r\n\r\nOur preferred pattern for test cases within unit tests is to define them with `BOOST_AUTO_TEST_CASE` rather than functions like these.",
      "created_at": "2025-08-14T20:39:37Z",
      "updated_at": "2025-08-18T20:40:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2277678459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277678459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278400829",
      "pull_request_review_id": 3123084458,
      "id": 2278400829,
      "node_id": "PRRC_kwDOABII586HzaM9",
      "diff_hunk": "@@ -83,8 +83,18 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const auto genesis{Params().GenesisBlock()};\n \n+    // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+    // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+    assert(genesis.nBits == 0x207fffff);\n+    // ...which implies around every 2nd hash attempt should succeed...\n+    assert(GetBlockProof(CBlockIndex(genesis)) == 2);\n+    // ...and that is where we get our minimum PoW threshold.\n+    assert(CHAIN_WORK == TARGET_BLOCKS * 2);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "95de558590f91e3077024ab5457c3d83724ba7ad",
      "in_reply_to_id": 2271294627,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ideally the genesis-block and the other expressions would be `constexpr`, so these could be `static_assert`s right after `CHAIN_WORK` and `TARGET_BLOCKS`. But given they are 90+ lines apart, I'd rather keep it like this. Hm.. I could experiment with ways of decreasing that line distance if I re-push (extracting function bodies and putting them later, moving these constants after the initial functions).",
      "created_at": "2025-08-15T06:39:27Z",
      "updated_at": "2025-08-15T06:39:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2278400829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2278400829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2284714840",
      "pull_request_review_id": 3131540476,
      "id": 2284714840,
      "node_id": "PRRC_kwDOABII586ILftY",
      "diff_hunk": "@@ -73,6 +79,17 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n+    SneakyRedownload(chain_start, first_chain, second_chain);\n+    HappyPath(chain_start, first_chain);\n+    TooLittleWork(chain_start, second_chain);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "232485d2486f08221203224212d5451a47eb4fc8",
      "in_reply_to_id": 2277678459,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Was concerned about increasing the runtime of the tests due to repeatedly re-generating `first_chain`/`second_chain` as documented in the commit message:\r\n> The approach to use one BOOST_AUTO_TEST_CASE for each scenario was attempted but the common initialization is repeated for every test case using the same fixture. This made the local runtime go from 0.39s to 0.65s. Would rather avoid global fixtures, so continued with one boost test case for now.\r\n\r\nHowever, I figured out an okay way to switch back to using a fixture while avoiding to re-generate the chains:\r\n```C++\r\n    const std::vector<CBlockHeader>& FirstChain()\r\n    {\r\n        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\r\n                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\r\n        return first_chain;\r\n    }\r\n```\r\nI'm running some final tests on this but thought I'd give a heads up to other reviewers.",
      "created_at": "2025-08-19T09:42:24Z",
      "updated_at": "2025-08-19T09:42:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2284714840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2284714840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2284838171",
      "pull_request_review_id": 3131691825,
      "id": 2284838171,
      "node_id": "PRRC_kwDOABII586IL90b",
      "diff_hunk": "@@ -83,8 +83,18 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const auto genesis{Params().GenesisBlock()};\n \n+    // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+    // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+    assert(genesis.nBits == 0x207fffff);\n+    // ...which implies around every 2nd hash attempt should succeed...\n+    assert(GetBlockProof(CBlockIndex(genesis)) == 2);\n+    // ...and that is where we get our minimum PoW threshold.\n+    assert(CHAIN_WORK == TARGET_BLOCKS * 2);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "95de558590f91e3077024ab5457c3d83724ba7ad",
      "in_reply_to_id": 2271294627,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Moved up the macro above the constants in the latest push, and brought the assert block up closer to the constants - in the process removing the final assert.",
      "created_at": "2025-08-19T10:34:25Z",
      "updated_at": "2025-08-19T10:41:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2284838171",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2284838171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2284849835",
      "pull_request_review_id": 3131691825,
      "id": 2284849835,
      "node_id": "PRRC_kwDOABII586IMAqr",
      "diff_hunk": "@@ -73,6 +79,17 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n+    SneakyRedownload(chain_start, first_chain, second_chain);\n+    HappyPath(chain_start, first_chain);\n+    TooLittleWork(chain_start, second_chain);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "232485d2486f08221203224212d5451a47eb4fc8",
      "in_reply_to_id": 2277678459,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Pushed version with multiple test cases.",
      "created_at": "2025-08-19T10:40:01Z",
      "updated_at": "2025-08-19T10:41:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2284849835",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2284849835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286268690",
      "pull_request_review_id": 3133743432,
      "id": 2286268690,
      "node_id": "PRRC_kwDOABII586IRbES",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 170,
      "original_position": 170,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: The sneaky redownload and insufficient work cases should be differentiated by making the second chain have enough work, e.g.: https://github.com/davidgumberg/bitcoin/commit/1b1b7f2d06e3b11eac0f844002ff4c1bcf497b0d",
      "created_at": "2025-08-19T20:32:58Z",
      "updated_at": "2025-08-19T20:33:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286268690",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286268690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286361853",
      "pull_request_review_id": 3133883103,
      "id": 2286361853,
      "node_id": "PRRC_kwDOABII586IRxz9",
      "diff_hunk": "@@ -61,6 +61,15 @@ struct ChainTxData {\n     double dTxRate;   //!< estimated number of transactions per second after that timestamp\n };\n \n+//! Configuration for headers sync memory usage.\n+struct HeadersSyncParams {\n+    //! Distance in blocks between header commitments.\n+    size_t commitment_period{0};\n+    //! Minimum number of validated headers to accumulate in the redownload\n+    //! buffer before feeding them into the permanent block index.\n+    size_t redownload_buffer_size{0};\n+};\n+",
      "path": "src/kernel/chainparams.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It really feels like the default constructor for this should be deleted, but that's not possible because `CChainParams()` default constructs `HeadersSyncParams`: https://github.com/bitcoin/bitcoin/blob/53341ea10dc2f7df371b416060863bbc094b8773/src/kernel/chainparams.h#L165",
      "created_at": "2025-08-19T21:20:18Z",
      "updated_at": "2025-08-19T21:32:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286361853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286361853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 64,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": 72,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286363848",
      "pull_request_review_id": 3133885518,
      "id": 2286363848,
      "node_id": "PRRC_kwDOABII586IRyTI",
      "diff_hunk": "@@ -65,9 +66,14 @@ FUZZ_TARGET(headers_sync_state, .init = initialize_headers_sync_state_fuzz)\n     const uint256 genesis_hash = genesis_header.GetHash();\n     start_index.phashBlock = &genesis_hash;\n \n+    const HeadersSyncParams params{\n+        .commitment_period = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, Params().HeadersSync().commitment_period * 2),\n+        .redownload_buffer_size = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, Params().HeadersSync().redownload_buffer_size * 2),",
      "path": "src/test/fuzz/headerssync.cpp",
      "position": 21,
      "original_position": 21,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "why limit these to `* 2`?",
      "created_at": "2025-08-19T21:21:33Z",
      "updated_at": "2025-08-19T21:21:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286363848",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286363848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 70,
      "original_start_line": 70,
      "start_side": "RIGHT",
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286383684",
      "pull_request_review_id": 3133909863,
      "id": 2286383684,
      "node_id": "PRRC_kwDOABII586IR3JE",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 170,
      "original_position": 170,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286268690,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That might be a cool higher level change, although hopefully a commitment will mismatch before we reach the final header.\r\n\r\nHm... thinking through the current code - given 15'000 headers and a period of 600, we have 38 commitments. So there's a 1 in 2^38 chance that all commitments will match. There's a 1/600 chance that `HeadersSyncState::commit_offset` will be 599, in which case `second_chain` would be too short to check the last commitment, making it a 1 in 2^37 chance of test failure for that offset. (In that case, we would not reach the PoW limit from processing the second chain and the `CHECK_RESULT()` below will explode).\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/53341ea10dc2f7df371b416060863bbc094b8773/src/test/headers_sync_chainwork_tests.cpp#L168-L172\r\n\r\nAlthough this aspect isn't materially changed by this PR, I agree it would be good to at least document these probabilities in the test. Will do if I re-push.\r\n\r\n(Also note that the chain generation functions use `static` internally in order to avoid increasing the runtime of the test).",
      "created_at": "2025-08-19T21:31:50Z",
      "updated_at": "2025-08-19T22:10:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286383684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286383684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286384092",
      "pull_request_review_id": 3133910332,
      "id": 2286384092,
      "node_id": "PRRC_kwDOABII586IR3Pc",
      "diff_hunk": "@@ -61,6 +61,15 @@ struct ChainTxData {\n     double dTxRate;   //!< estimated number of transactions per second after that timestamp\n };\n \n+//! Configuration for headers sync memory usage.\n+struct HeadersSyncParams {\n+    //! Distance in blocks between header commitments.\n+    size_t commitment_period{0};\n+    //! Minimum number of validated headers to accumulate in the redownload\n+    //! buffer before feeding them into the permanent block index.\n+    size_t redownload_buffer_size{0};\n+};\n+",
      "path": "src/kernel/chainparams.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286361853,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, I missed that one of the params gets checked for not being default-constructed here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/53341ea10dc2f7df371b416060863bbc094b8773/src/headerssync.cpp#L20",
      "created_at": "2025-08-19T21:32:07Z",
      "updated_at": "2025-08-19T21:32:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286384092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286384092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 64,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": 72,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286387382",
      "pull_request_review_id": 3133909863,
      "id": 2286387382,
      "node_id": "PRRC_kwDOABII586IR4C2",
      "diff_hunk": "@@ -61,6 +61,15 @@ struct ChainTxData {\n     double dTxRate;   //!< estimated number of transactions per second after that timestamp\n };\n \n+//! Configuration for headers sync memory usage.\n+struct HeadersSyncParams {\n+    //! Distance in blocks between header commitments.\n+    size_t commitment_period{0};\n+    //! Minimum number of validated headers to accumulate in the redownload\n+    //! buffer before feeding them into the permanent block index.\n+    size_t redownload_buffer_size{0};\n+};\n+",
      "path": "src/kernel/chainparams.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286361853,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed, would be nice to have each chain's params be a `constexpr` expression tree in an ideal world.",
      "created_at": "2025-08-19T21:34:24Z",
      "updated_at": "2025-08-19T22:10:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286387382",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286387382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 64,
      "original_start_line": 64,
      "start_side": "RIGHT",
      "line": 72,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286389214",
      "pull_request_review_id": 3133909863,
      "id": 2286389214,
      "node_id": "PRRC_kwDOABII586IR4fe",
      "diff_hunk": "@@ -65,9 +66,14 @@ FUZZ_TARGET(headers_sync_state, .init = initialize_headers_sync_state_fuzz)\n     const uint256 genesis_hash = genesis_header.GetHash();\n     start_index.phashBlock = &genesis_hash;\n \n+    const HeadersSyncParams params{\n+        .commitment_period = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, Params().HeadersSync().commitment_period * 2),\n+        .redownload_buffer_size = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, Params().HeadersSync().redownload_buffer_size * 2),",
      "path": "src/test/fuzz/headerssync.cpp",
      "position": 21,
      "original_position": 21,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286363848,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Giving us 2x mainnet should give the fuzzers enough time to break things before we reach that level. See 11a2d3a63e90cdc1920ede3c67d52a9c72860e6b for an example of how gradually these values change for 1 release.",
      "created_at": "2025-08-19T21:35:47Z",
      "updated_at": "2025-08-19T22:10:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286389214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286389214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 70,
      "original_start_line": 70,
      "start_side": "RIGHT",
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286406511",
      "pull_request_review_id": 3133939732,
      "id": 2286406511,
      "node_id": "PRRC_kwDOABII586IR8tv",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.\n+    // This chain should look valid, and we should have met the proof-of-work\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    CHECK_RESULT(hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true),",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 194,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, I think this was wrong in the original test as well, should be:\r\n\r\n```suggestion\r\n    CHECK_RESULT(hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), false),\r\n```",
      "created_at": "2025-08-19T21:45:55Z",
      "updated_at": "2025-08-19T21:45:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286406511",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286406511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286407697",
      "pull_request_review_id": 3133941229,
      "id": 2286407697,
      "node_id": "PRRC_kwDOABII586IR9AR",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 191,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I think this comment was incorrectly placed in the original, it is the `ProcessNextHeaders` above that needs `/*full_headers_message=*/true`",
      "created_at": "2025-08-19T21:46:45Z",
      "updated_at": "2025-08-19T21:46:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286407697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286407697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286413175",
      "pull_request_review_id": 3133948523,
      "id": 2286413175,
      "node_id": "PRRC_kwDOABII586IR-V3",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.\n+    // This chain should look valid, and we should have met the proof-of-work\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    CHECK_RESULT(hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/genesis.GetHash());\n+\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n+    CHECK_RESULT(hss.ProcessNextHeaders(second_chain, true),\n+        hss, /*exp_state=*/State::FINAL,\n+        /*exp_success*/false, // Foiled! We detected mismatching headers.\n+        /*exp_request_more=*/false,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/std::nullopt);\n+}\n \n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+BOOST_AUTO_TEST_CASE(happy_path)\n+{\n+    const auto& first_chain{FirstChain()};\n+\n+    // This time we feed the first chain twice.\n+    HeadersSyncState hss{CreateState()};\n+\n+    // Sufficient work transitions us from PRESYNC to REDOWNLOAD:\n+    const auto genesis_hash{genesis.GetHash()};\n+    CHECK_RESULT(hss.ProcessNextHeaders(first_chain, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/genesis_hash);\n+\n+    // Process only so that the internal threshold isn't exceeded, meaning\n+    // validated headers shouldn't be returned yet:\n+    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain[REDOWNLOAD_BUFFER_SIZE - 1].GetHash());\n+\n+    // We start receiving headers for permanent storage before completing:\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain[REDOWNLOAD_BUFFER_SIZE]}}, true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/1, /*exp_pow_validated_prev=*/genesis_hash,\n+        /*exp_locator_hash=*/first_chain[REDOWNLOAD_BUFFER_SIZE].GetHash());\n+\n+    // Feed in remaining headers, meeting the work threshold again and\n+    // completing the REDOWNLOAD phase:\n+    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin() + REDOWNLOAD_BUFFER_SIZE + 1, first_chain.end()}, true),",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 244,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": null,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n\r\n```suggestion\r\n    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin() + REDOWNLOAD_BUFFER_SIZE + 1, first_chain.end()}, false),\r\n```",
      "created_at": "2025-08-19T21:50:31Z",
      "updated_at": "2025-08-19T21:50:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286413175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286413175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286420829",
      "pull_request_review_id": 3133909863,
      "id": 2286420829,
      "node_id": "PRRC_kwDOABII586ISANd",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.\n+    // This chain should look valid, and we should have met the proof-of-work\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    CHECK_RESULT(hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true),",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 194,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286406511,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the idea is to pretend that our peer has longer chain, meaning they are able to send us more headers, it's just that `HeadersSyncState` should be detecting that we've met the threshold and switch to `REDOWNLOAD` even though we tempt it that there are more headers in case it erroneously wants to continue `PRESYNC`.",
      "created_at": "2025-08-19T21:55:23Z",
      "updated_at": "2025-08-19T22:10:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286420829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286420829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286427414",
      "pull_request_review_id": 3133909863,
      "id": 2286427414,
      "node_id": "PRRC_kwDOABII586ISB0W",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 191,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286407697,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems related to your previous GH-comment. Current PR version has the comment:\r\nhttps://github.com/bitcoin/bitcoin/blob/53341ea10dc2f7df371b416060863bbc094b8773/src/test/headers_sync_chainwork_tests.cpp#L153",
      "created_at": "2025-08-19T22:00:05Z",
      "updated_at": "2025-08-19T22:10:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286427414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286427414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286437807",
      "pull_request_review_id": 3133909863,
      "id": 2286437807,
      "node_id": "PRRC_kwDOABII586ISEWv",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.\n+    // This chain should look valid, and we should have met the proof-of-work\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    CHECK_RESULT(hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/genesis.GetHash());\n+\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n+    CHECK_RESULT(hss.ProcessNextHeaders(second_chain, true),\n+        hss, /*exp_state=*/State::FINAL,\n+        /*exp_success*/false, // Foiled! We detected mismatching headers.\n+        /*exp_request_more=*/false,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/std::nullopt);\n+}\n \n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+BOOST_AUTO_TEST_CASE(happy_path)\n+{\n+    const auto& first_chain{FirstChain()};\n+\n+    // This time we feed the first chain twice.\n+    HeadersSyncState hss{CreateState()};\n+\n+    // Sufficient work transitions us from PRESYNC to REDOWNLOAD:\n+    const auto genesis_hash{genesis.GetHash()};\n+    CHECK_RESULT(hss.ProcessNextHeaders(first_chain, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/genesis_hash);\n+\n+    // Process only so that the internal threshold isn't exceeded, meaning\n+    // validated headers shouldn't be returned yet:\n+    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain[REDOWNLOAD_BUFFER_SIZE - 1].GetHash());\n+\n+    // We start receiving headers for permanent storage before completing:\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain[REDOWNLOAD_BUFFER_SIZE]}}, true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/1, /*exp_pow_validated_prev=*/genesis_hash,\n+        /*exp_locator_hash=*/first_chain[REDOWNLOAD_BUFFER_SIZE].GetHash());\n+\n+    // Feed in remaining headers, meeting the work threshold again and\n+    // completing the REDOWNLOAD phase:\n+    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin() + REDOWNLOAD_BUFFER_SIZE + 1, first_chain.end()}, true),",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 244,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286413175,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree here, it seems to be a more taxing test to not pretend like there are any more headers, that `HeadersSyncState` will have to make do. Will consider changing this if I push, although it is the same on master. Maybe making it random or doing a `for x in {true, false}` loop over it would be even better.",
      "created_at": "2025-08-19T22:05:52Z",
      "updated_at": "2025-08-19T22:10:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286437807",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286437807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286845684",
      "pull_request_review_id": 3134599799,
      "id": 2286845684,
      "node_id": "PRRC_kwDOABII586ITn70",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 191,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286407697,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My bad, what I mean is that this comment:\r\n\r\n```\r\n// Pretend the message is still \"full\", so we don't abort.\r\n```\r\n\r\nBelongs to the `ProcessNextHeaders` above.",
      "created_at": "2025-08-20T02:46:34Z",
      "updated_at": "2025-08-20T02:46:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2286845684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2286845684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2287189020",
      "pull_request_review_id": 3135066016,
      "id": 2287189020,
      "node_id": "PRRC_kwDOABII586IU7wc",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 191,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286407697,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Base version for this PR: https://github.com/bitcoin/bitcoin/blob/fa05a726c225dc65dee79367bb67f099ae4f99e6/src/test/headers_sync_chainwork_tests.cpp#L95-L98\r\n\r\nThat comment would indeed be more useful before the first `ProcessNextHeaders`-call. Will correct if I push again.",
      "created_at": "2025-08-20T07:03:19Z",
      "updated_at": "2025-08-20T07:03:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2287189020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2287189020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2289342465",
      "pull_request_review_id": 3138304595,
      "id": 2289342465,
      "node_id": "PRRC_kwDOABII586IdJgB",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 170,
      "original_position": 170,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286268690,
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think we should be that worried about a $(\\frac{599}{600} * \\frac{1}{2^{38}}) + (\\frac{1}{600} * \\frac{1}{2^{37}})$ probability of spurious test failure, but we could just double the number of headers if that's a concern.",
      "created_at": "2025-08-20T21:28:50Z",
      "updated_at": "2025-08-20T21:34:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2289342465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2289342465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319904297",
      "pull_request_review_id": 3182000020,
      "id": 2319904297,
      "node_id": "PRRC_kwDOABII586KRu4p",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 170,
      "original_position": 170,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286268690,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Had my calculator set to hexadecimal when getting it to 38 commitments. :face_in_clouds: \r\nThe risk of spurious test failure is closer to $\\frac{1}{2 ^ {25}}$ = one in 33,554,432. Added comment + `static_assert` in `sneaky_redownload` before the check that would fail.",
      "created_at": "2025-09-03T18:57:08Z",
      "updated_at": "2025-09-04T07:48:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2319904297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319904297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2321157369",
      "pull_request_review_id": 3182000020,
      "id": 2321157369,
      "node_id": "PRRC_kwDOABII586KWgz5",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.\n+    // This chain should look valid, and we should have met the proof-of-work\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    CHECK_RESULT(hss.ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/genesis.GetHash());\n+\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n+    CHECK_RESULT(hss.ProcessNextHeaders(second_chain, true),\n+        hss, /*exp_state=*/State::FINAL,\n+        /*exp_success*/false, // Foiled! We detected mismatching headers.\n+        /*exp_request_more=*/false,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/std::nullopt);\n+}\n \n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+BOOST_AUTO_TEST_CASE(happy_path)\n+{\n+    const auto& first_chain{FirstChain()};\n+\n+    // This time we feed the first chain twice.\n+    HeadersSyncState hss{CreateState()};\n+\n+    // Sufficient work transitions us from PRESYNC to REDOWNLOAD:\n+    const auto genesis_hash{genesis.GetHash()};\n+    CHECK_RESULT(hss.ProcessNextHeaders(first_chain, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/genesis_hash);\n+\n+    // Process only so that the internal threshold isn't exceeded, meaning\n+    // validated headers shouldn't be returned yet:\n+    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin(), REDOWNLOAD_BUFFER_SIZE}, true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain[REDOWNLOAD_BUFFER_SIZE - 1].GetHash());\n+\n+    // We start receiving headers for permanent storage before completing:\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain[REDOWNLOAD_BUFFER_SIZE]}}, true),\n+        hss, /*exp_state=*/State::REDOWNLOAD,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/1, /*exp_pow_validated_prev=*/genesis_hash,\n+        /*exp_locator_hash=*/first_chain[REDOWNLOAD_BUFFER_SIZE].GetHash());\n+\n+    // Feed in remaining headers, meeting the work threshold again and\n+    // completing the REDOWNLOAD phase:\n+    CHECK_RESULT(hss.ProcessNextHeaders({first_chain.begin() + REDOWNLOAD_BUFFER_SIZE + 1, first_chain.end()}, true),",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 244,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286413175,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-04T07:46:52Z",
      "updated_at": "2025-09-04T07:48:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2321157369",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2321157369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2321157714",
      "pull_request_review_id": 3182000020,
      "id": 2321157714,
      "node_id": "PRRC_kwDOABII586KWg5S",
      "diff_hunk": "@@ -1,146 +1,246 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n #include <headerssync.h>\n+#include <net_processing.h>\n #include <pow.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n+\n+#include <cstddef>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n \n+using State = HeadersSyncState::State;\n+\n+// Standard set of checks common to all scenarios. Macro keeps failure lines at the call-site.\n+#define CHECK_RESULT(result_expression, hss, exp_state, exp_success, exp_request_more,                   \\\n+                     exp_headers_size, exp_pow_validated_prev, exp_locator_hash)                         \\\n+    do {                                                                                                 \\\n+        const auto result{result_expression};                                                            \\\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), exp_state);                                                  \\\n+        BOOST_CHECK_EQUAL(result.success, exp_success);                                                  \\\n+        BOOST_CHECK_EQUAL(result.request_more, exp_request_more);                                        \\\n+        BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), exp_headers_size);                        \\\n+        const std::optional<uint256> pow_validated_prev_opt{exp_pow_validated_prev};                     \\\n+        if (pow_validated_prev_opt) {                                                                    \\\n+            BOOST_CHECK_EQUAL(result.pow_validated_headers.at(0).hashPrevBlock, pow_validated_prev_opt); \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_headers_size, 0);                                                      \\\n+        }                                                                                                \\\n+        const std::optional<uint256> locator_hash_opt{exp_locator_hash};                                 \\\n+        if (locator_hash_opt) {                                                                          \\\n+            BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.at(0), locator_hash_opt);            \\\n+        } else {                                                                                         \\\n+            BOOST_CHECK_EQUAL(exp_state, State::FINAL);                                                  \\\n+        }                                                                                                \\\n+    } while (false)\n+\n+constexpr size_t TARGET_BLOCKS{15'000};\n+constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\n+\n+// Subtract MAX_HEADERS_RESULTS (2000 headers/message) + an arbitrary smaller\n+// value (123) so our redownload buffer is well below the number of blocks\n+// required to reach the CHAIN_WORK threshold, to behave similarly to mainnet.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{TARGET_BLOCKS - (MAX_HEADERS_RESULTS + 123)};\n+constexpr size_t COMMITMENT_PERIOD{600}; // Somewhat close to mainnet.\n+\n struct HeadersGeneratorSetup : public RegTestingSetup {\n+    const CBlock& genesis{Params().GenesisBlock()};\n+    const CBlockIndex* chain_start{WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()))};\n+\n+    // Generate headers for two different chains (using differing merkle roots\n+    // to ensure the headers are different).\n+    const std::vector<CBlockHeader>& FirstChain()\n+    {\n+        // Block header hash target is half of max uint256 (2**256 / 2), expressible\n+        // roughly as the coefficient 0x7fffff with the exponent 0x20 (32 bytes).\n+        // This implies around every 2nd hash attempt should succeed, which\n+        // is why CHAIN_WORK == TARGET_BLOCKS * 2.\n+        assert(genesis.nBits == 0x207fffff);\n+\n+        // Subtract 1 since the genesis block also contributes work so we reach\n+        // the CHAIN_WORK target.\n+        static const auto first_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 1, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits)};\n+        return first_chain;\n+    }\n+    const std::vector<CBlockHeader>& SecondChain()\n+    {\n+        // Subtract 2 to keep total work below the target.\n+        static const auto second_chain{GenerateHeaders(/*count=*/TARGET_BLOCKS - 2, genesis.GetHash(),\n+                genesis.nVersion, genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits)};\n+        return second_chain;\n+    }\n+\n+    HeadersSyncState CreateState()\n+    {\n+        return {/*id=*/0,\n+                Params().GetConsensus(),\n+                HeadersSyncParams{\n+                    .commitment_period = COMMITMENT_PERIOD,\n+                    .redownload_buffer_size = REDOWNLOAD_BUFFER_SIZE,\n+                },\n+                chain_start,\n+                /*minimum_required_work=*/CHAIN_WORK};\n+    }\n+\n+private:\n     /** Search for a nonce to meet (regtest) proof of work */\n     void FindProofOfWork(CBlockHeader& starting_header);\n     /**\n      * Generate headers in a chain that build off a given starting hash, using\n      * the given nVersion, advancing time by 1 second from the starting\n      * prev_time, and with a fixed merkle root hash.\n      */\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\n-            const uint256& starting_hash, const int nVersion, int prev_time,\n-            const uint256& merkle_root, const uint32_t nBits);\n+    std::vector<CBlockHeader> GenerateHeaders(size_t count,\n+            uint256 prev_hash, int32_t nVersion, uint32_t prev_time,\n+            const uint256& merkle_root, uint32_t nBits);\n };\n \n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\n {\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\n-        ++(starting_header.nNonce);\n+        ++starting_header.nNonce;\n     }\n }\n \n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\n-        const uint256& merkle_root, const uint32_t nBits)\n+std::vector<CBlockHeader> HeadersGeneratorSetup::GenerateHeaders(\n+        const size_t count, uint256 prev_hash, const int32_t nVersion,\n+        uint32_t prev_time, const uint256& merkle_root, const uint32_t nBits)\n {\n-    uint256 prev_hash = starting_hash;\n-\n-    while (headers.size() < count) {\n-        headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+    std::vector<CBlockHeader> headers(count);\n+    for (auto& next_header : headers) {\n         next_header.nVersion = nVersion;\n         next_header.hashPrevBlock = prev_hash;\n         next_header.hashMerkleRoot = merkle_root;\n-        next_header.nTime = prev_time+1;\n+        next_header.nTime = ++prev_time;\n         next_header.nBits = nBits;\n \n         FindProofOfWork(next_header);\n         prev_hash = next_header.GetHash();\n-        prev_time = next_header.nTime;\n     }\n-    return;\n+    return headers;\n }\n \n-BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n-\n // In this test, we construct two sets of headers from genesis, one with\n // sufficient proof of work and one without.\n // 1. We deliver the first set of headers and verify that the headers sync state\n //    updates to the REDOWNLOAD phase successfully.\n-// 2. Then we deliver the second set of headers and verify that they fail\n+//    Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n-BOOST_AUTO_TEST_CASE(headers_sync_state)\n+// 2. Verify that repeating with the first set of headers in both phases is\n+//    successful.\n+// 3. Repeat the second set of headers in both phases to demonstrate behavior\n+//    when the chain a peer provides has too little work.\n+BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n+\n+BOOST_AUTO_TEST_CASE(sneaky_redownload)\n {\n-    std::vector<CBlockHeader> first_chain;\n-    std::vector<CBlockHeader> second_chain;\n+    const auto& first_chain{FirstChain()};\n+    const auto& second_chain{SecondChain()};\n \n-    std::unique_ptr<HeadersSyncState> hss;\n+    // Feed the first chain to HeadersSyncState, by delivering 1 header\n+    // initially and then the rest.\n+    HeadersSyncState hss{CreateState()};\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    // Just feed one header and check state.\n+    CHECK_RESULT(hss.ProcessNextHeaders({{first_chain.front()}}, /*full_headers_message=*/true),\n+        hss, /*exp_state=*/State::PRESYNC,\n+        /*exp_success*/true, /*exp_request_more=*/true,\n+        /*exp_headers_size=*/0, /*exp_pow_validated_prev=*/std::nullopt,\n+        /*exp_locator_hash=*/first_chain.front().GetHash());\n \n-    // Generate headers for two different chains (using differing merkle roots\n-    // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n+    // Pretend the message is still \"full\", so we don't abort.",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 191,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "53341ea10dc2f7df371b416060863bbc094b8773",
      "in_reply_to_id": 2286407697,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-09-04T07:47:01Z",
      "updated_at": "2025-09-04T07:48:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2321157714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2321157714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323585831",
      "pull_request_review_id": 3187302261,
      "id": 2323585831,
      "node_id": "PRRC_kwDOABII586Kfxsn",
      "diff_hunk": "@@ -53,7 +53,7 @@ Release Process\n     - Set `MINCHAINWORK_HEADERS` to the height used for the `nMinimumChainWork` calculation above.\n     - Check that the other variables still look reasonable.\n   - Run the script. It works fine in CPython, but PyPy is much faster (seconds instead of minutes): `pypy3 contrib/devtools/headerssync-params.py`.\n-  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into the top of [`src/headerssync.cpp`](/src/headerssync.cpp).\n+  - Paste the output defining the header `commitment_period` and `redownload_buffer_size` into the mainnet section of [`src/kernel/chainparams.cpp`](/src/kernel/chainparams.cpp).",
      "path": "doc/release-process.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does https://github.com/bitcoin/bitcoin/blob/eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d/src/headerssync.h#L183 need updating?",
      "created_at": "2025-09-04T21:25:46Z",
      "updated_at": "2025-09-04T22:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2323585831",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323585831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323619897",
      "pull_request_review_id": 3187302261,
      "id": 2323619897,
      "node_id": "PRRC_kwDOABII586Kf6A5",
      "diff_hunk": "@@ -137,7 +137,7 @@ BUILDDIR=$PWD/my-build-dir contrib/devtools/gen-manpages.py\n headerssync-params.py\n =====================\n \n-A script to generate optimal parameters for the headerssync module (src/headerssync.cpp). It takes no command-line\n+A script to generate optimal parameters for the headerssync module (stored in src/kernel/chainparams.cpp). It takes no command-line\n options, as all its configuration is set at the top of the file. It runs many times faster inside PyPy. Invocation:\n \n ```bash",
      "path": "contrib/devtools/README.md",
      "position": 8,
      "original_position": 8,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "a4191b57b21a0fea871206f368972c7741ad6437",
      "in_reply_to_id": 2271379431,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The new value after the rebase is:\r\n```\r\n- Initial: period=626, buffer=14854, mem=710.549 KiB\r\n- New best: period=634, buffer=15061, mem=706.160 KiB\r\n- New best: period=632, buffer=15009, mem=703.804 KiB\r\n\r\nGiven current min chainwork headers of 912683, the optimal parameters for low\r\nmemory usage on mainchain for release until 2028-04-02 is:\r\n\r\n        // Generated by headerssync-params.py on 2025-09-04.\r\n        m_headers_sync_params = HeadersSyncParams{\r\n            .commitment_period = 632,\r\n            .redownload_buffer_size = 15009, // 15009/632 = ~23.7 commitments\r\n        };\r\n\r\nProperties:\r\n- Per-peer memory for mainchain sync: 703.723 KiB\r\n- Per-peer memory for timewarp attack: 703.804 KiB\r\n- Attack rate: 30460.2 attacks for 1 header of memory growth\r\n  (where each attack costs 70.503 MiB bandwidth)\r\n```\r\n\r\nwhich matches https://github.com/bitcoin/bitcoin/blob/eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d/src/kernel/chainparams.cpp#L200-L203\r\n(I haven't checked the other chains)",
      "created_at": "2025-09-04T21:47:18Z",
      "updated_at": "2025-09-04T22:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2323619897",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323619897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 143,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323633980",
      "pull_request_review_id": 3187302261,
      "id": 2323633980,
      "node_id": "PRRC_kwDOABII586Kf9c8",
      "diff_hunk": "@@ -1,32 +1,26 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{632};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{15009}; // 15009/632 = ~23.7 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes this many bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,\n-        const CBlockIndex* chain_start, const arith_uint256& minimum_required_work) :\n-    m_commit_offset(FastRandomContext().randrange<unsigned>(HEADER_COMMITMENT_PERIOD)),\n+        const HeadersSyncParams& params, const CBlockIndex* chain_start,\n+        const arith_uint256& minimum_required_work) :\n+    m_commit_offset((assert(params.commitment_period > 0), // HeadersSyncParams field must be initialized to non-zero.",
      "path": "src/headerssync.cpp",
      "position": 35,
      "original_position": 35,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm still not comfortable with this assert here, can we assign it in the body or do an immediately-invoked lambda instead?\r\n```suggestion\r\n    m_commit_offset{[&]() {\r\n          assert(params.commitment_period > 0);\r\n          return FastRandomContext().randrange(params.commitment_period);\r\n      }()},\r\n```\r\nNote that in this case the comment can also be eliminated",
      "created_at": "2025-09-04T21:57:14Z",
      "updated_at": "2025-09-04T22:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2323633980",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2323633980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2324582945",
      "pull_request_review_id": 3188641142,
      "id": 2324582945,
      "node_id": "PRRC_kwDOABII586KjlIh",
      "diff_hunk": "@@ -1,32 +1,26 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{632};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{15009}; // 15009/632 = ~23.7 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes this many bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,\n-        const CBlockIndex* chain_start, const arith_uint256& minimum_required_work) :\n-    m_commit_offset(FastRandomContext().randrange<unsigned>(HEADER_COMMITMENT_PERIOD)),\n+        const HeadersSyncParams& params, const CBlockIndex* chain_start,\n+        const arith_uint256& minimum_required_work) :\n+    m_commit_offset((assert(params.commitment_period > 0), // HeadersSyncParams field must be initialized to non-zero.",
      "path": "src/headerssync.cpp",
      "position": 35,
      "original_position": 35,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "in_reply_to_id": 2323633980,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What makes a 2-statement lambda better than https://en.cppreference.com/w/cpp/language/operator_other.html#Built-in_comma_operator in this case?\r\n\r\nAlso not sure why it changes the need for the comment.",
      "created_at": "2025-09-05T09:27:51Z",
      "updated_at": "2025-09-05T09:36:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2324582945",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2324582945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2324586432",
      "pull_request_review_id": 3188641142,
      "id": 2324586432,
      "node_id": "PRRC_kwDOABII586Kjl_A",
      "diff_hunk": "@@ -53,7 +53,7 @@ Release Process\n     - Set `MINCHAINWORK_HEADERS` to the height used for the `nMinimumChainWork` calculation above.\n     - Check that the other variables still look reasonable.\n   - Run the script. It works fine in CPython, but PyPy is much faster (seconds instead of minutes): `pypy3 contrib/devtools/headerssync-params.py`.\n-  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into the top of [`src/headerssync.cpp`](/src/headerssync.cpp).\n+  - Paste the output defining the header `commitment_period` and `redownload_buffer_size` into the mainnet section of [`src/kernel/chainparams.cpp`](/src/kernel/chainparams.cpp).",
      "path": "doc/release-process.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "in_reply_to_id": 2323585831,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for catching this! Pushed fix.",
      "created_at": "2025-09-05T09:29:27Z",
      "updated_at": "2025-09-05T09:36:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2324586432",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2324586432"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325496639",
      "pull_request_review_id": 3189963747,
      "id": 2325496639,
      "node_id": "PRRC_kwDOABII586KnEM_",
      "diff_hunk": "@@ -1,32 +1,26 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{632};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{15009}; // 15009/632 = ~23.7 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes this many bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).\n static_assert(sizeof(CompressedHeader) == 48);\n \n HeadersSyncState::HeadersSyncState(NodeId id, const Consensus::Params& consensus_params,\n-        const CBlockIndex* chain_start, const arith_uint256& minimum_required_work) :\n-    m_commit_offset(FastRandomContext().randrange<unsigned>(HEADER_COMMITMENT_PERIOD)),\n+        const HeadersSyncParams& params, const CBlockIndex* chain_start,\n+        const arith_uint256& minimum_required_work) :\n+    m_commit_offset((assert(params.commitment_period > 0), // HeadersSyncParams field must be initialized to non-zero.",
      "path": "src/headerssync.cpp",
      "position": 35,
      "original_position": 35,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "eb0f41ee1ed9ea54019fcaa4e3ce33481da4459d",
      "in_reply_to_id": 2323633980,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You can resolve it if you feel strongly about it, it's not a blocker from my side",
      "created_at": "2025-09-05T16:08:54Z",
      "updated_at": "2025-09-05T16:08:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2325496639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325496639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333959308",
      "pull_request_review_id": 3202085490,
      "id": 2333959308,
      "node_id": "PRRC_kwDOABII586LHWSM",
      "diff_hunk": "@@ -92,16 +92,12 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     std::unique_ptr<HeadersSyncState> hss;\n \n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n-\n     hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders({first_chain.front()}, true);\n+    (void)hss->ProcessNextHeaders({{first_chain.front()}}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss->ProcessNextHeaders(headers_batch, true);\n+    auto result = hss->ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "c75ab42992465a2d1d136775ffbc3da700410329",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor(headerssync): Process spans of headers\"\r\n\r\nNit: slightly simpler: `std::span{first_chain}.subspan(1)`.",
      "created_at": "2025-09-09T15:09:02Z",
      "updated_at": "2025-09-09T15:28:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2333959308",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333959308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333960814",
      "pull_request_review_id": 3202085490,
      "id": 2333960814,
      "node_id": "PRRC_kwDOABII586LHWpu",
      "diff_hunk": "@@ -132,15 +128,13 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n     hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n      // Pretend just the first message is \"full\", so we don't abort.\n-    (void)hss->ProcessNextHeaders({second_chain.front()}, true);\n+    (void)hss->ProcessNextHeaders({{second_chain.front()}}, true);\n     BOOST_CHECK(hss->GetState() == HeadersSyncState::State::PRESYNC);\n \n-    headers_batch.clear();\n-    headers_batch.insert(headers_batch.end(), std::next(second_chain.begin(), 1), second_chain.end());\n     // Tell the sync logic that the headers message was not full, implying no\n     // more headers can be requested. For a low-work-chain, this should causes\n     // the sync to end with no headers for acceptance.\n-    result = hss->ProcessNextHeaders(headers_batch, false);\n+    result = hss->ProcessNextHeaders(std::span{second_chain}.last(second_chain.size() - 1), false);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 33,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "c75ab42992465a2d1d136775ffbc3da700410329",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor(headerssync): Process spans of headers\"\r\n\r\nSame here: `std::span{second_chain}.subspan(1)`.",
      "created_at": "2025-09-09T15:09:33Z",
      "updated_at": "2025-09-09T15:28:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2333960814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333960814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334562200",
      "pull_request_review_id": 3202971792,
      "id": 2334562200,
      "node_id": "PRRC_kwDOABII586LJpeY",
      "diff_hunk": "@@ -92,16 +92,12 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     std::unique_ptr<HeadersSyncState> hss;\n \n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n-\n     hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders({first_chain.front()}, true);\n+    (void)hss->ProcessNextHeaders({{first_chain.front()}}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss->ProcessNextHeaders(headers_batch, true);\n+    auto result = hss->ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "c75ab42992465a2d1d136775ffbc3da700410329",
      "in_reply_to_id": 2333959308,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hasn't become intuitive to me yet that the first parameter to `subspan()` is an offset and not a size, but appreciate not having to repeat the identifier. Taken in latest push, including the other transform of the same kind.\r\n\r\nThanks for the review!",
      "created_at": "2025-09-09T19:25:38Z",
      "updated_at": "2025-09-09T19:25:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2334562200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334562200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334579755",
      "pull_request_review_id": 3202998015,
      "id": 2334579755,
      "node_id": "PRRC_kwDOABII586LJtwr",
      "diff_hunk": "@@ -92,16 +92,12 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\n \n     std::unique_ptr<HeadersSyncState> hss;\n \n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n-\n     hss.reset(new HeadersSyncState(0, Params().GetConsensus(), chain_start, CHAIN_WORK));\n-    (void)hss->ProcessNextHeaders({first_chain.front()}, true);\n+    (void)hss->ProcessNextHeaders({{first_chain.front()}}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss->ProcessNextHeaders(headers_batch, true);\n+    auto result = hss->ProcessNextHeaders(std::span{first_chain}.last(first_chain.size() - 1), true);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "cc5dda1de333cf7aa10e2237ee2c9221f705dbd9",
      "original_commit_id": "c75ab42992465a2d1d136775ffbc3da700410329",
      "in_reply_to_id": 2333959308,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah, that confused me as well - if you need to touch again, we could add a [name hint](https://en.cppreference.com/w/cpp/container/span/subspan) to it:\r\n```C++\r\nstd::span{first_chain}.subspan(/*offset=*/1)\r\n```",
      "created_at": "2025-09-09T19:32:54Z",
      "updated_at": "2025-09-09T19:32:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2334579755",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334579755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    }
  ]
}
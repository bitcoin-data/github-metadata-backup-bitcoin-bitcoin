{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675",
    "id": 1778607753,
    "node_id": "PR_kwDOABII585qA2aJ",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29675",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29675.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29675.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ac599c4a9cb3b2d424932d3fd91f9eed17426827",
    "number": 29675,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "wallet: Be able to receive and spend inputs involving MuSig2 aggregate keys",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR implements MuSig2 signing so that the wallet can receive and spend from imported `musig(0` descriptors.\r\n\r\nThe libsecp musig module is enabled so that it can be used for all of the MuSig2 cryptography.\r\n\r\nSecnonces are handled in a separate class which holds the libsecp secnonce object in a `secure_unique_ptr`. Since secnonces must not be used, this class has no serialization and will only live in memory. A restart of the software will require a restart of the MuSig2 signing process.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "created_at": "2024-03-18T22:32:37Z",
    "updated_at": "2025-10-22T07:24:07Z",
    "closed_at": "2025-10-14T20:26:24Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2025-10-14T20:26:24Z",
    "merged_by": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "48aa0e98d0b70244658b41d7378c295f3e1dadcd",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "achow101:musig2",
      "ref": "musig2",
      "sha": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 41,
        "watchers_count": 41,
        "size": 310752,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-21T07:29:41Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2025-09-06T09:25:53Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8f73d95221468f96320e0a5f6c269b2e72569dbb",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38061,
        "stargazers_count": 86336,
        "watchers_count": 86336,
        "size": 295080,
        "default_branch": "master",
        "open_issues_count": 786,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-21T14:37:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-22T07:23:47Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 976,
    "deletions": 47,
    "changed_files": 18,
    "commits": 17,
    "review_comments": 175,
    "comments": 73
  },
  "events": [
    {
      "event": "commented",
      "id": 2005162597,
      "node_id": "IC_kwDOABII5853hFpl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2005162597",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T22:32:40Z",
      "updated_at": "2025-10-04T14:28:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/29675.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [rkrux](https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3288310595), [theStack](https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3290195368), [fjahr](https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3368298124) |\n| Concept ACK | [jonatack](https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2500731539) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32876](https://github.com/bitcoin/bitcoin/pull/32876) (refactor: use options struct for signing and PSBT operations by Sjors)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- It is the SHA256 of aggregate xonly key, + participant pubkey + sighash. -> It is the SHA256 of the aggregate xonly key + participant pubkey + sighash. [The stray comma before \"+\" makes the phrase awkward/confusing; adding \"the\" and removing the comma clarifies the list of items being hashed.]\n\n<sup>drahtbot_id_5_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2005162597",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "labeled",
      "id": 12160351140,
      "node_id": "LE_lADOABII586CvrSDzwAAAALU0Duk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12160351140",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T22:32:42Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 12162666410,
      "node_id": "LE_lADOABII586CvrSDzwAAAALU84-q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12162666410",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T02:45:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2005647364,
      "node_id": "IC_kwDOABII5853i8AE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2005647364",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T02:45:21Z",
      "updated_at": "2024-03-19T02:45:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22808312237</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2005647364",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "reviewed",
      "id": 1945828953,
      "node_id": "PRR_kwDOABII585z-v5Z",
      "url": null,
      "actor": null,
      "commit_id": "a1e4c323dbff9fa5095cf216d7cd528f10a1feeb",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-03-19T14:24:29Z",
      "author_association": "MEMBER",
      "body": "Very cool stuff! Will review more later.\r\n\r\n> This pulls in (an older version of) the musig module in libsecp\r\n\r\nWhat do you mean by \"older\"? Just that the PR to libsecp needs another rebase?\r\n\r\n> An open question is whether the approach for handling the secnonces is ideal and safe. Since nonces must not be reused, this PR holds them exclusively in memory, so a restart of the software will require a restart of the MuSig2 signing process. \r\n\r\nIt sounds safe, but not ideal, which might make it unsafe. Every Bitcoin Core instance involved would need to keep running, with the wallet loaded (and decrypted?) throughout the two rounds. For an airgapped setup with keys in multiple locations, the node in each location would have to be left running unattended (assuming one person running between them).\r\n\r\nMy understanding is that Ledger (cc @bigspider) creates a nonce, stores it, and then deletes it from storage as soon as it's loaded (before signing). We could similarly store the nonce in our wallet and then delete the field at the start of the new round. For safety we could disable backups and dump RPC's while a round is in progress (e.g. with a `NO_BACKUP` flag). \r\n\r\nThat only prevents accidental replay, not a replay _attack_, but it seems that anyone who is able to replay a node, already has access to its private keys (from the time a wallet was decrypted), so can't do additional harm?\r\n\r\n---\r\n\r\nImplementation questions.\r\n\r\nI tried making a 2 party tr(musig(A,B)) in a blank wallet. Initially I obtained two private keys and their public keys from another legacy wallet. I gave the new Alice wallet her private key and Bob's public key, i.e. `tr(musig(a,B)/0/*)` but this failed with `Ranged musig() requires all participants to be xpubs`. Why though? Given that bip-musig2-derivation defines a virtual root xpub, and providers a fake chaincode, this restriction seems unneeded? (though it's not blocker either, with descriptor wallets it's easy to get an xpub - after #29130 anyway)\r\n\r\nOnce I had two wallets, I could see they generated the same receive address, nice! I then imported the same xpub/xpriv pair for the change address `1/*`. I sent some (signet) coins to it, which arrived and confirmed.\r\n\r\nSadly after the GUI rugged me :-) Trying to send any amount elsewhere resulted in \"Signing transaction failed\" followed by \"Transaction creation failed!\". Whereas I was hoping to get a PSBT this way.\r\n\r\nUsing the `send` RPC I do get a PSBT (from Alice). I had the `musig2_participant_pubkeys` set, but no `musig2_pubnonces`. That required calling `walletprocesspsbt` which seems an unnecessary extra step (but such fine tuning can wait). On Bob's side the GUI complained with \"Could not sign any more inputs\", but it did add a nonce.\r\n\r\nAt this point all the nonces were commited, so Bob could have added his partial signature. But at the stage the GUI crashes when trying to sign: `[libsecp256k1] illegal argument: secp256k1_memcmp_var(&nonce->data[0], secp256k1_musig_pubnonce_magic, 4) == 0`.\r\n\r\nAfter a restart Bob's `walletprocesspsbt` command didn't fail. Which seems wrong: at this point the nonce should be gone, which he should complain about.\r\n\r\nStarting with a fresh transaction, sing only the RPC I got the same crash, i.e.:\r\n1. Alice: `send`\r\n2. Alice: `processpsbt`\r\n3. Bob: `processpsbt`\r\n4. Bob: `processpsbt`: crash\r\n\r\nPerhaps relevant: Bob's wallet is encrypted, though it was unlocked throughout steps 3 and 4.\r\n\r\n---\r\n\r\n```\r\n % test/functional/wallet_musig.py \r\n2024-03-19T14:23:33.113000Z TestFramework (INFO): PRNG seed is: 6470719924404054174\r\n2024-03-19T14:23:33.115000Z TestFramework (INFO): Initializing test directory /var/folders/h6/qrb4j9vn6530kp7j4ymj934h0000gn/T/bitcoin_func_test_66knao3l\r\n2024-03-19T14:23:35.070000Z TestFramework (INFO): Testing rawtr(musig(keys/*))\r\n2024-03-19T14:23:35.192000Z TestFramework (ERROR): Unexpected exception caught during testing\r\n```\r\n\r\n(didn't check if it's the same crash)\r\n\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-1945828953",
      "submitted_at": "2024-03-19T14:22:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "commented",
      "id": 2007354913,
      "node_id": "IC_kwDOABII5853pc4h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2007354913",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T14:36:41Z",
      "updated_at": "2024-03-19T14:36:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "> My understanding is that Ledger (cc @bigspider) creates a nonce, stores it, and then deletes it from storage as soon as it's loaded (before signing). We could similarly store the nonce in our wallet and then delete the field at the start of the new round. For safety we could disable backups and dump RPC's while a round is in progress (e.g. with a `NO_BACKUP` flag).\r\n\r\nNot yet implemented, but that's the plan: store nonces in flash memory (persistent memory) after generation; remove them from flash memory _before_ signing starts (therefore, they're gone even if there is a later failure, and signing must restart from nonce generation).\r\n\r\nNote that there is no backup possibility for the persistent memory.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2007354913",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 12170604889,
      "node_id": "MEE_lADOABII586CvrSDzwAAAALVbLFZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12170604889",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T14:36:43Z"
    },
    {
      "event": "subscribed",
      "id": 12170604914,
      "node_id": "SE_lADOABII586CvrSDzwAAAALVbLFy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12170604914",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T14:36:43Z"
    },
    {
      "event": "commented",
      "id": 2007551641,
      "node_id": "IC_kwDOABII5853qM6Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2007551641",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T15:52:12Z",
      "updated_at": "2024-03-19T15:52:12Z",
      "author_association": "MEMBER",
      "body": "> What do you mean by \"older\"? Just that the PR to libsecp needs another rebase?\r\n\r\nI pulled in a commit that is probably outdated at this point. There may have been API changes since.\r\n\r\n> We could similarly store the nonce in our wallet and then delete the field at the start of the new round. For safety we could disable backups and dump RPC's while a round is in progress (e.g. with a `NO_BACKUP` flag).\r\n\r\nDisabling backups with a flag would not help as an oft suggested method for backing up a wallet is by copying the wallet file. There's nothing that we can do about that, so to be safe, I don't think we can store the nonces in the wallet file.\r\n\r\n> I tried making a 2 party tr(musig(A,B)) in a blank wallet. Initially I obtained two private keys and their public keys from another legacy wallet. I gave the new Alice wallet her private key and Bob's public key, i.e. `tr(musig(a,B)/0/*)` but this failed with `Ranged musig() requires all participants to be xpubs`. Why though? Given that bip-musig2-derivation defines a virtual root xpub, and providers a fake chaincode, this restriction seems unneeded? (though it's not blocker either, with descriptor wallets it's easy to get an xpub - after #29130 anyway)\r\n\r\nIt's specified in bip-musig2-descriptors that the musig must only contain xpubs if the aggregate will be derived from. I believe the rationale for this is that xpubs are intended to have derivation done on them whereas normal keys are not, and so there may be particular handling of such keys to deal with possibilities of derivation doing something unexpected, and so if we do anything with derivation, we should only use keys that are intended for derivation to avoid any confusion. I think @sipa was the one who made this suggestion.\r\n\r\n> Sadly after the GUI rugged me :-) Trying to send any amount elsewhere resulted in \"Signing transaction failed\" followed by \"Transaction creation failed!\". Whereas I was hoping to get a PSBT this way.\r\n\r\nThe GUI may be expecting that at least one signature is produced, but we can't do that with musig without at least one round with the cosigners. I have it implemented such that `ProduceSignature` does not report the tx as being signed until there is actually a signature, so even the partial sigs generation will not return \"signed\".\r\n\r\n> After a restart Bob's `walletprocesspsbt` command didn't fail. Which seems wrong: at this point the nonce should be gone, which he should complain about.\r\n\r\nCurrently it just ignores if there is already a nonce for a participant's key. It doesn't replace the nonce, but it also doesn't validate whether that key belongs to the wallet or whether the nonce exists in the wallet.\r\n\r\n\r\n> At this point all the nonces were commited, so Bob could have added his partial signature. But at the stage the GUI crashes when trying to sign: `[libsecp256k1] illegal argument: secp256k1_memcmp_var(&nonce->data[0], secp256k1_musig_pubnonce_magic, 4) == 0`.\r\n> ...\r\n> Starting with a fresh transaction, sing only the RPC I got the same crash, i.e.:\r\n> \r\n>     1. Alice: `send`\r\n> \r\n>     2. Alice: `processpsbt`\r\n> \r\n>     3. Bob: `processpsbt`\r\n> \r\n>     4. Bob: `processpsbt`: crash\r\n> \r\n> \r\n> Perhaps relevant: Bob's wallet is encrypted, though it was unlocked throughout steps 3 and 4.\r\n> \r\n> ```\r\n>  % test/functional/wallet_musig.py \r\n> 2024-03-19T14:23:33.113000Z TestFramework (INFO): PRNG seed is: 6470719924404054174\r\n> 2024-03-19T14:23:33.115000Z TestFramework (INFO): Initializing test directory /var/folders/h6/qrb4j9vn6530kp7j4ymj934h0000gn/T/bitcoin_func_test_66knao3l\r\n> 2024-03-19T14:23:35.070000Z TestFramework (INFO): Testing rawtr(musig(keys/*))\r\n> 2024-03-19T14:23:35.192000Z TestFramework (ERROR): Unexpected exception caught during testing\r\n> ```\r\n> \r\n> (didn't check if it's the same crash)\r\n\r\nHuh, works fine for me.\r\n\r\n",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2007551641",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 12171807689,
      "node_id": "MEE_lADOABII586CvrSDzwAAAALVfwvJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12171807689",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T15:52:14Z"
    },
    {
      "event": "subscribed",
      "id": 12171807711,
      "node_id": "SE_lADOABII586CvrSDzwAAAALVfwvf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12171807711",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T15:52:14Z"
    },
    {
      "event": "commented",
      "id": 2007648581,
      "node_id": "IC_kwDOABII5853qklF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2007648581",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T16:37:34Z",
      "updated_at": "2024-03-19T17:09:59Z",
      "author_association": "MEMBER",
      "body": "> Huh, works fine for me.\r\n\r\nThis was on Intel macOS 14.4 with a clean checkout and `./configure --disable-bench --disable-tests --enable-wallet --disable-fuzz-binary --disable-zmq --with-gui`.\r\n\r\nOn Ubuntu 23.10 with gcc 13.2.0 the test do pass, odd.\r\n\r\n(if this still happens after CI passes, I'll dig a bit deeper, for now I'll just test on Ubuntu)\r\n\r\n> I don't think we can store the nonces in the wallet file.\r\n\r\nStoring them in some other file might be fine too. As long as we delete it upon read, don't sign anything if deletion fails and maybe also commit to some unique property of the PSBT.\r\n\r\n> Currently it just ignores if there is already a nonce for a participant's key. \r\n\r\nI guess we need to distinguish here between a nonce for our own key and one for other participants. We have no idea if some other node crashed. But it does seem reasonable to fail if we see a nonce for ourselves. Whether we previously crashed or if someone is trying a replay attack doesn't really matter. Though it's unusual for `processpsbt` to fail when called twice normally, here it seems justifiable.\r\n\r\n--- \r\n\r\nUpdate: successfully completed the MuSig2 signing on Ubuntu! ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2007648581",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12172489751,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALViXQX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12172489751",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c6d0433fb5e89f598c559e3db5db955b3592812d",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c6d0433fb5e89f598c559e3db5db955b3592812d",
      "created_at": "2024-03-19T16:41:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12177750575,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALV2bov",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12177750575",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e80f3adddb18ca8a09135bd83b6b95796c7d1f7a",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/e80f3adddb18ca8a09135bd83b6b95796c7d1f7a",
      "created_at": "2024-03-20T00:32:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12238951479,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALZf5Q3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12238951479",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "04d4e2a9885950295105710181f85132f96eeda4",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/04d4e2a9885950295105710181f85132f96eeda4",
      "created_at": "2024-03-25T18:36:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12239252020,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALZhCo0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12239252020",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "817c462edb048acf6c72bbd25a61a2a7ae814a46",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/817c462edb048acf6c72bbd25a61a2a7ae814a46",
      "created_at": "2024-03-25T18:59:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12240331154,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALZlKGS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12240331154",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7d43eacb990d1eab2378cb684743dec90297e874",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7d43eacb990d1eab2378cb684743dec90297e874",
      "created_at": "2024-03-25T20:23:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12255069765,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALadYZF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12255069765",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0bfbea4c76a64e2a1816cdd1c8c1bd5397096553",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0bfbea4c76a64e2a1816cdd1c8c1bd5397096553",
      "created_at": "2024-03-26T18:52:22Z"
    },
    {
      "event": "labeled",
      "id": 12293942933,
      "node_id": "LE_lADOABII586CvrSDzwAAAALcxq6V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12293942933",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-29T11:00:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12315703839,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALeErof",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12315703839",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0ee1c298b35a063a6ab3f22840f99b0bc916e329",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0ee1c298b35a063a6ab3f22840f99b0bc916e329",
      "created_at": "2024-04-01T20:55:42Z"
    },
    {
      "event": "unlabeled",
      "id": 12316341027,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAALeHHMj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12316341027",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-01T21:58:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2031655145,
      "node_id": "IC_kwDOABII5855GJjp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2031655145",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T10:36:32Z",
      "updated_at": "2024-04-02T10:36:32Z",
      "author_association": "MEMBER",
      "body": "Only 3 red CI machines to go :-)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2031655145",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12329378750,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALe42O-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12329378750",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "920f510625779fa91568215b993c9772f4f2f5e5",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/920f510625779fa91568215b993c9772f4f2f5e5",
      "created_at": "2024-04-02T17:08:55Z"
    },
    {
      "event": "commented",
      "id": 2032604175,
      "node_id": "IC_kwDOABII5855JxQP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2032604175",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-02T17:10:47Z",
      "updated_at": "2024-04-02T17:10:47Z",
      "author_association": "MEMBER",
      "body": "> Only 3 red CI machines to go :-)\r\n\r\nOnly the tidy job is an actual failure from this PR. MSan is an issue with libsecp that needs to be fixed in https://github.com/bitcoin-core/secp256k1/pull/1479. The ASan failure affects all PRs currently, see #29788",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2032604175",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2033839537,
      "node_id": "IC_kwDOABII5855Oe2x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2033839537",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-03T08:05:01Z",
      "updated_at": "2024-04-03T08:05:01Z",
      "author_association": "MEMBER",
      "body": "The test passes for me now on macOS.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2033839537",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "labeled",
      "id": 12381339381,
      "node_id": "LE_lADOABII586CvrSDzwAAAALh_D71",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12381339381",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-06T10:23:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12490751525,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAALogb4l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12490751525",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e87f76845ba5def919dacd89b6f611e3b1794dc4",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/e87f76845ba5def919dacd89b6f611e3b1794dc4",
      "created_at": "2024-04-16T14:20:58Z"
    },
    {
      "event": "comment_deleted",
      "id": 12903284865,
      "node_id": "CDE_lADOABII586CvrSDzwAAAAMBGICB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12903284865",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-23T04:44:03Z"
    },
    {
      "event": "commented",
      "id": 2152172999,
      "node_id": "IC_kwDOABII586AR43H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2152172999",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-06T11:43:40Z",
      "updated_at": "2024-06-06T13:39:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hi all,\r\nan early alpha of the Ledger Bitcoin Testnet app with MuSig2 support is available for testing. (NB: the app is called `Bitcoin Test Musig` and not `Bitcoin Test`). It should be compatible with the [latest draft of the specs](https://github.com/bitcoin/bips/pull/1540).\r\n\r\nInstructions and an easy end-2-end script for MuSig signing to play with it is available here for anyone interested in trying it out:\r\n\r\nhttps://github.com/bigspider/moosig\r\n\r\nIt works for both keypath and script path spending (but it was only tested on very simple policies, so far).\r\n\r\n\r\nADDENDUM: MuSig2 support will not be available on `Nano S`. Sorry, not enough RAM to make it fit.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2152172999",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14614928289,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAANnHhuh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14614928289",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "87b97d31420833744b3b4aa2ef5cccf3b8a317a2",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/87b97d31420833744b3b4aa2ef5cccf3b8a317a2",
      "created_at": "2024-10-12T00:17:35Z"
    },
    {
      "event": "commented",
      "id": 2408260421,
      "node_id": "IC_kwDOABII586PiyNF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408260421",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-12T00:18:48Z",
      "updated_at": "2024-10-12T00:18:48Z",
      "author_association": "MEMBER",
      "body": "Rebased and updated the libsecp subtree to its master\r\n\r\nStill need to work on the location of musig specific functions as currently it requires linking secp256k1 directly for a bunch of targets.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2408260421",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "unlabeled",
      "id": 14615043183,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAANnH9xv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14615043183",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-12T01:01:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14859390076,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAN1sEx8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14859390076",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "10a8e569924433ea4f27d61653993274555939c4",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/10a8e569924433ea4f27d61653993274555939c4",
      "created_at": "2024-10-24T22:16:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14880688244,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAN29Uh0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14880688244",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0c33f72e3463a26401421afbd6be86bd1ee5ebba",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0c33f72e3463a26401421afbd6be86bd1ee5ebba",
      "created_at": "2024-10-25T17:32:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14881439364,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAN3AL6E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14881439364",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7fe395195e9ad3ab6bc341d41d4def5662e0b837",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7fe395195e9ad3ab6bc341d41d4def5662e0b837",
      "created_at": "2024-10-25T18:26:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14881934977,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAN3CE6B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14881934977",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a8a215647d63c1a3a0aeff00a29cf1bc8a83b9f7",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a8a215647d63c1a3a0aeff00a29cf1bc8a83b9f7",
      "created_at": "2024-10-25T19:18:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14882934011,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAN3F4z7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14882934011",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cbbb1ae564c470dc600d43c7229b3609d81b06ca",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/cbbb1ae564c470dc600d43c7229b3609d81b06ca",
      "created_at": "2024-10-25T20:10:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14971263861,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAN8W1t1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14971263861",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "57b47c47ef0bd36e1c32d709c62998c51dc76f34",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/57b47c47ef0bd36e1c32d709c62998c51dc76f34",
      "created_at": "2024-10-29T00:42:05Z"
    },
    {
      "event": "unlabeled",
      "id": 14971764041,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAN8Yv1J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14971764041",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-29T02:06:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15074642264,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOChMlY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15074642264",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "aecc7ae93e8fc7d730479fb05a569be12d76250a",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/aecc7ae93e8fc7d730479fb05a569be12d76250a",
      "created_at": "2024-11-01T20:39:18Z"
    },
    {
      "event": "labeled",
      "id": 15075407848,
      "node_id": "LE_lADOABII586CvrSDzwAAAAOCkHfo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15075407848",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-01T22:39:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15109861751,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOEnjF3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15109861751",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a61c72c721496580272c8742bd370504c23429f6",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a61c72c721496580272c8742bd370504c23429f6",
      "created_at": "2024-11-04T20:17:29Z"
    },
    {
      "event": "unlabeled",
      "id": 15110820556,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAOErNLM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15110820556",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-04T21:48:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2416370202,
      "node_id": "PRR_kwDOABII586QBuIa",
      "url": null,
      "actor": null,
      "commit_id": "6d8213dda33fb8e1ad2f7746e5a5f5433bd27f5e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-11-05T18:09:31Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-2416370202",
      "submitted_at": "2024-11-05T18:09:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15126387431,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOFmlrn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15126387431",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "29aa44c1461efb33b557dfc374ebbb3d2513a3e3",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/29aa44c1461efb33b557dfc374ebbb3d2513a3e3",
      "created_at": "2024-11-05T20:11:49Z"
    },
    {
      "event": "referenced",
      "id": 15147751317,
      "node_id": "REFE_lADOABII586CvrSDzwAAAAOG4FeV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15147751317",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80cb630bd945e7f1777c7bab041c411b6916e651",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80cb630bd945e7f1777c7bab041c411b6916e651",
      "created_at": "2024-11-06T11:15:28Z"
    },
    {
      "event": "commented",
      "id": 2459516090,
      "node_id": "IC_kwDOABII586SmTy6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2459516090",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-06T11:37:57Z",
      "updated_at": "2024-11-07T14:28:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "EDIT: this is now resolved.\r\n\r\nThe current implementation seems to be using the aggregate pubkey (before the tweaks) inside the key of the `PSBT_IN_MUSIG2_PUB_NONCE` (and I'd assume `PSBT_IN_MUSIG2_PARTIAL_SIGNATURE`, but I didn't reach there, yet); instead, [BIP-373](https://github.com/bitcoin/bips/blob/master/bip-0373.mediawiki) says that it must be _the key found in the script and not the aggregate public key that it was derived from, if it was derived from an aggregate key_. Therefore, I interpreted it as the taproot pubkey for a keypath spend, and the exact key that appears in the tapleaf for a scriptspend.\r\n\r\nUsing the aggregate key pre-tweaks could be problematic if the same aggregate key appears multiple times, for example in something like:\r\n```tr(NUMS/<0;1>/*,or_d(pk(musig(A,B)/<0;1>/*),pk(musig(A,B)/<2;3>/*)))```\r\nHere, the two musigs have the same participants, and same aggregate key pre-tweaks (and they are in the same leaf, so even the tapleaf_hash won't help); only the tweaks allow the disambiguation.\r\n\r\n---\r\n\r\nHere's what I pulled from the test I'm working on:\r\n\r\nDescriptor: `tr(musig([f5acc2fd/44'/1'/0']tpubDCwYjpDhUdPGP5rS3wgNg13mTrrjBuG8V9VpWbyptX6TRPbNoZVXsoVUSkCjmQ8jJycjuDKBb9eataSymXakTTaGifxR6kmVsfFehH1ZgJT,tpubD6NzVbkrYhZ4YAPXpMw61GrdqXJJEiYhHo6wxVkfwZgUged5qXm6Df4NLf8ZTFXxW1UhxDKGeKdAVxZtmodC8KfR7SqmW6LGQfDGfnFLmQ6)/<0;1>/*)`\r\n\r\n(where core has the private key for the second tpub).\r\n\r\nDescriptors (with tprivs) imported in core:\r\n```\r\n[{'desc': \"tr(musig([f5acc2fd/44'/1'/0']tpubDCwYjpDhUdPGP5rS3wgNg13mTrrjBuG8V9VpWbyptX6TRPbNoZVXsoVUSkCjmQ8jJycjuDKBb9eataSymXakTTaGifxR6kmVsfFehH1ZgJT,tprv8ZgxMBicQKsPehMjviGVbsCXGVnN5PMniVWAfyiNXHt5rANKD8wW3ASWAVnoD3FPLGH3v7RGJ4FffNHhZQbUGN1cRDKQ1CosyX2MQtFsGht)/0/*)#j27a8m7j\", 'active': True, 'internal': False, 'timestamp': 'now'}, {'desc': \"tr(musig([f5acc2fd/44'/1'/0']tpubDCwYjpDhUdPGP5rS3wgNg13mTrrjBuG8V9VpWbyptX6TRPbNoZVXsoVUSkCjmQ8jJycjuDKBb9eataSymXakTTaGifxR6kmVsfFehH1ZgJT,tprv8ZgxMBicQKsPehMjviGVbsCXGVnN5PMniVWAfyiNXHt5rANKD8wW3ASWAVnoD3FPLGH3v7RGJ4FffNHhZQbUGN1cRDKQ1CosyX2MQtFsGht)/1/*)#r7mu6ww2\", 'active': True, 'internal': True, 'timestamp': 'now'}]\r\n```\r\n\r\nUnsigned psbt:\r\n```\r\ncHNidP8BAH0CAAAAAdL2NNlBE2JSvqSfT7rD55qtlQo0vpBj+7qay5jlRK8aAQAAAAD9////AkBCDwAAAAAAFgAU2bY05Ye8D/o31ppWq8ycsL5td1WxU4kAAAAAACJRIG8BY+C8txooPxDbrDXmFNCHPn5OWgStjAvWJPmkG/CSAAAAAAABASuAlpgAAAAAACJRIMlJh9KeiTnXKN2Ieci1qmwhtFxhowdR45TK++8OWX8UIRaZg4sXm+qcswzNRehImrkH8m8OkH3oq9iqbJO4E9721AUAG4RQpCEW29VNEFgkvwKv+7zMiMVCtBJrM43iZkRMWEATVlTy31YNACbnYhIAAAAAAwAAACEW6Ex/S3Zi+u2fXrLYEtm3vPDgvyozsXrEXji4RZZpwyERAPWswv0sAACAAQAAgAAAAIABFyDb1U0QWCS/Aq/7vMyIxUK0EmszjeJmRExYQBNWVPLfViIaA0gHk0hckD8RuKzi2BqJ9MDsOxlEr5i2BIQm01cD+YmKQgOZg4sXm+qcswzNRehImrkH8m8OkH3oq9iqbJO4E9721APoTH9LdmL67Z9estgS2be88OC/KjOxesReOLhFlmnDIQAAAQUg9zq5DQINlksdoy1F6n8H4aGsIgVYVEHwMprZjOBWEKUhB5mDixeb6pyzDM1F6EiauQfybw6Qfeir2Kpsk7gT3vbUBQAbhFCkIQfoTH9LdmL67Z9estgS2be88OC/KjOxesReOLhFlmnDIREA9azC/SwAAIABAACAAAAAgCEH9zq5DQINlksdoy1F6n8H4aGsIgVYVEHwMprZjOBWEKUNACbnYhIBAAAAAAAAACIIA0gHk0hckD8RuKzi2BqJ9MDsOxlEr5i2BIQm01cD+YmKQgOZg4sXm+qcswzNRehImrkH8m8OkH3oq9iqbJO4E9721APoTH9LdmL67Z9estgS2be88OC/KjOxesReOLhFlmnDIQA=\r\n```\r\n\r\nPSBT processed by core:\r\n\r\n```\r\ncHNidP8BAH0CAAAAAdL2NNlBE2JSvqSfT7rD55qtlQo0vpBj+7qay5jlRK8aAQAAAAD9////AkBCDwAAAAAAFgAU2bY05Ye8D/o31ppWq8ycsL5td1WxU4kAAAAAACJRIG8BY+C8txooPxDbrDXmFNCHPn5OWgStjAvWJPmkG/CSAAAAAAABASuAlpgAAAAAACJRIMlJh9KeiTnXKN2Ieci1qmwhtFxhowdR45TK++8OWX8UIRaZg4sXm+qcswzNRehImrkH8m8OkH3oq9iqbJO4E9721AUAG4RQpCEW29VNEFgkvwKv+7zMiMVCtBJrM43iZkRMWEATVlTy31YNACbnYhIAAAAAAwAAACEW6Ex/S3Zi+u2fXrLYEtm3vPDgvyozsXrEXji4RZZpwyERAPWswv0sAACAAQAAgAAAAIABFyDb1U0QWCS/Aq/7vMyIxUK0EmszjeJmRExYQBNWVPLfViIaA0gHk0hckD8RuKzi2BqJ9MDsOxlEr5i2BIQm01cD+YmKQgOZg4sXm+qcswzNRehImrkH8m8OkH3oq9iqbJO4E9721APoTH9LdmL67Z9estgS2be88OC/KjOxesReOLhFlmnDIUMbA5mDixeb6pyzDM1F6EiauQfybw6Qfeir2Kpsk7gT3vbUA0gHk0hckD8RuKzi2BqJ9MDsOxlEr5i2BIQm01cD+YmKQgPQuidM6rVFptyqaKqAOFl7PD7UfSkbp1rMhATpFUiEXwN8MICPo5paODBnrSm6350HF7EjM5LWgYTPXWGmFhFW1QAAAQUg9zq5DQINlksdoy1F6n8H4aGsIgVYVEHwMprZjOBWEKUhB5mDixeb6pyzDM1F6EiauQfybw6Qfeir2Kpsk7gT3vbUBQAbhFCkIQfoTH9LdmL67Z9estgS2be88OC/KjOxesReOLhFlmnDIREA9azC/SwAAIABAACAAAAAgCEH9zq5DQINlksdoy1F6n8H4aGsIgVYVEHwMprZjOBWEKUNACbnYhIBAAAAAAAAACIIA0gHk0hckD8RuKzi2BqJ9MDsOxlEr5i2BIQm01cD+YmKQgOZg4sXm+qcswzNRehImrkH8m8OkH3oq9iqbJO4E9721APoTH9LdmL67Z9estgS2be88OC/KjOxesReOLhFlmnDIQA=\r\n```\r\n\r\nPSBT processed by core, decoded:\r\n```\r\n{\r\n  \"tx\": {\r\n    \"txid\": \"71ac326e339863accc5ccb85d071ac41a7162fc1406c322c23648c0fe5839b92\",\r\n    \"hash\": \"71ac326e339863accc5ccb85d071ac41a7162fc1406c322c23648c0fe5839b92\",\r\n    \"version\": 2,\r\n    \"size\": 125,\r\n    \"vsize\": 125,\r\n    \"weight\": 500,\r\n    \"locktime\": 0,\r\n    \"vin\": [\r\n      {\r\n        \"txid\": \"1aaf44e598cb9abafb6390be340a95ad9ae7c3ba4f9fa4be52621341d934f6d2\",\r\n        \"vout\": 1,\r\n        \"scriptSig\": {\r\n          \"asm\": \"\",\r\n          \"hex\": \"\"\r\n        },\r\n        \"sequence\": 4294967293\r\n      }\r\n    ],\r\n    \"vout\": [\r\n      {\r\n        \"value\": 0.01000000,\r\n        \"n\": 0,\r\n        \"scriptPubKey\": {\r\n          \"asm\": \"0 d9b634e587bc0ffa37d69a56abcc9cb0be6d7755\",\r\n          \"desc\": \"addr(bcrt1qmxmrfev8hs8l5d7knft2hnyukzlx6a64ystah7)#4sr0u9wg\",\r\n          \"hex\": \"0014d9b634e587bc0ffa37d69a56abcc9cb0be6d7755\",\r\n          \"address\": \"bcrt1qmxmrfev8hs8l5d7knft2hnyukzlx6a64ystah7\",\r\n          \"type\": \"witness_v0_keyhash\"\r\n        }\r\n      },\r\n      {\r\n        \"value\": 0.08999857,\r\n        \"n\": 1,\r\n        \"scriptPubKey\": {\r\n          \"asm\": \"1 6f0163e0bcb71a283f10dbac35e614d0873e7e4e5a04ad8c0bd624f9a41bf092\",\r\n          \"desc\": \"rawtr(6f0163e0bcb71a283f10dbac35e614d0873e7e4e5a04ad8c0bd624f9a41bf092)#f0mm5uaz\",\r\n          \"hex\": \"51206f0163e0bcb71a283f10dbac35e614d0873e7e4e5a04ad8c0bd624f9a41bf092\",\r\n          \"address\": \"bcrt1pduqk8c9ukudzs0csmwkrtes56zrnuljwtgz2mrqt6cj0nfqm7zfqgd563z\",\r\n          \"type\": \"witness_v1_taproot\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"global_xpubs\": [\r\n  ],\r\n  \"psbt_version\": 0,\r\n  \"proprietary\": [\r\n  ],\r\n  \"unknown\": {\r\n  },\r\n  \"inputs\": [\r\n    {\r\n      \"witness_utxo\": {\r\n        \"amount\": 0.10000000,\r\n        \"scriptPubKey\": {\r\n          \"asm\": \"1 c94987d29e8939d728dd8879c8b5aa6c21b45c61a30751e394cafbef0e597f14\",\r\n          \"desc\": \"rawtr(c94987d29e8939d728dd8879c8b5aa6c21b45c61a30751e394cafbef0e597f14)#qt9mflrv\",\r\n          \"hex\": \"5120c94987d29e8939d728dd8879c8b5aa6c21b45c61a30751e394cafbef0e597f14\",\r\n          \"address\": \"bcrt1pe9yc05573yuaw2xa3puu3dd2dssmghrp5vr4rcu5eta77rje0u2qamzrjq\",\r\n          \"type\": \"witness_v1_taproot\"\r\n        }\r\n      },\r\n      \"taproot_bip32_derivs\": [\r\n        {\r\n          \"pubkey\": \"99838b179bea9cb30ccd45e8489ab907f26f0e907de8abd8aa6c93b813def6d4\",\r\n          \"master_fingerprint\": \"1b8450a4\",\r\n          \"path\": \"m\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        },\r\n        {\r\n          \"pubkey\": \"dbd54d105824bf02affbbccc88c542b4126b338de266444c5840135654f2df56\",\r\n          \"master_fingerprint\": \"26e76212\",\r\n          \"path\": \"m/0/3\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        },\r\n        {\r\n          \"pubkey\": \"e84c7f4b7662faed9f5eb2d812d9b7bcf0e0bf2a33b17ac45e38b8459669c321\",\r\n          \"master_fingerprint\": \"f5acc2fd\",\r\n          \"path\": \"m/44h/1h/0h\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        }\r\n      ],\r\n      \"taproot_internal_key\": \"dbd54d105824bf02affbbccc88c542b4126b338de266444c5840135654f2df56\",\r\n      \"musig2_participant_pubkeys\": [\r\n        {\r\n          \"aggregate_pubkey\": \"03480793485c903f11b8ace2d81a89f4c0ec3b1944af98b6048426d35703f9898a\",\r\n          \"participant_pubkeys\": [\r\n            \"0399838b179bea9cb30ccd45e8489ab907f26f0e907de8abd8aa6c93b813def6d4\",\r\n            \"03e84c7f4b7662faed9f5eb2d812d9b7bcf0e0bf2a33b17ac45e38b8459669c321\"\r\n          ]\r\n        }\r\n      ],\r\n      \"musig2_pubnonces\": [\r\n        {\r\n          \"participant_pubkey\": \"0399838b179bea9cb30ccd45e8489ab907f26f0e907de8abd8aa6c93b813def6d4\",\r\n          \"aggregate_pubkey\": \"03480793485c903f11b8ace2d81a89f4c0ec3b1944af98b6048426d35703f9898a\",\r\n          \"pubnonce\": \"03d0ba274ceab545a6dcaa68aa8038597b3c3ed47d291ba75acc8404e91548845f037c30808fa39a5a383067ad29badf9d0717b1233392d68184cf5d61a6161156d5\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"outputs\": [\r\n    {\r\n    },\r\n    {\r\n      \"taproot_internal_key\": \"f73ab90d020d964b1da32d45ea7f07e1a1ac2205585441f0329ad98ce05610a5\",\r\n      \"taproot_bip32_derivs\": [\r\n        {\r\n          \"pubkey\": \"99838b179bea9cb30ccd45e8489ab907f26f0e907de8abd8aa6c93b813def6d4\",\r\n          \"master_fingerprint\": \"1b8450a4\",\r\n          \"path\": \"m\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        },\r\n        {\r\n          \"pubkey\": \"e84c7f4b7662faed9f5eb2d812d9b7bcf0e0bf2a33b17ac45e38b8459669c321\",\r\n          \"master_fingerprint\": \"f5acc2fd\",\r\n          \"path\": \"m/44h/1h/0h\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        },\r\n        {\r\n          \"pubkey\": \"f73ab90d020d964b1da32d45ea7f07e1a1ac2205585441f0329ad98ce05610a5\",\r\n          \"master_fingerprint\": \"26e76212\",\r\n          \"path\": \"m/1/0\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        }\r\n      ],\r\n      \"musig2_participant_pubkeys\": [\r\n        {\r\n          \"aggregate_pubkey\": \"03480793485c903f11b8ace2d81a89f4c0ec3b1944af98b6048426d35703f9898a\",\r\n          \"participant_pubkeys\": [\r\n            \"0399838b179bea9cb30ccd45e8489ab907f26f0e907de8abd8aa6c93b813def6d4\",\r\n            \"03e84c7f4b7662faed9f5eb2d812d9b7bcf0e0bf2a33b17ac45e38b8459669c321\"\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"fee\": 0.00000143\r\n}\r\n```\r\n\r\n---\r\n\r\nThe `aggregate_pubkey` added by core is `03480793485c903f11b8ace2d81a89f4c0ec3b1944af98b6048426d35703f9898a`, but I think it should be `02c94987d29e8939d728dd8879c8b5aa6c21b45c61a30751e394cafbef0e597f14` (after the BIP32-tweaks + the taptweak), matching the pubkey in the Script, if my understanding of BIP-373 is correct.\r\n\r\nAs a consequence, the `musig2_pubnonces` should probably use the name `aggregate_pubkey_tweaked` or something else that avoids confusion with the untweaked `aggregate_pubkey` that appears in `musig2_participant_pubkeys`.\r\n",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2459516090",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15155617086,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOHWF0-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15155617086",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a458541fed78b2eb758316e554ed1ec5449b6bfd",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a458541fed78b2eb758316e554ed1ec5449b6bfd",
      "created_at": "2024-11-06T18:00:35Z"
    },
    {
      "event": "commented",
      "id": 2460441138,
      "node_id": "IC_kwDOABII586Sp1oy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2460441138",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-06T18:01:55Z",
      "updated_at": "2024-11-06T18:02:17Z",
      "author_association": "MEMBER",
      "body": "> The current implementation seems to be using the aggregate pubkey (before the tweaks) inside the key of the `PSBT_IN_MUSIG2_PUB_NONCE`\r\n\r\nIndeed, fixed.\r\n\r\n> Therefore, I interpreted it as the taproot pubkey for a keypath spend\r\n\r\nI've interpreted (and implemented) it as also allowing the taproot internal key, not just the output key. I think that is actually what I meant when writing the BIP, but it's been a while.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2460441138",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "ready_for_review",
      "id": 15155642250,
      "node_id": "RFRE_lADOABII586CvrSDzwAAAAOHWL-K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15155642250",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-06T18:02:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15157204596,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOHcJZ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15157204596",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "313f112b52c2f83697f52c7ce20292107b5f010e",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/313f112b52c2f83697f52c7ce20292107b5f010e",
      "created_at": "2024-11-06T19:48:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15157682393,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOHd-DZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15157682393",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "83dc32a7cab2bf63988e24405a3ea2b3e5456a76",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/83dc32a7cab2bf63988e24405a3ea2b3e5456a76",
      "created_at": "2024-11-06T20:08:53Z"
    },
    {
      "event": "labeled",
      "id": 15157683676,
      "node_id": "LE_lADOABII586CvrSDzwAAAAOHd-Xc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15157683676",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-06T20:08:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2460678879,
      "node_id": "IC_kwDOABII586Sqvrf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2460678879",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-06T20:09:00Z",
      "updated_at": "2024-11-06T20:09:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32617937935</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2460678879",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "unlabeled",
      "id": 15160107060,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAOHnOA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15160107060",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-06T21:50:22Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2460858505,
      "node_id": "IC_kwDOABII586SrbiJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2460858505",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-06T21:53:53Z",
      "updated_at": "2024-11-06T23:00:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I've interpreted (and implemented) it as also allowing the taproot internal key, not just the output key. I think that is actually what I meant when writing the BIP, but it's been a while.\r\n\r\nI think it's important that the (aggregate) plain key used in the key of `PSBT_IN_MUSIG2_PUB_NONCE`/`PSBT_IN_MUSIG2_PARTIAL_SIGNATURE` is unambiguous and clearly specified, or implementations will essentially have to try both in order to find in the PSBT all the pubnonces/musig_partial_signatures for a certain key.\r\n\r\nUsing the same public key that can be used to verify the final signature (therefore, the tweaked taproot pubkey for keypath spends, or the pubkey as it appears in tapleaves for script spends) seems the most natural choice to me.\r\n\r\nI don't have an opinion on `PSBT_IN_MUSIG2_PARTICIPANT_PUBKEYS` - I'm not using it, since it's redundant in the context of signing based on BIP-388 wallet policies.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2460858505",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15161050079,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOHq0Pf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15161050079",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "09a6091711eef299de7cfbfd340a112706422c81",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/09a6091711eef299de7cfbfd340a112706422c81",
      "created_at": "2024-11-06T22:33:18Z"
    },
    {
      "event": "commented",
      "id": 2460946238,
      "node_id": "IC_kwDOABII586Srw8-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2460946238",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-06T22:46:33Z",
      "updated_at": "2024-11-06T22:46:33Z",
      "author_association": "MEMBER",
      "body": "> Using the same public key that can be used to verify the final signature (therefore, the tweaked taproot pubkey for keypath spends, or the pubkey as it appears in tapleaves for script spends) seems the most natural choice to me.\r\n\r\nThat's a good point, I don't feel too strongly about this, it was just a bit more annoying to figure out how. I've updated the PR to do that.\r\n\r\nAlso opened https://github.com/bitcoin/bips/pull/1695 to clarify in the BIP.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2460946238",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2462257471,
      "node_id": "IC_kwDOABII586SwxE_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462257471",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T13:34:51Z",
      "updated_at": "2024-11-07T13:34:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Looking good!\r\n\r\nI can confirm that I was able to complete two e2e tests on regtest (commit 09a6091711eef299de7cfbfd340a112706422c81), using Ledger's MuSig2 implementation for a cosigner and bitcoin-core for the other one.\r\n\r\nThe descriptors had the form:\r\n\r\n```tr(musig(ledger_key, bitcoin_core_key)/<0;1>/*)```\r\n\r\nand:\r\n\r\n```tr(nums_key/<0;1>/*, musig(ledger_key, bitcoin_core_key)/<0;1>/*)```\r\n\r\nIn both cases, the Ledger device was just the MuSig2 cosigner, while bitcoin-core was both the other musig cosigner and the combiner/finalizer/extractor.\r\n\r\nI will report more once I have more extensive tests.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2462257471",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2462726758,
      "node_id": "IC_kwDOABII586Syjpm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462726758",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T16:44:38Z",
      "updated_at": "2024-11-07T16:45:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Attempting some fancier setups, I'm trying to do a \"decaying MuSig\" that starts as a 3-of-3 in the keypath, with 3 timelocked 2-of-2 in the scriptpaths. Not managing to work with the descriptor in core:\r\n\r\n```\r\n$ ./bitcoin-cli -regtest getdescriptorinfo \"tr(musig(tpubDD863BuWFdsaCg6f1SGdwLxp9mDcm3YRm3HxxbppBrizxvU1MqhQ1WpMwhz4vrZHNT7NFbXQ35CquVG9xaLsWaUWfSMZamDESisvtKZ7veF,tpubD6NzVbkrYhZ4YAPXpMw61GrdqXJJEiYhHo6wxVkfwZgUged5qXm6Df4NLf8ZTFXxW1UhxDKGeKdAVxZtmodC8KfR7SqmW6LGQfDGfnFLmQ6,tpubD6NzVbkrYhZ4WSLhjy9cMaGTEW7No4ALTRikqWo5xFsiTTkRfxA8eRyj2GTkFbkKU6HeW5z8LqrcgHbcVoVg2QZ8JECSHv4PpQ5vUdKJbkR)/1/*,{and_v(v:pk(musig(tpubDD863BuWFdsaCg6f1SGdwLxp9mDcm3YRm3HxxbppBrizxvU1MqhQ1WpMwhz4vrZHNT7NFbXQ35CquVG9xaLsWaUWfSMZamDESisvtKZ7veF,tpubD6NzVbkrYhZ4YAPXpMw61GrdqXJJEiYhHo6wxVkfwZgUged5qXm6Df4NLf8ZTFXxW1UhxDKGeKdAVxZtmodC8KfR7SqmW6LGQfDGfnFLmQ6)/1/*),older(12960)),{and_v(v:pk(musig(tpubDD863BuWFdsaCg6f1SGdwLxp9mDcm3YRm3HxxbppBrizxvU1MqhQ1WpMwhz4vrZHNT7NFbXQ35CquVG9xaLsWaUWfSMZamDESisvtKZ7veF,tpubD6NzVbkrYhZ4WSLhjy9cMaGTEW7No4ALTRikqWo5xFsiTTkRfxA8eRyj2GTkFbkKU6HeW5z8LqrcgHbcVoVg2QZ8JECSHv4PpQ5vUdKJbkR)/1/*),older(12960)),and_v(v:pk(musig(tpubD6NzVbkrYhZ4YAPXpMw61GrdqXJJEiYhHo6wxVkfwZgUged5qXm6Df4NLf8ZTFXxW1UhxDKGeKdAVxZtmodC8KfR7SqmW6LGQfDGfnFLmQ6,tpubD6NzVbkrYhZ4WSLhjy9cMaGTEW7No4ALTRikqWo5xFsiTTkRfxA8eRyj2GTkFbkKU6HeW5z8LqrcgHbcVoVg2QZ8JECSHv4PpQ5vUdKJbkR)/1/*),older(12960))}})\"\r\nerror code: -5\r\nerror message:\r\n'and_v(v:pk(musig(tpubDD863BuWFdsaCg6f1SGdwLxp9mDcm3YRm3HxxbppBrizxvU1MqhQ1WpMwhz4vrZHNT7NFbXQ35CquVG9xaLsWaUWfSMZamDESisvtKZ7veF,tpubD6NzVbkrYhZ4YAPXpMw61GrdqXJJEiYhHo6wxVkfwZgUged5qXm6Df4NLf8ZTFXxW1UhxDKGeKdAVxZtmodC8KfR7SqmW6LGQfDGfnFLmQ6)/1/*),older(12960))' is not a valid descriptor function\r\n```\r\n\r\nSame descriptor formatted:\r\n\r\n```\r\ntr(\r\n  musig(tpubDD863BuWFdsaCg6f1SGdwLxp9mDcm3YRm3HxxbppBrizxvU1MqhQ1WpMwhz4vrZHNT7NFbXQ35CquVG9xaLsWaUWfSMZamDESisvtKZ7veF,tpubD6NzVbkrYhZ4YAPXpMw61GrdqXJJEiYhHo6wxVkfwZgUged5qXm6Df4NLf8ZTFXxW1UhxDKGeKdAVxZtmodC8KfR7SqmW6LGQfDGfnFLmQ6,tpubD6NzVbkrYhZ4WSLhjy9cMaGTEW7No4ALTRikqWo5xFsiTTkRfxA8eRyj2GTkFbkKU6HeW5z8LqrcgHbcVoVg2QZ8JECSHv4PpQ5vUdKJbkR)/1/*,\r\n  {\r\n    and_v(\r\n      v:pk(musig(tpubDD863BuWFdsaCg6f1SGdwLxp9mDcm3YRm3HxxbppBrizxvU1MqhQ1WpMwhz4vrZHNT7NFbXQ35CquVG9xaLsWaUWfSMZamDESisvtKZ7veF,tpubD6NzVbkrYhZ4YAPXpMw61GrdqXJJEiYhHo6wxVkfwZgUged5qXm6Df4NLf8ZTFXxW1UhxDKGeKdAVxZtmodC8KfR7SqmW6LGQfDGfnFLmQ6)/1/*),\r\n      older(12960)\r\n    ),\r\n    {\r\n      and_v(\r\n        v:pk(musig(tpubDD863BuWFdsaCg6f1SGdwLxp9mDcm3YRm3HxxbppBrizxvU1MqhQ1WpMwhz4vrZHNT7NFbXQ35CquVG9xaLsWaUWfSMZamDESisvtKZ7veF,tpubD6NzVbkrYhZ4WSLhjy9cMaGTEW7No4ALTRikqWo5xFsiTTkRfxA8eRyj2GTkFbkKU6HeW5z8LqrcgHbcVoVg2QZ8JECSHv4PpQ5vUdKJbkR)/1/*),\r\n        older(12960)\r\n      ),\r\n      and_v(\r\n        v:pk(musig(tpubD6NzVbkrYhZ4YAPXpMw61GrdqXJJEiYhHo6wxVkfwZgUged5qXm6Df4NLf8ZTFXxW1UhxDKGeKdAVxZtmodC8KfR7SqmW6LGQfDGfnFLmQ6,tpubD6NzVbkrYhZ4WSLhjy9cMaGTEW7No4ALTRikqWo5xFsiTTkRfxA8eRyj2GTkFbkKU6HeW5z8LqrcgHbcVoVg2QZ8JECSHv4PpQ5vUdKJbkR)/1/*),\r\n        older(12960)\r\n      )\r\n    }\r\n  }\r\n)\r\n```\r\n\r\nBeen staring at it for a while, it seems valid to me. Am I missing something?\r\nSorry if it's obvious",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2462726758",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2462749804,
      "node_id": "IC_kwDOABII586SypRs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462749804",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T16:51:10Z",
      "updated_at": "2024-11-07T16:51:10Z",
      "author_association": "MEMBER",
      "body": "`musig()` is not being parsed in Miniscript expressions yet.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2462749804",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2462766759,
      "node_id": "IC_kwDOABII586Sytan",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462766759",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T16:58:26Z",
      "updated_at": "2024-11-07T16:58:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "> `musig()` is not being parsed in Miniscript expressions yet.\r\n\r\nAh, ok, I'll keep an eye for updates.\r\nThanks!",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2462766759",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15188771733,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOJUkOV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15188771733",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c179527691efa108943b74e53c861e7dc920c972",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c179527691efa108943b74e53c861e7dc920c972",
      "created_at": "2024-11-07T18:09:42Z"
    },
    {
      "event": "convert_to_draft",
      "id": 15189125298,
      "node_id": "CTDE_lADOABII586CvrSDzwAAAAOJV6iy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15189125298",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T18:23:02Z"
    },
    {
      "event": "commented",
      "id": 2462937879,
      "node_id": "IC_kwDOABII586SzXMX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462937879",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T18:23:53Z",
      "updated_at": "2024-11-07T18:23:53Z",
      "author_association": "MEMBER",
      "body": "Several earlier commits have been split out into separate PRs. See the tracking issue #31246 for the breakdown.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2462937879",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15189155859,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOJWCAT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15189155859",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bd438b9ee04d9eec287b3de47e7e2c1a5c9ef522",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/bd438b9ee04d9eec287b3de47e7e2c1a5c9ef522",
      "created_at": "2024-11-07T18:24:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15190662419,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOJbx0T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15190662419",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3649c2eb2053a0c166c68beb310c9c64ddc5b273",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/3649c2eb2053a0c166c68beb310c9c64ddc5b273",
      "created_at": "2024-11-07T19:21:37Z"
    },
    {
      "event": "commented",
      "id": 2463719253,
      "node_id": "IC_kwDOABII586S2V9V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2463719253",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T04:12:44Z",
      "updated_at": "2024-11-08T04:12:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Given BIP373 doesn't have test vectors, it would be very useful that either this PR or the BIP include some hard coded PSBT examples to ensure every implementations are on the same page.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2463719253",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2500731539,
      "node_id": "IC_kwDOABII586VDiKT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2500731539",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T12:54:44Z",
      "updated_at": "2024-11-26T12:54:44Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\n> Given BIP373 doesn't have test vectors, it would be very useful that either this PR or the BIP include some hard coded PSBT examples to ensure every implementations are on the same page.\r\n\r\nGood point (the BIP373 test vector section currently states \"TBD\" and seems worth completing even if the implementation here also has tests).",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2500731539",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2501141395,
      "node_id": "IC_kwDOABII586VFGOT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2501141395",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T15:24:48Z",
      "updated_at": "2024-11-26T16:37:12Z",
      "author_association": "MEMBER",
      "body": "It might be useful if someone expands `doc/multisig-tutorial.md` to add a MuSig2 section. That doesn't have to go in this PR, but it will make testing and review easier. The functional test added in this PR can be used for inspiration.\r\n\r\nIt can take advantage of the new `<0;1>` syntax and the new `gethdkeys` RPC.\r\n\r\nI was able to generate a simple 2-of-2 `tr(musig(A,B)/<0;1>/*)` watch-only wallet on testnet4 and receive to it. Keys A and B were extracted from regular wallets by taking the `pkh()` account level xpub, including its origin.\r\n\r\nHowever when trying to send `walletprocesspsbt` (with the wallet that has private keys) does not add any fields.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2501141395",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2514050392,
      "node_id": "IC_kwDOABII586V2V1Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2514050392",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T09:49:30Z",
      "updated_at": "2024-12-03T09:49:30Z",
      "author_association": "MEMBER",
      "body": "I also tried @bigspider's MooSig demo which worked. I then crafted a multisig between A and the device: `tr(musig(A,L)/<0;1>/*)`. I managed to register the policy (after several mistakes, it's very tedious to do this manually).\r\n\r\nI wanted to try using HWI to display the address, but I would have to modify it to work with the test app. I just yolo funded it.\r\n\r\nI then created a withdrawal PSBT and pasted it in the Moosig script, modifying it to only add its public nonce. I also hardcoded the registered hmac. The device recognized the account being spent from. I can see that `musig2_pubnonces` was added to the PSBT.\r\n\r\nI then ran it through walletprocesspsbt in wallet A. The resulting PSBT was longer, but it didn't add its nonce to `musig2_pubnonces`.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2514050392",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15506628741,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOcRGCF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15506628741",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T09:49:31Z"
    },
    {
      "event": "subscribed",
      "id": 15506628759,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOcRGCX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15506628759",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T09:49:31Z"
    },
    {
      "event": "commented",
      "id": 2514087290,
      "node_id": "IC_kwDOABII586V2e16",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2514087290",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T10:02:13Z",
      "updated_at": "2024-12-03T11:13:45Z",
      "author_association": "MEMBER",
      "body": "Looking at the functional tests in 3649c2eb2053a0c166c68beb310c9c64ddc5b273 it seems the way this is designed to work is by swapping out the active `tr([m/86'/1'/0']xpriv/<0;1>)/*` descriptor for `tr(musig([m/86'/1'/0']xpriv,other,other)/<0;1>)/*`.\r\n\r\nI guess that's fine for the purpose of getting MuSig2 functionality in for experimental use, but it seems a bit unsafe and confusing for general use.\r\n\r\nThe test could make the intention a bit more clear by starting with blank wallets, only adding a `tr()` descriptor and mentioning in a comment that we just want its keys.\r\n\r\n---\r\n\r\nSo instead of creating a watch-only wallet, I created a blank wallet. I imported the same `tr(musig(A,L)/<0;1>/*)` descriptor, but using the xpriv instead of xpub for A. It found the deposited coin. This time I started the withdrawal from the Core, so the Moosig could do its two calls to device in quick succession.\r\n\r\nEven though I had \"enable PSBT controls\" selected, the GUI did not give me a chance to create a PSBT and immediately complained \"Signing transaction failed\" after I clicked \"Send\".\r\n\r\nThe `send` RPC did work though it didn't add a nonce. I had to use `walletprocesspsbt` for that. \r\n\r\nI fed the result to Moosig `generate_public_nonces` and `generate_partial_signatures`. I fed the result to `walletprocesspsbt` et voila! Money back.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2514087290",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2514970384,
      "node_id": "IC_kwDOABII586V52cQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2514970384",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T16:03:17Z",
      "updated_at": "2024-12-03T16:03:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @Sjors for testing the app!\r\n\r\nI just updated it with a new version (`Bitcoin Test Musig v2.4.0-rc`):\r\n- Some bug fixes for more complex policies. Testing is still not extensive, but it should work for all combinations of musig and miniscript (with the due limits to the policy size; currently, at most 5 keys for MuSig2).\r\n- If a psbt is sent where _only MuSig2 round 1_ is executed (no signatures returned), the app will return pubnonces _with no user interaction_. Note that if there are other internal keys in the wallet policy for whom the `PSBT_IN_TAP_BIP32_DERIVATION` is present, then the device will sign for those, and in that case confirmation is of course still required.\r\n\r\nAlso a quick note that I made a [PR to add support for musig in BIP-388](https://github.com/bitcoin/bips/pull/1697) wallet policies - comments welcome.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2514970384",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15512316333,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOcmymt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15512316333",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T16:03:21Z"
    },
    {
      "event": "subscribed",
      "id": 15512316359,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOcmynH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15512316359",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T16:03:21Z"
    },
    {
      "event": "labeled",
      "id": 15687543483,
      "node_id": "LE_lADOABII586CvrSDzwAAAAOnDOq7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15687543483",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T15:05:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2553746288,
      "node_id": "IC_kwDOABII586YNxNw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2553746288",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T12:42:32Z",
      "updated_at": "2024-12-19T14:19:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey guys, we've successfully integrated this into Nunchuk, so you should be able to test this out with actual UI/UX very soon.\r\n\r\nMuSig2 key path spend: https://mempool.space/tx/69c75aa798e03dbe782c9a11eed316440fa2a4cb9c4645af2f5d8d566c04207b?mode=details\r\n\r\nMuSig2 script path spend: https://mempool.space/tx/73f63684994477924105966e646427f7fc802352d9ba9d1baebf05b1f3dc3fab?mode=details\r\n\r\nSample descriptors:\r\n`tr(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/**,[7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/**),{{{pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/**,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/**)),pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/**,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/**))},{pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/**,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/**)),pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/**,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/**))}},pk(musig([07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/**,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/**))})`\r\n",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2553746288",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "unlabeled",
      "id": 15740884681,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAOqOtbJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15740884681",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-22T05:38:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2565454379,
      "node_id": "IC_kwDOABII586Y6bor",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2565454379",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T13:00:34Z",
      "updated_at": "2024-12-30T13:00:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2565454379",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2571317126,
      "node_id": "IC_kwDOABII586ZQy-G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571317126",
      "actor": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T14:18:28Z",
      "updated_at": "2025-01-04T14:18:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "@hugohn Great work!\r\n\r\nDoes `/**` in descriptors mean a combination of `/0/*` and `/1/*`? I.e. a receive and a change descriptor.",
      "user": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2571317126",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15815593488,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOurs4Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15815593488",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T14:18:30Z"
    },
    {
      "event": "subscribed",
      "id": 15815593493,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOurs4V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15815593493",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T14:18:30Z"
    },
    {
      "event": "commented",
      "id": 2571350247,
      "node_id": "IC_kwDOABII586ZQ7Dn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571350247",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T16:35:30Z",
      "updated_at": "2025-01-04T16:35:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "@starius Kind of. We build on top of the descriptor template defined in [BIP 129 (BSMS)](https://github.com/bitcoin/bips/blob/master/bip-0129.mediawiki#user-content-Descriptor_Template). The above snippet is part of a larger BSMS wallet configuration file, which includes derivation path restrictions.\r\n\r\n",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2571350247",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15815812720,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOusiZw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15815812720",
      "actor": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T16:35:31Z"
    },
    {
      "event": "subscribed",
      "id": 15815812722,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOusiZy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15815812722",
      "actor": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T16:35:31Z"
    },
    {
      "event": "commented",
      "id": 2571430256,
      "node_id": "IC_kwDOABII586ZROlw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571430256",
      "actor": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T22:41:59Z",
      "updated_at": "2025-01-04T22:41:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "@hugohn I built bitcoin core using this PR rebased on master.\r\nI tried the descriptor from your message, replacing `/**/` with `/0/*` and `/1/*`. It works!\r\n\r\n```\r\ngetdescriptorinfo \"tr(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*),{{{pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*)),pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))},{pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*)),pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))}},pk(musig([07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))})\"\r\n{\r\n  \"descriptor\": \"tr(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*),{{{pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*)),pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))},{pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*)),pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))}},pk(musig([07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))})#eywenfaf\",\r\n  \"checksum\": \"eywenfaf\",\r\n  \"isrange\": true,\r\n  \"issolvable\": true,\r\n  \"hasprivatekeys\": false\r\n}\r\n\r\nderiveaddresses \"tr(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*),{{{pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*)),pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))},{pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*)),pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))}},pk(musig([07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/0/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/0/*))})#eywenfaf\" 0\r\n[\r\n  \"bc1psdmetx4vudkwte82duvxdn6np9z64njp9d9qd55ffeh5x3jey0gqmr25nu\"\r\n]\r\n\r\n\r\n\r\ngetdescriptorinfo \"tr(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*),{{{pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*)),pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))},{pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*)),pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))}},pk(musig([07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))})\"\r\n{\r\n  \"descriptor\": \"tr(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*),{{{pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*)),pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))},{pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*)),pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))}},pk(musig([07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))})#7q32hxqs\",\r\n  \"checksum\": \"7q32hxqs\",\r\n  \"isrange\": true,\r\n  \"issolvable\": true,\r\n  \"hasprivatekeys\": false\r\n}\r\n\r\n\r\nderiveaddresses \"tr(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*),{{{pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*)),pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))},{pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*)),pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))}},pk(musig([07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/1/*,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/1/*))})#7q32hxqs\" 0\r\n[\r\n  \"bc1pfx72zmfwx34tcay26l3g4sm4unypjnqqmrnxt9hdjg5t4xy03ufshc6e8k\"\r\n]\r\n```\r\n\r\nThis is how I generated addressed [bc1psdmetx4vudkwte82duvxdn6np9z64njp9d9qd55ffeh5x3jey0gqmr25nu](https://mempool.space/address/bc1psdmetx4vudkwte82duvxdn6np9z64njp9d9qd55ffeh5x3jey0gqmr25nu) and [bc1pfx72zmfwx34tcay26l3g4sm4unypjnqqmrnxt9hdjg5t4xy03ufshc6e8k](https://mempool.space/address/bc1pfx72zmfwx34tcay26l3g4sm4unypjnqqmrnxt9hdjg5t4xy03ufshc6e8k) used in the transactions that you posted.\r\n\r\nThat is a really cool stuff! Many thanks!",
      "user": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2571430256",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15816298109,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOuuY59",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15816298109",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T22:42:01Z"
    },
    {
      "event": "subscribed",
      "id": 15816298111,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOuuY5_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15816298111",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T22:42:01Z"
    },
    {
      "event": "commented",
      "id": 2571431685,
      "node_id": "IC_kwDOABII586ZRO8F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571431685",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T22:50:05Z",
      "updated_at": "2025-01-04T22:50:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @starius Kind of. We build on top of the descriptor template defined in [BIP 129 (BSMS)](https://github.com/bitcoin/bips/blob/master/bip-0129.mediawiki#user-content-Descriptor_Template). The above snippet is part of a larger BSMS wallet configuration file, which includes derivation path restrictions.\r\n\r\n@hugohn: FYI [BIP-388](https://github.com/bitcoin/bips/blob/master/bip-0388.mediawiki) generalizes descriptor templates to arbitrary wallets, including with miniscript and musig; it should be entirely compatible with the special cases defined in BIP-129 for multisig.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2571431685",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15816306630,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOuua_G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15816306630",
      "actor": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T22:50:06Z"
    },
    {
      "event": "subscribed",
      "id": 15816306634,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOuua_K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15816306634",
      "actor": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T22:50:06Z"
    },
    {
      "event": "mentioned",
      "id": 15816306636,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOuua_M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15816306636",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T22:50:06Z"
    },
    {
      "event": "subscribed",
      "id": 15816306640,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOuua_Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15816306640",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T22:50:06Z"
    },
    {
      "event": "commented",
      "id": 2571497025,
      "node_id": "IC_kwDOABII586ZRe5B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571497025",
      "actor": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-05T04:28:45Z",
      "updated_at": "2025-01-05T04:28:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "I attempted to test this on Signet with a 2-of-2 MuSig2 Taproot address (without script leaves).\r\n\r\nSucceeded using `walletprocesspsbt`, but failed when using GUI \"Load PSBT from keyboard\" option.\r\n\r\n**Setup:**  \r\n- **Node 1**: Watch-only, connected to the network.  \r\n- **Node 2**: Offline, holds the first private key.  \r\n- **Node 3**: Offline, holds the second private key.\r\n\r\n**Steps to Reproduce:**  \r\n\r\n1. Imported descriptors for each node:  \r\n\r\n```\r\nnode 2 (first private key):\r\nimportdescriptors '[{\r\n  \"desc\": \"tr(musig(tprv8ZgxMBicQKsPdRg438LnQj6Fpx1vR6uSwJ3Nda2cZ3oqLqQwT2eae4DcnPNWLc6n8WbXceFuUPGL2QuPCb1DRp9UBsmxbAk8BqDuUZZWWLw/86h/1h/0h/0/*,[370c1c18/86h/1h/0h]tpubDCgnZAFGxVZ5AVLcjCGkLX7sNb85itosYgy25KSPHpM7hCDCwBBn3b9tdHvD9x9DnCrGedGu7gBkRjiAaUFuZJpGUu6s3YerC5KvSCA9NqB/0/*))#l68aglxt\",\r\n  \"active\": true,\r\n  \"internal\": false,\r\n  \"range\": 1000,\r\n  \"timestamp\": \"now\"\r\n}, {\r\n  \"desc\": \"tr(musig(tprv8ZgxMBicQKsPdRg438LnQj6Fpx1vR6uSwJ3Nda2cZ3oqLqQwT2eae4DcnPNWLc6n8WbXceFuUPGL2QuPCb1DRp9UBsmxbAk8BqDuUZZWWLw/86h/1h/0h/1/*,[370c1c18/86h/1h/0h]tpubDCgnZAFGxVZ5AVLcjCGkLX7sNb85itosYgy25KSPHpM7hCDCwBBn3b9tdHvD9x9DnCrGedGu7gBkRjiAaUFuZJpGUu6s3YerC5KvSCA9NqB/1/*))#umlr3wjn\",\r\n  \"active\": true,\r\n  \"internal\": true,\r\n  \"range\": 1000,\r\n  \"timestamp\": \"now\"\r\n}]'\r\n\r\nnode 3 (second private key):\r\nimportdescriptors '[{\r\n  \"desc\": \"tr(musig([a59b4dab/86h/1h/0h]tpubDCwHkWFDhGWHMRaR7U9awzmVYnD4PsmM5kn8E5qMQFptGLLddvmZnhEgqMJ4NP1Bg8UwVcRy6M1rHVCpjiAp7WT2NYBVz8fppCfot7aBtwC/0/*,tprv8ZgxMBicQKsPet5Q2PMpAdv2NeA1siXwywqxRMFvQcuYQCMf39uc9BAvBMNpNxyNqDLPcWv1NrxGsFwvhUN7FStVZj5u78j3x4wGMsNFfgf/86h/1h/0h/0/*))#lhmv3sth\",\r\n  \"active\": true,\r\n  \"internal\": false,\r\n  \"range\": 1000,\r\n  \"timestamp\": \"now\"\r\n}, {\r\n  \"desc\": \"tr(musig([a59b4dab/86h/1h/0h]tpubDCwHkWFDhGWHMRaR7U9awzmVYnD4PsmM5kn8E5qMQFptGLLddvmZnhEgqMJ4NP1Bg8UwVcRy6M1rHVCpjiAp7WT2NYBVz8fppCfot7aBtwC/1/*,tprv8ZgxMBicQKsPet5Q2PMpAdv2NeA1siXwywqxRMFvQcuYQCMf39uc9BAvBMNpNxyNqDLPcWv1NrxGsFwvhUN7FStVZj5u78j3x4wGMsNFfgf/86h/1h/0h/1/*))#rmh783wt\",\r\n  \"active\": true,\r\n  \"internal\": true,\r\n  \"range\": 1000,\r\n  \"timestamp\": \"now\"\r\n}]'\r\n\r\nnode 1 (watch only):\r\nimportdescriptors '[{\r\n  \"desc\": \"tr(musig([a59b4dab/86h/1h/0h]tpubDCwHkWFDhGWHMRaR7U9awzmVYnD4PsmM5kn8E5qMQFptGLLddvmZnhEgqMJ4NP1Bg8UwVcRy6M1rHVCpjiAp7WT2NYBVz8fppCfot7aBtwC/0/*,[370c1c18/86h/1h/0h]tpubDCgnZAFGxVZ5AVLcjCGkLX7sNb85itosYgy25KSPHpM7hCDCwBBn3b9tdHvD9x9DnCrGedGu7gBkRjiAaUFuZJpGUu6s3YerC5KvSCA9NqB/0/*))#fmwctz5x\",\r\n  \"active\": true,\r\n  \"internal\": false,\r\n  \"range\": 1000,\r\n  \"timestamp\": \"now\"\r\n}, {\r\n  \"desc\": \"tr(musig([a59b4dab/86h/1h/0h]tpubDCwHkWFDhGWHMRaR7U9awzmVYnD4PsmM5kn8E5qMQFptGLLddvmZnhEgqMJ4NP1Bg8UwVcRy6M1rHVCpjiAp7WT2NYBVz8fppCfot7aBtwC/1/*,[370c1c18/86h/1h/0h]tpubDCgnZAFGxVZ5AVLcjCGkLX7sNb85itosYgy25KSPHpM7hCDCwBBn3b9tdHvD9x9DnCrGedGu7gBkRjiAaUFuZJpGUu6s3YerC5KvSCA9NqB/1/*))#qnx2rsgm\",\r\n  \"active\": true,\r\n  \"internal\": true,\r\n  \"range\": 1000,\r\n  \"timestamp\": \"now\"\r\n}]'\r\n```\r\n\r\n2. Generated the same address across all nodes:\r\n\r\n```\r\ngetnewaddress first bech32m\r\ntb1pjtz0kg2xz263m6gg6tdgemratx8yucec475jrmq986ae9x8c20dqwux9lm\r\n```\r\n\r\n3. I [funded](https://mempool.space/signet/tx/3deb4d61830f6a89eef9a20444e652fe22b6b99900f7468d96366dc111aeaeb0) the address with 10k signet sats.\r\n\r\n4. Then I tried to spend the funds.\r\nI created an unsigned transaction on node 1 using Send GUI.\r\n\r\n```\r\ncHNidP8BAFMCAAAAAbCurhHBbTaWjUb3AJm5tiL+UuZEBKL57olqD4NhTes9AQAAAAD9////ARwlAAAAAAAAF6kULPYzwL1RJx2z4JbkdKLDC7WTsXWHTYADAAABASsQJwAAAAAAACJRIJLE+yFGErUd6QjS2ozsfVmOTmM4r6kh7AU+u5KY+FPaIRbIQKO0UExrrtpBwA4TAlMFYcEXqcWaXTJrp+ZvBuNbrxkANwwcGFYAAIABAACAAAAAgAAAAAAAAAAAIRbP5CTNgLooVS8JstkMC+dZTu09WKpyDXreYc7rJbloExkApZtNq1YAAIABAACAAAAAgAAAAAAAAAAAIRbdYILLif9F1ydNUxjrADeL+Zq3omPmImN4D35ckFJkBQUA7CwezwEXIN1ggsuJ/0XXJ01TGOsAN4v5mreiY+YiY3gPflyQUmQFIhoC3WCCy4n/RdcnTVMY6wA3i/mat6Jj5iJjeA9+XJBSZAVCAshAo7RQTGuu2kHADhMCUwVhwRepxZpdMmun5m8G41uvA8/kJM2AuihVLwmy2QwL51lO7T1YqnINet5hzusluWgTAAA=\r\n```\r\n\r\nI copied it to node 2, loaded PSBT there, signed,\r\nthen copied to node 3, loaded PSBT there, signed,\r\nthen copied to node 2, loaded PSBT there, signed,\r\nthen copied to node 3, loaded PSBT there, signed.\r\n\r\n5. Resulting PSBT:\r\n\r\n```\r\ncHNidP8BAFMCAAAAAbCurhHBbTaWjUb3AJm5tiL+UuZEBKL57olqD4NhTes9AQAAAAD9////ARwlAAAAAAAAF6kULPYzwL1RJx2z4JbkdKLDC7WTsXWHTYADAAABASsQJwAAAAAAACJRIJLE+yFGErUd6QjS2ozsfVmOTmM4r6kh7AU+u5KY+FPaARNAfM5w41qiYZnRTghSR1I5mkMl3Em7oqR8NJZjOofQDPV1LOcK3bs8Ibfs+W+pKyLIq2CqiC1uaQYHfC8xgQ1CWyEWyECjtFBMa67aQcAOEwJTBWHBF6nFml0ya6fmbwbjW68ZADcMHBhWAACAAQAAgAAAAIAAAAAAAAAAACEWz+QkzYC6KFUvCbLZDAvnWU7tPViqcg163mHO6yW5aBMZAKWbTatWAACAAQAAgAAAAIAAAAAAAAAAACEW3WCCy4n/RdcnTVMY6wA3i/mat6Jj5iJjeA9+XJBSZAUFAOwsHs8BFyDdYILLif9F1ydNUxjrADeL+Zq3omPmImN4D35ckFJkBSIaAt1ggsuJ/0XXJ01TGOsAN4v5mreiY+YiY3gPflyQUmQFQgLIQKO0UExrrtpBwA4TAlMFYcEXqcWaXTJrp+ZvBuNbrwPP5CTNgLooVS8JstkMC+dZTu09WKpyDXreYc7rJbloE0MbAshAo7RQTGuu2kHADhMCUwVhwRepxZpdMmun5m8G41uvApLE+yFGErUd6QjS2ozsfVmOTmM4r6kh7AU+u5KY+FPaQgNDOrym8PtabR9c5PgAgqhpNiY8OkwD7sX7qVZh8Tg/UAP0lrxYDDIFzWAkcHcUiH++b96c4MMrEpuI/ng9E0qEYkMbA8/kJM2AuihVLwmy2QwL51lO7T1YqnINet5hzusluWgTApLE+yFGErUd6QjS2ozsfVmOTmM4r6kh7AU+u5KY+FPaQgIOALVOKGFjNXOJc6BswdpoDlwdEjuB0MsUost132owmAJs9dBiyOnSBpsWZpuqBd0GROS/aqh3MBGFqQUa/LrM20McAshAo7RQTGuu2kHADhMCUwVhwRepxZpdMmun5m8G41uvApLE+yFGErUd6QjS2ozsfVmOTmM4r6kh7AU+u5KY+FPaIGsO4eRmAJAXw2HtTCZcgNtugDuJS8Xkk+2WncNVRyZAQxwDz+QkzYC6KFUvCbLZDAvnWU7tPViqcg163mHO6yW5aBMCksT7IUYStR3pCNLajOx9WY5OYzivqSHsBT67kpj4U9ogTcmLQbWqMoPInXc7RgmBw5TdMyaZ4Cq9Euidd8LGVsEAAA==\r\n```\r\n\r\nDecoded version:\r\n```\r\n{\r\n  \"tx\": {\r\n    \"txid\": \"e7b6cc769c03ff4c4ade13aa8d912e0a5eaa5aa5a7c73df5a297f2acc6c5aeba\",\r\n    \"hash\": \"e7b6cc769c03ff4c4ade13aa8d912e0a5eaa5aa5a7c73df5a297f2acc6c5aeba\",\r\n    \"version\": 2,\r\n    \"size\": 83,\r\n    \"vsize\": 83,\r\n    \"weight\": 332,\r\n    \"locktime\": 229453,\r\n    \"vin\": [\r\n      {\r\n        \"txid\": \"3deb4d61830f6a89eef9a20444e652fe22b6b99900f7468d96366dc111aeaeb0\",\r\n        \"vout\": 1,\r\n        \"scriptSig\": {\r\n          \"asm\": \"\",\r\n          \"hex\": \"\"\r\n        },\r\n        \"sequence\": 4294967293\r\n      }\r\n    ],\r\n    \"vout\": [\r\n      {\r\n        \"value\": 0.00009500,\r\n        \"n\": 0,\r\n        \"scriptPubKey\": {\r\n          \"asm\": \"OP_HASH160 2cf633c0bd51271db3e096e474a2c30bb593b175 OP_EQUAL\",\r\n          \"desc\": \"addr(2MwLxf9gM6RHdkyhm5hqJ4zwBj66YkkqkVU)#96wqgez4\",\r\n          \"hex\": \"a9142cf633c0bd51271db3e096e474a2c30bb593b17587\",\r\n          \"address\": \"2MwLxf9gM6RHdkyhm5hqJ4zwBj66YkkqkVU\",\r\n          \"type\": \"scripthash\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"global_xpubs\": [\r\n  ],\r\n  \"psbt_version\": 0,\r\n  \"proprietary\": [\r\n  ],\r\n  \"unknown\": {\r\n  },\r\n  \"inputs\": [\r\n    {\r\n      \"witness_utxo\": {\r\n        \"amount\": 0.00010000,\r\n        \"scriptPubKey\": {\r\n          \"asm\": \"1 92c4fb214612b51de908d2da8cec7d598e4e6338afa921ec053ebb9298f853da\",\r\n          \"desc\": \"rawtr(92c4fb214612b51de908d2da8cec7d598e4e6338afa921ec053ebb9298f853da)#3uy4ake4\",\r\n          \"hex\": \"512092c4fb214612b51de908d2da8cec7d598e4e6338afa921ec053ebb9298f853da\",\r\n          \"address\": \"tb1pjtz0kg2xz263m6gg6tdgemratx8yucec475jrmq986ae9x8c20dqwux9lm\",\r\n          \"type\": \"witness_v1_taproot\"\r\n        }\r\n      },\r\n      \"taproot_key_path_sig\": \"7cce70e35aa26199d14e08524752399a4325dc49bba2a47c3496633a87d00cf5752ce70addbb3c21b7ecf96fa92b22c8ab60aa882d6e6906077c2f31810d425b\",\r\n      \"taproot_bip32_derivs\": [\r\n        {\r\n          \"pubkey\": \"c840a3b4504c6baeda41c00e1302530561c117a9c59a5d326ba7e66f06e35baf\",\r\n          \"master_fingerprint\": \"370c1c18\",\r\n          \"path\": \"m/86h/1h/0h/0/0\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        },\r\n        {\r\n          \"pubkey\": \"cfe424cd80ba28552f09b2d90c0be7594eed3d58aa720d7ade61ceeb25b96813\",\r\n          \"master_fingerprint\": \"a59b4dab\",\r\n          \"path\": \"m/86h/1h/0h/0/0\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        },\r\n        {\r\n          \"pubkey\": \"dd6082cb89ff45d7274d5318eb00378bf99ab7a263e62263780f7e5c90526405\",\r\n          \"master_fingerprint\": \"ec2c1ecf\",\r\n          \"path\": \"m\",\r\n          \"leaf_hashes\": [\r\n          ]\r\n        }\r\n      ],\r\n      \"taproot_internal_key\": \"dd6082cb89ff45d7274d5318eb00378bf99ab7a263e62263780f7e5c90526405\",\r\n      \"musig2_participant_pubkeys\": [\r\n        {\r\n          \"aggregate_pubkey\": \"02dd6082cb89ff45d7274d5318eb00378bf99ab7a263e62263780f7e5c90526405\",\r\n          \"participant_pubkeys\": [\r\n            \"02c840a3b4504c6baeda41c00e1302530561c117a9c59a5d326ba7e66f06e35baf\",\r\n            \"03cfe424cd80ba28552f09b2d90c0be7594eed3d58aa720d7ade61ceeb25b96813\"\r\n          ]\r\n        }\r\n      ],\r\n      \"musig2_pubnonces\": [\r\n        {\r\n          \"participant_pubkey\": \"02c840a3b4504c6baeda41c00e1302530561c117a9c59a5d326ba7e66f06e35baf\",\r\n          \"aggregate_pubkey\": \"0292c4fb214612b51de908d2da8cec7d598e4e6338afa921ec053ebb9298f853da\",\r\n          \"pubnonce\": \"03433abca6f0fb5a6d1f5ce4f80082a86936263c3a4c03eec5fba95661f1383f5003f496bc580c3205cd6024707714887fbe6fde9ce0c32b129b88fe783d134a8462\"\r\n        },\r\n        {\r\n          \"participant_pubkey\": \"03cfe424cd80ba28552f09b2d90c0be7594eed3d58aa720d7ade61ceeb25b96813\",\r\n          \"aggregate_pubkey\": \"0292c4fb214612b51de908d2da8cec7d598e4e6338afa921ec053ebb9298f853da\",\r\n          \"pubnonce\": \"020e00b54e28616335738973a06cc1da680e5c1d123b81d0cb14a2cb75df6a3098026cf5d062c8e9d2069b16669baa05dd0644e4bf6aa877301185a9051afcbaccdb\"\r\n        }\r\n      ],\r\n      \"musig2_partial_sigs\": [\r\n        {\r\n          \"participant_pubkey\": \"02c840a3b4504c6baeda41c00e1302530561c117a9c59a5d326ba7e66f06e35baf\",\r\n          \"aggregate_pubkey\": \"0292c4fb214612b51de908d2da8cec7d598e4e6338afa921ec053ebb9298f853da\",\r\n          \"partial_sig\": \"6b0ee1e466009017c361ed4c265c80db6e803b894bc5e493ed969dc355472640\"\r\n        },\r\n        {\r\n          \"participant_pubkey\": \"03cfe424cd80ba28552f09b2d90c0be7594eed3d58aa720d7ade61ceeb25b96813\",\r\n          \"aggregate_pubkey\": \"0292c4fb214612b51de908d2da8cec7d598e4e6338afa921ec053ebb9298f853da\",\r\n          \"partial_sig\": \"4dc98b41b5aa3283c89d773b460981c394dd332699e02abd12e89d77c2c656c1\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"outputs\": [\r\n    {\r\n    }\r\n  ],\r\n  \"fee\": 0.00000500\r\n}\r\n```\r\n\r\n**Issue:**  \r\nDespite including a `taproot_key_path_sig`, the transaction remains incomplete. Why?\r\n\r\nWhen I use `walletprocesspsbt` instead of GUI for nonce exchange and signing (4 times), the process completes and I get a hex encoded final transaction.\r\n\r\nAny insights or clarifications on this would be appreciated!  ",
      "user": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2571497025",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2571716425,
      "node_id": "IC_kwDOABII586ZSUdJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571716425",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-05T18:44:04Z",
      "updated_at": "2025-01-05T18:47:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Sample descriptors: `tr(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/**,[7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/**),{{{pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/**,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/**)),pk(musig([15d62cdf/87'/0'/0']xpub6CpM1svHYyNMTVdmDh5syFXCJHKctJNajbyLEdA8pAgAeg1jotmg9G1aVkND5Rzf37uhwhs8o2Lvq22iRpWwcbNGCrYxAozQfYQYi1eduES/**,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/**))},{pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/**,[07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/**)),pk(musig([7f15646b/87'/0'/0']xpub6ChFTmSdBrhN3D16Rna7hJVQe4w56Gx83U4uNhT3oJaEXiPv7LKnY2gXi3FbbusCb145c3SMEUsSLMRdkxa82MNKqkatnK5b77BXPc3aK8h/**,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/**))}},pk(musig([07895d1c/87'/0'/0']xpub6DF4oz8Ws6Qcd87qKeKFJCMMvcY3X8vQkS5uQE6P5GxCjNE6XfCeak8xc7VUWjUnH4W1N9rmyjVrUHS5S5odkipXkH8G3VGqVoqoRJzL3UZ/**,[17f48baa/87'/0'/0']xpub6DQGEWSeUwmDE9HHzV3Biwj6VWxJj3VkGjefC7zqRJWM1xTU1s5dozA7DNty3ZniaejgLZBPVhsmrR88cpAeW8E3yieJHhfkPVDmAtuhkym/**))})`\r\n\r\n@hugohn: Update: I notice now that you are using the derive-then-aggregate pattern (`musig(xpub1/**,xpub2/**,...)`), instead of the aggregate-then-derive one: (`musig(xpub1,xpub2,...)/**`); therefore, contrarily to what I claimed above, it is not compatible with BIP-388, which only supports the latter.\r\n\r\nDescriptors, as currently specified, support both, which I think it's unfortunate.\r\n\r\nI recommend using the aggregate-then-derive pattern as it is going to be a lot more efficient in hardware signing devices - and the only one compatible with BIP-388.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2571716425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15817970799,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOu0xRv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15817970799",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-05T18:44:06Z"
    },
    {
      "event": "subscribed",
      "id": 15817970802,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOu0xRy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15817970802",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-05T18:44:06Z"
    },
    {
      "event": "commented",
      "id": 2572082601,
      "node_id": "IC_kwDOABII586ZTt2p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2572082601",
      "actor": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T02:22:08Z",
      "updated_at": "2025-01-06T02:22:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @bigspider , we’ll take a look.\r\n\r\nOur main concern would be compatibility with other wallets. Do you know what wallets support BIP-388 right now (besides Ledger)? Does Sparrow support it?",
      "user": {
        "login": "hugohn",
        "id": 4769925,
        "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hugohn",
        "html_url": "https://github.com/hugohn",
        "followers_url": "https://api.github.com/users/hugohn/followers",
        "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
        "organizations_url": "https://api.github.com/users/hugohn/orgs",
        "repos_url": "https://api.github.com/users/hugohn/repos",
        "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hugohn/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2572082601",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15819964501,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOu8YBV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15819964501",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T02:22:12Z"
    },
    {
      "event": "subscribed",
      "id": 15819964515,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOu8YBj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15819964515",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T02:22:12Z"
    },
    {
      "event": "commented",
      "id": 2572540702,
      "node_id": "IC_kwDOABII586ZVdse",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2572540702",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T08:22:21Z",
      "updated_at": "2025-01-06T08:22:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Thanks @bigspider , we’ll take a look.\r\n> \r\n> Our main concern would be compatibility with other wallets. Do you know what wallets support BIP-388 right now (besides Ledger)? Does Sparrow support it?\r\n\r\nBIP-388 is the base for the miniscript implementation used currently in Ledger, BitBox and Jade.\r\nSparrow only supports the standard multisig types, and I suppose it works with most devices.\r\n\r\nThe `musig` part of BIP-388 is currently only implemented in Ledger in a test application (details [here](https://github.com/LedgerHQ/moosig)), and should reach production this quarter.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2572540702",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15822891626,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOvHipq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15822891626",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T08:22:22Z"
    },
    {
      "event": "subscribed",
      "id": 15822891643,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOvHip7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15822891643",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T08:22:22Z"
    },
    {
      "event": "commented",
      "id": 2572662414,
      "node_id": "IC_kwDOABII586ZV7aO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2572662414",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T09:25:05Z",
      "updated_at": "2025-01-06T09:25:05Z",
      "author_association": "MEMBER",
      "body": "Maybe we should have a wallet or `importdescriptors` flag that restricts imported descriptors to BIP-388? Whether to make that the default would be a separate debate.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2572662414",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15831007562,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAOvmgFK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15831007562",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2da3f0e659d3e89da0cdf525f8ce370bb35365a1",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/2da3f0e659d3e89da0cdf525f8ce370bb35365a1",
      "created_at": "2025-01-06T21:15:28Z"
    },
    {
      "event": "commented",
      "id": 2573944915,
      "node_id": "IC_kwDOABII586Za0hT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2573944915",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T21:19:03Z",
      "updated_at": "2025-01-06T21:19:03Z",
      "author_association": "MEMBER",
      "body": "> Succeeded using `walletprocesspsbt`, but failed when using GUI \"Load PSBT from keyboard\" option.\r\n\r\nThanks for testing! This revealed an issue with sighash type handling in the aggregation code. I've pushed a fix for it, as well as a functional test which could replicate the issue with `walletprocesspsbt`.\r\n\r\nThis fix does require changing how we handle non-default sighash types - namely we now will add `PSBT_IN_SIGHASH` to an input if we are trying to sign it with something other than SIGHASH_DEFAULT (note that SIGHASH_DEFAULT == SIGHASH_ALL for non-taproot, so the normal non-taproot won't have this field added, unless SIGHASH_ALL was explicitly specified on the command line).",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2573944915",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2574305884,
      "node_id": "IC_kwDOABII586ZcMpc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2574305884",
      "actor": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T03:08:36Z",
      "updated_at": "2025-01-07T03:08:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@achow101 I tried the updated version (2da3f0e659d3e89da0cdf525f8ce370bb35365a1).\r\nI tested GUI flow - it works the same (doesn't produce a transaction).\r\nI also re-tested `walletprocesspsbt` flow - now it is also broken:\r\n\r\n```\r\nwalletprocesspsbt \"cHNidP8BAH4CAAAAAfkoG4WU8+OG7ihR9ax1V+NQK6C9ZIEbsNH8qfB/A90YAAAAAAD9////AlcDAAAAAAAAF6kUp6q1daWOXVcRwue0FRtYgEAxvTCHKCMAAAAAAAAiUSBug0N9qhtsEJizov7RUbZtdDokLCvlo5+zNl+ocwJn636BAwAAAQErECcAAAAAAAAiUSBZP7q1V48G5XegaVSU+plRyc0hddLNxEwKjgaxGnEVXwEDBAEAAAAhFkNN5PloHAjb0E0osBGFERJSFPdYILJBOGBJ2JaPanvHBQBF3NXJIRZv7RyVBRBNtuBaMSje0M/TrzPCwWIAwsFJNQSMJyagTBkANwwcGFYAAIABAACAAAAAgAAAAAACAAAAIRbk+7os0tinqFncH2A0ptli9Ee0Bworam/Red00sAzNTxkApZtNq1YAAIABAACAAAAAgAAAAAACAAAAARcgQ03k+WgcCNvQTSiwEYURElIU91ggskE4YEnYlo9qe8ciGgNDTeT5aBwI29BNKLARhRESUhT3WCCyQThgSdiWj2p7x0IC5Pu6LNLYp6hZ3B9gNKbZYvRHtAcKK2pv0XndNLAMzU8Db+0clQUQTbbgWjEo3tDP068zwsFiAMLBSTUEjCcmoEwAAAEFIM2w2fouNow30T2TaXy1RedtUv3HPUlj94AmquLBD4vjIQciy89SfFIJjEsrmkBUGjRAF5uKUVaoO7YceX7/+NFBjRkANwwcGFYAAIABAACAAAAAgAEAAAACAAAAIQe3pe9vP18BEUSz/NdpLmQETB90YgqM4GKWJYx6VawM7hkApZtNq1YAAIABAACAAAAAgAEAAAACAAAAIQfNsNn6LjaMN9E9k2l8tUXnbVL9xz1JY/eAJqriwQ+L4wUAqsEXDyIIA82w2fouNow30T2TaXy1RedtUv3HPUlj94AmquLBD4vjQgIiy89SfFIJjEsrmkBUGjRAF5uKUVaoO7YceX7/+NFBjQK3pe9vP18BEUSz/NdpLmQETB90YgqM4GKWJYx6VawM7gA=\" true\r\n\r\nSpecified sighash value does not match value stored in PSBT (code -22)\r\n```",
      "user": {
        "login": "starius",
        "id": 920155,
        "node_id": "MDQ6VXNlcjkyMDE1NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/920155?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starius",
        "html_url": "https://github.com/starius",
        "followers_url": "https://api.github.com/users/starius/followers",
        "following_url": "https://api.github.com/users/starius/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starius/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starius/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starius/subscriptions",
        "organizations_url": "https://api.github.com/users/starius/orgs",
        "repos_url": "https://api.github.com/users/starius/repos",
        "events_url": "https://api.github.com/users/starius/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starius/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2574305884",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15833065730,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOvuWkC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15833065730",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T03:08:38Z"
    },
    {
      "event": "subscribed",
      "id": 15833065738,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOvuWkK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15833065738",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T03:08:38Z"
    },
    {
      "event": "commented",
      "id": 2574390155,
      "node_id": "IC_kwDOABII586ZchOL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2574390155",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T04:52:42Z",
      "updated_at": "2025-01-07T04:52:42Z",
      "author_association": "MEMBER",
      "body": "> @achow101 I tried the updated version ([2da3f0e](https://github.com/bitcoin/bitcoin/commit/2da3f0e659d3e89da0cdf525f8ce370bb35365a1)). I tested GUI flow - it works the same (doesn't produce a transaction). I also re-tested `walletprocesspsbt` flow - now it is also broken:\r\n\r\nAh, the sighash stuff needs a bit more work, and it also has impacts outside of MuSig support.\r\n\r\nFor the GUI workflow, if you apply https://github.com/bitcoin-core/gui/pull/850 on top of 3649c2e, it should \"work\". However that is not a complete fix as it doesn't work with other sighash types",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2574390155",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 15833610702,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAOvwbnO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15833610702",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T04:52:43Z"
    },
    {
      "event": "subscribed",
      "id": 15833610712,
      "node_id": "SE_lADOABII586CvrSDzwAAAAOvwbnY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15833610712",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T04:52:43Z"
    },
    {
      "event": "commented",
      "id": 2579034483,
      "node_id": "IC_kwDOABII586ZuPFz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2579034483",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T02:10:37Z",
      "updated_at": "2025-01-09T02:10:37Z",
      "author_association": "MEMBER",
      "body": "I've pushed several commits to fix the sighash issues. These are also opened in their own PR #31622",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2579034483",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2595197587,
      "node_id": "IC_kwDOABII586ar5KT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2595197587",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T10:52:08Z",
      "updated_at": "2025-01-16T10:52:08Z",
      "author_association": "MEMBER",
      "body": "Can you update the PR description to have a list of pre-requisite PRs?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2595197587",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "referenced",
      "id": 15965221573,
      "node_id": "REFE_lADOABII586CvrSDzwAAAAO3mfLF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15965221573",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f9032a4abb74062051de7892916bcbe46d377a13",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9032a4abb74062051de7892916bcbe46d377a13",
      "created_at": "2025-01-16T17:31:15Z"
    },
    {
      "event": "commented",
      "id": 2596810683,
      "node_id": "IC_kwDOABII586ayC-7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2596810683",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T20:16:17Z",
      "updated_at": "2025-01-16T20:16:17Z",
      "author_association": "MEMBER",
      "body": "> Can you update the PR description to have a list of pre-requisite PRs?\r\n\r\nThere's a tracking issue with everything listed #31246",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2596810683",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16021845636,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAO6-faE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16021845636",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bd595c04290fac5f3ef321ef119946c578fe1946",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/bd595c04290fac5f3ef321ef119946c578fe1946",
      "created_at": "2025-01-22T00:38:44Z"
    },
    {
      "event": "labeled",
      "id": 16178495845,
      "node_id": "LE_lADOABII586CvrSDzwAAAAPEUEFl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16178495845",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T13:00:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16252690277,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAPIvF9l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16252690277",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2bc178357250ae6c2cdc409549b565012397fe4d",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/2bc178357250ae6c2cdc409549b565012397fe4d",
      "created_at": "2025-02-10T18:24:30Z"
    },
    {
      "event": "unlabeled",
      "id": 16276515146,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAPKJ-lK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16276515146",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T08:00:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16894600413,
      "node_id": "LE_lADOABII586CvrSDzwAAAAPu_yTd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16894600413",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T08:02:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17215121620,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQCGejU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17215121620",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "534d8e4394c6c44191ef741159ed7003ef64a9c8",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/534d8e4394c6c44191ef741159ed7003ef64a9c8",
      "created_at": "2025-04-10T23:12:34Z"
    },
    {
      "event": "unlabeled",
      "id": 17215958666,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQCJq6K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17215958666",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-11T00:58:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 17216116270,
      "node_id": "LE_lADOABII586CvrSDzwAAAAQCKRYu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17216116270",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-11T01:23:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2795587687,
      "node_id": "IC_kwDOABII586moUhn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2795587687",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-11T01:23:05Z",
      "updated_at": "2025-04-11T01:23:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/40360903127</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2795587687",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17255509966,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQEgi_O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17255509966",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7cad74ed24651d9108ffd99d2015036034c7be8a",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7cad74ed24651d9108ffd99d2015036034c7be8a",
      "created_at": "2025-04-14T20:36:51Z"
    },
    {
      "event": "unlabeled",
      "id": 17257600608,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQEohZg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17257600608",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T23:32:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 17324699286,
      "node_id": "REFE_lADOABII586CvrSDzwAAAAQIoe6W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17324699286",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c7b592fbd7e5198a7a0a94b0c6791de97e00d421",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b592fbd7e5198a7a0a94b0c6791de97e00d421",
      "created_at": "2025-04-18T20:45:03Z"
    },
    {
      "event": "labeled",
      "id": 17325516930,
      "node_id": "LE_lADOABII586CvrSDzwAAAAQIrmiC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17325516930",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T22:19:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17325657791,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQIsI6_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17325657791",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "620a36d335cdc0b0bc4728b29df93584a3b42666",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/620a36d335cdc0b0bc4728b29df93584a3b42666",
      "created_at": "2025-04-18T22:35:25Z"
    },
    {
      "event": "unlabeled",
      "id": 17326453253,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQIvLIF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17326453253",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-19T00:38:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 17342195427,
      "node_id": "REFE_lADOABII586CvrSDzwAAAAQJrObj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17342195427",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3e78ac6811d98f2bbba5c642fefa6075066a8d92",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e78ac6811d98f2bbba5c642fefa6075066a8d92",
      "created_at": "2025-04-21T18:54:11Z"
    },
    {
      "event": "labeled",
      "id": 17342646931,
      "node_id": "LE_lADOABII586CvrSDzwAAAAQJs8qT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17342646931",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T19:38:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17343824456,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQJxcJI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343824456",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "85a00a10e2208b5dfda677926ee808e77afc2375",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/85a00a10e2208b5dfda677926ee808e77afc2375",
      "created_at": "2025-04-21T21:38:07Z"
    },
    {
      "event": "unlabeled",
      "id": 17343989034,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQJyEUq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343989034",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T21:57:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 17486116686,
      "node_id": "LE_lADOABII586CvrSDzwAAAAQSQPdO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17486116686",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-01T10:26:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17491364942,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQSkQxO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17491364942",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c8d36275a9c13f784ad8f320728a5b02b8003795",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c8d36275a9c13f784ad8f320728a5b02b8003795",
      "created_at": "2025-05-01T19:11:30Z"
    },
    {
      "event": "unlabeled",
      "id": 17492758261,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQSpk71",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17492758261",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-01T21:30:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 17557750266,
      "node_id": "LE_lADOABII586CvrSDzwAAAAQWhgH6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17557750266",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-07T14:33:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17562091151,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQWyD6P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17562091151",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cd4a43b9d6d4991726a3b27a95259ad39ccb8129",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/cd4a43b9d6d4991726a3b27a95259ad39ccb8129",
      "created_at": "2025-05-07T19:10:30Z"
    },
    {
      "event": "unlabeled",
      "id": 17563486812,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQW3Ypc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17563486812",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-07T21:05:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 17660691671,
      "node_id": "LE_lADOABII586CvrSDzwAAAAQcqMTX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17660691671",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-14T21:03:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17660931758,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQcrG6u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17660931758",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "814b91e1da0c66edf00edfcaced3cbe6512d3c56",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/814b91e1da0c66edf00edfcaced3cbe6512d3c56",
      "created_at": "2025-05-14T21:25:42Z"
    },
    {
      "event": "unlabeled",
      "id": 17661943179,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQcu92L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17661943179",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-14T23:25:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17758863265,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQigr-h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17758863265",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d4693372eb1bb13e24e01438c5dc6d9811929982",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/d4693372eb1bb13e24e01438c5dc6d9811929982",
      "created_at": "2025-05-21T18:18:09Z"
    },
    {
      "event": "commented",
      "id": 2930824497,
      "node_id": "IC_kwDOABII586usNUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2930824497",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T13:47:26Z",
      "updated_at": "2025-06-02T18:00:02Z",
      "author_association": "MEMBER",
      "body": "~It seems that if a (miniscript, not yet spendable) script path is present in the descriptor, then `walletprocesspsbt` won't provide a `pubnonce`.~ (nvm, mistake in my testing flow)\r\n\r\n@bigspider what version of the Ledger test app is required? And can it just sign (or provide the nonce) the PSBT (via HWI) and register the policy on first use? Or do you have to first explicitly register the policy like [Moosig](https://github.com/LedgerHQ/moosig/blob/master/moosig.py) does?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2930824497",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 17934656467,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQs_SPT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17934656467",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T13:52:27Z"
    },
    {
      "event": "subscribed",
      "id": 17934656573,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQs_SQ9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17934656573",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T13:52:27Z"
    },
    {
      "event": "commented",
      "id": 2931818779,
      "node_id": "IC_kwDOABII586uwAEb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2931818779",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T17:54:23Z",
      "updated_at": "2025-06-02T17:54:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @bigspider what version of the Ledger test app is required? And can it just sign (or provide the nonce) the PSBT (via HWI) and register the policy on first use? Or do you have to first explicitly register the policy like [Moosig](https://github.com/LedgerHQ/moosig/blob/master/moosig.py) does?\r\n\r\n@Sjors, musig2 is supported from version 2.4.0 of the Bitcoin app, which at this time is the latest version. Note that the firmware OS must be up to date, or you would only find older versions of the app.\r\n\r\nRegistration is necessary (and not implemented in HWI).\r\n",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2931818779",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 17939865066,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQtTJ3q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17939865066",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T17:54:24Z"
    },
    {
      "event": "subscribed",
      "id": 17939865090,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQtTJ4C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17939865090",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T17:54:24Z"
    },
    {
      "event": "mentioned",
      "id": 17939865114,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQtTJ4a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17939865114",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T17:54:24Z"
    },
    {
      "event": "subscribed",
      "id": 17939865127,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQtTJ4n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17939865127",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T17:54:24Z"
    },
    {
      "event": "commented",
      "id": 2931846833,
      "node_id": "IC_kwDOABII586uwG6x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2931846833",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T18:01:24Z",
      "updated_at": "2025-06-02T18:19:22Z",
      "author_association": "MEMBER",
      "body": "@bigspider Ledger Live says my LedgerX device is up to date. The mainnet Bitcoin app version is 2.4.0, but the testnet is at 2.3.0.\r\n\r\nOr do I need the Bitcoin Test Legacy app? That one has a version 2.4.7, but it throws \"ClaNotSupported\" if I try it with [async-hwi](https://github.com/wizardsardine/async-hwi/tree/master/cli) `device list` command.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2931846833",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 17939972408,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQtTkE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17939972408",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T18:01:25Z"
    },
    {
      "event": "subscribed",
      "id": 17939972432,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQtTkFQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17939972432",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T18:01:25Z"
    },
    {
      "event": "commented",
      "id": 2932221955,
      "node_id": "IC_kwDOABII586uxigD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2932221955",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T19:48:42Z",
      "updated_at": "2025-06-02T19:48:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @bigspider Ledger Live says my LedgerX device is up to date. The mainnet Bitcoin app version is 2.4.0, but the testnet is at 2.3.0.\r\n> \r\n> Or do I need the Bitcoin Test Legacy app? That one has a version 2.4.7, but it throws \"ClaNotSupported\" if I try it with [async-hwi](https://github.com/wizardsardine/async-hwi/tree/master/cli) `device list` command.\r\n\r\nNo, \"Bitcoin Test\" version 2.4.0 is the correct app; maybe something went wrong and its deployment is missing - I'll check tomorrow. What is the firmware version on your LNX?\r\n",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2932221955",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 17941897711,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQta6Hv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17941897711",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T19:48:44Z"
    },
    {
      "event": "subscribed",
      "id": 17941897757,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQta6Id",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17941897757",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T19:48:44Z"
    },
    {
      "event": "commented",
      "id": 2933458278,
      "node_id": "IC_kwDOABII586u2QVm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2933458278",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T05:06:27Z",
      "updated_at": "2025-06-03T05:06:27Z",
      "author_association": "MEMBER",
      "body": "@bigspider OS (firmware) version 2.4.2. I tried removing and reinstalling Bitcoin Test, but that didn't bump the version. Will await your update. So you're testing on mainnet then? :-)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2933458278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 17948242591,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQtzHKf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17948242591",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T05:06:29Z"
    },
    {
      "event": "subscribed",
      "id": 17948242612,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQtzHK0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17948242612",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T05:06:29Z"
    },
    {
      "event": "commented",
      "id": 2933974799,
      "node_id": "IC_kwDOABII586u4OcP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2933974799",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T07:48:51Z",
      "updated_at": "2025-06-03T07:49:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @bigspider OS (firmware) version 2.4.2. I tried removing and reinstalling Bitcoin Test, but that didn't bump the version. Will await your update. So you're testing on mainnet then? :-)\r\n\r\n@Sjors thanks for pointing that out, you should now be able to find Bicoin Test version 2.4.0 in the store!",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2933974799",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 17951247046,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQt-krG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17951247046",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T07:48:52Z"
    },
    {
      "event": "subscribed",
      "id": 17951247074,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQt-kri",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17951247074",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T07:48:52Z"
    },
    {
      "event": "mentioned",
      "id": 17951247099,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQt-kr7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17951247099",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T07:48:52Z"
    },
    {
      "event": "subscribed",
      "id": 17951247119,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQt-ksP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17951247119",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T07:48:52Z"
    },
    {
      "event": "commented",
      "id": 2934077835,
      "node_id": "IC_kwDOABII586u4nmL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2934077835",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T08:18:29Z",
      "updated_at": "2025-06-03T08:18:29Z",
      "author_association": "MEMBER",
      "body": "@bigspider got it! Registration seems to work and device recognized which of the keys is \"ours\". Though after approval async-hwi threw `Error: Device(\"ClientError(\\n    \\\"Failed to parse descriptor\\\",\\n)\")` and did not return an HMAC.\r\n\r\n![IMG_9612 groot](https://github.com/user-attachments/assets/e2391cda-1836-4070-9ce0-ebb0618c3f4e)\r\n![IMG_9613 groot](https://github.com/user-attachments/assets/83c88dc1-237e-4c3e-8807-3e5931e8030f)\r\n\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2934077835",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 17951891559,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQuBCBn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17951891559",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T08:18:30Z"
    },
    {
      "event": "subscribed",
      "id": 17951891597,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQuBCCN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17951891597",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T08:18:30Z"
    },
    {
      "event": "commented",
      "id": 2934119709,
      "node_id": "IC_kwDOABII586u4x0d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2934119709",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T08:30:31Z",
      "updated_at": "2025-06-03T08:30:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Sjors async-hwi probably doesn't support `musig()` in descriptors. Rust libraries are generally waiting for upstream support in rust-bitcoin.\r\n\r\nThe python package [ledger-bitcoin](https://pypi.org/project/ledger-bitcoin/) is currently the only client library that is expected to work with musig2 (but it doesn't have a CLI).",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2934119709",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "mentioned",
      "id": 17952129574,
      "node_id": "MEE_lADOABII586CvrSDzwAAAAQuB8Im",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17952129574",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T08:30:33Z"
    },
    {
      "event": "subscribed",
      "id": 17952129614,
      "node_id": "SE_lADOABII586CvrSDzwAAAAQuB8JO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17952129614",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T08:30:33Z"
    },
    {
      "event": "commented",
      "id": 2934239293,
      "node_id": "IC_kwDOABII586u5PA9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2934239293",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T09:01:32Z",
      "updated_at": "2025-06-03T09:01:32Z",
      "author_association": "MEMBER",
      "body": "I see. So instead I registered the policy by tweaking Moosig. That worked and returned an HMAC.\r\n\r\nI then hardcode that HMAC into `moosig.py` along with the PSBT generated by Bitcoin Core and try to make it request a pubnonce. For this I removed the `HotMusig2Cosigner`.\r\n\r\nThe device recognizes the policy, destination address, amount and fees which I then approve. But then it fails again:\r\n\r\n```\r\n🐮 Requesting pubnonces (Round 1)\r\nTraceback (most recent call last):\r\n  File \"/Users/sjors/dev/moosig/moosig.py\", line 104, in <module>\r\n    main(client)\r\n  File \"/Users/sjors/dev/moosig/moosig.py\", line 74, in main\r\n    signer.generate_public_nonces(psbt)\r\n  File \"/Users/sjors/dev/moosig/utils/musig2.py\", line 812, in generate_public_nonces\r\n    res = self.client.sign_psbt(psbt, self.wallet_policy, self.wallet_hmac)\r\n  File \"/Users/sjors/dev/moosig/venv/lib/python3.10/site-packages/ledger_bitcoin/client.py\", line 330, in sign_psbt\r\n    raise DeviceException(error_code=sw, ins=BitcoinInsType.SIGN_PSBT)\r\nledger_bitcoin.exception.errors.IncorrectDataError: ('0x6a80', 'Error in <BitcoinInsType.SIGN_PSBT: 4> command', '')\r\n```\r\n\r\nI tried both a PSBT generated with `send`, as well as one that went through `walletprocesspsbt` which added the public nonce from Bitcoin Core's side.\r\n\r\nUnfortunately that error is a bit cryptic.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2934239293",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2934326504,
      "node_id": "IC_kwDOABII586u5kTo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2934326504",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T09:24:09Z",
      "updated_at": "2025-06-03T09:25:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "If you're only requesting pubnonces to the device, this should happen silently (without on-screen interaction). So if you're validating the transaction in what is supposed to be round 1, it ain't round 1 :)\r\n\r\nIf you have multiple spending paths, it might be doing round 1 for the musig2 key, and signing normally for the other spending path(s).\r\n\r\nFor reference, here's the [code in our e2e tests](https://github.com/LedgerHQ/app-bitcoin-new/blob/de2c15d2a9b11d61c1c9ded973545cc0e2ef3e36/tests/test_e2e_musig2.py#L43-L225) with core, if that helps.\r\n\r\nAlso note that as MuSig2 is a stateful process, if you try round 2 and it fails for any reason, you'll need to start over from round 1.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2934326504",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2934543453,
      "node_id": "IC_kwDOABII586u6ZRd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2934543453",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T10:20:12Z",
      "updated_at": "2025-06-03T13:59:54Z",
      "author_association": "MEMBER",
      "body": "It fails at this step, in the `generate_public_nonces` function:\r\n\r\n```\r\n  print(\"\\n🐮 Requesting pubnonce (Round 1)\")\r\n    signer_1.generate_public_nonces(psbt)\r\n```\r\n\r\nJust in case, I restarted the signing session by having Bitcoin Core make a fresh `musig2_pubnonces` for its key.\r\n\r\nAre your e2e tests running against the latest version of this branch?\r\n\r\n> and signing normally for the other spending path(s).\r\n\r\nThe other paths don't have enough confirmations yet, but I guess that doesn't mattter?\r\n\r\nUpdate: I get the same error with the following policy: `tr(musig(@0,@1)/**)` if I pass it a PSBT that already has the Bitcoin Core public nonce. It also prompts to confirm the send, so it's clearly doing round 2 if the public nonce is present. \r\n\r\nBut when I pass a PSBT without the Bitcoin Core public nonce, it goes ahead and does round 1 without prompt. I then take the PSBT to Bitcoin Core, has it add its nonce and sign (two calls to `walletprocesspsbt`) and then give that back to the Ledger. Then it happily signs and the transaction can be broadcast.\r\n\r\n---\r\n\r\nDo `PRINTF(` statements get propagated to the caller? In that case it would aid in debugging to add these to more failure modes. Otherwise it's hard to figure out which of the 37 `SW_INCORRECT_DATA` checks triggered the error.\r\n\r\nhttps://github.com/LedgerHQ/app-bitcoin-new/blob/2.4.0/src/handler/sign_psbt.c\r\n\r\nI guess it doesn't, because if I deliberately pass an invalid HMAC, I don't see the message generated by `PRINTF(\"Incorrect hmac\\n\");`. I guess I need to run an emulator for that? \r\n\r\nI'm able to run the emulator using the Visual Studio extension, but I have no idea how to connect to it from the host machine.\r\n\r\n---\r\n\r\nSo I think there's two things the device doesn't like:\r\n\r\n1. If there's a script path it can spend\r\n2. If it's not the first to provide a public nonce\r\n\r\nThough it's possible I'm still doing something wrong on my end.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2934543453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2935594462,
      "node_id": "IC_kwDOABII586u-Z3e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2935594462",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T14:31:23Z",
      "updated_at": "2025-06-03T14:31:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Are your e2e tests running against the latest version of this branch?\r\n\r\nThe container is rebuilt every time a PR is merged, and the musig2 test never failed over the last 6+ months since they were added.\r\n\r\nI rebuilt the container today and confirmed it works on the tagged commit for 2.4.0 release ([this](https://github.com/LedgerHQ/app-bitcoin-new/actions/runs/15418931868/job/43388642661) is the CI run).\r\n\r\n> But when I pass a PSBT without the Bitcoin Core public nonce, it goes ahead and does round 1 without prompt. I then take the PSBT to Bitcoin Core, has it add its nonce and sign (two calls to `walletprocesspsbt`) and then give that back to the Ledger. Then it happily signs and the transaction can be broadcast.\r\n\r\nYes, the app expects that there are either no nonces, or all nonces.\r\n\r\n> I guess it doesn't, because if I deliberately pass an invalid HMAC, I don't see the message generated by `PRINTF(\"Incorrect hmac\\n\");`. I guess I need to run an emulator for that? \r\n\r\n`PRINTF`s are only present in the debug builds for the emulator.\r\n\r\n> I'm able to run the emulator using the Visual Studio extension, but I have no idea how to connect to it from the host machine.\r\n\r\nI recommend to only use the VSCode extension to build it, but then install and run Speculos locally, so you don't have to deal with containers. Other people work entirely inside the containers, but I personally don't like Docker _that_ much. \r\n\r\n\r\n> \r\n> So I think there's two things the device doesn't like:\r\n> \r\n> 1. If there's a script path it can spend\r\n\r\nThe expected behavior is that the app will sign (or run the first round) for all the internal key placeholders (where a key placeholder is internal if it's a key controlled by the signing device, or a MuSig with a key controlled by the device), as long as the BIP-32 derivations are present for that internal key.\r\nThat's because the API is `sign(psbt, wallet_policy)`, so there's otherwise no way of determining _which_ key you want the device to sign for.\r\nBefore MuSig2, signing for unnecessary paths was only a waste of time, but now that's necessary in order to be able to keep the first round silent.\r\n\r\nPrior to version 2.4.0 the app might have signed for some spending paths even with incomplete or BIP32_DERIVATION.\r\n\r\n> 2. If it's not the first to provide a public nonce\r\n\r\nThe workflow I'm expecting is that the coordinator would give the same PSBT in parallel to all the signers, which execute round 1, then all nonces are added to the PSBT, and eah signer is invoked again and produces the partial musig signatures. If only _some_ nonces are present, then the device assumes Round 1 already happened, but it will fail to run Round 2.\r\n\r\n",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2935594462",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2935730736,
      "node_id": "IC_kwDOABII586u-7Iw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2935730736",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T14:52:06Z",
      "updated_at": "2025-06-03T14:52:06Z",
      "author_association": "MEMBER",
      "body": "> If only some nonces are present, then the device assumes Round 1 already happened, but it will fail to run Round 2.\r\n\r\nOk, that explains issue (2).\r\n\r\nBut not why it failed with (1), because the policy variant with `older` fallback triggers the error without a public nonce from Bitcoin Core for the key path.\r\n\r\n> The workflow I'm expecting is that the coordinator would give the same PSBT in parallel to all the signers, which execute round 1, then all nonces are added to the PSBT, and eah signer is invoked again and produces the partial musig signatures.\r\n\r\nThat's suboptimal though. In a two-of-two, if you need to physically go to a second location, you'll want to:\r\n\r\n1. site A: get nonce 1\r\n2. site B: get nonce 2\r\n3. site B: get partial signature 2\r\n4. site A: get partial signature 2 and broadcast\r\n\r\nWhere ideally step (2) and (3) are a single action. Though you can still achieve this by running `combinepsbt` in site B after step (2).\r\n\r\n>> Are your e2e tests running against the latest version of this branch?\r\n\r\n> The container is rebuilt every time a PR is merged\r\n\r\nRight, but that just tests Bitcoin Core master, not this PR?\r\n\r\nI guess if I want to debug this further, I'd have to modify the e2e test to use this branch and recreate the multisig setup I described in the test. Then if a test fails it will log the specific error in the console (if I add a few more PRINTFs).\r\n\r\n> but then install and run Speculos locally, so you don't have to deal with containers\r\n\r\nI couldn't figure out how to do that on an M4 mac, but it might be easier on my Ubuntu machine. I'm not a Docker fan either.\r\n\r\n---\r\n\r\nOn a different note, thinking about MuSig2 session management a bit more, the BIP says:\r\n\r\n> To avoid accidental reuse of secnonce, an implementation may securely erase the secnonce argument by overwriting it with 64 zero bytes after it has been read by Sign. A secnonce consisting of only zero bytes is invalid for Sign and will cause it to fail.\r\n\r\nSo if the user makes multiple calls to `walletprocesspsbt`, and the `psbt` contains our public nonce, then the first call would return a PSBT with a partial signature. If the call is repeated, i.e. without the partial signature that we produced earlier, it should fail (not silently).\r\n\r\nCurrently it just quietly removes `musig2_partial_sigs`, which may have contributed to my confusion.\r\n\r\n```patch\r\ndiff --git a/test/functional/wallet_musig.py b/test/functional/wallet_musig.py\r\nindex b7f3cc9d96..9c8e0a8fd3 100755\r\n--- a/test/functional/wallet_musig.py\r\n+++ b/test/functional/wallet_musig.py\r\n@@ -8,7 +8,7 @@ import re\r\n from test_framework.descriptors import descsum_create\r\n from test_framework.key import H_POINT\r\n from test_framework.test_framework import BitcoinTestFramework\r\n-from test_framework.util import assert_equal\r\n+from test_framework.util import assert_equal, assert_raises_rpc_error\r\n\r\n PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\r\n PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\r\n@@ -150,6 +150,9 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         for wallet in wallets:\r\n             proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\r\n             assert_equal(proc[\"complete\"], False)\r\n+            # Never sign twice:\r\n+            assert_raises_rpc_error(-1, \"sec nonce lost in tragic boating accident\", wallet.walletprocesspsbt, psbt=comb_nonce_psbt, sighashtype=sighash_type)\r\n+\r\n             psig_psbts.append(proc[\"psbt\"])\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2935730736",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2935928425,
      "node_id": "IC_kwDOABII586u_rZp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2935928425",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T15:20:29Z",
      "updated_at": "2025-06-03T15:20:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "> But not why it failed with (1), because the policy variant with `older` fallback triggers the error without a public nonce from Bitcoin Core for the key path.\r\n\r\nPlease feel free to [open an issue](https://github.com/LedgerHQ/app-bitcoin-new/issues) and I'll investigate.\r\n\r\n> > The workflow I'm expecting is that the coordinator would give the same PSBT in parallel to all the signers, which execute round 1, then all nonces are added to the PSBT, and eah signer is invoked again and produces the partial musig signatures.\r\n> \r\n> That's suboptimal though. In a two-of-two, if you need to physically go to a second location, you'll want to:\r\n> \r\n> 1. site A: get nonce 1\r\n> 2. site B: get nonce 2\r\n> 3. site B: get partial signature 2\r\n> 4. site A: get partial signature 2 and broadcast\r\n> \r\n> Where ideally step (2) and (3) are a single action. Though you can still achieve this by running `combinepsbt` in site B after step (2).\r\n\r\nSure, but while the Ledger app is using PSBT in its protocol, it is not designed to be a full implementation of the PSBT standard, as it's running in a very constrained setting where it doesn't even have full access to the PSBT without communicating with the client. Verifying if 'my nonce is present' is a substantial amount of work, while checking if 'some nonces' are present is trivial by iterating once through the PSBT keys.\r\n\r\nIt is much easier to handle this on the client side ('if only some but not all nonces are present, delete them before calling the device\"), rather than implementing such complex logic on the device.\r\n\r\n> Right, but that just tests Bitcoin Core master, not this PR?\r\n\r\nI'm currently using Bitcoin Core compiled from this PR, since MuSig2 is part of the CI; I'll switch back to master once this PR is merged.\r\n",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2935928425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 2936000601,
      "node_id": "IC_kwDOABII586u_9BZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2936000601",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T15:31:50Z",
      "updated_at": "2025-06-03T15:31:50Z",
      "author_association": "MEMBER",
      "body": "> > But not why it failed with (1), because the policy variant with `older` fallback triggers the error without a public nonce from Bitcoin Core for the key path.\r\n> \r\n> Please feel free to [open an issue](https://github.com/LedgerHQ/app-bitcoin-new/issues) and I'll investigate.\r\n\r\nI'll test it once more and will open an issue if needed.\r\n\r\n> Verifying if 'my nonce is present' is a substantial amount of work, while checking if 'some nonces' are present is trivial by iterating once through the PSBT keys.\r\n\r\nI see. It would be good to document these caveats somewhere. They're easy to work around, but hard to debug if you run into them.\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2936000601",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "reviewed",
      "id": 2900301627,
      "node_id": "PRR_kwDOABII586s3xc7",
      "url": null,
      "actor": null,
      "commit_id": "d4693372eb1bb13e24e01438c5dc6d9811929982",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-05T13:18:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-2900301627",
      "submitted_at": "2025-06-05T13:18:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18009985479,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQxepHH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18009985479",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e963e8cc84bee7e24979f7c71ff73d529da7e666",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/e963e8cc84bee7e24979f7c71ff73d529da7e666",
      "created_at": "2025-06-05T20:54:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18099732950,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQ21AHW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18099732950",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8c7b329027e908cfc390978e6d666ccfab0631f5",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/8c7b329027e908cfc390978e6d666ccfab0631f5",
      "created_at": "2025-06-11T18:20:10Z"
    },
    {
      "event": "labeled",
      "id": 18169223080,
      "node_id": "LE_lADOABII586CvrSDzwAAAAQ6-Feo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18169223080",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T12:11:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18181260119,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQ7sANX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18181260119",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45a2a10c353bcddef621aff9b2cbf22221c119db",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/45a2a10c353bcddef621aff9b2cbf22221c119db",
      "created_at": "2025-06-17T02:13:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18181273663,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQ7sDg_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18181273663",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4179d2795967c0fd03faacf84c5d963bad70dfdf",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/4179d2795967c0fd03faacf84c5d963bad70dfdf",
      "created_at": "2025-06-17T02:14:41Z"
    },
    {
      "event": "unlabeled",
      "id": 18181968725,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQ7utNV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18181968725",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-17T03:41:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18218755121,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQ97CQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18218755121",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7e3b5374a189b550134188a71ebe924a14e1dfc7",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7e3b5374a189b550134188a71ebe924a14e1dfc7",
      "created_at": "2025-06-18T21:52:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18220117411,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAQ-AO2j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18220117411",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "54d1e7404610dc3d467fd178f3725e35a22600b2",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/54d1e7404610dc3d467fd178f3725e35a22600b2",
      "created_at": "2025-06-19T00:16:33Z"
    },
    {
      "event": "labeled",
      "id": 18220119206,
      "node_id": "LE_lADOABII586CvrSDzwAAAAQ-APSm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18220119206",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-19T00:16:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2986100186,
      "node_id": "IC_kwDOABII586x_EXa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2986100186",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-19T00:16:49Z",
      "updated_at": "2025-06-19T00:16:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/44377387322</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a clang-tidy error due to the use of a variable 'match' that is copy-constructed from a const reference but not used, which is treated as an error.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-2986100186",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "unlabeled",
      "id": 18221136503,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAAQ-EHp3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18221136503",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-19T02:16:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3028050886,
      "node_id": "IC_kwDOABII5860fGPG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3028050886",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T14:16:04Z",
      "updated_at": "2025-07-02T14:16:04Z",
      "author_association": "MEMBER",
      "body": "Meanwhile https://github.com/LedgerHQ/app-bitcoin-new/issues/329 has been figured out and I was able to do a keypath spend on the more complicated policy. That's a good sign for interoperability.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3028050886",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18909167589,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAARnEv_l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18909167589",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "983e510aeb83bb08dcb336552a934723eca4bf8d",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/983e510aeb83bb08dcb336552a934723eca4bf8d",
      "created_at": "2025-07-30T23:37:27Z"
    },
    {
      "event": "commented",
      "id": 3138129596,
      "node_id": "IC_kwDOABII5867DA68",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3138129596",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T23:37:51Z",
      "updated_at": "2025-07-30T23:37:51Z",
      "author_association": "MEMBER",
      "body": "Added a few commits to address followups from #31244",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3138129596",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "reviewed",
      "id": 3074175438,
      "node_id": "PRR_kwDOABII5863PDHO",
      "url": null,
      "actor": null,
      "commit_id": "983e510aeb83bb08dcb336552a934723eca4bf8d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-31T08:18:25Z",
      "author_association": "MEMBER",
      "body": "Reviewed the non-base commits up to ae6889565af3afed567e08976b4bc0f0381d0bf8 _sign: Add CreateMuSig2Nonce_, but I skipped over  25c4fd4e50a6d230c959fb0072df04ef7093aa0a _sign: Add CreateMuSig2AggregateSig_.\r\n\r\nIt's a bit confusing that 25c4fd4e50a6d230c959fb0072df04ef7093aa0a _sign: Add CreateMuSig2AggregateSig_ checks for and uses public nonces, but those are not available until later commits like ae6889565af3afed567e08976b4bc0f0381d0bf8 _sign: Add CreateMuSig2Nonce_.\r\n\r\nNote that PR is currently isn't based on the latest #31244 but the tests pass if I do rebase it, so that seems a minor difference.\r\n\r\nThe only thing I haven't been able to test against a Ledger is script path spending, waiting for the v2.4.1 release. I did test script path spending using just Bitcoin Core keys.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3074175438",
      "submitted_at": "2025-07-31T08:14:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "referenced",
      "id": 18926677097,
      "node_id": "REFE_lADOABII586CvrSDzwAAAARoHixp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18926677097",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5ee4e79669570ae3ea89851a8e0a562057c72484",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee4e79669570ae3ea89851a8e0a562057c72484",
      "created_at": "2025-07-31T20:52:11Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIzMjAxODRkMGVhODcyNzk1NThhOGU2Y2JiM2JjY2Y1YmExYmI3ODE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2320184d0ea87279558a8e6cbb3bccf5ba1bb781",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2320184d0ea87279558a8e6cbb3bccf5ba1bb781",
      "tree": {
        "sha": "38f317a15f6cc2a4c71ac5667441d0eff6be25e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38f317a15f6cc2a4c71ac5667441d0eff6be25e5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ee4e79669570ae3ea89851a8e0a562057c72484",
          "sha": "5ee4e79669570ae3ea89851a8e0a562057c72484",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5ee4e79669570ae3ea89851a8e0a562057c72484"
        }
      ],
      "message": "descriptors: Fix meaning of any_key_parsed\n\nInvert any_key_parsed so that the name matches the behavior.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-07-31T22:40:25Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-07-30T23:34:36Z"
      },
      "sha": "2320184d0ea87279558a8e6cbb3bccf5ba1bb781"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM5YTYzYmYyZTdlMzhkZDNmMzBiNWQxYThmNmIyZmZmMGUzODBkMTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39a63bf2e7e38dd3f30b5d1a8f6b2fff0e380d12",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/39a63bf2e7e38dd3f30b5d1a8f6b2fff0e380d12",
      "tree": {
        "sha": "4a39677088b9ad675fd438f46dfc589e35775713",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a39677088b9ad675fd438f46dfc589e35775713"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2320184d0ea87279558a8e6cbb3bccf5ba1bb781",
          "sha": "2320184d0ea87279558a8e6cbb3bccf5ba1bb781",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2320184d0ea87279558a8e6cbb3bccf5ba1bb781"
        }
      ],
      "message": "descriptors: Add a doxygen comment for has_hardened output_parameter",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-07-31T22:40:25Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-07-30T23:36:12Z"
      },
      "sha": "39a63bf2e7e38dd3f30b5d1a8f6b2fff0e380d12"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE0Y2ZkZGRhNjQ0ZjFmYzlhODE1YjJkMTZjOTk3NzE2Y2Q2MzU1NGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4cfddda644f1fc9a815b2d16c997716cd63554a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a4cfddda644f1fc9a815b2d16c997716cd63554a",
      "tree": {
        "sha": "e97aab45812e6fe169f427bc622a482d33a5b045",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e97aab45812e6fe169f427bc622a482d33a5b045"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39a63bf2e7e38dd3f30b5d1a8f6b2fff0e380d12",
          "sha": "39a63bf2e7e38dd3f30b5d1a8f6b2fff0e380d12",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/39a63bf2e7e38dd3f30b5d1a8f6b2fff0e380d12"
        }
      ],
      "message": "tests: Clarify why musig derivation adds a pubkey and xpub",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-07-31T22:40:25Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-07-30T23:36:54Z"
      },
      "sha": "a4cfddda644f1fc9a815b2d16c997716cd63554a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZiODcyMGYxZTA5ZjRlNDE4MDJmMDdiZTUzZmIyMjBkNmY2YzEyN2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb8720f1e09f4e41802f07be53fb220d6f6c127f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fb8720f1e09f4e41802f07be53fb220d6f6c127f",
      "tree": {
        "sha": "0dbfaf58935e254d2a5d8e6b8bb11de5457d7ff1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dbfaf58935e254d2a5d8e6b8bb11de5457d7ff1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4cfddda644f1fc9a815b2d16c997716cd63554a",
          "sha": "a4cfddda644f1fc9a815b2d16c997716cd63554a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a4cfddda644f1fc9a815b2d16c997716cd63554a"
        }
      ],
      "message": "sign: Refactor Schnorr sighash computation out of CreateSchnorrSig\n\nThere will be other functions within MutableTransactionSignatureCreator\nthat need to compute the same sighash, so make it a separate member\nfunction.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-07-31T22:40:25Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-05T20:09:40Z"
      },
      "sha": "fb8720f1e09f4e41802f07be53fb220d6f6c127f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18927950538,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAARoMZrK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18927950538",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d3d9c9e5038bfa8c34e5fa5b10321738cc56f2e2",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/d3d9c9e5038bfa8c34e5fa5b10321738cc56f2e2",
      "created_at": "2025-07-31T22:47:14Z"
    },
    {
      "event": "labeled",
      "id": 18929242749,
      "node_id": "LE_lADOABII586CvrSDzwAAAARoRVJ9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18929242749",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T01:07:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "ready_for_review",
      "id": 18930893210,
      "node_id": "RFRE_lADOABII586CvrSDzwAAAARoXoGa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18930893210",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T03:44:48Z"
    },
    {
      "event": "commented",
      "id": 3142073357,
      "node_id": "IC_kwDOABII5867SDwN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3142073357",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T03:45:45Z",
      "updated_at": "2025-08-01T03:45:45Z",
      "author_association": "MEMBER",
      "body": "All prerequisites have been merged, ready for review.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3142073357",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "unlabeled",
      "id": 18933672594,
      "node_id": "UNLE_lADOABII586CvrSDzwAAAARoiOqS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18933672594",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-01T07:33:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3088948515,
      "node_id": "PRR_kwDOABII5864HZ0j",
      "url": null,
      "actor": null,
      "commit_id": "d3d9c9e5038bfa8c34e5fa5b10321738cc56f2e2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-05T17:52:06Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3088948515",
      "submitted_at": "2025-08-05T17:52:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18999619703,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAARsdzB3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18999619703",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0ff1421f164230f3d088b4faf747a00bb1f16232",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0ff1421f164230f3d088b4faf747a00bb1f16232",
      "created_at": "2025-08-05T20:48:27Z"
    },
    {
      "event": "reviewed",
      "id": 3103437601,
      "node_id": "PRR_kwDOABII5864-rMh",
      "url": null,
      "actor": null,
      "commit_id": "0ff1421f164230f3d088b4faf747a00bb1f16232",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-10T02:05:45Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3103437601",
      "submitted_at": "2025-08-10T02:05:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19164872614,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAR2UL-m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19164872614",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8e32747ce0144a57360c82c187fc4a270e9ba913",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/8e32747ce0144a57360c82c187fc4a270e9ba913",
      "created_at": "2025-08-14T18:30:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19164911597,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAAR2UVft",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19164911597",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ae645ef858702ff85dab4b1ac6296d53b573c81b",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/ae645ef858702ff85dab4b1ac6296d53b573c81b",
      "created_at": "2025-08-14T18:33:29Z"
    },
    {
      "event": "reviewed",
      "id": 3180916078,
      "node_id": "PRR_kwDOABII5869mO1u",
      "url": null,
      "actor": null,
      "commit_id": "ae645ef858702ff85dab4b1ac6296d53b573c81b",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-03T14:32:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed up to 38d74136c6552ae746bec6e05b8ec3069cd581ce, left a few non-blocking suggestions below.\r\n\r\nI think the order of commits d65c8df972de55ade06557cabb1b8972d4169fb1 ... 38d74136c6552ae746bec6e05b8ec3069cd581ce is currently slightly confusing for reviewers, as it doesn't reflect the protocol flow, i.e. the signature aggregation function `CreateMuSig2AggregateSig` should ideally be introduced _after_ the partial signature creation function `CreateMuSig2PartialSig`.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3180916078",
      "submitted_at": "2025-09-03T14:32:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "commented",
      "id": 3249601891,
      "node_id": "IC_kwDOABII587BsP1j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3249601891",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-03T14:54:13Z",
      "updated_at": "2025-09-03T14:54:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK ae645ef858702ff85dab4b1ac6296d53b573c81b, started reviewing.\r\n\r\nMaybe the PR description could be updated to remove the following references as their detailed implementations were done in prior PRs. \r\n> This PR implements MuSig2 descriptors (BIP 390), derivation (BIP 328), and PSBT fields (BIP 373)",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3249601891",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19488609189,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASJnJOl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19488609189",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "936f15c6080b3f9675e1c7615bf906512180245f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/936f15c6080b3f9675e1c7615bf906512180245f",
      "created_at": "2025-09-03T18:52:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19491458133,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASJyAxV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19491458133",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/d23116987d19587746d392895c06f5c426c1d0d2",
      "created_at": "2025-09-03T21:46:43Z"
    },
    {
      "event": "commented",
      "id": 3258979508,
      "node_id": "IC_kwDOABII587CQBS0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3258979508",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-05T16:36:31Z",
      "updated_at": "2025-09-05T16:36:31Z",
      "author_association": "MEMBER",
      "body": "Meanwhile I managed to test a script path spend with Ledger as well (though I haven't tried MuSig2 inside a script path), using https://github.com/bitcoin-core/HWI/pull/794. With that I'm pretty happy with interoperability.\r\n\r\nWill do another code review round soon(tm).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3258979508",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "reviewed",
      "id": 3196105850,
      "node_id": "PRR_kwDOABII586-gLR6",
      "url": null,
      "actor": null,
      "commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-08T14:57:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review 1 - d23116987d19587746d392895c06f5c426c1d0d2\r\n\r\nReviewed the functional test.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3196105850",
      "submitted_at": "2025-09-08T14:57:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "commented",
      "id": 3266861514,
      "node_id": "IC_kwDOABII587CuFnK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3266861514",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-08T15:31:50Z",
      "updated_at": "2025-09-08T15:31:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "In 8849f574104d920c1629e756c5495e1d2c523844 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\nIn commit message:\r\n> Lastly, if the partial signatures could be\r\ncreated, add our own public nonces for the private keys that we know, if\r\nthey do not yet exist.\r\n\r\nIs is supposed to say \"... partial signatures could not be created ...\" instead? Based on the tone in the message used.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3266861514",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "reviewed",
      "id": 3201418790,
      "node_id": "PRR_kwDOABII586-0cYm",
      "url": null,
      "actor": null,
      "commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-09T13:50:35Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3201418790",
      "submitted_at": "2025-09-09T13:50:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19596877652,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASQEJ9U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19596877652",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1b4e13aafa5cedd8f629da01efbc7fce73b627b1",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/1b4e13aafa5cedd8f629da01efbc7fce73b627b1",
      "created_at": "2025-09-09T19:07:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19596952660,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASQEcRU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19596952660",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a06017dfce7ce72afbebe6f68d9a29cf72d26593",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a06017dfce7ce72afbebe6f68d9a29cf72d26593",
      "created_at": "2025-09-09T19:12:23Z"
    },
    {
      "event": "commented",
      "id": 3271964809,
      "node_id": "IC_kwDOABII587DBjiJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3271964809",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-09T19:12:27Z",
      "updated_at": "2025-09-09T19:12:27Z",
      "author_association": "MEMBER",
      "body": "> Is is supposed to say \"... partial signatures could not be created ...\" instead? Based on the tone in the message used.\r\n\r\nYes, done.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3271964809",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 3273516645,
      "node_id": "IC_kwDOABII587DHeZl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3273516645",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T06:40:40Z",
      "updated_at": "2025-09-10T06:40:40Z",
      "author_association": "MEMBER",
      "body": "The \"Unknown named parameter\" [ci failure](https://github.com/bitcoin/bitcoin/actions/runs/17593154154/job/49978783184?pr=29675) might be a case of #33230 / #32821?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3273516645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "reviewed",
      "id": 3206223831,
      "node_id": "PRR_kwDOABII586_GxfX",
      "url": null,
      "actor": null,
      "commit_id": "a06017dfce7ce72afbebe6f68d9a29cf72d26593",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-10T14:33:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Partial Code review 2 - a06017dfce7ce72afbebe6f68d9a29cf72d26593\r\n\r\n`wallet_musig.py` & `descriptor_tests.cpp` tests pass with these suggestions.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3206223831",
      "submitted_at": "2025-09-10T14:33:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "commented",
      "id": 3275442471,
      "node_id": "IC_kwDOABII587DO0kn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3275442471",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T15:19:49Z",
      "updated_at": "2025-09-10T15:19:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "In bff8e053f4e6de3ce39e87a4faea161b1b84d850 \"pubkey: Return tweaks from BIP32 derivation\"\r\n\r\nIt would be helpful to mention why this is done in the commit message - specifically to mention around its usage in the \"[sign: Create MuSig2 signatures for known MuSig2 aggregate keys](https://github.com/bitcoin/bitcoin/pull/29675/commits/7c085554dce336eb1597ab2fc482163876a49270)\" commit pertaining to BIP 328/327.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3275442471",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "commented",
      "id": 3282694791,
      "node_id": "IC_kwDOABII587DqfKH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3282694791",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T21:27:03Z",
      "updated_at": "2025-09-11T21:27:03Z",
      "author_association": "MEMBER",
      "body": "> It would be helpful to mention why this is done in the commit message\r\n\r\nIf I need to retouch.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3282694791",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "reviewed",
      "id": 3223415048,
      "node_id": "PRR_kwDOABII587AIWkI",
      "url": null,
      "actor": null,
      "commit_id": "a06017dfce7ce72afbebe6f68d9a29cf72d26593",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T14:27:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Halfway through the code review - a06017dfce7ce72afbebe6f68d9a29cf72d26593",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3223415048",
      "submitted_at": "2025-09-15T14:27:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "reviewed",
      "id": 3230143685,
      "node_id": "PRR_kwDOABII587AiBTF",
      "url": null,
      "actor": null,
      "commit_id": "a06017dfce7ce72afbebe6f68d9a29cf72d26593",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T13:56:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed commit 7c085554dce336eb1597ab2fc482163876a49270 with the aim of deduplicating MuSig2 signing flow.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3230143685",
      "submitted_at": "2025-09-16T13:56:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYxNDg3NjIxM2FhZDBlNjcwODhiNzVjYWUyNDMyM2RiOWYyNTc2ZDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f14876213aad0e67088b75cae24323db9f2576d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f14876213aad0e67088b75cae24323db9f2576d8",
      "tree": {
        "sha": "ad02b03aab68f48904cc66fdd4e726a59bd0b414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad02b03aab68f48904cc66fdd4e726a59bd0b414"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb8720f1e09f4e41802f07be53fb220d6f6c127f",
          "sha": "fb8720f1e09f4e41802f07be53fb220d6f6c127f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fb8720f1e09f4e41802f07be53fb220d6f6c127f"
        }
      ],
      "message": "musig: Move synthetic xpub construction to its own function",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-16T23:09:31Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-16T23:09:31Z"
      },
      "sha": "f14876213aad0e67088b75cae24323db9f2576d8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19737509622,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASYcn72",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19737509622",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "601956c65124c301d3e3e14b9eb485b410f56062",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/601956c65124c301d3e3e14b9eb485b410f56062",
      "created_at": "2025-09-16T23:19:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19737537183,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASYcuqf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19737537183",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1bb7df73a6327cca99a0193da882e482e8cfc50c",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/1bb7df73a6327cca99a0193da882e482e8cfc50c",
      "created_at": "2025-09-16T23:22:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19737611060,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASYdAs0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19737611060",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6400f7b82f4d2c22fb05f7122ce3a750938526f7",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/6400f7b82f4d2c22fb05f7122ce3a750938526f7",
      "created_at": "2025-09-16T23:30:19Z"
    },
    {
      "event": "reviewed",
      "id": 3233829232,
      "node_id": "PRR_kwDOABII587AwFFw",
      "url": null,
      "actor": null,
      "commit_id": "6400f7b82f4d2c22fb05f7122ce3a750938526f7",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-17T13:46:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "More than three quarters of code review complete at 6400f7b82f4d2c22fb05f7122ce3a750938526f7",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3233829232",
      "submitted_at": "2025-09-17T13:46:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19755635337,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASZhxKJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19755635337",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/93b1d5622194165444ea9e919ccf319a5e990de0",
      "created_at": "2025-09-17T17:12:12Z"
    },
    {
      "event": "reviewed",
      "id": 3248963991,
      "node_id": "PRR_kwDOABII587Bp0GX",
      "url": null,
      "actor": null,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-22T15:04:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Asked couple questions for clarity at 93b1d5622194165444ea9e919ccf319a5e990de0",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3248963991",
      "submitted_at": "2025-09-22T15:04:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19876997947,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASgwus7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19876997947",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "298156a86e206ac37f555b3a63a9f853c1154245",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/298156a86e206ac37f555b3a63a9f853c1154245",
      "created_at": "2025-09-23T23:10:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19877023927,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASgw1C3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19877023927",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fa39a38e8c0f5c27f639c2bb603e83d7d45ef25a",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/fa39a38e8c0f5c27f639c2bb603e83d7d45ef25a",
      "created_at": "2025-09-23T23:12:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19877554397,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASgy2jd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19877554397",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4078bbd5c7566e7d4c0edb2d02f0191512911b82",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/4078bbd5c7566e7d4c0edb2d02f0191512911b82",
      "created_at": "2025-09-23T23:53:18Z"
    },
    {
      "event": "reviewed",
      "id": 3268665628,
      "node_id": "PRR_kwDOABII587C0-Ec",
      "url": null,
      "actor": null,
      "commit_id": "4078bbd5c7566e7d4c0edb2d02f0191512911b82",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-25T16:47:55Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3268665628",
      "submitted_at": "2025-09-25T16:47:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "reviewed",
      "id": 3268765366,
      "node_id": "PRR_kwDOABII587C1Wa2",
      "url": null,
      "actor": null,
      "commit_id": "2a49082e491810fab48485e0a63e1fadfb09b1b7",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-25T17:20:24Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3268765366",
      "submitted_at": "2025-09-25T17:20:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19926790295,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASjurCX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19926790295",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/02994c2cbe2f051b868f49e65fac042feace2edf",
      "created_at": "2025-09-25T18:38:20Z"
    },
    {
      "event": "reviewed",
      "id": 3272073328,
      "node_id": "PRR_kwDOABII587DB-Bw",
      "url": null,
      "actor": null,
      "commit_id": "fd52cd05d2bf11e059472e74fe6a771aa139b136",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-26T12:40:05Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3272073328",
      "submitted_at": "2025-09-26T12:40:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "reviewed",
      "id": 3272426673,
      "node_id": "PRR_kwDOABII587DDUSx",
      "url": null,
      "actor": null,
      "commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-26T14:08:18Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3272426673",
      "submitted_at": "2025-09-26T14:08:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "reviewed",
      "id": 3272643818,
      "node_id": "PRR_kwDOABII587DEJTq",
      "url": null,
      "actor": null,
      "commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-26T15:23:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review  02994c2cbe2f051b868f49e65fac042feace2edf\r\n\r\nThanks for addressing the previous comments.\r\n\r\nI'm about to wrap up my review by taking a look at the `libsecp` specific functions used in the `CreateMuSig2*` functions.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3272643818",
      "submitted_at": "2025-09-26T15:23:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "referenced",
      "id": 19947235502,
      "node_id": "REFE_lADOABII586CvrSDzwAAAASk8qiu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19947235502",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7e08445449fc2e34c96c5111acc8d02a914a550c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e08445449fc2e34c96c5111acc8d02a914a550c",
      "created_at": "2025-09-26T15:45:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19952961303,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASlSgcX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19952961303",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "created_at": "2025-09-26T21:07:12Z"
    },
    {
      "event": "reviewed",
      "id": 3279715340,
      "node_id": "PRR_kwDOABII587DfHwM",
      "url": null,
      "actor": null,
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-29T13:24:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review complete at 36f83554a2dc5b397ee3b4495d8bf2aff36cedc6.\r\n\r\nI will share my final thoughts in a subsequent comment.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3279715340",
      "submitted_at": "2025-09-29T13:24:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "reviewed",
      "id": 3280838632,
      "node_id": "PRR_kwDOABII587DjZ_o",
      "url": null,
      "actor": null,
      "commit_id": "184fbefab7d45db77d6c9acea279134d88101181",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-29T16:58:44Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3280838632",
      "submitted_at": "2025-09-29T16:58:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "reviewed",
      "id": 3285717457,
      "node_id": "PRR_kwDOABII587D2BHR",
      "url": null,
      "actor": null,
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-30T16:16:06Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3285717457",
      "submitted_at": "2025-09-30T16:16:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRiMjRiZmVhYjlkNjczMmFhZTNlNjllZmQzMzEwNTc5MmVmMTE5OGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b24bfeab9d6732aae3e69efd33105792ef1198f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4b24bfeab9d6732aae3e69efd33105792ef1198f",
      "tree": {
        "sha": "e0ad47e4eab89557ff04cd9a9c8c1e2e19a8aad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0ad47e4eab89557ff04cd9a9c8c1e2e19a8aad8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f14876213aad0e67088b75cae24323db9f2576d8",
          "sha": "f14876213aad0e67088b75cae24323db9f2576d8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f14876213aad0e67088b75cae24323db9f2576d8"
        }
      ],
      "message": "pubkey: Return tweaks from BIP32 derivation\n\nMuSig2 needs the BIP32 derivation tweaks in order to sign with a key\nderived from the aggregate pubkey.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:09Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-04T20:40:00Z"
      },
      "sha": "4b24bfeab9d6732aae3e69efd33105792ef1198f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDliYWZmMDVlNDk0NDQzY2Q4MjcwODQ5MGYzODRhYTMwMzRhZDQzYmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9baff05e494443cd82708490f384aa3034ad43bd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9baff05e494443cd82708490f384aa3034ad43bd",
      "tree": {
        "sha": "9bc2fa77e1bfacaba26790ff62ba98baf6ede60a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bc2fa77e1bfacaba26790ff62ba98baf6ede60a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b24bfeab9d6732aae3e69efd33105792ef1198f",
          "sha": "4b24bfeab9d6732aae3e69efd33105792ef1198f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4b24bfeab9d6732aae3e69efd33105792ef1198f"
        }
      ],
      "message": "sign: Include taproot output key's KeyOriginInfo in sigdata",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-04T22:53:37Z"
      },
      "sha": "9baff05e494443cd82708490f384aa3034ad43bd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMwNmExZGM4NmZmMjM0NzUzOGU5NTA0MWFiN2I5N2FmMjUzNDI5NTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c06a1dc86ff2347538e95041ab7b97af25342958",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c06a1dc86ff2347538e95041ab7b97af25342958",
      "tree": {
        "sha": "6c37773deaa100d8e93ad45f23845b7625defb88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c37773deaa100d8e93ad45f23845b7625defb88"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9baff05e494443cd82708490f384aa3034ad43bd",
          "sha": "9baff05e494443cd82708490f384aa3034ad43bd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9baff05e494443cd82708490f384aa3034ad43bd"
        }
      ],
      "message": "Add MuSig2SecNonce class for secure allocation of musig nonces",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-25T20:13:58Z"
      },
      "sha": "c06a1dc86ff2347538e95041ab7b97af25342958"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRkOGI0ZjUzMzYzZjAxM2VkMzk3Mjk5N2YwYjA1YjljMTllOWRiOWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d8b4f53363f013ed3972997f0b05b9c19e9db9d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8b4f53363f013ed3972997f0b05b9c19e9db9d",
      "tree": {
        "sha": "ac5779d532fb1af01794ede808698f31027002aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac5779d532fb1af01794ede808698f31027002aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c06a1dc86ff2347538e95041ab7b97af25342958",
          "sha": "c06a1dc86ff2347538e95041ab7b97af25342958",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c06a1dc86ff2347538e95041ab7b97af25342958"
        }
      ],
      "message": "signingprovider: Add musig2 secnonces\n\nAdds GetMuSig2SecNonces which returns secp256k1_musig_secnonce*, and\nDeleteMuSig2Session which removes the MuSig2 secnonce from wherever it\nwas retrieved. FlatSigningProvider stores it as a pointer to a map of\nsession id to secnonce so that deletion will actually delete from the\nobject that actually owns the secnonces.\n\nThe session id is just a unique identifier for the caller to determine\nwhat secnonces have been created.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-05T21:49:09Z"
      },
      "sha": "4d8b4f53363f013ed3972997f0b05b9c19e9db9d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ5OWEwODE2NzllMTY2Njg0NTg1MTJhYmEyZmQxM2EzZTFiZGIwOWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d99a081679e16668458512aba2fd13a3e1bdb09f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d99a081679e16668458512aba2fd13a3e1bdb09f",
      "tree": {
        "sha": "6553611a7dcca2366f40c1e94cafcf78a9a5ff69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6553611a7dcca2366f40c1e94cafcf78a9a5ff69"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d8b4f53363f013ed3972997f0b05b9c19e9db9d",
          "sha": "4d8b4f53363f013ed3972997f0b05b9c19e9db9d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8b4f53363f013ed3972997f0b05b9c19e9db9d"
        }
      ],
      "message": "psbt: MuSig2 data in Fill/FromSignatureData",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-19T20:28:21Z"
      },
      "sha": "d99a081679e16668458512aba2fd13a3e1bdb09f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgyZWE2N2M2MDdjZGU2MTg3ZDcwODI0MjlkMjdiOTI3ZGMyMWMwYzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82ea67c607cde6187d7082429d27b927dc21c0c6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/82ea67c607cde6187d7082429d27b927dc21c0c6",
      "tree": {
        "sha": "c433ff6fbcf0f90a33aa5a49d429c6716de1f865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c433ff6fbcf0f90a33aa5a49d429c6716de1f865"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d99a081679e16668458512aba2fd13a3e1bdb09f",
          "sha": "d99a081679e16668458512aba2fd13a3e1bdb09f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d99a081679e16668458512aba2fd13a3e1bdb09f"
        }
      ],
      "message": "musig: Add MuSig2AggregatePubkeys variant that validates the aggregate\n\nA common pattern that MuSig2 functions will use is to aggregate the\npubkeys to get the keyagg_cache and then validate the aggregated pubkey\nagainst a provided aggregate pubkey. A variant of MuSig2AggregatePubkeys\nis added which does that.\n\nThe functionality of GetMuSig2KeyAggCache and GetCPubKeyFromMuSig2KeyAggCache\nare included in MuSig2AggregatePubkeys (and used internally) so there is\nno expectation that callers will need these so they are made static.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-08-05T19:38:29Z"
      },
      "sha": "82ea67c607cde6187d7082429d27b927dc21c0c6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUxMmIxN2ZjNTZlYWMzYTJlMmI5YmE0ODliNTQyM2QwOThjY2UwZGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/512b17fc56eac3a2e2b9ba489b5423d098cce0db",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/512b17fc56eac3a2e2b9ba489b5423d098cce0db",
      "tree": {
        "sha": "404484bae4c7102a9b9abcee293b7b7e87d69136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/404484bae4c7102a9b9abcee293b7b7e87d69136"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82ea67c607cde6187d7082429d27b927dc21c0c6",
          "sha": "82ea67c607cde6187d7082429d27b927dc21c0c6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/82ea67c607cde6187d7082429d27b927dc21c0c6"
        }
      ],
      "message": "sign: Add CreateMuSig2Nonce",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-12T20:31:16Z"
      },
      "sha": "512b17fc56eac3a2e2b9ba489b5423d098cce0db"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJmNjk0NDJiM2Y1MDA0ZGMzZGY1YTFiMWQ3NTIxMTRiYTY4ZmE1ZjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf69442b3f5004dc3df5a1b1d752114ba68fa5f4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf69442b3f5004dc3df5a1b1d752114ba68fa5f4",
      "tree": {
        "sha": "7a223ddeb20820a7120499e9ba8be819f7f1792f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a223ddeb20820a7120499e9ba8be819f7f1792f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/512b17fc56eac3a2e2b9ba489b5423d098cce0db",
          "sha": "512b17fc56eac3a2e2b9ba489b5423d098cce0db",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/512b17fc56eac3a2e2b9ba489b5423d098cce0db"
        }
      ],
      "message": "sign: Add CreateMuSig2PartialSig",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-05T21:44:03Z"
      },
      "sha": "bf69442b3f5004dc3df5a1b1d752114ba68fa5f4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI1OGRiOTM4ODk5NDA5YzhlZTFjZWYwNGUxNmJhMTc5NWVhMDAzOGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/258db938899409c8ee1cef04e16ba1795ea0038d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/258db938899409c8ee1cef04e16ba1795ea0038d",
      "tree": {
        "sha": "2c0d201620c703073f40934a3129240c5586573c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c0d201620c703073f40934a3129240c5586573c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf69442b3f5004dc3df5a1b1d752114ba68fa5f4",
          "sha": "bf69442b3f5004dc3df5a1b1d752114ba68fa5f4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf69442b3f5004dc3df5a1b1d752114ba68fa5f4"
        }
      ],
      "message": "sign: Add CreateMuSig2AggregateSig",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:06:43Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-29T22:32:49Z"
      },
      "sha": "258db938899409c8ee1cef04e16ba1795ea0038d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRhMjczZWRkYTBlYzEwZjBjNWFlNWQ5NGI5OTI1ZmEzMzRkMWM2ZTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6",
      "tree": {
        "sha": "91f09da5ccc861e4463845ea3152a52e4ec3f5fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91f09da5ccc861e4463845ea3152a52e4ec3f5fe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/258db938899409c8ee1cef04e16ba1795ea0038d",
          "sha": "258db938899409c8ee1cef04e16ba1795ea0038d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/258db938899409c8ee1cef04e16ba1795ea0038d"
        }
      ],
      "message": "sign: Create MuSig2 signatures for known MuSig2 aggregate keys\n\nWhen creating Taproot signatures, if the key being signed for is known\nto be a MuSig2 aggregate key, do the MuSig2 signing algorithms.\n\nFirst try to create the aggregate signature. This will fail if there are\nnot enough partial signatures or public nonces. If it does fail, try to\ncreate a partial signature with all participant keys. This will fail for\nthose keys that we do not have the private keys for, and if there are\nnot enough public nonces. Lastly, if the partial signatures could not be\ncreated, add our own public nonces for the private keys that we know, if\nthey do not yet exist.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:15:36Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-05T20:57:01Z"
      },
      "sha": "4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY4ZWY5NTRjNGM1OTgwMmE2ODEwYTQ2MmVhYThkZDYxNzI4YmE4MjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68ef954c4c59802a6810a462eaa8dd61728ba820",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/68ef954c4c59802a6810a462eaa8dd61728ba820",
      "tree": {
        "sha": "2476171139a6dfd2e7167a3ab5a5c641069697c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2476171139a6dfd2e7167a3ab5a5c641069697c5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6",
          "sha": "4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6"
        }
      ],
      "message": "wallet: Keep secnonces in DescriptorScriptPubKeyMan",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:15:38Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-02-12T22:33:44Z"
      },
      "sha": "68ef954c4c59802a6810a462eaa8dd61728ba820"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFjNTk5YzRhOWNiM2IyZDQyNDkzMmQzZmQ5MWY5ZWVkMTc0MjY4Mjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "tree": {
        "sha": "f10fe0305b83878cfbb71ed4584e32cf31193a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f10fe0305b83878cfbb71ed4584e32cf31193a58"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68ef954c4c59802a6810a462eaa8dd61728ba820",
          "sha": "68ef954c4c59802a6810a462eaa8dd61728ba820",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/68ef954c4c59802a6810a462eaa8dd61728ba820"
        }
      ],
      "message": "test: Test MuSig2 in the wallet",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-09-30T18:15:38Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-03-04T21:34:42Z"
      },
      "sha": "ac599c4a9cb3b2d424932d3fd91f9eed17426827"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20016629114,
      "node_id": "HRFPE_lADOABII586CvrSDzwAAAASpFYV6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20016629114",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "created_at": "2025-09-30T18:19:52Z"
    },
    {
      "event": "reviewed",
      "id": 3288310595,
      "node_id": "PRR_kwDOABII587D_6ND",
      "url": null,
      "actor": null,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-01T13:02:43Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  receive and spend from imported musig(0 descriptors.\r\n\r\nIs this a typo in the PR description?\r\n\r\n----\r\nThis was a big PR that required me to split the review into multiple parts in which I tried to think of scenarios that could cause the flow to break or to be unsafe. \r\n\r\nFew points from my understanding of this PR:\r\n\r\n1. Appropriate steps are taken to secure the `MuSig2SecNonce`.\r\n    - It is stored only in memory - never backed up on disk, or serialised. Okay with the tradeoff of having to restart the MuSig2 signing session when the node is restarted.\r\n    - Uses `secure_unique_ptr` that `memory_cleanse`s while destructing the object. The same one that's used for `CKey` in the wallet, and the same one that's recommended in the `libsecp` example - helps in having the compiler not optimising away the `memset` that clears the `SecNonce` before destruction.\r\n    - Also used via `secure_unique_ptr` is `LockedPoolManager` that ensures non-swappable memory.\r\n    - The `secp256k1_context` is destroyed in the MuSig2 example in `libsecp`; in the wallet though, it appears it is created (along with being randomised) and is destroyed on node start & shutdown.\r\n\r\n2. There is some redundancy in `sighash` calculation wherein it's calculated multiple times in the same flow; it can be addressed in a follow-up: https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2382674470\r\n\r\n3. Inclining to agree that the MuSig2 functions can be moved from CKey to `musig.cpp` later where it seems more suitable; in only 2 places `secp256k1_context_sign` is used: https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2265077463\r\n\r\n4. Thorough functional testing gives more confidence because it covers various cases such as:\r\n a. both single & multiple `musig` portions in the descriptor, \r\n b. both `rawtr` and `tr` descriptors, \r\n c. different sighash types, \r\n d. same descriptor spending through key and script path in case of missing signers, \r\n e. only 1 wallet with the Musig descriptor with rest being just plain signers having individual keys.\r\n\r\nThanks for addressing all the comments previously in the partial reviews.\r\n\r\nRange diff from last review:\r\n```zsh\r\ngit range-diff 36f8355...ac599c4\r\n```\r\n\r\nI might take another look after few days if I feel I missed something.\r\n\r\nlgtm tACK ac599c4a9cb3b2d424932d3fd91f9eed17426827\r\n",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3288310595",
      "submitted_at": "2025-10-01T09:38:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "review_requested",
      "id": 20029804516,
      "node_id": "RRE_lADOABII586CvrSDzwAAAASp3o_k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20029804516",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-01T09:38:14Z",
      "requested_reviewer": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 20029804824,
      "node_id": "RRE_lADOABII586CvrSDzwAAAASp3pEY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20029804824",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-01T09:38:15Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 20029805178,
      "node_id": "RRE_lADOABII586CvrSDzwAAAASp3pJ6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20029805178",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-01T09:38:16Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3290195368,
      "node_id": "PRR_kwDOABII587EHGWo",
      "url": null,
      "actor": null,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-01T17:55:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code-review ACK ac599c4a9cb3b2d424932d3fd91f9eed17426827 :old_key: \r\n\r\nHappy to review potential follow-ups.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3290195368",
      "submitted_at": "2025-10-01T17:55:59Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "reviewed",
      "id": 3284917169,
      "node_id": "PRR_kwDOABII587Dy9ux",
      "url": null,
      "actor": null,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-02T13:54:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Looks very good to me, I am just curious about the two questions I have from my last pass, but I am happy to ACK once these are addressed (with code or comment).\r\n\r\nFWIW, I didn't like that the functional test only checked the happy path, so I drafted some tests for failure scenarios here: https://github.com/fjahr/bitcoin/commit/889af13325a0f5fa16c2da6d71808f5fa6f15a1d I will open this as a follow-up after merge.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#pullrequestreview-3284917169",
      "submitted_at": "2025-10-01T22:22:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
    },
    {
      "event": "commented",
      "id": 3368298124,
      "node_id": "IC_kwDOABII587IxCaM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3368298124",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-04T14:28:52Z",
      "updated_at": "2025-10-04T14:28:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK ac599c4a9cb3b2d424932d3fd91f9eed17426827\r\n\r\nI might just address some of the left-over comments in a follow-up together with my additional tests, if this PR doesn't get retouched anymore.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3368298124",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "merged",
      "id": 20278903298,
      "node_id": "ME_lADOABII586CvrSDzwAAAAS4t4IC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278903298",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "48aa0e98d0b70244658b41d7378c295f3e1dadcd",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48aa0e98d0b70244658b41d7378c295f3e1dadcd",
      "created_at": "2025-10-14T20:26:24Z"
    },
    {
      "event": "closed",
      "id": 20278903440,
      "node_id": "CE_lADOABII586CvrSDzwAAAAS4t4KQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20278903440",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-14T20:26:24Z"
    },
    {
      "event": "commented",
      "id": 3408681878,
      "node_id": "IC_kwDOABII587LLFuW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3408681878",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-16T00:03:55Z",
      "updated_at": "2025-10-16T00:03:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have opened a PR with my tests and the left-over nits here: #33636",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3408681878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    },
    {
      "event": "referenced",
      "id": 20396688901,
      "node_id": "REFE_lADOABII586CvrSDzwAAAAS_vMYF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20396688901",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "54a37dde6132e66c3e35829b45ebcd00234ccaee",
      "commit_url": "https://api.github.com/repos/rkrux/bitcoin/commits/54a37dde6132e66c3e35829b45ebcd00234ccaee",
      "created_at": "2025-10-21T07:19:38Z"
    },
    {
      "event": "referenced",
      "id": 20396715241,
      "node_id": "REFE_lADOABII586CvrSDzwAAAAS_vSzp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20396715241",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "53b84813e0de9c85640cb82a85fd1fd5b0d35504",
      "commit_url": "https://api.github.com/repos/rkrux/bitcoin/commits/53b84813e0de9c85640cb82a85fd1fd5b0d35504",
      "created_at": "2025-10-21T07:20:24Z"
    },
    {
      "event": "commented",
      "id": 3430815886,
      "node_id": "IC_kwDOABII587MfhiO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3430815886",
      "actor": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-22T07:24:07Z",
      "updated_at": "2025-10-22T07:24:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Opened a PR for removal of redundant sighash calculation here: #33665.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3430815886",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29675"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530133148",
      "pull_request_review_id": 1945828953,
      "id": 1530133148,
      "node_id": "PRRC_kwDOABII585bM_qc",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet_util import WalletUnlock\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            # Deal with the multipath descriptor syntax for external and internal\n+            if has_int:\n+                ext_desc = \"\"\n+                int_desc = \"\"\n+                for m in MULTIPATH_RE.finditer(desc):\n+                    ext_desc += m.group(1) + m.group(2)\n+                    int_desc += m.group(1) + m.group(3)\n+                postfix = desc.split(\">\")[-1]\n+                ext_desc += postfix\n+                int_desc += postfix\n+\n+                import_descs.append({\n+                    \"desc\": descsum_create(int_desc),\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                })\n+            else:\n+                ext_desc = desc\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(ext_desc),\n+                \"active\": True,\n+                \"internal\": False,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])\n+        # Check that there are as many participants as we expected\n+        assert_equal(len(part_pks), len(keys))\n+        # Check that each participant has a derivation path\n+        for deriv_path in dec_psbt[\"inputs\"][0][\"taproot_bip32_derivs\"]:\n+            if deriv_path[\"pubkey\"] in part_pks:\n+                part_pks.remove(deriv_path[\"pubkey\"])\n+        assert_equal(len(part_pks), 0)\n+\n+        nonce_psbts = []",
      "path": "test/functional/wallet_musig.py",
      "position": 158,
      "original_position": 149,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "a1e4c323dbff9fa5095cf216d7cd528f10a1feeb",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a1e4c323dbff9fa5095cf216d7cd528f10a1feeb: I assume this where the first nonce collection round starts, maybe say so in a comment?",
      "created_at": "2024-03-19T10:49:30Z",
      "updated_at": "2024-03-19T14:22:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r1530133148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530133148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530136029",
      "pull_request_review_id": 1945828953,
      "id": 1530136029,
      "node_id": "PRRC_kwDOABII585bNAXd",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet_util import WalletUnlock\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            # Deal with the multipath descriptor syntax for external and internal\n+            if has_int:\n+                ext_desc = \"\"\n+                int_desc = \"\"\n+                for m in MULTIPATH_RE.finditer(desc):\n+                    ext_desc += m.group(1) + m.group(2)\n+                    int_desc += m.group(1) + m.group(3)\n+                postfix = desc.split(\">\")[-1]\n+                ext_desc += postfix\n+                int_desc += postfix\n+\n+                import_descs.append({\n+                    \"desc\": descsum_create(int_desc),\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                })\n+            else:\n+                ext_desc = desc\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(ext_desc),\n+                \"active\": True,\n+                \"internal\": False,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])\n+        # Check that there are as many participants as we expected\n+        assert_equal(len(part_pks), len(keys))\n+        # Check that each participant has a derivation path\n+        for deriv_path in dec_psbt[\"inputs\"][0][\"taproot_bip32_derivs\"]:\n+            if deriv_path[\"pubkey\"] in part_pks:\n+                part_pks.remove(deriv_path[\"pubkey\"])\n+        assert_equal(len(part_pks), 0)\n+\n+        nonce_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), exp_key_leaf)\n+\n+        psig_psbts = []",
      "path": "test/functional/wallet_musig.py",
      "position": 184,
      "original_position": 160,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "a1e4c323dbff9fa5095cf216d7cd528f10a1feeb",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a1e4c323dbff9fa5095cf216d7cd528f10a1feeb: and that this is where round 2 happens (maybe link to the BIP at the top of the test and briefly summarise the steps)",
      "created_at": "2024-03-19T10:51:45Z",
      "updated_at": "2024-03-19T14:22:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r1530136029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530136029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530139689",
      "pull_request_review_id": 1945828953,
      "id": 1530139689,
      "node_id": "PRRC_kwDOABII585bNBQp",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet_util import WalletUnlock\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            # Deal with the multipath descriptor syntax for external and internal\n+            if has_int:\n+                ext_desc = \"\"\n+                int_desc = \"\"\n+                for m in MULTIPATH_RE.finditer(desc):\n+                    ext_desc += m.group(1) + m.group(2)\n+                    int_desc += m.group(1) + m.group(3)\n+                postfix = desc.split(\">\")[-1]\n+                ext_desc += postfix\n+                int_desc += postfix\n+\n+                import_descs.append({\n+                    \"desc\": descsum_create(int_desc),\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                })\n+            else:\n+                ext_desc = desc\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(ext_desc),\n+                \"active\": True,\n+                \"internal\": False,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])\n+        # Check that there are as many participants as we expected\n+        assert_equal(len(part_pks), len(keys))\n+        # Check that each participant has a derivation path\n+        for deriv_path in dec_psbt[\"inputs\"][0][\"taproot_bip32_derivs\"]:\n+            if deriv_path[\"pubkey\"] in part_pks:\n+                part_pks.remove(deriv_path[\"pubkey\"])\n+        assert_equal(len(part_pks), 0)\n+\n+        nonce_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), exp_key_leaf)\n+\n+        psig_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(comb_nonce_psbt)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)",
      "path": "test/functional/wallet_musig.py",
      "position": 192,
      "original_position": 166,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "a1e4c323dbff9fa5095cf216d7cd528f10a1feeb",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a1e4c323dbff9fa5095cf216d7cd528f10a1feeb: because all wallets live on the same node, it's useful to point out here that _anyone_, including non-participants can combine the partial signatures. Which is why the non-wallet `combinepsbt` and `finalizepsbt` RPC's are used.",
      "created_at": "2024-03-19T10:54:32Z",
      "updated_at": "2024-03-19T14:22:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r1530139689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530139689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829804219",
      "pull_request_review_id": 2416370202,
      "id": 1829804219,
      "node_id": "PRRC_kwDOABII585tEJi7",
      "diff_hunk": "@@ -50,6 +50,9 @@ static constexpr uint8_t PSBT_IN_TAP_LEAF_SCRIPT = 0x15;\n static constexpr uint8_t PSBT_IN_TAP_BIP32_DERIVATION = 0x16;\n static constexpr uint8_t PSBT_IN_TAP_INTERNAL_KEY = 0x17;\n static constexpr uint8_t PSBT_IN_TAP_MERKLE_ROOT = 0x18;\n+static constexpr uint8_t PSBT_IN_MUSIG2_PARTICIPANT_PUBKEYS = 0x19;\n+static constexpr uint8_t PSBT_IN_MUSIG2_PUB_NONCE = 0x1a;\n+static constexpr uint8_t PSBT_IN_MUSIG2_PARTIAL_SIG = 0x1b;",
      "path": "src/psbt.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6d8213dda33fb8e1ad2f7746e5a5f5433bd27f5e",
      "in_reply_to_id": null,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These three constants are `0x1a` , `0x1b`, `0x1c` in the final version of [BIP-373](https://github.com/bitcoin/bips/blob/master/bip-0373.mediawiki).",
      "created_at": "2024-11-05T18:09:30Z",
      "updated_at": "2024-11-05T18:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r1829804219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829804219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829944320",
      "pull_request_review_id": 2416597491,
      "id": 1829944320,
      "node_id": "PRRC_kwDOABII585tErwA",
      "diff_hunk": "@@ -50,6 +50,9 @@ static constexpr uint8_t PSBT_IN_TAP_LEAF_SCRIPT = 0x15;\n static constexpr uint8_t PSBT_IN_TAP_BIP32_DERIVATION = 0x16;\n static constexpr uint8_t PSBT_IN_TAP_INTERNAL_KEY = 0x17;\n static constexpr uint8_t PSBT_IN_TAP_MERKLE_ROOT = 0x18;\n+static constexpr uint8_t PSBT_IN_MUSIG2_PARTICIPANT_PUBKEYS = 0x19;\n+static constexpr uint8_t PSBT_IN_MUSIG2_PUB_NONCE = 0x1a;\n+static constexpr uint8_t PSBT_IN_MUSIG2_PARTIAL_SIG = 0x1b;",
      "path": "src/psbt.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6d8213dda33fb8e1ad2f7746e5a5f5433bd27f5e",
      "in_reply_to_id": 1829804219,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good catch! Fixed.",
      "created_at": "2024-11-05T20:11:54Z",
      "updated_at": "2024-11-05T20:11:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r1829944320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1829944320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128836472",
      "pull_request_review_id": 2900301627,
      "id": 2128836472,
      "node_id": "PRRC_kwDOABII585-43d4",
      "diff_hunk": "@@ -40,8 +40,7 @@ std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkey\n class MuSig2SecNonce\n {\n private:\n-    //! The actual secnonce itself\n-    secure_unique_ptr<secp256k1_musig_secnonce> m_nonce;\n+    std::unique_ptr<MuSig2SecNonceImpl> m_impl;",
      "path": "src/musig.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "5e90a3c747ac2d44f9f52a3eeffbbe391f837bd8",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 5e90a3c747ac2d44f9f52a3eeffbbe391f837bd8: seems like this change should be part of the earlier commit 01f639835783aa10d4c4b63da477c0300bc8495f, which currently doesn't compile\r\n```\r\n...\r\nIn file included from /home/thestack/bitcoin_prrev/pr29675/src/musig.cpp:5:\r\n/home/thestack/bitcoin_prrev/pr29675/src/musig.h:44:5: error: no template named 'secure_unique_ptr'\r\n    secure_unique_ptr<secp256k1_musig_secnonce> m_nonce;\r\n\r\n/home/thestack/bitcoin_prrev/pr29675/src/musig.cpp:74:36: error: member initializer 'm_impl' does not name a non-static data member or base class\r\nMuSig2SecNonce::MuSig2SecNonce() : m_impl{std::make_unique<MuSig2SecNonceImpl>()} {}\r\n...\r\n```\r\n(not sure why the test-each-commit CI job doesn't detect this though?)",
      "created_at": "2025-06-05T13:17:22Z",
      "updated_at": "2025-06-05T13:18:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2128836472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128836472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 43,
      "start_side": "LEFT",
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128878830",
      "pull_request_review_id": 2900374624,
      "id": 2128878830,
      "node_id": "PRRC_kwDOABII585-5Bzu",
      "diff_hunk": "@@ -40,8 +40,7 @@ std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkey\n class MuSig2SecNonce\n {\n private:\n-    //! The actual secnonce itself\n-    secure_unique_ptr<secp256k1_musig_secnonce> m_nonce;\n+    std::unique_ptr<MuSig2SecNonceImpl> m_impl;",
      "path": "src/musig.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "5e90a3c747ac2d44f9f52a3eeffbbe391f837bd8",
      "in_reply_to_id": 2128836472,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@theStack it only runs the most recent N (6?) commits.",
      "created_at": "2025-06-05T13:36:47Z",
      "updated_at": "2025-06-05T13:36:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2128878830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128878830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 43,
      "start_side": "LEFT",
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130337922",
      "pull_request_review_id": 2902309133,
      "id": 2130337922,
      "node_id": "PRRC_kwDOABII585--mCC",
      "diff_hunk": "@@ -40,8 +40,7 @@ std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkey\n class MuSig2SecNonce\n {\n private:\n-    //! The actual secnonce itself\n-    secure_unique_ptr<secp256k1_musig_secnonce> m_nonce;\n+    std::unique_ptr<MuSig2SecNonceImpl> m_impl;",
      "path": "src/musig.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "5e90a3c747ac2d44f9f52a3eeffbbe391f837bd8",
      "in_reply_to_id": 2128836472,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed",
      "created_at": "2025-06-05T20:55:00Z",
      "updated_at": "2025-06-05T20:55:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2130337922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130337922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 43,
      "start_side": "LEFT",
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244500941",
      "pull_request_review_id": 3074175438,
      "id": 2244500941,
      "node_id": "PRRC_kwDOABII586FyF3N",
      "diff_hunk": "@@ -224,7 +224,7 @@ class CPubKey\n     bool Decompress();\n \n     //! Derive BIP32 child pubkey.\n-    [[nodiscard]] bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n+    [[nodiscard]] bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc, uint256& tweak_out) const;",
      "path": "src/pubkey.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "5ff19c37af53f6ebcd69a9973ededcbadd69d3bd",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 5ff19c37af53f6ebcd69a9973ededcbadd69d3bd _pubkey: Return tweaks from BIP32 derivation_: in BIP32 this is I<sub>L</sub> which isn't given a name. In libsecp it's called tweak, so I guess that's fine. \r\n\r\nAlthough maybe `bip32_tweak` is better, so as not to confuse it with the tweaks in taproot.\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#public-parent-key--public-child-key\r\n\r\n\r\n\r\n",
      "created_at": "2025-07-31T06:48:21Z",
      "updated_at": "2025-07-31T08:14:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2244500941",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244500941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244536549",
      "pull_request_review_id": 3074175438,
      "id": 2244536549,
      "node_id": "PRRC_kwDOABII586FyOjl",
      "diff_hunk": "@@ -355,11 +355,19 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n \n     // Try key path spending.\n     {\n-        KeyOriginInfo info;\n-        if (provider.GetKeyOriginByXOnly(sigdata.tr_spenddata.internal_key, info)) {\n+        KeyOriginInfo internal_key_info;\n+        if (provider.GetKeyOriginByXOnly(sigdata.tr_spenddata.internal_key, internal_key_info)) {\n             auto it = sigdata.taproot_misc_pubkeys.find(sigdata.tr_spenddata.internal_key);\n             if (it == sigdata.taproot_misc_pubkeys.end()) {\n-                sigdata.taproot_misc_pubkeys.emplace(sigdata.tr_spenddata.internal_key, std::make_pair(std::set<uint256>(), info));\n+                sigdata.taproot_misc_pubkeys.emplace(sigdata.tr_spenddata.internal_key, std::make_pair(std::set<uint256>(), internal_key_info));\n+            }\n+        }\n+\n+        KeyOriginInfo output_key_info;\n+        if (provider.GetKeyOriginByXOnly(output, output_key_info)) {\n+            auto it = sigdata.taproot_misc_pubkeys.find(output);\n+            if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                sigdata.taproot_misc_pubkeys.emplace(output, std::make_pair(std::set<uint256>(), output_key_info));",
      "path": "src/script/sign.cpp",
      "position": 317,
      "original_position": 19,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "1d4fdeb63792988b4fb93cf8e84142a3a5b34a39",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 1d4fdeb63792988b4fb93cf8e84142a3a5b34a39 _sign: Include taproot output key's KeyOriginInfo in sigdata_: can you update the description of `taproot_misc_pubkeys` to mention that this can now also include the output key?",
      "created_at": "2025-07-31T07:07:11Z",
      "updated_at": "2025-07-31T08:14:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2244536549",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244536549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 575,
      "original_line": 575,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244604441",
      "pull_request_review_id": 3074175438,
      "id": 2244604441,
      "node_id": "PRRC_kwDOABII586FyfIZ",
      "diff_hunk": "@@ -94,6 +109,24 @@ std::vector<CPubKey> FlatSigningProvider::GetMuSig2ParticipantPubkeys(const CPub\n     return participant_pubkeys;\n }\n \n+void FlatSigningProvider::SetMuSig2SecNonce(const uint256& session_id, MuSig2SecNonce&& nonce) const\n+{\n+    if (!musig2_secnonces) return;\n+    musig2_secnonces->emplace(session_id, std::move(nonce));\n+}\n+\n+std::optional<std::reference_wrapper<MuSig2SecNonce>> FlatSigningProvider::GetMuSig2SecNonce(const uint256& session_id) const\n+{",
      "path": "src/script/signingprovider.cpp",
      "position": 43,
      "original_position": 33,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "f4b4c704e40cc11663dbdaa156b1775be668a15f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4b4c704e40cc11663dbdaa156b1775be668a15f _signingprovider: Add musig2 secnonces_: needs guard?\r\n\r\n```cpp\r\nif (!musig2_secnonces) return std::nullopt;\r\n```\r\n\r\nDitto for `DeleteMuSig2Session`",
      "created_at": "2025-07-31T07:39:19Z",
      "updated_at": "2025-07-31T08:14:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2244604441",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244604441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 129,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244607495",
      "pull_request_review_id": 3074175438,
      "id": 2244607495,
      "node_id": "PRRC_kwDOABII586Fyf4H",
      "diff_hunk": "@@ -94,6 +109,24 @@ std::vector<CPubKey> FlatSigningProvider::GetMuSig2ParticipantPubkeys(const CPub\n     return participant_pubkeys;\n }\n \n+void FlatSigningProvider::SetMuSig2SecNonce(const uint256& session_id, MuSig2SecNonce&& nonce) const\n+{\n+    if (!musig2_secnonces) return;",
      "path": "src/script/signingprovider.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "f4b4c704e40cc11663dbdaa156b1775be668a15f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4b4c704e40cc11663dbdaa156b1775be668a15f _signingprovider: Add musig2 secnonces_: maybe add an `Assume` here?",
      "created_at": "2025-07-31T07:40:36Z",
      "updated_at": "2025-07-31T08:14:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2244607495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244607495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244611331",
      "pull_request_review_id": 3074175438,
      "id": 2244611331,
      "node_id": "PRRC_kwDOABII586Fyg0D",
      "diff_hunk": "@@ -102,6 +135,7 @@ FlatSigningProvider& FlatSigningProvider::Merge(FlatSigningProvider&& b)\n     origins.merge(b.origins);\n     tr_trees.merge(b.tr_trees);\n     aggregate_pubkeys.merge(b.aggregate_pubkeys);\n+    if (!musig2_secnonces) musig2_secnonces = b.musig2_secnonces;",
      "path": "src/script/signingprovider.cpp",
      "position": 64,
      "original_position": 51,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "f4b4c704e40cc11663dbdaa156b1775be668a15f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4b4c704e40cc11663dbdaa156b1775be668a15f _signingprovider: Add musig2 secnonces_: I guess there's no realistic scenario where two different sessions actually need to be merged, but maybe add a comment to point this out.",
      "created_at": "2025-07-31T07:42:19Z",
      "updated_at": "2025-07-31T08:14:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2244611331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244611331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244627473",
      "pull_request_review_id": 3074175438,
      "id": 2244627473,
      "node_id": "PRRC_kwDOABII586FykwR",
      "diff_hunk": "@@ -130,6 +132,35 @@ bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vec\n     return true;\n }\n \n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve the private key\n+    CKey key;\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return {};\n+\n+    // Retrieve participant pubkeys\n+    std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\n+    if (!pubkeys.size()) return {};",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "ae6889565af3afed567e08976b4bc0f0381d0bf8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In ae6889565af3afed567e08976b4bc0f0381d0bf8 _sign: Add CreateMuSig2Nonce_: maybe sanity check that `part_pubkey` is in `pubkeys`?",
      "created_at": "2025-07-31T07:49:48Z",
      "updated_at": "2025-07-31T08:14:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2244627473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244627473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244656095",
      "pull_request_review_id": 3074175438,
      "id": 2244656095,
      "node_id": "PRRC_kwDOABII586Fyrvf",
      "diff_hunk": "@@ -130,6 +132,35 @@ bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vec\n     return true;\n }\n \n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve the private key\n+    CKey key;\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return {};\n+\n+    // Retrieve participant pubkeys\n+    std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\n+    if (!pubkeys.size()) return {};\n+\n+    // Compute sighash\n+    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\n+    if (!sighash.has_value()) return {};\n+\n+    MuSig2SecNonce secnonce;\n+    std::vector<uint8_t> out = key.CreateMuSig2Nonce(secnonce, *sighash, aggregate_pubkey, pubkeys);\n+    if (out.empty()) return {};\n+\n+    // Store the secnonce in the SigningProvider\n+    HashWriter hasher;\n+    hasher << script_pubkey << part_pubkey << *sighash;",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "ae6889565af3afed567e08976b4bc0f0381d0bf8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In ae6889565af3afed567e08976b4bc0f0381d0bf8 _sign: Add CreateMuSig2Nonce_: it's not clear to me how careful we need to be regarding parallel sessions.\r\n\r\nIf it's not a big deal then I guess the current choice is fine. Since the same key can be used in multiple tap leaves, we need a unique nonce per leaf, which sighash takes care of. We might have multiple participant keys, which `part_pubkey` takes care of.\r\n\r\n`script_pubkey` isn't enough to cover address reuse, but _for now_ `ComputeSchnorrSignatureHash` is limited to `SIGHASH_DEFAULT`, which commits to the prevout. Maybe for good measure add an `Assume` for `SIGHASH_DEFAULT`?\r\n\r\nIf it _is_ a big deal, then I think libsecp should give us a function to generate it.",
      "created_at": "2025-07-31T08:02:22Z",
      "updated_at": "2025-07-31T08:14:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2244656095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2244656095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254807599",
      "pull_request_review_id": 3088948515,
      "id": 2254807599,
      "node_id": "PRRC_kwDOABII586GZaIv",
      "diff_hunk": "@@ -338,13 +338,14 @@ bool CPubKey::Decompress() {\n     return true;\n }\n \n-bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n+bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc, uint256& tweak_out) const {",
      "path": "src/pubkey.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "c78d25b89074325ea37185ca87bb00385ad4ab20",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit c78d25b89074325ea37185ca87bb00385ad4ab20: alternatively, could pass `tweak_out` as pointer (set to `nullptr` by default, in which case no memcpy would happen) here and for `CExtPubkey::Derive` to avoid the method overloading for the latter",
      "created_at": "2025-08-05T16:35:17Z",
      "updated_at": "2025-08-05T17:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2254807599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254807599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254818672",
      "pull_request_review_id": 3088948515,
      "id": 2254818672,
      "node_id": "PRRC_kwDOABII586GZc1w",
      "diff_hunk": "@@ -23,4 +25,35 @@ std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_ca\n //! Compute the full aggregate pubkey from the given participant pubkeys in their current order\n std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);\n \n+/**\n+ * MuSig2SecNonce encapsulates a secret nonce in use in a MuSig2 signing session.\n+ * Since this nonce persists outside of libsecp256k1 signing code, we must handle\n+ * its construction and destruction ourselves.\n+ * The secret nonce must be kept a secret, otherwise the private key may be leaked.\n+ * As such, it needs to be treated in the same way that CKeys are treated.\n+ * So this class handles the secure allocation of the secp25k1_musig_secnonce object",
      "path": "src/musig.h",
      "position": 1,
      "original_position": 19,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "751b1884b1e4cea822eaabe2423e914bc28dbede",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * So this class handles the secure allocation of the secp256k1_musig_secnonce object\r\n```",
      "created_at": "2025-08-05T16:40:22Z",
      "updated_at": "2025-08-05T17:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2254818672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254818672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254953402",
      "pull_request_review_id": 3088948515,
      "id": 2254953402,
      "node_id": "PRRC_kwDOABII586GZ9u6",
      "diff_hunk": "@@ -92,3 +92,92 @@ bool MuSig2SecNonce::IsValid()\n {\n     return m_impl->IsValid();\n }\n+\n+std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs)\n+{\n+    if (!participants.size()) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!GetMuSig2KeyAggCache(participants, keyagg_cache)) return std::nullopt;\n+    std::optional<CPubKey> agg_key = GetCPubKeyFromMuSig2KeyAggCache(keyagg_cache);\n+    if (!agg_key.has_value()) return std::nullopt;\n+    if (aggregate_pubkey != *agg_key) return std::nullopt;",
      "path": "src/musig.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "0c420772247ff51b510d44061a2e94e3f5195899",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in 0c420772247ff51b510d44061a2e94e3f5195899: this pattern of creating the keyagg cache and verifying it against a given aggregate pubkey appears more often in later commits (in `CKey::CreateMuSig2Nonce` and `CKey::CreateMuSig2PartialSig`), so could refactor it into an own helper (can be done in a follow-up though)",
      "created_at": "2025-08-05T17:42:01Z",
      "updated_at": "2025-08-05T17:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2254953402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254953402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254957752",
      "pull_request_review_id": 3088948515,
      "id": 2254957752,
      "node_id": "PRRC_kwDOABII586GZ-y4",
      "diff_hunk": "@@ -283,11 +283,93 @@ static bool CreateTaprootScriptSig(const BaseSignatureCreator& creator, Signatur\n         sig_out = it->second;\n         return true;\n     }\n+\n     if (creator.CreateSchnorrSig(provider, sig_out, pubkey, &leaf_hash, nullptr, sigversion)) {\n         sigdata.taproot_script_sigs[lookup_key] = sig_out;\n-        return true;\n+    } else {\n+        auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(pubkey);\n+        if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+            info = misc_pk_it->second.second;\n+        }\n+\n+        for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+            if (part_pks.empty()) continue;\n+\n+            // Fill participant derivation path info\n+            for (const auto& part_pk : part_pks) {\n+                KeyOriginInfo part_info;\n+                if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                    XOnlyPubKey xonly_part(part_pk);\n+                    auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                    if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                        sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>({leaf_hash}), part_info));\n+                    } else {\n+                        it->second.first.insert(leaf_hash);\n+                    }\n+                }\n+            }\n+\n+            std::vector<std::pair<uint256, bool>> tweaks;\n+            CPubKey plain_pub = agg_pub;\n+            if (XOnlyPubKey(agg_pub) != pubkey) {\n+                if (info.path.size() > 0) {\n+                    // Compute and compare fingerprint\n+                    CKeyID keyid = agg_pub.GetID();\n+                    if (std::memcmp(keyid.data(), info.fingerprint, sizeof(info.fingerprint)) != 0) {\n+                        continue;\n+                    }\n+                    // Get the BIP32 derivation tweaks\n+                    CExtPubKey extpub;\n+                    extpub.nDepth = 0;\n+                    std::memset(extpub.vchFingerprint, 0, 4);\n+                    extpub.nChild = 0;\n+                    extpub.chaincode = uint256::FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\").value();",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 45,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "1165b7aab929ee193e64a6dee5b8e0dc1e7366c5",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could use the `MUSIG_CHAINCODE` constant, here and in `SignTaproot` below",
      "created_at": "2025-08-05T17:44:09Z",
      "updated_at": "2025-08-05T17:52:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2254957752",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254957752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254970515",
      "pull_request_review_id": 3088948515,
      "id": 2254970515,
      "node_id": "PRRC_kwDOABII586GaB6T",
      "diff_hunk": "@@ -92,3 +92,92 @@ bool MuSig2SecNonce::IsValid()\n {\n     return m_impl->IsValid();\n }\n+\n+std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs)\n+{\n+    if (!participants.size()) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!GetMuSig2KeyAggCache(participants, keyagg_cache)) return std::nullopt;\n+    std::optional<CPubKey> agg_key = GetCPubKeyFromMuSig2KeyAggCache(keyagg_cache);\n+    if (!agg_key.has_value()) return std::nullopt;\n+    if (aggregate_pubkey != *agg_key) return std::nullopt;\n+\n+    // Check if enough pubnonces and partial sigs\n+    if (pubnonces.size() != participants.size()) return std::nullopt;\n+    if (partial_sigs.size() != participants.size()) return std::nullopt;\n+\n+    // Parse the pubnonces and partial sigs\n+    std::vector<std::tuple<secp256k1_pubkey, secp256k1_musig_pubnonce, secp256k1_musig_partial_sig>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::vector<const secp256k1_musig_partial_sig*> partial_sig_ptrs;\n+    for (const CPubKey& part_pk : participants) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;\n+        const auto& it = partial_sigs.find(part_pk);\n+        if (it == partial_sigs.end()) return std::nullopt;\n+        const uint256& partial_sig = it->second;\n+\n+        auto& [secp_pk, secp_pn, secp_ps] = signers_data.emplace_back();\n+\n+        if (!secp256k1_ec_pubkey_parse(secp256k1_context_static, &secp_pk, part_pk.data(), part_pk.size())) {\n+            return std::nullopt;\n+        }\n+\n+        if (!secp256k1_musig_pubnonce_parse(secp256k1_context_static, &secp_pn, pubnonce.data())) {\n+            return std::nullopt;\n+        }\n+\n+        if (!secp256k1_musig_partial_sig_parse(secp256k1_context_static, &secp_ps, partial_sig.data())) {\n+            return std::nullopt;\n+        }\n+    }\n+    pubnonce_ptrs.reserve(signers_data.size());\n+    partial_sig_ptrs.reserve(signers_data.size());\n+    for (auto& [_, pn, ps] : signers_data) {\n+        pubnonce_ptrs.push_back(&pn);\n+        partial_sig_ptrs.push_back(&ps);\n+    }\n+\n+    // Aggregate nonces\n+    secp256k1_musig_aggnonce aggnonce;\n+    if (!secp256k1_musig_nonce_agg(secp256k1_context_static, &aggnonce, pubnonce_ptrs.data(), pubnonce_ptrs.size())) {\n+        return std::nullopt;\n+    }\n+\n+    // Apply tweaks\n+    for (const auto& [tweak, xonly] : tweaks) {\n+        if (xonly) {\n+            if (!secp256k1_musig_pubkey_xonly_tweak_add(secp256k1_context_static, nullptr, &keyagg_cache, tweak.data())) {\n+                return std::nullopt;\n+            }\n+        } else if (!secp256k1_musig_pubkey_ec_tweak_add(secp256k1_context_static, nullptr, &keyagg_cache, tweak.data())) {\n+            return std::nullopt;\n+        }\n+    }\n+\n+    // Create musig_session\n+    secp256k1_musig_session session;\n+    if (!secp256k1_musig_nonce_process(secp256k1_context_static, &session, &aggnonce, sighash.data(), &keyagg_cache)) {\n+        return std::nullopt;\n+    }\n+\n+    // Verify partial sigs\n+    for (const auto& [pk, pb, ps] : signers_data) {\n+        if (!secp256k1_musig_partial_sig_verify(secp256k1_context_static, &ps, &pb, &pk, &keyagg_cache, &session)) {\n+            return std::nullopt;\n+        }\n+    }\n+\n+    // Aggregate partial sigs\n+    std::vector<uint8_t> sig;\n+    sig.resize(64);",
      "path": "src/musig.cpp",
      "position": 181,
      "original_position": 86,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "0c420772247ff51b510d44061a2e94e3f5195899",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in 0c420772247ff51b510d44061a2e94e3f5195899: nit: since the size is known at compile-time, could alternatively return a `std::array` (OTOH, at the call-site a std::vector is still needed due to potential adding of the sighash byte)",
      "created_at": "2025-08-05T17:50:33Z",
      "updated_at": "2025-08-05T17:52:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2254970515",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2254970515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 198,
      "original_start_line": 175,
      "start_side": "RIGHT",
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255308540",
      "pull_request_review_id": 3089674337,
      "id": 2255308540,
      "node_id": "PRRC_kwDOABII586GbUb8",
      "diff_hunk": "@@ -338,13 +338,14 @@ bool CPubKey::Decompress() {\n     return true;\n }\n \n-bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n+bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc, uint256& tweak_out) const {",
      "path": "src/pubkey.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "c78d25b89074325ea37185ca87bb00385ad4ab20",
      "in_reply_to_id": 2254807599,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done as suggested",
      "created_at": "2025-08-05T20:48:56Z",
      "updated_at": "2025-08-05T20:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2255308540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255308540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255308766",
      "pull_request_review_id": 3089674628,
      "id": 2255308766,
      "node_id": "PRRC_kwDOABII586GbUfe",
      "diff_hunk": "@@ -23,4 +25,35 @@ std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_ca\n //! Compute the full aggregate pubkey from the given participant pubkeys in their current order\n std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);\n \n+/**\n+ * MuSig2SecNonce encapsulates a secret nonce in use in a MuSig2 signing session.\n+ * Since this nonce persists outside of libsecp256k1 signing code, we must handle\n+ * its construction and destruction ourselves.\n+ * The secret nonce must be kept a secret, otherwise the private key may be leaked.\n+ * As such, it needs to be treated in the same way that CKeys are treated.\n+ * So this class handles the secure allocation of the secp25k1_musig_secnonce object",
      "path": "src/musig.h",
      "position": 1,
      "original_position": 19,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "751b1884b1e4cea822eaabe2423e914bc28dbede",
      "in_reply_to_id": 2254818672,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T20:49:01Z",
      "updated_at": "2025-08-05T20:49:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2255308766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255308766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255309003",
      "pull_request_review_id": 3089674908,
      "id": 2255309003,
      "node_id": "PRRC_kwDOABII586GbUjL",
      "diff_hunk": "@@ -92,3 +92,92 @@ bool MuSig2SecNonce::IsValid()\n {\n     return m_impl->IsValid();\n }\n+\n+std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs)\n+{\n+    if (!participants.size()) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!GetMuSig2KeyAggCache(participants, keyagg_cache)) return std::nullopt;\n+    std::optional<CPubKey> agg_key = GetCPubKeyFromMuSig2KeyAggCache(keyagg_cache);\n+    if (!agg_key.has_value()) return std::nullopt;\n+    if (aggregate_pubkey != *agg_key) return std::nullopt;",
      "path": "src/musig.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "0c420772247ff51b510d44061a2e94e3f5195899",
      "in_reply_to_id": 2254953402,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T20:49:07Z",
      "updated_at": "2025-08-05T20:49:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2255309003",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255309003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255309211",
      "pull_request_review_id": 3089675150,
      "id": 2255309211,
      "node_id": "PRRC_kwDOABII586GbUmb",
      "diff_hunk": "@@ -283,11 +283,93 @@ static bool CreateTaprootScriptSig(const BaseSignatureCreator& creator, Signatur\n         sig_out = it->second;\n         return true;\n     }\n+\n     if (creator.CreateSchnorrSig(provider, sig_out, pubkey, &leaf_hash, nullptr, sigversion)) {\n         sigdata.taproot_script_sigs[lookup_key] = sig_out;\n-        return true;\n+    } else {\n+        auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(pubkey);\n+        if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+            info = misc_pk_it->second.second;\n+        }\n+\n+        for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+            if (part_pks.empty()) continue;\n+\n+            // Fill participant derivation path info\n+            for (const auto& part_pk : part_pks) {\n+                KeyOriginInfo part_info;\n+                if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                    XOnlyPubKey xonly_part(part_pk);\n+                    auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                    if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                        sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>({leaf_hash}), part_info));\n+                    } else {\n+                        it->second.first.insert(leaf_hash);\n+                    }\n+                }\n+            }\n+\n+            std::vector<std::pair<uint256, bool>> tweaks;\n+            CPubKey plain_pub = agg_pub;\n+            if (XOnlyPubKey(agg_pub) != pubkey) {\n+                if (info.path.size() > 0) {\n+                    // Compute and compare fingerprint\n+                    CKeyID keyid = agg_pub.GetID();\n+                    if (std::memcmp(keyid.data(), info.fingerprint, sizeof(info.fingerprint)) != 0) {\n+                        continue;\n+                    }\n+                    // Get the BIP32 derivation tweaks\n+                    CExtPubKey extpub;\n+                    extpub.nDepth = 0;\n+                    std::memset(extpub.vchFingerprint, 0, 4);\n+                    extpub.nChild = 0;\n+                    extpub.chaincode = uint256::FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\").value();",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 45,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "1165b7aab929ee193e64a6dee5b8e0dc1e7366c5",
      "in_reply_to_id": 2254957752,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T20:49:12Z",
      "updated_at": "2025-08-05T20:49:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2255309211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255309211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255310512",
      "pull_request_review_id": 3089676797,
      "id": 2255310512,
      "node_id": "PRRC_kwDOABII586GbU6w",
      "diff_hunk": "@@ -92,3 +92,92 @@ bool MuSig2SecNonce::IsValid()\n {\n     return m_impl->IsValid();\n }\n+\n+std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs)\n+{\n+    if (!participants.size()) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!GetMuSig2KeyAggCache(participants, keyagg_cache)) return std::nullopt;\n+    std::optional<CPubKey> agg_key = GetCPubKeyFromMuSig2KeyAggCache(keyagg_cache);\n+    if (!agg_key.has_value()) return std::nullopt;\n+    if (aggregate_pubkey != *agg_key) return std::nullopt;\n+\n+    // Check if enough pubnonces and partial sigs\n+    if (pubnonces.size() != participants.size()) return std::nullopt;\n+    if (partial_sigs.size() != participants.size()) return std::nullopt;\n+\n+    // Parse the pubnonces and partial sigs\n+    std::vector<std::tuple<secp256k1_pubkey, secp256k1_musig_pubnonce, secp256k1_musig_partial_sig>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::vector<const secp256k1_musig_partial_sig*> partial_sig_ptrs;\n+    for (const CPubKey& part_pk : participants) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;\n+        const auto& it = partial_sigs.find(part_pk);\n+        if (it == partial_sigs.end()) return std::nullopt;\n+        const uint256& partial_sig = it->second;\n+\n+        auto& [secp_pk, secp_pn, secp_ps] = signers_data.emplace_back();\n+\n+        if (!secp256k1_ec_pubkey_parse(secp256k1_context_static, &secp_pk, part_pk.data(), part_pk.size())) {\n+            return std::nullopt;\n+        }\n+\n+        if (!secp256k1_musig_pubnonce_parse(secp256k1_context_static, &secp_pn, pubnonce.data())) {\n+            return std::nullopt;\n+        }\n+\n+        if (!secp256k1_musig_partial_sig_parse(secp256k1_context_static, &secp_ps, partial_sig.data())) {\n+            return std::nullopt;\n+        }\n+    }\n+    pubnonce_ptrs.reserve(signers_data.size());\n+    partial_sig_ptrs.reserve(signers_data.size());\n+    for (auto& [_, pn, ps] : signers_data) {\n+        pubnonce_ptrs.push_back(&pn);\n+        partial_sig_ptrs.push_back(&ps);\n+    }\n+\n+    // Aggregate nonces\n+    secp256k1_musig_aggnonce aggnonce;\n+    if (!secp256k1_musig_nonce_agg(secp256k1_context_static, &aggnonce, pubnonce_ptrs.data(), pubnonce_ptrs.size())) {\n+        return std::nullopt;\n+    }\n+\n+    // Apply tweaks\n+    for (const auto& [tweak, xonly] : tweaks) {\n+        if (xonly) {\n+            if (!secp256k1_musig_pubkey_xonly_tweak_add(secp256k1_context_static, nullptr, &keyagg_cache, tweak.data())) {\n+                return std::nullopt;\n+            }\n+        } else if (!secp256k1_musig_pubkey_ec_tweak_add(secp256k1_context_static, nullptr, &keyagg_cache, tweak.data())) {\n+            return std::nullopt;\n+        }\n+    }\n+\n+    // Create musig_session\n+    secp256k1_musig_session session;\n+    if (!secp256k1_musig_nonce_process(secp256k1_context_static, &session, &aggnonce, sighash.data(), &keyagg_cache)) {\n+        return std::nullopt;\n+    }\n+\n+    // Verify partial sigs\n+    for (const auto& [pk, pb, ps] : signers_data) {\n+        if (!secp256k1_musig_partial_sig_verify(secp256k1_context_static, &ps, &pb, &pk, &keyagg_cache, &session)) {\n+            return std::nullopt;\n+        }\n+    }\n+\n+    // Aggregate partial sigs\n+    std::vector<uint8_t> sig;\n+    sig.resize(64);",
      "path": "src/musig.cpp",
      "position": 181,
      "original_position": 86,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "0c420772247ff51b510d44061a2e94e3f5195899",
      "in_reply_to_id": 2254970515,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Leaving as-is since we need to pass around the signature in a `std::vector` elsewhere in signing.",
      "created_at": "2025-08-05T20:49:55Z",
      "updated_at": "2025-08-05T20:49:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2255310512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255310512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 198,
      "original_start_line": 175,
      "start_side": "RIGHT",
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265077463",
      "pull_request_review_id": 3103437601,
      "id": 2265077463,
      "node_id": "PRRC_kwDOABII586HAlbX",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6991ecb30bcde7027d136c65bfb7a2eb66379272",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "module organization/refactoring nit: I think conceptually this functionality would be better fit in the `musig.cpp` module instead of being a method of the `CKey` class. Even though a secret key is also passed in for generating the musig nonce here, it merely  serves as (optional) additional data to derive the nonce for increasing misuse-resistance, rather than being a central part that would justify an own method. The cleanest approach would be in general to only include and use the secp256k1 musig module in `musig.cpp` (also for partial signing), IMHO.\r\n\r\nCan be dealt in a follow-up though, as the `secp256k1_context_sign` object would have to be made non-static and shared with other modules (presumably that was the main reason why nonce generation and partial signing was decided to be in `key.cpp`), which might lead to more general discussions that are probably best kept in a separate PR to not block this one.",
      "created_at": "2025-08-10T01:41:13Z",
      "updated_at": "2025-08-10T02:05:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2265077463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265077463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265082077",
      "pull_request_review_id": 3103437601,
      "id": 2265082077,
      "node_id": "PRRC_kwDOABII586HAmjd",
      "diff_hunk": "@@ -94,6 +109,24 @@ std::vector<CPubKey> FlatSigningProvider::GetMuSig2ParticipantPubkeys(const CPub\n     return participant_pubkeys;\n }\n \n+void FlatSigningProvider::SetMuSig2SecNonce(const uint256& session_id, MuSig2SecNonce&& nonce) const\n+{\n+    if (!musig2_secnonces) return;\n+    musig2_secnonces->emplace(session_id, std::move(nonce));\n+}\n+\n+std::optional<std::reference_wrapper<MuSig2SecNonce>> FlatSigningProvider::GetMuSig2SecNonce(const uint256& session_id) const\n+{",
      "path": "src/script/signingprovider.cpp",
      "position": 43,
      "original_position": 33,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "f4b4c704e40cc11663dbdaa156b1775be668a15f",
      "in_reply_to_id": 2244604441,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree that all the methods deferencing `musig2_secnonces` should have guards, either by returning nullopt or adding an `Assume`. (// EDIT: that was a reply to https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2244604441)",
      "created_at": "2025-08-10T02:04:45Z",
      "updated_at": "2025-08-10T02:06:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2265082077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2265082077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 129,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277429301",
      "pull_request_review_id": 3121723637,
      "id": 2277429301,
      "node_id": "PRRC_kwDOABII586HvtA1",
      "diff_hunk": "@@ -130,6 +132,35 @@ bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vec\n     return true;\n }\n \n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve the private key\n+    CKey key;\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return {};\n+\n+    // Retrieve participant pubkeys\n+    std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\n+    if (!pubkeys.size()) return {};\n+\n+    // Compute sighash\n+    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\n+    if (!sighash.has_value()) return {};\n+\n+    MuSig2SecNonce secnonce;\n+    std::vector<uint8_t> out = key.CreateMuSig2Nonce(secnonce, *sighash, aggregate_pubkey, pubkeys);\n+    if (out.empty()) return {};\n+\n+    // Store the secnonce in the SigningProvider\n+    HashWriter hasher;\n+    hasher << script_pubkey << part_pubkey << *sighash;",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "ae6889565af3afed567e08976b4bc0f0381d0bf8",
      "in_reply_to_id": 2244656095,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> If it's not a big deal then I guess the current choice is fine. Since the same key can be used in multiple tap leaves, we need a unique nonce per leaf, which sighash takes care of. We might have multiple participant keys, which `part_pubkey` takes care of.\r\n> \r\n> `script_pubkey` isn't enough to cover address reuse, \r\n\r\nData unique to the input is always included in the sighash, so address reuse is not an issue either.\r\n\r\n> but _for now_ `ComputeSchnorrSignatureHash` is limited to `SIGHASH_DEFAULT`, which commits to the prevout. Maybe for good measure add an `Assume` for `SIGHASH_DEFAULT`?\r\n\r\nOther sighash types are allowed, they're a member of `MutableTransactionSignatureCreator`.\r\n\r\n",
      "created_at": "2025-08-14T18:29:35Z",
      "updated_at": "2025-08-14T18:29:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2277429301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277429301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277431217",
      "pull_request_review_id": 3121726480,
      "id": 2277431217,
      "node_id": "PRRC_kwDOABII586Hvtex",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6991ecb30bcde7027d136c65bfb7a2eb66379272",
      "in_reply_to_id": 2265077463,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's mainly here to use `secp256k1_context_sign`.",
      "created_at": "2025-08-14T18:30:24Z",
      "updated_at": "2025-08-14T18:30:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2277431217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277431217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277432793",
      "pull_request_review_id": 3121728576,
      "id": 2277432793,
      "node_id": "PRRC_kwDOABII586Hvt3Z",
      "diff_hunk": "@@ -224,7 +224,7 @@ class CPubKey\n     bool Decompress();\n \n     //! Derive BIP32 child pubkey.\n-    [[nodiscard]] bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n+    [[nodiscard]] bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc, uint256& tweak_out) const;",
      "path": "src/pubkey.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "5ff19c37af53f6ebcd69a9973ededcbadd69d3bd",
      "in_reply_to_id": 2244500941,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-14T18:31:06Z",
      "updated_at": "2025-08-14T18:31:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2277432793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277432793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433069",
      "pull_request_review_id": 3121728938,
      "id": 2277433069,
      "node_id": "PRRC_kwDOABII586Hvt7t",
      "diff_hunk": "@@ -355,11 +355,19 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n \n     // Try key path spending.\n     {\n-        KeyOriginInfo info;\n-        if (provider.GetKeyOriginByXOnly(sigdata.tr_spenddata.internal_key, info)) {\n+        KeyOriginInfo internal_key_info;\n+        if (provider.GetKeyOriginByXOnly(sigdata.tr_spenddata.internal_key, internal_key_info)) {\n             auto it = sigdata.taproot_misc_pubkeys.find(sigdata.tr_spenddata.internal_key);\n             if (it == sigdata.taproot_misc_pubkeys.end()) {\n-                sigdata.taproot_misc_pubkeys.emplace(sigdata.tr_spenddata.internal_key, std::make_pair(std::set<uint256>(), info));\n+                sigdata.taproot_misc_pubkeys.emplace(sigdata.tr_spenddata.internal_key, std::make_pair(std::set<uint256>(), internal_key_info));\n+            }\n+        }\n+\n+        KeyOriginInfo output_key_info;\n+        if (provider.GetKeyOriginByXOnly(output, output_key_info)) {\n+            auto it = sigdata.taproot_misc_pubkeys.find(output);\n+            if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                sigdata.taproot_misc_pubkeys.emplace(output, std::make_pair(std::set<uint256>(), output_key_info));",
      "path": "src/script/sign.cpp",
      "position": 317,
      "original_position": 19,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "1d4fdeb63792988b4fb93cf8e84142a3a5b34a39",
      "in_reply_to_id": 2244536549,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-14T18:31:14Z",
      "updated_at": "2025-08-14T18:31:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2277433069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 575,
      "original_line": 575,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433209",
      "pull_request_review_id": 3121729103,
      "id": 2277433209,
      "node_id": "PRRC_kwDOABII586Hvt95",
      "diff_hunk": "@@ -94,6 +109,24 @@ std::vector<CPubKey> FlatSigningProvider::GetMuSig2ParticipantPubkeys(const CPub\n     return participant_pubkeys;\n }\n \n+void FlatSigningProvider::SetMuSig2SecNonce(const uint256& session_id, MuSig2SecNonce&& nonce) const\n+{\n+    if (!musig2_secnonces) return;\n+    musig2_secnonces->emplace(session_id, std::move(nonce));\n+}\n+\n+std::optional<std::reference_wrapper<MuSig2SecNonce>> FlatSigningProvider::GetMuSig2SecNonce(const uint256& session_id) const\n+{",
      "path": "src/script/signingprovider.cpp",
      "position": 43,
      "original_position": 33,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "f4b4c704e40cc11663dbdaa156b1775be668a15f",
      "in_reply_to_id": 2244604441,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-14T18:31:19Z",
      "updated_at": "2025-08-14T18:31:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2277433209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 129,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433356",
      "pull_request_review_id": 3121729285,
      "id": 2277433356,
      "node_id": "PRRC_kwDOABII586HvuAM",
      "diff_hunk": "@@ -94,6 +109,24 @@ std::vector<CPubKey> FlatSigningProvider::GetMuSig2ParticipantPubkeys(const CPub\n     return participant_pubkeys;\n }\n \n+void FlatSigningProvider::SetMuSig2SecNonce(const uint256& session_id, MuSig2SecNonce&& nonce) const\n+{\n+    if (!musig2_secnonces) return;",
      "path": "src/script/signingprovider.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "f4b4c704e40cc11663dbdaa156b1775be668a15f",
      "in_reply_to_id": 2244607495,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-14T18:31:23Z",
      "updated_at": "2025-08-14T18:31:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2277433356",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433779",
      "pull_request_review_id": 3121729826,
      "id": 2277433779,
      "node_id": "PRRC_kwDOABII586HvuGz",
      "diff_hunk": "@@ -102,6 +135,7 @@ FlatSigningProvider& FlatSigningProvider::Merge(FlatSigningProvider&& b)\n     origins.merge(b.origins);\n     tr_trees.merge(b.tr_trees);\n     aggregate_pubkeys.merge(b.aggregate_pubkeys);\n+    if (!musig2_secnonces) musig2_secnonces = b.musig2_secnonces;",
      "path": "src/script/signingprovider.cpp",
      "position": 64,
      "original_position": 51,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "f4b4c704e40cc11663dbdaa156b1775be668a15f",
      "in_reply_to_id": 2244611331,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-14T18:31:35Z",
      "updated_at": "2025-08-14T18:31:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2277433779",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433906",
      "pull_request_review_id": 3121730006,
      "id": 2277433906,
      "node_id": "PRRC_kwDOABII586HvuIy",
      "diff_hunk": "@@ -130,6 +132,35 @@ bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vec\n     return true;\n }\n \n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve the private key\n+    CKey key;\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return {};\n+\n+    // Retrieve participant pubkeys\n+    std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\n+    if (!pubkeys.size()) return {};",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "ae6889565af3afed567e08976b4bc0f0381d0bf8",
      "in_reply_to_id": 2244627473,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-14T18:31:39Z",
      "updated_at": "2025-08-14T18:31:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2277433906",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277433906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319145295",
      "pull_request_review_id": 3180916078,
      "id": 2319145295,
      "node_id": "PRRC_kwDOABII586KO1lP",
      "diff_hunk": "@@ -100,3 +100,89 @@ bool MuSig2SecNonce::IsValid()\n {\n     return m_impl->IsValid();\n }\n+\n+std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs)",
      "path": "src/musig.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d65c8df972de55ade06557cabb1b8972d4169fb1",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit d65c8df972de55ade06557cabb1b8972d4169fb1: naming nit: `participants` doesn't say much imho, could rename to `participant_pubkeys` (or just `part_pubkeys` / `pubkeys`, if that's too long) to be more specific",
      "created_at": "2025-09-03T14:20:24Z",
      "updated_at": "2025-09-03T14:32:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2319145295",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319145295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319159859",
      "pull_request_review_id": 3180916078,
      "id": 2319159859,
      "node_id": "PRRC_kwDOABII586KO5Iz",
      "diff_hunk": "@@ -130,6 +132,36 @@ bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vec\n     return true;\n }\n \n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve the private key\n+    CKey key;\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return {};\n+\n+    // Retrieve participant pubkeys\n+    std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\n+    if (!pubkeys.size()) return {};\n+    if (std::find(pubkeys.begin(), pubkeys.end(), part_pubkey) == pubkeys.end()) return {};\n+\n+    // Compute sighash\n+    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\n+    if (!sighash.has_value()) return {};\n+\n+    MuSig2SecNonce secnonce;\n+    std::vector<uint8_t> out = key.CreateMuSig2Nonce(secnonce, *sighash, aggregate_pubkey, pubkeys);\n+    if (out.empty()) return {};\n+\n+    // Store the secnonce in the SigningProvider\n+    HashWriter hasher;\n+    hasher << script_pubkey << part_pubkey << *sighash;\n+    uint256 id = hasher.GetSHA256();",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "a7901710a6b222cbdeba474bbe8b78788841e58a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit a7901710a6b222cbdeba474bbe8b78788841e58a: it's only a few lines of code, but to deduplicate with the next commit (introducing `CreateMuSig2PartialSig`), could introduce a helper function like `MuSig2SessionId`",
      "created_at": "2025-09-03T14:25:25Z",
      "updated_at": "2025-09-03T14:32:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2319159859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319159859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319170915",
      "pull_request_review_id": 3180916078,
      "id": 2319170915,
      "node_id": "PRRC_kwDOABII586KO71j",
      "diff_hunk": "@@ -383,6 +383,88 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    size_t ours = 0;",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "38d74136c6552ae746bec6e05b8ec3069cd581ce",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 38d74136c6552ae746bec6e05b8ec3069cd581ce: nit, could rename to something like `our_pubkey_index` to be more expressive",
      "created_at": "2025-09-03T14:29:10Z",
      "updated_at": "2025-09-03T14:32:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2319170915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319170915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319173890",
      "pull_request_review_id": 3180916078,
      "id": 2319173890,
      "node_id": "PRRC_kwDOABII586KO8kC",
      "diff_hunk": "@@ -383,6 +383,88 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    size_t ours = 0;\n+    CPubKey our_pubkey = GetPubKey();\n+    for (const CPubKey& part_pk : pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;\n+        if (part_pk == our_pubkey) {\n+            ours = signers_data.size();\n+        }",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "38d74136c6552ae746bec6e05b8ec3069cd581ce",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in 38d74136c6552ae746bec6e05b8ec3069cd581ce: if `our_pubkey` is not contained in the `pubkeys` list, I suppose we want to return early with `std::nullopt`, rather than accessing at index 0?",
      "created_at": "2025-09-03T14:30:16Z",
      "updated_at": "2025-09-03T14:32:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2319173890",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319173890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 408,
      "original_start_line": 405,
      "start_side": "RIGHT",
      "line": 410,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319894112",
      "pull_request_review_id": 3182010353,
      "id": 2319894112,
      "node_id": "PRRC_kwDOABII586KRsZg",
      "diff_hunk": "@@ -100,3 +100,89 @@ bool MuSig2SecNonce::IsValid()\n {\n     return m_impl->IsValid();\n }\n+\n+std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs)",
      "path": "src/musig.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d65c8df972de55ade06557cabb1b8972d4169fb1",
      "in_reply_to_id": 2319145295,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed to `part_pubkeys`.",
      "created_at": "2025-09-03T18:52:54Z",
      "updated_at": "2025-09-03T18:52:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2319894112",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319894112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319894334",
      "pull_request_review_id": 3182010632,
      "id": 2319894334,
      "node_id": "PRRC_kwDOABII586KRsc-",
      "diff_hunk": "@@ -130,6 +132,36 @@ bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vec\n     return true;\n }\n \n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve the private key\n+    CKey key;\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return {};\n+\n+    // Retrieve participant pubkeys\n+    std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\n+    if (!pubkeys.size()) return {};\n+    if (std::find(pubkeys.begin(), pubkeys.end(), part_pubkey) == pubkeys.end()) return {};\n+\n+    // Compute sighash\n+    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\n+    if (!sighash.has_value()) return {};\n+\n+    MuSig2SecNonce secnonce;\n+    std::vector<uint8_t> out = key.CreateMuSig2Nonce(secnonce, *sighash, aggregate_pubkey, pubkeys);\n+    if (out.empty()) return {};\n+\n+    // Store the secnonce in the SigningProvider\n+    HashWriter hasher;\n+    hasher << script_pubkey << part_pubkey << *sighash;\n+    uint256 id = hasher.GetSHA256();",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "a7901710a6b222cbdeba474bbe8b78788841e58a",
      "in_reply_to_id": 2319159859,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-03T18:53:00Z",
      "updated_at": "2025-09-03T18:53:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2319894334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319894334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319894625",
      "pull_request_review_id": 3182011010,
      "id": 2319894625,
      "node_id": "PRRC_kwDOABII586KRshh",
      "diff_hunk": "@@ -383,6 +383,88 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    size_t ours = 0;",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 16,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "38d74136c6552ae746bec6e05b8ec3069cd581ce",
      "in_reply_to_id": 2319170915,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-03T18:53:07Z",
      "updated_at": "2025-09-03T18:53:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2319894625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319894625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319894903",
      "pull_request_review_id": 3182011394,
      "id": 2319894903,
      "node_id": "PRRC_kwDOABII586KRsl3",
      "diff_hunk": "@@ -383,6 +383,88 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    size_t ours = 0;\n+    CPubKey our_pubkey = GetPubKey();\n+    for (const CPubKey& part_pk : pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;\n+        if (part_pk == our_pubkey) {\n+            ours = signers_data.size();\n+        }",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "38d74136c6552ae746bec6e05b8ec3069cd581ce",
      "in_reply_to_id": 2319173890,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-03T18:53:14Z",
      "updated_at": "2025-09-03T18:53:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2319894903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2319894903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 408,
      "original_start_line": 405,
      "start_side": "RIGHT",
      "line": 410,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2329956805",
      "pull_request_review_id": 3196105850,
      "id": 2329956805,
      "node_id": "PRRC_kwDOABII586K4FHF",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 16,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\n`MULTIPATH_RE` is unused.",
      "created_at": "2025-09-08T11:27:02Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2329956805",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2329956805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330014983",
      "pull_request_review_id": 3196105850,
      "id": 2330014983,
      "node_id": "PRRC_kwDOABII586K4TUH",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 105,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nBecause the imported `musig` descriptor was an active one, the change address that is created here is also musig that leads to a `outputs` property in the decoded PSBT that is untested at the moment unlike the `inputs` section that is asserted on down below.\r\nIMO we should check for the musig properties in the `output` section too.",
      "created_at": "2025-09-08T11:54:08Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330014983",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330014983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330027258",
      "pull_request_review_id": 3196105850,
      "id": 2330027258,
      "node_id": "PRRC_kwDOABII586K4WT6",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:",
      "path": "test/functional/wallet_musig.py",
      "position": 114,
      "original_position": 94,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nCan consider using this `change_addr` below like `addr` is used to have fewer moving parts.\r\n\r\n```diff\r\n- psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\r\n+ psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_address= change_addr)[\"psbt\"]\r\n``` ",
      "created_at": "2025-09-08T11:59:27Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330027258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330027258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 114,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330079926",
      "pull_request_review_id": 3196105850,
      "id": 2330079926,
      "node_id": "PRRC_kwDOABII586K4jK2",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 102,
      "original_position": 84,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nFor the last 4 patterns, I see the following error:\r\n```\r\ntest_framework.authproxy.JSONRPCException: Can't get descriptor string. (-4)\r\n```\r\n\r\nif the private descs are listed immediately after importing musig descriptor:\r\n```python\r\nwallets[0].listdescriptors(True)[\"descriptors\"]\r\n```\r\n\r\nThe first 5 patterns work fine - I am guessing because of this default from the previous PR: https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2163599033.\r\n\r\nNot debugged yet but I guess the fix from #32471 PR should handle the failing patterns as well?",
      "created_at": "2025-09-08T12:22:58Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330079926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330079926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330109213",
      "pull_request_review_id": 3196105850,
      "id": 2330109213,
      "node_id": "PRRC_kwDOABII586K4qUd",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 122,
      "original_position": 102,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nBefore spending, would be good to check that wallets agree on the received UTXO.\r\n```python\r\n        # Check that the wallets agree on the received UTXO\r\n        utxo = None\r\n        for wallet in wallets:\r\n            if utxo is None:\r\n                utxo = wallet.listunspent()[0]\r\n            else:\r\n                assert_equal(utxo, wallet.listunspent()[0])\r\n```",
      "created_at": "2025-09-08T12:35:19Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330109213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330109213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330127300",
      "pull_request_review_id": 3196105850,
      "id": 2330127300,
      "node_id": "PRRC_kwDOABII586K4uvE",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 30,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\n```diff\r\n- has_int = \"<\" in pattern and \">\" in pattern\r\n+ has_internal = \"<\" in pattern and \">\" in pattern\r\n``` \r\n\r\nWhile this check suffices due to the test cases, but it doesn't differentiate between a 2 and 3 indexed multipath descriptor. A test like the below one fails:\r\n\r\n```python\r\nself.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1;2>/*),pk(musig($1,$2)/0/*)})\")\r\n```\r\n",
      "created_at": "2025-09-08T12:42:21Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330127300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330127300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330140614",
      "pull_request_review_id": 3196105850,
      "id": 2330140614,
      "node_id": "PRRC_kwDOABII586K4x_G",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 29,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nNit - a candidate for the class param instead of retrieving in every case:\r\n```python\r\nself.def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\r\n```",
      "created_at": "2025-09-08T12:46:29Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330140614",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330140614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330145621",
      "pull_request_review_id": 3196105850,
      "id": 2330145621,
      "node_id": "PRRC_kwDOABII586K4zNV",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 38,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nNit for clarity:\r\n```diff\r\n- exp_key_leaf = 0\r\n+ expected_key_leaves_count = 0\r\n``` ",
      "created_at": "2025-09-08T12:48:06Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330145621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330145621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330153004",
      "pull_request_review_id": 3196105850,
      "id": 2330153004,
      "node_id": "PRRC_kwDOABII586K41As",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 65,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\n```diff\r\n- # Construct and import each wallet's musig descriptor\r\n+ # Construct and import each wallet's musig descriptor that\r\n+ # contains private key of that wallet and public keys of others\r\n```",
      "created_at": "2025-09-08T12:50:37Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330153004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330153004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330190644",
      "pull_request_review_id": 3196105850,
      "id": 2330190644,
      "node_id": "PRRC_kwDOABII586K4-M0",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)",
      "path": "test/functional/wallet_musig.py",
      "position": 101,
      "original_position": 83,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nNot sure if we have ever asserted on warnings before but the expectation here is that (n-1) warnings of type \"not all private ...\" would be returned for (n) keys in the musig descriptor - though the following asserts using `any` only.\r\n\r\n```diff\r\n-            for r in res:\r\n-                assert_equal(r[\"success\"], True)\r\n+            assert_equal(len(res), 1)\r\n+            assert_equal(res[0][\"success\"], True)\r\n+            assert_greater_than(len(res[0][\"warnings\"]), 0)\r\n+            assert_equal(any(\"Not all private keys provided\" in warning for warning in res[0][\"warnings\"]), True)\r\n```",
      "created_at": "2025-09-08T13:05:24Z",
      "updated_at": "2025-09-09T12:48:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330190644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330190644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 100,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330311229",
      "pull_request_review_id": 3196105850,
      "id": 2330311229,
      "node_id": "PRRC_kwDOABII586K5bo9",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 27,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nThis is a pretty packed function and slightly difficult to follow - can consider splitting this function into 2 because it can be noticed that first portion is preparing the wallets for spending and the second portion is spending from the musig address while asserting on the relevant data.\r\n\r\n<details open>\r\n<summary>Function Splitting Diff</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/wallet_musig.py b/test/functional/wallet_musig.py\r\nindex b7f3cc9d96..554c09b31d 100755\r\n--- a/test/functional/wallet_musig.py\r\n+++ b/test/functional/wallet_musig.py\r\n@@ -24,21 +24,18 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n     def skip_test_if_missing_module(self):\r\n         self.skip_if_no_wallet()\r\n \r\n-    def do_test(self, comment, pattern, sighash_type=None):\r\n-        self.log.info(f\"Testing {comment}\")\r\n-        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\r\n-        has_int = \"<\" in pattern and \">\" in pattern\r\n-\r\n+    # Figure out how many wallets are needed and create them\r\n+    def prepare_musig_wallets_for_spending(self, pattern):\r\n         wallets = []\r\n         keys = []\r\n+        exp_key_leaf = 0\r\n \r\n-        pat = pattern.replace(\"$H\", H_POINT)\r\n+        pattern = pattern.replace(\"$H\", H_POINT)\r\n+        has_int = \"<\" in pattern and \">\" in pattern\r\n \r\n-        # Figure out how many wallets are needed and create them\r\n-        exp_key_leaf = 0\r\n         for i in range(10):\r\n-            if f\"${i}\" in pat:\r\n-                exp_key_leaf += pat.count(f\"${i}\")\r\n+            if f\"${i}\" in pattern:\r\n+                exp_key_leaf += pattern.count(f\"${i}\")\r\n                 wallet_name = f\"musig_{self.WALLET_NUM}\"\r\n                 self.WALLET_NUM += 1\r\n                 self.nodes[0].createwallet(wallet_name)\r\n@@ -64,7 +61,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n \r\n         # Construct and import each wallet's musig descriptor\r\n         for i, wallet in enumerate(wallets):\r\n-            desc = pat\r\n+            desc = pattern\r\n             import_descs = []\r\n             for j, (priv, pub) in enumerate(keys):\r\n                 if j == i:\r\n@@ -97,13 +94,18 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n                     assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\r\n \r\n         # Fund that address\r\n-        def_wallet.sendtoaddress(addr, 10)\r\n+        self.def_wallet.sendtoaddress(addr, 10)\r\n         self.generate(self.nodes[0], 1)\r\n \r\n         # Spend that UTXO\r\n         utxo = wallets[0].listunspent()[0]\r\n-        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\r\n \r\n+        return (wallets, keys, exp_key_leaf, utxo)\r\n+\r\n+    def spend_from_musig_address(self, pattern, sighash_type, musig_spending_data):\r\n+        wallets, keys, exp_key_leaf, utxo = musig_spending_data\r\n+\r\n+        psbt = wallets[0].send(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\r\n         dec_psbt = self.nodes[0].decodepsbt(psbt)\r\n         assert_equal(len(dec_psbt[\"inputs\"]), 1)\r\n         assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\r\n@@ -175,7 +177,13 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         assert \"hex\" in finalized\r\n         self.nodes[0].sendrawtransaction(finalized[\"hex\"])\r\n \r\n+    def do_test(self, comment, pattern, sighash_type=None):\r\n+        self.log.info(f\"Testing {comment}\")\r\n+        musig_spending_data = self.prepare_musig_wallets_for_spending(pattern)\r\n+        self.spend_from_musig_address(pattern, sighash_type, musig_spending_data)\r\n+\r\n     def run_test(self):\r\n+        self.def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\r\n         self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n         self.do_test(\"rawtr(musig(keys/*)) with ALL|ANYONECANPAY\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", \"ALL|ANYONECANPAY\")\r\n         self.do_test(\"tr(musig(keys/*))\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n```\r\n</details>",
      "created_at": "2025-09-08T13:48:09Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330311229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330311229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330323832",
      "pull_request_review_id": 3196105850,
      "id": 2330323832,
      "node_id": "PRRC_kwDOABII586K5et4",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []",
      "path": "test/functional/wallet_musig.py",
      "position": 36,
      "original_position": 33,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nNit for verbosity\r\n```diff\r\n- keys = []\r\n+ musig_participant_key_pairs = [] \r\n```",
      "created_at": "2025-09-08T13:52:43Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330323832",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330323832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330497856",
      "pull_request_review_id": 3196105850,
      "id": 2330497856,
      "node_id": "PRRC_kwDOABII586K6JNA",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 115,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nIs this extracting the x-only version of the key before the set insertion? Can consider creating a small util function in `key.py` in the framework. It's  used thrice in this file already.",
      "created_at": "2025-09-08T14:51:09Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330497856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330497856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330517973",
      "pull_request_review_id": 3196105850,
      "id": 2330517973,
      "node_id": "PRRC_kwDOABII586K6OHV",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 39,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nThis `10` is arbitrary, can put it inside a named constant.\r\n```diff\r\n- for i in range(10):\r\n+ for i in range(MAX_UNIQUE_PARTICIPANT_KEYS_IN_TEST):\r\n``` ",
      "created_at": "2025-09-08T14:57:51Z",
      "updated_at": "2025-09-08T14:57:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2330517973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2330517973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333473293",
      "pull_request_review_id": 3201418790,
      "id": 2333473293,
      "node_id": "PRRC_kwDOABII586LFfoN",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])\n+        # Check that there are as many participants as we expected\n+        assert_equal(len(part_pks), len(keys))\n+        # Check that each participant has a derivation path\n+        for deriv_path in dec_psbt[\"inputs\"][0][\"taproot_bip32_derivs\"]:\n+            if deriv_path[\"pubkey\"] in part_pks:\n+                part_pks.remove(deriv_path[\"pubkey\"])\n+        assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), exp_key_leaf)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\n+\n+        # Add partial sigs\n+        psig_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), exp_key_leaf)\n+        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\n+            pubkey = ps[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for partial sig not seen as output key or internal key\"\n+\n+        # Non-participant aggregates partial sigs and send\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)\n+        assert_equal(finalized[\"complete\"], True)\n+        assert \"hex\" in finalized\n+        self.nodes[0].sendrawtransaction(finalized[\"hex\"])\n+\n+    def run_test(self):\n+        self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\n+        self.do_test(\"rawtr(musig(keys/*)) with ALL|ANYONECANPAY\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", \"ALL|ANYONECANPAY\")\n+        self.do_test(\"tr(musig(keys/*))\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\n+        self.do_test(\"rawtr(musig/*)\", \"rawtr(musig($0,$1,$2)/<0;1>/*)\")\n+        self.do_test(\"tr(musig/*)\", \"tr(musig($0,$1,$2)/<0;1>/*)\")\n+        self.do_test(\"tr(H, pk(musig(keys/*)))\", \"tr($H,pk(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*)))\")\n+        self.do_test(\"tr(H,pk(musig/*))\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\")\n+        self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\")\n+        self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\")\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 239,
      "original_position": 188,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nCan also add the below test case that works right away where the musig is in both the key path spend and the script path spend - KP has all 3 keys in the musig, SP scripts have 2 partial keys in their musig each.\r\n\r\n```python\r\nself.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\")\r\n```",
      "created_at": "2025-09-09T12:54:54Z",
      "updated_at": "2025-09-09T13:50:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2333473293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333473293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333720544",
      "pull_request_review_id": 3201418790,
      "id": 2333720544,
      "node_id": "PRRC_kwDOABII586LGb_g",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])\n+        # Check that there are as many participants as we expected\n+        assert_equal(len(part_pks), len(keys))\n+        # Check that each participant has a derivation path\n+        for deriv_path in dec_psbt[\"inputs\"][0][\"taproot_bip32_derivs\"]:\n+            if deriv_path[\"pubkey\"] in part_pks:\n+                part_pks.remove(deriv_path[\"pubkey\"])\n+        assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), exp_key_leaf)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\n+\n+        # Add partial sigs\n+        psig_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), exp_key_leaf)\n+        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\n+            pubkey = ps[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for partial sig not seen as output key or internal key\"\n+\n+        # Non-participant aggregates partial sigs and send\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 173,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/d23116987d19587746d392895c06f5c426c1d0d2 \"test: Test MuSig2 in the wallet\"\r\n\r\nWith the addition of the case where musig is both in keypath and spendpath, I think it would be nice to assert which spending path is triggered - even though the current test setup ensures that the PSBT signing goes through all the signers in which case keypath spending would be preferred always.\r\n\r\n<details open>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/wallet_musig.py b/test/functional/wallet_musig.py\r\nindex b7f3cc9d96..63276b1eb7 100755\r\n--- a/test/functional/wallet_musig.py\r\n+++ b/test/functional/wallet_musig.py\r\n@@ -8,7 +8,7 @@ import re\r\n from test_framework.descriptors import descsum_create\r\n from test_framework.key import H_POINT\r\n from test_framework.test_framework import BitcoinTestFramework\r\n-from test_framework.util import assert_equal\r\n+from test_framework.util import assert_equal, assert_greater_than\r\n \r\n PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\r\n PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\r\n@@ -24,7 +24,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n     def skip_test_if_missing_module(self):\r\n         self.skip_if_no_wallet()\r\n \r\n-    def do_test(self, comment, pattern, sighash_type=None):\r\n+    def do_test(self, comment, pattern, sighash_type=None, spending_path=\"keypath\"):\r\n         self.log.info(f\"Testing {comment}\")\r\n         def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\r\n         has_int = \"<\" in pattern and \">\" in pattern\r\n@@ -170,7 +170,14 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n                 assert False, \"Aggregate pubkey for partial sig not seen as output key or internal key\"\r\n \r\n         # Non-participant aggregates partial sigs and send\r\n-        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)\r\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt, False)\r\n+        assert_equal(finalized[\"complete\"], True)\r\n+        final_input_witness = self.nodes[0].decodepsbt(finalized[\"psbt\"])[\"inputs\"][0][\"final_scriptwitness\"]\r\n+        if spending_path == \"scriptpath\":\r\n+            assert_greater_than(len(final_input_witness), 1)\r\n+        else:\r\n+            assert_equal(len(final_input_witness), 1)\r\n+        finalized = self.nodes[0].finalizepsbt(finalized[\"psbt\"])\r\n         assert_equal(finalized[\"complete\"], True)\r\n         assert \"hex\" in finalized\r\n         self.nodes[0].sendrawtransaction(finalized[\"hex\"])\r\n@@ -181,10 +188,11 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         self.do_test(\"tr(musig(keys/*))\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n         self.do_test(\"rawtr(musig/*)\", \"rawtr(musig($0,$1,$2)/<0;1>/*)\")\r\n         self.do_test(\"tr(musig/*)\", \"tr(musig($0,$1,$2)/<0;1>/*)\")\r\n-        self.do_test(\"tr(H, pk(musig(keys/*)))\", \"tr($H,pk(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*)))\")\r\n-        self.do_test(\"tr(H,pk(musig/*))\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\")\r\n-        self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\")\r\n-        self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\")\r\n+        self.do_test(\"tr(H, pk(musig(keys/*)))\", \"tr($H,pk(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*)))\", None, \"scriptpath\")\r\n+        self.do_test(\"tr(H,pk(musig/*))\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\", None, \"scriptpath\")\r\n+        self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\", None, \"scriptpath\")\r\n+        self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\", None, \"scriptpath\")\r\n+        self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\", None, \"keypath\")\r\n \r\n \r\n if __name__ == '__main__':\r\n```\r\n</details>",
      "created_at": "2025-09-09T13:50:22Z",
      "updated_at": "2025-09-09T13:53:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2333720544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333720544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 172,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333831377",
      "pull_request_review_id": 3201899906,
      "id": 2333831377,
      "node_id": "PRRC_kwDOABII586LG3DR",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6991ecb30bcde7027d136c65bfb7a2eb66379272",
      "in_reply_to_id": 2265077463,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note that the only musig API function that requires to use this context is [`secp256k1_musig_nonce_gen`](https://github.com/bitcoin-core/secp256k1/blob/36e76952cbf1cf54ddd2d8756cc31a486e2ba1d9/include/secp256k1_musig.h#L338), for all the others you can simply use the static one (`secp256k1_context_static`).",
      "created_at": "2025-09-09T14:25:30Z",
      "updated_at": "2025-09-09T14:25:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2333831377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2333831377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334523023",
      "pull_request_review_id": 3202916559,
      "id": 2334523023,
      "node_id": "PRRC_kwDOABII586LJf6P",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 16,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2329956805,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Used now for `has_internal`.",
      "created_at": "2025-09-09T19:08:05Z",
      "updated_at": "2025-09-09T19:08:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334523023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334523023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334523216",
      "pull_request_review_id": 3202916844,
      "id": 2334523216,
      "node_id": "PRRC_kwDOABII586LJf9Q",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 105,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330014983,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-09T19:08:11Z",
      "updated_at": "2025-09-09T19:08:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334523216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334523216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334524197",
      "pull_request_review_id": 3202918382,
      "id": 2334524197,
      "node_id": "PRRC_kwDOABII586LJgMl",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:",
      "path": "test/functional/wallet_musig.py",
      "position": 114,
      "original_position": 94,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330027258,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it is useful to to exercise the change address of `send`.",
      "created_at": "2025-09-09T19:08:39Z",
      "updated_at": "2025-09-09T19:08:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334524197",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334524197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 114,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334524489",
      "pull_request_review_id": 3202918815,
      "id": 2334524489,
      "node_id": "PRRC_kwDOABII586LJgRJ",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 122,
      "original_position": 102,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330109213,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-09T19:08:49Z",
      "updated_at": "2025-09-09T19:08:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334524489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334524489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334525262",
      "pull_request_review_id": 3202920128,
      "id": 2334525262,
      "node_id": "PRRC_kwDOABII586LJgdO",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 102,
      "original_position": 84,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330079926,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixing that is orthogonal to this PR",
      "created_at": "2025-09-09T19:09:09Z",
      "updated_at": "2025-09-09T19:09:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334525262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334525262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334526025",
      "pull_request_review_id": 3202921459,
      "id": 2334526025,
      "node_id": "PRRC_kwDOABII586LJgpJ",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 30,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330127300,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated the name and changed this to use a regex that matches only on a 2 index multipath.",
      "created_at": "2025-09-09T19:09:30Z",
      "updated_at": "2025-09-09T19:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334526025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334526025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334526200",
      "pull_request_review_id": 3202921711,
      "id": 2334526200,
      "node_id": "PRRC_kwDOABII586LJgr4",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 29,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330140614,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-09T19:09:36Z",
      "updated_at": "2025-09-09T19:09:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334526200",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334526200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334526627",
      "pull_request_review_id": 3202922676,
      "id": 2334526627,
      "node_id": "PRRC_kwDOABII586LJgyj",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 38,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330145621,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated to `expected_key_leaves`",
      "created_at": "2025-09-09T19:09:51Z",
      "updated_at": "2025-09-09T19:09:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334526627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334526627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334526817",
      "pull_request_review_id": 3202922932,
      "id": 2334526817,
      "node_id": "PRRC_kwDOABII586LJg1h",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 65,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330153004,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-09T19:09:57Z",
      "updated_at": "2025-09-09T19:09:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334526817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334526817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334527364",
      "pull_request_review_id": 3202923887,
      "id": 2334527364,
      "node_id": "PRRC_kwDOABII586LJg-E",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)",
      "path": "test/functional/wallet_musig.py",
      "position": 101,
      "original_position": 83,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330190644,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's not necessary to check for the warning.",
      "created_at": "2025-09-09T19:10:15Z",
      "updated_at": "2025-09-09T19:10:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334527364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334527364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 100,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334528185",
      "pull_request_review_id": 3202925071,
      "id": 2334528185,
      "node_id": "PRRC_kwDOABII586LJhK5",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 27,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330311229,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think refactoring like this is helpful as the resulting functions won't be called by anything else anyways.",
      "created_at": "2025-09-09T19:10:40Z",
      "updated_at": "2025-09-09T19:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334528185",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334528185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334528560",
      "pull_request_review_id": 3202925529,
      "id": 2334528560,
      "node_id": "PRRC_kwDOABII586LJhQw",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []",
      "path": "test/functional/wallet_musig.py",
      "position": 36,
      "original_position": 33,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330323832,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think this needs to be more verbose.",
      "created_at": "2025-09-09T19:10:51Z",
      "updated_at": "2025-09-09T19:10:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334528560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334528560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334529325",
      "pull_request_review_id": 3202926739,
      "id": 2334529325,
      "node_id": "PRRC_kwDOABII586LJhct",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 115,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330497856,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The behavior is simple enough that I don't think a separate function will make this better.",
      "created_at": "2025-09-09T19:11:16Z",
      "updated_at": "2025-09-09T19:11:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334529325",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334529325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334529748",
      "pull_request_review_id": 3202927328,
      "id": 2334529748,
      "node_id": "PRRC_kwDOABII586LJhjU",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 39,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330517973,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed to figure out how many wallets are needed automatically.",
      "created_at": "2025-09-09T19:11:29Z",
      "updated_at": "2025-09-09T19:11:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334529748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334529748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334530009",
      "pull_request_review_id": 3202927649,
      "id": 2334530009,
      "node_id": "PRRC_kwDOABII586LJhnZ",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])\n+        # Check that there are as many participants as we expected\n+        assert_equal(len(part_pks), len(keys))\n+        # Check that each participant has a derivation path\n+        for deriv_path in dec_psbt[\"inputs\"][0][\"taproot_bip32_derivs\"]:\n+            if deriv_path[\"pubkey\"] in part_pks:\n+                part_pks.remove(deriv_path[\"pubkey\"])\n+        assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), exp_key_leaf)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\n+\n+        # Add partial sigs\n+        psig_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), exp_key_leaf)\n+        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\n+            pubkey = ps[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for partial sig not seen as output key or internal key\"\n+\n+        # Non-participant aggregates partial sigs and send\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)\n+        assert_equal(finalized[\"complete\"], True)\n+        assert \"hex\" in finalized\n+        self.nodes[0].sendrawtransaction(finalized[\"hex\"])\n+\n+    def run_test(self):\n+        self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\n+        self.do_test(\"rawtr(musig(keys/*)) with ALL|ANYONECANPAY\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", \"ALL|ANYONECANPAY\")\n+        self.do_test(\"tr(musig(keys/*))\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\n+        self.do_test(\"rawtr(musig/*)\", \"rawtr(musig($0,$1,$2)/<0;1>/*)\")\n+        self.do_test(\"tr(musig/*)\", \"tr(musig($0,$1,$2)/<0;1>/*)\")\n+        self.do_test(\"tr(H, pk(musig(keys/*)))\", \"tr($H,pk(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*)))\")\n+        self.do_test(\"tr(H,pk(musig/*))\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\")\n+        self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\")\n+        self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\")\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 239,
      "original_position": 188,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2333473293,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-09T19:11:37Z",
      "updated_at": "2025-09-09T19:11:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334530009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334530009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334530225",
      "pull_request_review_id": 3202927918,
      "id": 2334530225,
      "node_id": "PRRC_kwDOABII586LJhqx",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_int:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = wallets[0].listunspent()[0]\n+        psbt = wallets[0].send(outputs=[{def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\")[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Retrieve all participant pubkeys\n+        part_pks = set()\n+        for agg in dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]:\n+            for part_pub in agg[\"participant_pubkeys\"]:\n+                part_pks.add(part_pub[2:])\n+        # Check that there are as many participants as we expected\n+        assert_equal(len(part_pks), len(keys))\n+        # Check that each participant has a derivation path\n+        for deriv_path in dec_psbt[\"inputs\"][0][\"taproot_bip32_derivs\"]:\n+            if deriv_path[\"pubkey\"] in part_pks:\n+                part_pks.remove(deriv_path[\"pubkey\"])\n+        assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), exp_key_leaf)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\n+\n+        # Add partial sigs\n+        psig_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), exp_key_leaf)\n+        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\n+            pubkey = ps[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for partial sig not seen as output key or internal key\"\n+\n+        # Non-participant aggregates partial sigs and send\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 173,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2333720544,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-09T19:11:43Z",
      "updated_at": "2025-09-09T19:11:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2334530225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2334530225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 172,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336149483",
      "pull_request_review_id": 3205291156,
      "id": 2336149483,
      "node_id": "PRRC_kwDOABII586LPs_r",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):\n+        self.log.info(f\"Testing {comment}\")\n+        def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        has_int = \"<\" in pattern and \">\" in pattern\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        exp_key_leaf = 0\n+        for i in range(10):\n+            if f\"${i}\" in pat:\n+                exp_key_leaf += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 102,
      "original_position": 84,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330079926,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Didn't intend to suggest fixing it in this PR, instead highlighting an issue that could probably be fixed by the other PR if/when it's merged.",
      "created_at": "2025-09-10T09:26:58Z",
      "updated_at": "2025-09-10T09:26:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2336149483",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336149483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336806292",
      "pull_request_review_id": 3206223831,
      "id": 2336806292,
      "node_id": "PRRC_kwDOABII586LSNWU",
      "diff_hunk": "@@ -100,6 +102,33 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\n     return true;\n }\n \n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve the private key\n+    CKey key;",
      "path": "src/script/sign.cpp",
      "position": 69,
      "original_position": 20,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b01d7379b9e29760abd7b549a04db43937a7b8d \"sign: Add CreateMuSig2Nonce\"\r\n\r\nNit: Reordering to defer getting the private key.\r\n\r\n```diff\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex b183be8939..d208f44626 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -106,10 +106,6 @@ std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const\r\n {\r\n     assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\r\n \r\n-    // Retrieve the private key\r\n-    CKey key;\r\n-    if (!provider.GetKey(part_pubkey.GetID(), key)) return {};\r\n-\r\n     // Retrieve participant pubkeys\r\n     std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\r\n     if (!pubkeys.size()) return {};\r\n@@ -119,6 +115,10 @@ std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const\r\n     std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\r\n     if (!sighash.has_value()) return {};\r\n \r\n+    // Retrieve the private key\r\n+    CKey key;\r\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return {};\r\n+\r\n     MuSig2SecNonce secnonce;\r\n     std::vector<uint8_t> out = key.CreateMuSig2Nonce(secnonce, *sighash, aggregate_pubkey, pubkeys);\r\n     if (out.empty()) return {};\r\n\r\n```",
      "created_at": "2025-09-10T13:39:49Z",
      "updated_at": "2025-09-10T14:33:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2336806292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336806292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 109,
      "original_start_line": 109,
      "start_side": "RIGHT",
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336873078",
      "pull_request_review_id": 3206223831,
      "id": 2336873078,
      "node_id": "PRRC_kwDOABII586LSdp2",
      "diff_hunk": "@@ -95,6 +97,8 @@ struct SignatureData {\n     std::map<std::vector<uint8_t>, std::vector<uint8_t>> hash160_preimages; ///< Mapping from a HASH160 hash to its preimage provided to solve a Script\n     //! Mapping from pair of MuSig2 aggregate pubkey, and tapleaf hash to map of MuSig2 participant pubkeys to MuSig2 public nonce\n     std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, std::vector<uint8_t>>> musig2_pubnonces;\n+    //! Mapping from pair of MuSig2 aggregate pubkey, and tapleaf hash to map of MuSig2 participant pubkeys to MuSig2 partial signature\n+    std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, uint256>> musig2_partial_sigs;",
      "path": "src/script/sign.h",
      "position": 54,
      "original_position": 21,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b01d7379b9e29760abd7b549a04db43937a7b8d \"sign: Add CreateMuSig2Nonce\"\r\nIn 10b7148efa754169cc625e93c98fa54f7b375e5d \"sign: Add CreateMuSig2PartialSig\"\r\n\r\nTo avoid reading these very long types multiple times, also to avoid duplication.\r\nAn alternative is to have these 3 objects in a struct that could be used in psbt.h and sign.h, but that'd increase the diff.\r\n\r\n<details open>\r\n<summary>Musig2 Types Diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/musig.h b/src/musig.h\r\nindex 95f495a40a..020fdc09c3 100644\r\n--- a/src/musig.h\r\n+++ b/src/musig.h\r\n@@ -14,6 +14,13 @@ struct secp256k1_musig_keyagg_cache;\r\n class MuSig2SecNonceImpl;\r\n struct secp256k1_musig_secnonce;\r\n \r\n+//! Map MuSig2 aggregate pubkeys to its participants\r\n+using MuSig2Participants = std::map<CPubKey, std::vector<CPubKey>>;\r\n+//! Mapping from pair of MuSig2 aggregate pubkey, and tapleaf hash to map of MuSig2 participant pubkeys to MuSig2 public nonce\r\n+using MuSig2Pubnonces = std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, std::vector<uint8_t>>>;\r\n+//! Mapping from pair of MuSig2 aggregate pubkey, and tapleaf hash to map of MuSig2 participant pubkeys to MuSig2 partial signature\r\n+using MuSig2PartialSigs = std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, uint256>>;\r\n+\r\n //! MuSig2 chaincode as defined by BIP 328\r\n using namespace util::hex_literals;\r\n constexpr uint256 MUSIG_CHAINCODE{\"868087ca02a6f974c4598924c36b57762d32cb45717167e300622c7167e38965\"_hex_u8};\r\ndiff --git a/src/psbt.h b/src/psbt.h\r\nindex f8098b0450..5851caf5a3 100644\r\n--- a/src/psbt.h\r\n+++ b/src/psbt.h\r\n@@ -15,6 +15,7 @@\r\n #include <script/signingprovider.h>\r\n #include <span.h>\r\n #include <streams.h>\r\n+#include <musig.h>\r\n \r\n #include <optional>\r\n \r\n@@ -267,12 +268,9 @@ struct PSBTInput\r\n     XOnlyPubKey m_tap_internal_key;\r\n     uint256 m_tap_merkle_root;\r\n \r\n-    // MuSig2 fields\r\n-    std::map<CPubKey, std::vector<CPubKey>> m_musig2_participants;\r\n-    // Key is the aggregate pubkey and the script leaf hash, value is a map of participant pubkey to pubnonce\r\n-    std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, std::vector<uint8_t>>> m_musig2_pubnonces;\r\n-    // Key is the aggregate pubkey and the script leaf hash, value is a map of participant pubkey to partial_sig\r\n-    std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, uint256>> m_musig2_partial_sigs;\r\n+    MuSig2Participants m_musig2_participants;\r\n+    MuSig2Pubnonces m_musig2_pubnonces;\r\n+    MuSig2PartialSigs m_musig2_partial_sigs;\r\n \r\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\r\n     std::set<PSBTProprietary> m_proprietary;\r\ndiff --git a/src/script/sign.h b/src/script/sign.h\r\nindex dd86a8066a..a9d09fa190 100644\r\n--- a/src/script/sign.h\r\n+++ b/src/script/sign.h\r\n@@ -14,6 +14,7 @@\r\n #include <script/keyorigin.h>\r\n #include <script/signingprovider.h>\r\n #include <uint256.h>\r\n+#include <musig.h>\r\n \r\n class CKey;\r\n class CKeyID;\r\n@@ -97,12 +98,9 @@ struct SignatureData {\r\n     std::map<std::vector<uint8_t>, std::vector<uint8_t>> hash256_preimages; ///< Mapping from a HASH256 hash to its preimage provided to solve a Script\r\n     std::map<std::vector<uint8_t>, std::vector<uint8_t>> ripemd160_preimages; ///< Mapping from a RIPEMD160 hash to its preimage provided to solve a Script\r\n     std::map<std::vector<uint8_t>, std::vector<uint8_t>> hash160_preimages; ///< Mapping from a HASH160 hash to its preimage provided to solve a Script\r\n-    //! Map MuSig2 aggregate pubkeys to its participants\r\n-    std::map<CPubKey, std::vector<CPubKey>> musig2_pubkeys;\r\n-    //! Mapping from pair of MuSig2 aggregate pubkey, and tapleaf hash to map of MuSig2 participant pubkeys to MuSig2 public nonce\r\n-    std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, std::vector<uint8_t>>> musig2_pubnonces;\r\n-    //! Mapping from pair of MuSig2 aggregate pubkey, and tapleaf hash to map of MuSig2 participant pubkeys to MuSig2 partial signature\r\n-    std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, uint256>> musig2_partial_sigs;\r\n+    MuSig2Participants musig2_pubkeys;\r\n+    MuSig2Pubnonces musig2_pubnonces;\r\n+    MuSig2PartialSigs musig2_partial_sigs;\r\n \r\n     SignatureData() = default;\r\n     explicit SignatureData(const CScript& script) : scriptSig(script) {}\r\n\r\n```\r\n</details>",
      "created_at": "2025-09-10T14:01:36Z",
      "updated_at": "2025-09-11T11:24:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2336873078",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336873078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 104,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336962962",
      "pull_request_review_id": 3206223831,
      "id": 2336962962,
      "node_id": "PRRC_kwDOABII586LSzmS",
      "diff_hunk": "@@ -472,16 +558,110 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n             }\n         }\n \n-        std::vector<unsigned char> sig;\n-        if (sigdata.taproot_key_path_sig.size() == 0) {\n-            if (creator.CreateSchnorrSig(provider, sig, sigdata.tr_spenddata.internal_key, nullptr, &sigdata.tr_spenddata.merkle_root, SigVersion::TAPROOT)) {\n+        auto make_keypath_sig = [&](const XOnlyPubKey& pk, const uint256* merkle_root) {\n+            std::vector<unsigned char> sig;\n+            if (creator.CreateSchnorrSig(provider, sig, pk, nullptr, merkle_root, SigVersion::TAPROOT)) {\n                 sigdata.taproot_key_path_sig = sig;\n+            } else {\n+                // Lookup derivation paths for this key\n+                KeyOriginInfo info;\n+                auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(pk);\n+                if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+                    info = misc_pk_it->second.second;\n+                }\n+\n+                for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+                    if (part_pks.empty()) continue;\n+\n+                    // Fill participant derivation path info\n+                    for (const auto& part_pk : part_pks) {\n+                        KeyOriginInfo info;\n+                        if (provider.GetKeyOrigin(part_pk.GetID(), info)) {\n+                            XOnlyPubKey xonly_part(part_pk);\n+                            auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                            if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                                sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), info));\n+                            }\n+                        }\n+                    }\n+\n+                    std::vector<std::pair<uint256, bool>> tweaks;\n+                    CPubKey plain_pub = agg_pub;\n+                    if (XOnlyPubKey(agg_pub) != pk) {\n+                        if (info.path.size() > 0) {\n+                            // Compute and compare fingerprint\n+                            CKeyID keyid = agg_pub.GetID();\n+                            if (!std::equal(info.fingerprint, info.fingerprint + sizeof(info.fingerprint), keyid.data())) {\n+                                continue;\n+                            }\n+                            // Get the BIP32 derivation tweaks\n+                            CExtPubKey extpub;\n+                            extpub.nDepth = 0;\n+                            std::memset(extpub.vchFingerprint, 0, 4);\n+                            extpub.nChild = 0;\n+                            extpub.chaincode = MUSIG_CHAINCODE;\n+                            extpub.pubkey = agg_pub;",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 156,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "7c085554dce336eb1597ab2fc482163876a49270",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 7c085554dce336eb1597ab2fc482163876a49270 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\nEasy candidate to deduplicate and improve readability.\r\n\r\n<details open>\r\n<summary>Deduplicate SyntheticXpub Diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/musig.cpp b/src/musig.cpp\r\nindex 28de6dc819..d5da34feb7 100644\r\n--- a/src/musig.cpp\r\n+++ b/src/musig.cpp\r\n@@ -61,6 +61,16 @@ std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkey\r\n     return MuSig2AggregatePubkeys(pubkeys, keyagg_cache, std::nullopt);\r\n }\r\n \r\n+CExtPubKey CreateMuSig2SyntheticXpub(CPubKey agg_pub) {\r\n+    CExtPubKey extpub;\r\n+    extpub.nDepth = 0;\r\n+    std::memset(extpub.vchFingerprint, 0, 4);\r\n+    extpub.nChild = 0;\r\n+    extpub.chaincode = MUSIG_CHAINCODE;\r\n+    extpub.pubkey = agg_pub;\r\n+    return extpub;\r\n+}\r\n+\r\n class MuSig2SecNonceImpl\r\n {\r\n private:\r\ndiff --git a/src/musig.h b/src/musig.h\r\nindex 95f495a40a..d01865a97f 100644\r\n--- a/src/musig.h\r\n+++ b/src/musig.h\r\n@@ -59,4 +66,5 @@ uint256 MuSig2SessionID(const CPubKey& script_pubkey, const CPubKey& part_pubkey\r\n \r\n std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs);\r\n \r\n+CExtPubKey CreateMuSig2SyntheticXpub(CPubKey);\r\n #endif // BITCOIN_MUSIG_H\r\ndiff --git a/src/script/descriptor.cpp b/src/script/descriptor.cpp\r\nindex 3a40270217..5da24f61eb 100644\r\n--- a/src/script/descriptor.cpp\r\n+++ b/src/script/descriptor.cpp\r\n@@ -640,14 +640,7 @@ public:\r\n \r\n             // Make our pubkey provider\r\n             if (IsRangedDerivation() || !m_path.empty()) {\r\n-                // Make the synthetic xpub and construct the BIP32PubkeyProvider\r\n-                CExtPubKey extpub;\r\n-                extpub.nDepth = 0;\r\n-                std::memset(extpub.vchFingerprint, 0, 4);\r\n-                extpub.nChild = 0;\r\n-                extpub.chaincode = MUSIG_CHAINCODE;\r\n-                extpub.pubkey = m_aggregate_pubkey.value();\r\n-\r\n+                CExtPubKey extpub = CreateMuSig2SyntheticXpub(m_aggregate_pubkey.value());\r\n                 m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\r\n             } else {\r\n                 m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex b183be8939..0b04c19b4f 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -316,12 +316,7 @@ static bool CreateTaprootScriptSig(const BaseSignatureCreator& creator, Signatur\r\n                         continue;\r\n                     }\r\n                     // Get the BIP32 derivation tweaks\r\n-                    CExtPubKey extpub;\r\n-                    extpub.nDepth = 0;\r\n-                    std::memset(extpub.vchFingerprint, 0, 4);\r\n-                    extpub.nChild = 0;\r\n-                    extpub.chaincode = MUSIG_CHAINCODE;\r\n-                    extpub.pubkey = agg_pub;\r\n+                    CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\r\n                     for (const int i : info.path) {\r\n                         auto& [tweak, xonly] = tweaks.emplace_back();\r\n                         xonly = false;\r\n@@ -595,12 +590,7 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\r\n                                 continue;\r\n                             }\r\n                             // Get the BIP32 derivation tweaks\r\n-                            CExtPubKey extpub;\r\n-                            extpub.nDepth = 0;\r\n-                            std::memset(extpub.vchFingerprint, 0, 4);\r\n-                            extpub.nChild = 0;\r\n-                            extpub.chaincode = MUSIG_CHAINCODE;\r\n-                            extpub.pubkey = agg_pub;\r\n+                            CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\r\n                             for (const int i : info.path) {\r\n                                 auto& [t, xonly] = tweaks.emplace_back();\r\n                                 xonly = false;\r\n\r\n```\r\n</details>",
      "created_at": "2025-09-10T14:27:35Z",
      "updated_at": "2025-09-10T15:21:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2336962962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336962962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 598,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2337004847",
      "pull_request_review_id": 3206514302,
      "id": 2337004847,
      "node_id": "PRRC_kwDOABII586LS90v",
      "diff_hunk": "@@ -0,0 +1,191 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_RE = re.compile(r\"(.*?)<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None):",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 27,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d23116987d19587746d392895c06f5c426c1d0d2",
      "in_reply_to_id": 2330311229,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It was mostly to put the related code in a block, not for reusability; calling the inline sub-functions is an alternate imho.\r\n\r\n```python\r\ndef do_test(self, ...):\r\n self.log.info(f\"Testing {comment}\")\r\n def prepare_musig_wallets_for_spending(...):\r\n  ...\r\n\r\n def spend_from_musig_address(...):\r\n  ...\r\n \r\n musig_spending_data = prepare_musig_wallets_for_spending()\r\n spend_from_musig_address(musig_spending_data)\r\n``` ",
      "created_at": "2025-09-10T14:41:54Z",
      "updated_at": "2025-09-10T14:41:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2337004847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2337004847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342348714",
      "pull_request_review_id": 3213650429,
      "id": 2342348714,
      "node_id": "PRRC_kwDOABII586LnWeq",
      "diff_hunk": "@@ -100,6 +102,33 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\n     return true;\n }\n \n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve the private key\n+    CKey key;",
      "path": "src/script/sign.cpp",
      "position": 69,
      "original_position": 20,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": 2336806292,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We want to get the private key early so that we know whether we will be able to even do anything here.",
      "created_at": "2025-09-11T21:10:06Z",
      "updated_at": "2025-09-11T21:10:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2342348714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342348714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 109,
      "original_start_line": 109,
      "start_side": "RIGHT",
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342368768",
      "pull_request_review_id": 3213678509,
      "id": 2342368768,
      "node_id": "PRRC_kwDOABII586LnbYA",
      "diff_hunk": "@@ -95,6 +97,8 @@ struct SignatureData {\n     std::map<std::vector<uint8_t>, std::vector<uint8_t>> hash160_preimages; ///< Mapping from a HASH160 hash to its preimage provided to solve a Script\n     //! Mapping from pair of MuSig2 aggregate pubkey, and tapleaf hash to map of MuSig2 participant pubkeys to MuSig2 public nonce\n     std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, std::vector<uint8_t>>> musig2_pubnonces;\n+    //! Mapping from pair of MuSig2 aggregate pubkey, and tapleaf hash to map of MuSig2 participant pubkeys to MuSig2 partial signature\n+    std::map<std::pair<CPubKey, uint256>, std::map<CPubKey, uint256>> musig2_partial_sigs;",
      "path": "src/script/sign.h",
      "position": 54,
      "original_position": 21,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": 2336873078,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I actually prefer verbosity in type names.",
      "created_at": "2025-09-11T21:22:24Z",
      "updated_at": "2025-09-11T21:22:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2342368768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342368768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 104,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342376993",
      "pull_request_review_id": 3213688858,
      "id": 2342376993,
      "node_id": "PRRC_kwDOABII586LndYh",
      "diff_hunk": "@@ -472,16 +558,110 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n             }\n         }\n \n-        std::vector<unsigned char> sig;\n-        if (sigdata.taproot_key_path_sig.size() == 0) {\n-            if (creator.CreateSchnorrSig(provider, sig, sigdata.tr_spenddata.internal_key, nullptr, &sigdata.tr_spenddata.merkle_root, SigVersion::TAPROOT)) {\n+        auto make_keypath_sig = [&](const XOnlyPubKey& pk, const uint256* merkle_root) {\n+            std::vector<unsigned char> sig;\n+            if (creator.CreateSchnorrSig(provider, sig, pk, nullptr, merkle_root, SigVersion::TAPROOT)) {\n                 sigdata.taproot_key_path_sig = sig;\n+            } else {\n+                // Lookup derivation paths for this key\n+                KeyOriginInfo info;\n+                auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(pk);\n+                if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+                    info = misc_pk_it->second.second;\n+                }\n+\n+                for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+                    if (part_pks.empty()) continue;\n+\n+                    // Fill participant derivation path info\n+                    for (const auto& part_pk : part_pks) {\n+                        KeyOriginInfo info;\n+                        if (provider.GetKeyOrigin(part_pk.GetID(), info)) {\n+                            XOnlyPubKey xonly_part(part_pk);\n+                            auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                            if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                                sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), info));\n+                            }\n+                        }\n+                    }\n+\n+                    std::vector<std::pair<uint256, bool>> tweaks;\n+                    CPubKey plain_pub = agg_pub;\n+                    if (XOnlyPubKey(agg_pub) != pk) {\n+                        if (info.path.size() > 0) {\n+                            // Compute and compare fingerprint\n+                            CKeyID keyid = agg_pub.GetID();\n+                            if (!std::equal(info.fingerprint, info.fingerprint + sizeof(info.fingerprint), keyid.data())) {\n+                                continue;\n+                            }\n+                            // Get the BIP32 derivation tweaks\n+                            CExtPubKey extpub;\n+                            extpub.nDepth = 0;\n+                            std::memset(extpub.vchFingerprint, 0, 4);\n+                            extpub.nChild = 0;\n+                            extpub.chaincode = MUSIG_CHAINCODE;\n+                            extpub.pubkey = agg_pub;",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 156,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "7c085554dce336eb1597ab2fc482163876a49270",
      "in_reply_to_id": 2336962962,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For a followup or if I need to retouch.",
      "created_at": "2025-09-11T21:26:39Z",
      "updated_at": "2025-09-11T21:26:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2342376993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2342376993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 598,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348217241",
      "pull_request_review_id": 3223415048,
      "id": 2348217241,
      "node_id": "PRRC_kwDOABII586L9vOZ",
      "diff_hunk": "@@ -383,6 +383,91 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::optional<size_t> our_pubkey_idx;\n+    CPubKey our_pubkey = GetPubKey();\n+    for (const CPubKey& part_pk : pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;\n+        if (part_pk == our_pubkey) {\n+            our_pubkey_idx = signers_data.size();\n+        }\n+\n+        auto& [secp_pk, secp_pn] = signers_data.emplace_back();\n+\n+        if (!secp256k1_ec_pubkey_parse(secp256k1_context_sign, &secp_pk, part_pk.data(), part_pk.size())) {\n+            return std::nullopt;\n+        }\n+\n+        if (!secp256k1_musig_pubnonce_parse(secp256k1_context_sign, &secp_pn, pubnonce.data())) {\n+            return std::nullopt;\n+        }\n+    }\n+    if (our_pubkey_idx == std::nullopt) {\n+        return std::nullopt;\n+    }\n+    pubnonce_ptrs.reserve(signers_data.size());\n+    for (auto& [_, pn] : signers_data) {\n+        pubnonce_ptrs.push_back(&pn);\n+    }\n+\n+    // Aggregate nonces\n+    secp256k1_musig_aggnonce aggnonce;\n+    if (!secp256k1_musig_nonce_agg(secp256k1_context_sign, &aggnonce, pubnonce_ptrs.data(), pubnonce_ptrs.size())) {\n+        return std::nullopt;\n+    }\n+\n+    // Apply tweaks\n+    for (const auto& [tweak, xonly] : tweaks) {\n+        if (xonly) {\n+            if (!secp256k1_musig_pubkey_xonly_tweak_add(secp256k1_context_static, nullptr, &keyagg_cache, tweak.data())) {\n+                return std::nullopt;\n+            }\n+        } else if (!secp256k1_musig_pubkey_ec_tweak_add(secp256k1_context_static, nullptr, &keyagg_cache, tweak.data())) {\n+            return std::nullopt;\n+        }\n+    }\n+\n+    // Create musig_session\n+    secp256k1_musig_session session;\n+    if (!secp256k1_musig_nonce_process(secp256k1_context_sign, &session, &aggnonce, hash.data(), &keyagg_cache)) {\n+        return std::nullopt;\n+    }\n+\n+    // Create partial signature\n+    secp256k1_musig_partial_sig psig;\n+    if (!secp256k1_musig_partial_sign(secp256k1_context_sign, &psig, secnonce.Get(), &keypair, &keyagg_cache, &session)) {\n+        return std::nullopt;\n+    }\n+    secnonce.Invalidate();",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 73,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 10b7148efa754169cc625e93c98fa54f7b375e5d \"sign: Add CreateMuSig2PartialSig\"\r\n\r\n```diff\r\ndiff --git a/src/key.cpp b/src/key.cpp\r\nindex 005a913236..c312f0713f 100644\r\n--- a/src/key.cpp\r\n+++ b/src/key.cpp\r\n@@ -373,7 +373,7 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\r\n         return {};\r\n     }\r\n \r\n-    // Serialize nonce\r\n+    // Serialize pubnonce\r\n     std::vector<uint8_t> out;\r\n     out.resize(66);\r\n     if (!secp256k1_musig_pubnonce_serialize(secp256k1_context_sign, out.data(), &pubnonce)) {\r\n@@ -452,6 +452,7 @@ std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const C\r\n     if (!secp256k1_musig_partial_sign(secp256k1_context_sign, &psig, secnonce.Get(), &keypair, &keyagg_cache, &session)) {\r\n         return std::nullopt;\r\n     }\r\n+    // Mandatorily delete the secnonce after signing to prohibit nonce reuse!\r\n     secnonce.Invalidate();\r\n \r\n     // Verify partial signature\r\n```",
      "created_at": "2025-09-15T08:19:38Z",
      "updated_at": "2025-09-15T14:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348217241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348217241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 457,
      "original_start_line": 454,
      "start_side": "RIGHT",
      "line": 459,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348274053",
      "pull_request_review_id": 3223415048,
      "id": 2348274053,
      "node_id": "PRRC_kwDOABII586L99GF",
      "diff_hunk": "@@ -129,6 +129,48 @@ std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const\n     return out;\n }\n \n+bool MutableTransactionSignatureCreator::CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve private key\n+    CKey key;\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return false;\n+\n+    // Retrieve participant pubkeys\n+    std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\n+    if (!pubkeys.size()) return false;\n+    if (std::find(pubkeys.begin(), pubkeys.end(), part_pubkey) == pubkeys.end()) return {};\n+\n+    // Retrieve pubnonces\n+    auto this_leaf_aggkey = std::make_pair(script_pubkey, leaf_hash ? *leaf_hash : uint256());\n+    auto pubnonce_it = sigdata.musig2_pubnonces.find(this_leaf_aggkey);\n+    if (pubnonce_it == sigdata.musig2_pubnonces.end()) return false;\n+    const std::map<CPubKey, std::vector<uint8_t>>& pubnonces = pubnonce_it->second;\n+\n+    // Check if enough pubnonces\n+    if (pubnonces.size() != pubkeys.size()) return false;\n+\n+    // Compute sighash\n+    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\n+    if (!sighash.has_value()) return false;\n+\n+    // Retrieve the secnonce\n+    uint256 session_id = MuSig2SessionID(script_pubkey, part_pubkey, *sighash);\n+    std::optional<std::reference_wrapper<MuSig2SecNonce>> secnonce = provider.GetMuSig2SecNonce(session_id);\n+    if (!secnonce || !secnonce->get().IsValid()) return false;\n+\n+    // Compute the sig\n+    std::optional<uint256> sig = key.CreateMuSig2PartialSig(*sighash, aggregate_pubkey, pubkeys, pubnonces, *secnonce, tweaks);\n+    if (!sig) return false;\n+    partial_sig = std::move(*sig);\n+\n+    // Delete the secnonce now that we're done with it\n+    provider.DeleteMuSig2Session(session_id);",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/10b7148efa754169cc625e93c98fa54f7b375e5d \"sign: Add CreateMuSig2PartialSig\"\r\n\r\nWe can prefer to fail the process if the `secnonce` was not deleted for some reason.\r\n\r\n```diff\r\n@@ -166,6 +166,7 @@ bool MutableTransactionSignatureCreator::CreateMuSig2PartialSig(const SigningPro\r\n     partial_sig = std::move(*sig);\r\n \r\n     // Delete the secnonce now that we're done with it\r\n+    assert(!secnonce->get().IsValid());\r\n     provider.DeleteMuSig2Session(session_id);\r\n \r\n     return true;\r\n```",
      "created_at": "2025-09-15T08:41:26Z",
      "updated_at": "2025-09-15T14:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348274053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348274053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 170,
      "original_start_line": 168,
      "start_side": "RIGHT",
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348311867",
      "pull_request_review_id": 3223415048,
      "id": 2348311867,
      "node_id": "PRRC_kwDOABII586L-GU7",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)\n+{\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return {};\n+\n+    // Parse participant pubkey\n+    CPubKey our_pubkey = GetPubKey();\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_sign, &pubkey, our_pubkey.data(), our_pubkey.size())) {\n+        return {};\n+    }\n+\n+    // Generate randomness for nonce\n+    uint256 rand;\n+    GetStrongRandBytes(rand);\n+\n+    // Generate nonce\n+    secp256k1_musig_pubnonce pubnonce;\n+    if (!secp256k1_musig_nonce_gen(secp256k1_context_sign, secnonce.Get(), &pubnonce, rand.data(), UCharCast(begin()), &pubkey, hash.data(), &keyagg_cache, nullptr)) {\n+        return {};\n+    }\n+\n+    // Serialize nonce\n+    std::vector<uint8_t> out;\n+    out.resize(66);",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b01d7379b9e29760abd7b549a04db43937a7b8d \"sign: Add CreateMuSig2Nonce\"\r\n\r\nCan consider creating the constant now in the `musig.h` dedicated file, even though there is no pubnonce object yet - ref https://github.com/bitcoin/bitcoin/pull/31247#discussion_r2049062217\r\n\r\n```diff\r\n-    // Serialize nonce\r\n+    // Serialize pubnonce\r\n     std::vector<uint8_t> out;\r\n-    out.resize(66);\r\n+    out.resize(MUSIG2_PUBNONCE_SIZE);\r\n```",
      "created_at": "2025-09-15T08:55:57Z",
      "updated_at": "2025-09-15T14:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348311867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348311867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348325505",
      "pull_request_review_id": 3223415048,
      "id": 2348325505,
      "node_id": "PRRC_kwDOABII586L-JqB",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/6b01d7379b9e29760abd7b549a04db43937a7b8d \"sign: Add CreateMuSig2Nonce\"\r\n\r\nFor the `pubnonce` that we know is of a fixed size of `66` bytes, can't we use a fixed size array instead everywhere, which I find to be more expressive for this use case? I suppose there is no case when we need to use the vector specific properties for a `pubnonce`.\r\n\r\n```cpp\r\nstd::vector<uint8_t> \r\n```",
      "created_at": "2025-09-15T08:59:55Z",
      "updated_at": "2025-09-15T14:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348325505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348325505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348335253",
      "pull_request_review_id": 3223415048,
      "id": 2348335253,
      "node_id": "PRRC_kwDOABII586L-MCV",
      "diff_hunk": "@@ -383,6 +383,91 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::optional<size_t> our_pubkey_idx;\n+    CPubKey our_pubkey = GetPubKey();\n+    for (const CPubKey& part_pk : pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 10b7148efa754169cc625e93c98fa54f7b375e5d \"sign: Add CreateMuSig2PartialSig\"\r\n\r\nI believe by using a fixed size array for pubnonce as mentioned in an earlier comment can avoid the need for this kind of check.",
      "created_at": "2025-09-15T09:04:09Z",
      "updated_at": "2025-09-15T14:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348335253",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348335253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348357357",
      "pull_request_review_id": 3223415048,
      "id": 2348357357,
      "node_id": "PRRC_kwDOABII586L-Rbt",
      "diff_hunk": "@@ -23,4 +25,35 @@ std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_ca\n //! Compute the full aggregate pubkey from the given participant pubkeys in their current order\n std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);\n \n+/**\n+ * MuSig2SecNonce encapsulates a secret nonce in use in a MuSig2 signing session.\n+ * Since this nonce persists outside of libsecp256k1 signing code, we must handle\n+ * its construction and destruction ourselves.\n+ * The secret nonce must be kept a secret, otherwise the private key may be leaked.\n+ * As such, it needs to be treated in the same way that CKeys are treated.\n+ * So this class handles the secure allocation of the secp256k1_musig_secnonce object\n+ * that libsecp256k1 uses, and only gives out references to this object to avoid\n+ * any possibility of copies being made. Furthermore, objects of this class are not\n+ * copyable to avoid nonce reuse.\n+*/\n+class MuSig2SecNonce\n+{\n+private:\n+    std::unique_ptr<MuSig2SecNonceImpl> m_impl;",
      "path": "src/musig.h",
      "position": 46,
      "original_position": 27,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "645fcaa83108e6a0faed2c49c72ef710f0231407",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 645fcaa83108e6a0faed2c49c72ef710f0231407 \"Add MuSig2SecNonce class for secure allocation of musig nonces\"\r\n\r\nWhile not opposed to the idea of encapsulating `MuSig2SecNonceImpl` inside `MuSig2SecNonce`, I don't fully understand the need for it. Both the classes have copy constructors deleted and the `Get, Invalidate, IsValid` functions directly call the corresponding functions of the `MuSig2SecNonceImpl` impl class without any other code in between.\r\n\r\nWhat would be the downside of having only one `MuSig2SecNonce` class with the private `secp256k1_musig_secnonce` inside it?",
      "created_at": "2025-09-15T09:14:13Z",
      "updated_at": "2025-09-15T14:34:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348357357",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348357357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 43,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348456444",
      "pull_request_review_id": 3223415048,
      "id": 2348456444,
      "node_id": "PRRC_kwDOABII586L-pn8",
      "diff_hunk": "@@ -383,6 +383,91 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;",
      "path": "src/key.cpp",
      "position": 131,
      "original_position": 15,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/10b7148efa754169cc625e93c98fa54f7b375e5d \"sign: Add CreateMuSig2PartialSig\"\r\n\r\nMight be opinionated:\r\nI think having a `struct` for the `pubnonce` can add some structure in the overall MuSig signing code. The `66` size checks spread across `CreateMuSig2PartialSig` & `CreateMuSig2AggregateSig` functions seem distracting and IMO can go inside the constructor of the struct that internally can use `secp256k1_musig_pubnonce`. \r\nAt the moment, treatment of `pubnonce` seems quite barebones compared to the corresponding `SecNonce.`",
      "created_at": "2025-09-15T09:50:23Z",
      "updated_at": "2025-09-15T14:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348456444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348456444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 400,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348961437",
      "pull_request_review_id": 3223415048,
      "id": 2348961437,
      "node_id": "PRRC_kwDOABII586MAk6d",
      "diff_hunk": "@@ -0,0 +1,217 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+        wallets_needed = pat.count(\"$\")\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_key_leaves = 0\n+        for i in range(wallets_needed):\n+            if f\"${i}\" in pat:\n+                expected_key_leaves += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for wallet in wallets:\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].send(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", change_position=1)[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+        if has_internal:\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Check all participant pubkeys in the input and change output\n+        psbt_maps = [dec_psbt[\"inputs\"][0]]\n+        if has_internal:\n+            psbt_maps.append(dec_psbt[\"outputs\"][1])\n+        for psbt_map in psbt_maps:\n+            part_pks = set()\n+            for agg in psbt_map[\"musig2_participant_pubkeys\"]:\n+                for part_pub in agg[\"participant_pubkeys\"]:\n+                    part_pks.add(part_pub[2:])\n+            # Check that there are as many participants as we expected\n+            assert_equal(len(part_pks), len(keys))\n+            # Check that each participant has a derivation path\n+            for deriv_path in psbt_map[\"taproot_bip32_derivs\"]:\n+                if deriv_path[\"pubkey\"] in part_pks:\n+                    part_pks.remove(deriv_path[\"pubkey\"])\n+            assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_key_leaves)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\n+\n+        # Add partial sigs\n+        psig_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), expected_key_leaves)\n+        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\n+            pubkey = ps[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for partial sig not seen as output key or internal key\"\n+\n+        # Non-participant aggregates partial sigs and send\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt, extract=False)\n+        assert_equal(finalized[\"complete\"], True)\n+        witness = self.nodes[0].decodepsbt(finalized[\"psbt\"])[\"inputs\"][0][\"final_scriptwitness\"]\n+        if scriptpath:\n+            assert_greater_than(len(witness), 1)\n+        else:\n+            assert_equal(len(witness), 1)\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)\n+        assert \"hex\" in finalized\n+        self.nodes[0].sendrawtransaction(finalized[\"hex\"])\n+\n+    def run_test(self):\n+        self.def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\n+        self.do_test(\"rawtr(musig(keys/*)) with ALL|ANYONECANPAY\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", \"ALL|ANYONECANPAY\")\n+        self.do_test(\"tr(musig(keys/*)) no multipath\", \"tr(musig($0/0/*,$1/1/*,$2/2/*))\")\n+        self.do_test(\"tr(musig(keys/*)) 2 index multipath\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\n+        self.do_test(\"tr(musig(keys/*)) 3 index multipath\", \"tr(musig($0/<0;1;2>/*,$1/<1;2;3>/*,$2/<2;3;4>/*))\")\n+        self.do_test(\"rawtr(musig/*)\", \"rawtr(musig($0,$1,$2)/<0;1>/*)\")\n+        self.do_test(\"tr(musig/*)\", \"tr(musig($0,$1,$2)/<0;1>/*)\")\n+        self.do_test(\"tr(H, pk(musig(keys/*)))\", \"tr($H,pk(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*)))\", scriptpath=True)\n+        self.do_test(\"tr(H,pk(musig/*))\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\", scriptpath=True)\n+        self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\", scriptpath=True)\n+        self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\", scriptpath=True)\n+        self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\")\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 239,
      "original_position": 214,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "a06017dfce7ce72afbebe6f68d9a29cf72d26593",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In a06017dfce7ce72afbebe6f68d9a29cf72d26593 \"test: Test MuSig2 in the wallet\"\r\n\r\nIn the `SignTaproot` function in `src/script/sign.cpp`, key path spending is tried first and then script path spending that makes the key path spending the de-facto spending path in these tests. \r\n\r\nConsider updating these tests to allow testing for script path spending in case of a valid key path as well.\r\n\r\n<details open>\r\n<summary>Conditional Script path spending suggestion</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/wallet_musig.py b/test/functional/wallet_musig.py\r\nindex 283ba604eb..c45fc6cff3 100755\r\n--- a/test/functional/wallet_musig.py\r\n+++ b/test/functional/wallet_musig.py\r\n@@ -17,7 +17,7 @@ PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\r\n PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\r\n ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\r\n MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\r\n-\r\n+MUSIG_RE = re.compile(r\"musig\\(.+?\\)\")\r\n \r\n class WalletMuSigTest(BitcoinTestFramework):\r\n     WALLET_NUM = 0\r\n@@ -27,7 +27,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n     def skip_test_if_missing_module(self):\r\n         self.skip_if_no_wallet()\r\n \r\n-    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False):\r\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None):\r\n         self.log.info(f\"Testing {comment}\")\r\n         has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\r\n \r\n@@ -36,6 +36,8 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n \r\n         pat = pattern.replace(\"$H\", H_POINT)\r\n         wallets_needed = pat.count(\"$\")\r\n+        musig_patterns = pat.count(\"musig(\")\r\n+        all_musig_patterns = set(MUSIG_RE.findall(pat))\r\n \r\n         # Figure out how many wallets are needed and create them\r\n         expected_key_leaves = 0\r\n@@ -115,9 +117,9 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n \r\n         dec_psbt = self.nodes[0].decodepsbt(psbt)\r\n         assert_equal(len(dec_psbt[\"inputs\"]), 1)\r\n-        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\r\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), musig_patterns)\r\n         if has_internal:\r\n-            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\r\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), musig_patterns)\r\n \r\n         # Check all participant pubkeys in the input and change output\r\n         psbt_maps = [dec_psbt[\"inputs\"][0]]\r\n@@ -136,9 +138,31 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n                     part_pks.remove(deriv_path[\"pubkey\"])\r\n             assert_equal(len(part_pks), 0)\r\n \r\n+        signing_wallets = []\r\n+        to_sign_key_leaves = 0\r\n+        signed_key_leaves = 0\r\n+        if nosign_wallets:\r\n+            nosign_musig_patterns = set()\r\n+            for i, wallet in enumerate(wallets):\r\n+                if i in nosign_wallets:\r\n+                    for musig_pattern in all_musig_patterns:\r\n+                        if f\"${i}\" in musig_pattern:\r\n+                            nosign_musig_patterns.add(musig_pattern)\r\n+                else:\r\n+                    signing_wallets.append(wallet)\r\n+                    to_sign_key_leaves += pat.count(f\"${i}\")\r\n+\r\n+            to_sign_musig_patterns = all_musig_patterns - nosign_musig_patterns\r\n+            for p in to_sign_musig_patterns:\r\n+                signed_key_leaves += p.count(\"$\")\r\n+        else:\r\n+            signing_wallets = wallets\r\n+            to_sign_key_leaves = expected_key_leaves\r\n+            signed_key_leaves = expected_key_leaves\r\n+\r\n         # Add pubnonces\r\n         nonce_psbts = []\r\n-        for wallet in wallets:\r\n+        for wallet in signing_wallets:\r\n             proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\r\n             assert_equal(proc[\"complete\"], False)\r\n             nonce_psbts.append(proc[\"psbt\"])\r\n@@ -146,7 +170,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\r\n \r\n         dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\r\n-        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_key_leaves)\r\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), to_sign_key_leaves)\r\n         for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\r\n             pubkey = pn[\"aggregate_pubkey\"][2:]\r\n             if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\r\n@@ -162,7 +186,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n \r\n         # Add partial sigs\r\n         psig_psbts = []\r\n-        for wallet in wallets:\r\n+        for wallet in signing_wallets:\r\n             proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\r\n             assert_equal(proc[\"complete\"], False)\r\n             psig_psbts.append(proc[\"psbt\"])\r\n@@ -170,7 +194,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\r\n \r\n         dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\r\n-        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), expected_key_leaves)\r\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), signed_key_leaves)\r\n         for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\r\n             pubkey = ps[\"aggregate_pubkey\"][2:]\r\n             if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\r\n@@ -211,6 +235,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\", scriptpath=True)\r\n         self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\", scriptpath=True)\r\n         self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\")\r\n+        self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})} script-path\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\", scriptpath=True, nosign_wallets=[0])\r\n \r\n \r\n if __name__ == '__main__':\r\n```\r\n</details>\r\n",
      "created_at": "2025-09-15T13:14:14Z",
      "updated_at": "2025-09-15T14:27:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348961437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348961437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348994134",
      "pull_request_review_id": 3223415048,
      "id": 2348994134,
      "node_id": "PRRC_kwDOABII586MAs5W",
      "diff_hunk": "@@ -220,6 +221,8 @@ class CKey\n      *                               Merkle root of the script tree).\n      */\n     KeyPair ComputeKeyPair(const uint256* merkle_root) const;\n+\n+    std::vector<uint8_t> CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys);",
      "path": "src/key.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b01d7379b9e29760abd7b549a04db43937a7b8d \"sign: Add CreateMuSig2Nonce\"\r\n\r\nThe only use of this function is to create the nonce for the sighash passed; I did end up wondering twice what this `hash` corresponds while navigating the code earlier.\r\n\r\n`s/hash/sighash`\r\n\r\n```diff\r\ndiff --git a/src/key.cpp b/src/key.cpp\r\nindex 005a913236..e2476096ce 100644\r\n--- a/src/key.cpp\r\n+++ b/src/key.cpp\r\n@@ -350,7 +350,7 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\r\n     return KeyPair(*this, merkle_root);\r\n }\r\n \r\n-std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)\r\n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)\r\n {\r\n     // Get the keyagg cache and aggregate pubkey\r\n     secp256k1_musig_keyagg_cache keyagg_cache;\r\n@@ -369,11 +369,11 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\r\n \r\n     // Generate nonce\r\n     secp256k1_musig_pubnonce pubnonce;\r\n-    if (!secp256k1_musig_nonce_gen(secp256k1_context_sign, secnonce.Get(), &pubnonce, rand.data(), UCharCast(begin()), &pubkey, hash.data(), &keyagg_cache, nullptr)) {\r\n+    if (!secp256k1_musig_nonce_gen(secp256k1_context_sign, secnonce.Get(), &pubnonce, rand.data(), UCharCast(begin()), &pubkey, sighash.data(), &keyagg_cache, nullptr)) {\r\n         return {};\r\n     }\r\n \r\ndiff --git a/src/key.h b/src/key.h\r\nindex 83c154c421..f35f3cc015 100644\r\n--- a/src/key.h\r\n+++ b/src/key.h\r\n@@ -222,7 +222,7 @@ public:\r\n      */\r\n     KeyPair ComputeKeyPair(const uint256* merkle_root) const;\r\n \r\n-    std::vector<uint8_t> CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys);\r\n+    std::vector<uint8_t> CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys);\r\n     std::optional<uint256> CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks);\r\n };\r\n \r\n```",
      "created_at": "2025-09-15T13:26:09Z",
      "updated_at": "2025-09-15T14:27:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348994134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348994134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348997742",
      "pull_request_review_id": 3223415048,
      "id": 2348997742,
      "node_id": "PRRC_kwDOABII586MAtxu",
      "diff_hunk": "@@ -383,6 +383,91 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 10b7148efa754169cc625e93c98fa54f7b375e5d \"sign: Add CreateMuSig2PartialSig\"\r\n\r\nSame `s/hash/sighash` suggestion in both `key.cpp` and `key.h`.",
      "created_at": "2025-09-15T13:27:27Z",
      "updated_at": "2025-09-15T14:27:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2348997742",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348997742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 386,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349082023",
      "pull_request_review_id": 3223415048,
      "id": 2349082023,
      "node_id": "PRRC_kwDOABII586MBCWn",
      "diff_hunk": "@@ -100,3 +100,10 @@ bool MuSig2SecNonce::IsValid()\n {\n     return m_impl->IsValid();\n }\n+\n+uint256 MuSig2SessionID(const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256& sighash)",
      "path": "src/musig.cpp",
      "position": 95,
      "original_position": 5,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b01d7379b9e29760abd7b549a04db43937a7b8d \"sign: Add CreateMuSig2Nonce\"\r\n\r\nAny particular reason to name the first argument `script_pubkey` when `plain_pubkey` is passed down in both the callers from the top?",
      "created_at": "2025-09-15T13:52:09Z",
      "updated_at": "2025-09-15T14:27:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2349082023",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349082023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349102518",
      "pull_request_review_id": 3223415048,
      "id": 2349102518,
      "node_id": "PRRC_kwDOABII586MBHW2",
      "diff_hunk": "@@ -295,6 +296,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     //! Number of pre-generated keys/scripts (part of the look-ahead process, used to detect payments)\n     int64_t m_keypool_size GUARDED_BY(cs_desc_man){DEFAULT_KEYPOOL_SIZE};\n \n+    /** Map of a session id to MuSig2 secnonce\n+     *\n+     * Stores MuSig2 secnonces while the MuSig2 signing session is still ongoing.\n+     * Note that these secnonces must not be reused. In order to avoid being tricked into\n+     * reusing a nonce, this map is held only in memory and must not be written to disk.\n+     * The side effect is that signing sessions cannot persist across restarts, but this\n+     * must be done in order to prevent nonce reuse.\n+     *\n+     * The session id is an arbitrary value set by the signer in order for the signing logic\n+     * to find ongoing signing sessions. It is the SHA256 of aggregate xonly key, + participant pubkey + sighash.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 62,
      "original_position": 21,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "b9384960374db881285118670beb39228844f142",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In b9384960374db881285118670beb39228844f142 \"wallet: Keep secnonces in DescriptorScriptPubKeyMan\"\r\n\r\n> It is the SHA256 of aggregate xonly key, + participant pubkey + sighash.\r\n\r\nThe need for noting this down here can be avoided if we use a dedicated type for `MuSig2SessionID` here and everywhere else.\r\n\r\nFor example starting from here:\r\n\r\n```diff\r\ndiff --git a/src/musig.h b/src/musig.h\r\nindex 95f495a40a..0cde2ffe1c 100644\r\n--- a/src/musig.h\r\n+++ b/src/musig.h\r\n-uint256 MuSig2SessionID(const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256& sighash);\r\n+using MuSig2SessionID = uint256;\r\n+MuSig2SessionID createMuSig2SessionID(const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256& sighash);\r\n```",
      "created_at": "2025-09-15T13:58:18Z",
      "updated_at": "2025-09-15T14:27:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2349102518",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349102518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 308,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349197846",
      "pull_request_review_id": 3223415048,
      "id": 2349197846,
      "node_id": "PRRC_kwDOABII586MBeoW",
      "diff_hunk": "@@ -295,6 +296,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     //! Number of pre-generated keys/scripts (part of the look-ahead process, used to detect payments)\n     int64_t m_keypool_size GUARDED_BY(cs_desc_man){DEFAULT_KEYPOOL_SIZE};\n \n+    /** Map of a session id to MuSig2 secnonce\n+     *\n+     * Stores MuSig2 secnonces while the MuSig2 signing session is still ongoing.\n+     * Note that these secnonces must not be reused. In order to avoid being tricked into\n+     * reusing a nonce, this map is held only in memory and must not be written to disk.\n+     * The side effect is that signing sessions cannot persist across restarts, but this\n+     * must be done in order to prevent nonce reuse.\n+     *\n+     * The session id is an arbitrary value set by the signer in order for the signing logic\n+     * to find ongoing signing sessions. It is the SHA256 of aggregate xonly key, + participant pubkey + sighash.\n+     */\n+    // TODO: Check thread safety of this\n+    mutable std::map<uint256, MuSig2SecNonce> m_musig2_secnonces;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 64,
      "original_position": 24,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "b9384960374db881285118670beb39228844f142",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/b9384960374db881285118670beb39228844f142 \"wallet: Keep secnonces in DescriptorScriptPubKeyMan\"\r\n\r\n**Note**: Storing the `secnonce` in SPKM would also end up reusing-before-signing the nonce if a new PSBT session is started for the same transaction among the same signers as the components of the SessionID remain unchanged. I believe this would not be an issue because it's stored only before the partial signature is created post which it's securely deleted.\r\n\r\nFor example: Between 2 signers A and B, A creates a PSBT and starts the signing session by adding its ~sig~ nonce. For some reason, instead of B adding its ~signature~ nonce decides to come up with a new PSBT altogether, and send it across to A for signing after adding its ~signature~ nonce. In this case, A would start with signing the new PSBT with this previously stored secnonce.\r\n\r\nAll this happened without A's node/wallet being restarted.",
      "created_at": "2025-09-15T14:27:02Z",
      "updated_at": "2025-09-20T07:54:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2349197846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349197846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352608586",
      "pull_request_review_id": 3230143685,
      "id": 2352608586,
      "node_id": "PRRC_kwDOABII586MOfVK",
      "diff_hunk": "",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "7c085554dce336eb1597ab2fc482163876a49270",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/7c085554dce336eb1597ab2fc482163876a49270 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\nI have noticed there is some duplication in MuSig2 signing flows in the key path and script path spending. A common `SignMuSig2` function can help in removing this duplication and in removing risks of introducing discrepancies in the two spending paths - I checked that the tests pass. Also, should make the review easier by reducing diff.\r\n\r\n<details open>\r\n<summary>MuSig2 Signing Deduplication Diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex b183be8939..ed21ab88f8 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -262,6 +263,100 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\r\n     return false;\r\n }\r\n \r\n+static bool SignMuSig2(SigVersion sigversion, const SigningProvider& provider, const BaseSignatureCreator& creator, SignatureData& sigdata, const XOnlyPubKey& pk, KeyOriginInfo pk_info, const uint256* merkle_root, const uint256* leaf_hash, std::pair<XOnlyPubKey, uint256>* lookup_key, std::vector<unsigned char>& sig)\r\n+{\r\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\r\n+        if (part_pks.empty()) continue;\r\n+\r\n+        // Fill participant derivation path info\r\n+        for (const auto& part_pk : part_pks) {\r\n+            KeyOriginInfo part_info;\r\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\r\n+                XOnlyPubKey xonly_part(part_pk);\r\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\r\n+                if (sigversion == SigVersion::TAPSCRIPT) {\r\n+                    if (it == sigdata.taproot_misc_pubkeys.end()) {\r\n+                        sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>({*leaf_hash}), part_info));\r\n+                    } else {\r\n+                        it->second.first.insert(*leaf_hash);\r\n+                    }\r\n+                } else {\r\n+                    if (it == sigdata.taproot_misc_pubkeys.end()) {\r\n+                        sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), part_info));\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        std::vector<std::pair<uint256, bool>> tweaks;\r\n+        CPubKey plain_pub = agg_pub;\r\n+        if (XOnlyPubKey(agg_pub) != pk) {\r\n+            if (pk_info.path.size() > 0) {\r\n+                // Compute and compare fingerprint\r\n+                CKeyID keyid = agg_pub.GetID();\r\n+                if (!std::equal(pk_info.fingerprint, pk_info.fingerprint + sizeof(pk_info.fingerprint), keyid.data())) {\r\n+                    continue;\r\n+                }\r\n+                // Get the BIP32 derivation tweaks\r\n+                CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\r\n+                for (const int i : pk_info.path) {\r\n+                    auto& [t, xonly] = tweaks.emplace_back();\r\n+                    xonly = false;\r\n+                    if (!extpub.Derive(extpub, i, &t)) {\r\n+                        return false;\r\n+                    }\r\n+                }\r\n+                Assert(XOnlyPubKey(extpub.pubkey) == pk);\r\n+                plain_pub = extpub.pubkey;\r\n+            } else {\r\n+                continue;\r\n+            }\r\n+        }\r\n+\r\n+        // Add the merkle root tweak\r\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\r\n+            tweaks.emplace_back(pk.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\r\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = pk.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\r\n+            if (!Assume(tweaked)) return false;\r\n+            plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\r\n+        }\r\n+\r\n+        // First try to aggregate\r\n+        if (creator.CreateMuSig2AggregateSig(part_pks, sig, agg_pub, plain_pub, leaf_hash, tweaks, sigversion, sigdata)) {\r\n+            if (sigversion == SigVersion::TAPSCRIPT) {\r\n+                sigdata.taproot_script_sigs[*lookup_key] = sig;\r\n+            } else {\r\n+                sigdata.taproot_key_path_sig = sig;\r\n+            }\r\n+            return true;\r\n+        }\r\n+        // Cannot aggregate, try making partial sigs for every participant\r\n+        std::pair<CPubKey, uint256> pub_key_leaf_hash = (sigversion == SigVersion::TAPSCRIPT) ? std::make_pair(plain_pub, *leaf_hash) : std::make_pair(plain_pub, uint256());\r\n+        for (const CPubKey& part_pk : part_pks) {\r\n+            uint256 partial_sig;\r\n+            if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, leaf_hash, tweaks, sigversion, sigdata) && Assume(!partial_sig.IsNull())) {\r\n+                sigdata.musig2_partial_sigs[pub_key_leaf_hash].emplace(part_pk, partial_sig);\r\n+            }\r\n+        }\r\n+        // If there are any partial signatures, exit early\r\n+        auto partial_sigs_it = sigdata.musig2_partial_sigs.find(pub_key_leaf_hash);\r\n+        if (partial_sigs_it != sigdata.musig2_partial_sigs.end() && !partial_sigs_it->second.empty()) {\r\n+            return false;\r\n+        }\r\n+        // No partial sigs, try to make pubnonces\r\n+        std::map<CPubKey, std::vector<uint8_t>>& pubnonces = sigdata.musig2_pubnonces[pub_key_leaf_hash];\r\n+        for (const CPubKey& part_pk : part_pks) {\r\n+            if (pubnonces.contains(part_pk)) continue;\r\n+            std::vector<uint8_t> pubnonce = creator.CreateMuSig2Nonce(provider, agg_pub, plain_pub, part_pk, leaf_hash, merkle_root, sigversion, sigdata);\r\n+            if (pubnonce.empty()) continue;\r\n+            pubnonces[part_pk] = std::move(pubnonce);\r\n+        }\r\n+\r\n+        if (sigversion == SigVersion::TAPROOT) break;\r\n+    }\r\n+    return false;\r\n+}\r\n+\r\n static bool CreateTaprootScriptSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const XOnlyPubKey& pubkey, const uint256& leaf_hash, SigVersion sigversion)\r\n {\r\n     KeyOriginInfo info;\r\n@@ -289,81 +384,7 @@ static bool CreateTaprootScriptSig(const BaseSignatureCreator& creator, Signatur\r\n             info = misc_pk_it->second.second;\r\n         }\r\n \r\n-        for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\r\n-            if (part_pks.empty()) continue;\r\n-\r\n-            // Fill participant derivation path info\r\n-            for (const auto& part_pk : part_pks) {\r\n-                KeyOriginInfo part_info;\r\n-                if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\r\n-                    XOnlyPubKey xonly_part(part_pk);\r\n-                    auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\r\n-                    if (it == sigdata.taproot_misc_pubkeys.end()) {\r\n-                        sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>({leaf_hash}), part_info));\r\n-                    } else {\r\n-                        it->second.first.insert(leaf_hash);\r\n-                    }\r\n-                }\r\n-            }\r\n-\r\n-            std::vector<std::pair<uint256, bool>> tweaks;\r\n-            CPubKey plain_pub = agg_pub;\r\n-            if (XOnlyPubKey(agg_pub) != pubkey) {\r\n-                if (info.path.size() > 0) {\r\n-                    // Compute and compare fingerprint\r\n-                    CKeyID keyid = agg_pub.GetID();\r\n-                    if (std::memcmp(keyid.data(), info.fingerprint, sizeof(info.fingerprint)) != 0) {\r\n-                        continue;\r\n-                    }\r\n-                    // Get the BIP32 derivation tweaks\r\n-                    CExtPubKey extpub;\r\n-                    extpub.nDepth = 0;\r\n-                    std::memset(extpub.vchFingerprint, 0, 4);\r\n-                    extpub.nChild = 0;\r\n-                    extpub.chaincode = MUSIG_CHAINCODE;\r\n-                    extpub.pubkey = agg_pub;\r\n-                    for (const int i : info.path) {\r\n-                        auto& [tweak, xonly] = tweaks.emplace_back();\r\n-                        xonly = false;\r\n-                        if (!extpub.Derive(extpub, i, &tweak)) {\r\n-                            return false;\r\n-                        }\r\n-                    }\r\n-                    Assert(XOnlyPubKey(extpub.pubkey) == pubkey);\r\n-                    plain_pub = extpub.pubkey;\r\n-                } else {\r\n-                    continue;\r\n-                }\r\n-            }\r\n-\r\n-            // We know this is musig, try musig signing\r\n-            // First try to aggregate\r\n-            if (creator.CreateMuSig2AggregateSig(part_pks, sig_out, agg_pub, plain_pub, &leaf_hash, tweaks, sigversion, sigdata)) {\r\n-                sigdata.taproot_script_sigs[lookup_key] = sig_out;\r\n-                return true;\r\n-            }\r\n-            // Cannot aggregate, try making partial sigs for every participant\r\n-            auto pub_key_leaf_hash = std::make_pair(plain_pub, leaf_hash);\r\n-            for (const CPubKey& part_pk : part_pks) {\r\n-                uint256 partial_sig;\r\n-                if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, &leaf_hash, tweaks, sigversion, sigdata) && Assume(!partial_sig.IsNull())) {\r\n-                    sigdata.musig2_partial_sigs[pub_key_leaf_hash].emplace(part_pk, partial_sig);\r\n-                }\r\n-            }\r\n-            // If there are any partial signatures, exit early\r\n-            auto partial_sigs_it = sigdata.musig2_partial_sigs.find(pub_key_leaf_hash);\r\n-            if (partial_sigs_it != sigdata.musig2_partial_sigs.end() && !partial_sigs_it->second.empty()) {\r\n-                return false;\r\n-            }\r\n-            // No partial sigs, try to make pubnonces\r\n-            std::map<CPubKey, std::vector<uint8_t>>& pubnonces = sigdata.musig2_pubnonces[pub_key_leaf_hash];\r\n-            for (const CPubKey& part_pk : part_pks) {\r\n-                if (pubnonces.contains(part_pk)) continue;\r\n-                std::vector<uint8_t> pubnonce = creator.CreateMuSig2Nonce(provider, agg_pub, plain_pub, part_pk, &leaf_hash, nullptr, sigversion, sigdata);\r\n-                if (pubnonce.empty()) continue;\r\n-                pubnonces[part_pk] = std::move(pubnonce);\r\n-            }\r\n-        }\r\n+        return SignMuSig2(sigversion, provider, creator, sigdata, pubkey, info, /*merkle_root*/nullptr, &leaf_hash, &lookup_key, sig_out);\r\n     }\r\n \r\n     return sigdata.taproot_script_sigs.contains(lookup_key);\r\n@@ -570,88 +591,7 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\r\n                     info = misc_pk_it->second.second;\r\n                 }\r\n \r\n-                for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\r\n-                    if (part_pks.empty()) continue;\r\n-\r\n-                    // Fill participant derivation path info\r\n-                    for (const auto& part_pk : part_pks) {\r\n-                        KeyOriginInfo info;\r\n-                        if (provider.GetKeyOrigin(part_pk.GetID(), info)) {\r\n-                            XOnlyPubKey xonly_part(part_pk);\r\n-                            auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\r\n-                            if (it == sigdata.taproot_misc_pubkeys.end()) {\r\n-                                sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), info));\r\n-                            }\r\n-                        }\r\n-                    }\r\n-\r\n-                    std::vector<std::pair<uint256, bool>> tweaks;\r\n-                    CPubKey plain_pub = agg_pub;\r\n-                    if (XOnlyPubKey(agg_pub) != pk) {\r\n-                        if (info.path.size() > 0) {\r\n-                            // Compute and compare fingerprint\r\n-                            CKeyID keyid = agg_pub.GetID();\r\n-                            if (!std::equal(info.fingerprint, info.fingerprint + sizeof(info.fingerprint), keyid.data())) {\r\n-                                continue;\r\n-                            }\r\n-                            // Get the BIP32 derivation tweaks\r\n-                            CExtPubKey extpub;\r\n-                            extpub.nDepth = 0;\r\n-                            std::memset(extpub.vchFingerprint, 0, 4);\r\n-                            extpub.nChild = 0;\r\n-                            extpub.chaincode = MUSIG_CHAINCODE;\r\n-                            extpub.pubkey = agg_pub;\r\n-                            for (const int i : info.path) {\r\n-                                auto& [t, xonly] = tweaks.emplace_back();\r\n-                                xonly = false;\r\n-                                if (!extpub.Derive(extpub, i, &t)) {\r\n-                                    return;\r\n-                                }\r\n-                            }\r\n-                            Assert(XOnlyPubKey(extpub.pubkey) == pk);\r\n-                            plain_pub = extpub.pubkey;\r\n-                        } else {\r\n-                            continue;\r\n-                        }\r\n-                    }\r\n-\r\n-                    // Add the merkle root tweak\r\n-                    if (merkle_root) {\r\n-                        tweaks.emplace_back(pk.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\r\n-                        std::optional<std::pair<XOnlyPubKey, bool>> tweaked = pk.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\r\n-                        if (!Assume(tweaked)) return;\r\n-                        plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\r\n-                    }\r\n-\r\n-                    // We know this is musig, try musig signing\r\n-                    // First try to aggregate\r\n-                    if (creator.CreateMuSig2AggregateSig(part_pks, sig, agg_pub, plain_pub, nullptr, tweaks, SigVersion::TAPROOT, sigdata)) {\r\n-                        sigdata.taproot_key_path_sig = sig;\r\n-                        return;\r\n-                    }\r\n-                    // Cannot aggregate, try making partial sigs for every participant\r\n-                    auto pub_key_leaf_hash = std::make_pair(plain_pub, uint256());\r\n-                    for (const CPubKey& part_pk : part_pks) {\r\n-                        uint256 partial_sig;\r\n-                        if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, nullptr, tweaks, SigVersion::TAPROOT, sigdata) && Assume(!partial_sig.IsNull())) {\r\n-                            sigdata.musig2_partial_sigs[pub_key_leaf_hash].emplace(part_pk, partial_sig);\r\n-                        }\r\n-                    }\r\n-                    // If there are any partial signatures, exit early\r\n-                    auto partial_sigs_it = sigdata.musig2_partial_sigs.find(pub_key_leaf_hash);\r\n-                    if (partial_sigs_it != sigdata.musig2_partial_sigs.end() && !partial_sigs_it->second.empty()) {\r\n-                        return;\r\n-                    }\r\n-                    // No partial sigs, try to make pubnonces\r\n-                    std::map<CPubKey, std::vector<uint8_t>>& pubnonces = sigdata.musig2_pubnonces[pub_key_leaf_hash];\r\n-                    for (const CPubKey& part_pk : part_pks) {\r\n-                        if (pubnonces.contains(part_pk)) continue;\r\n-                        std::vector<uint8_t> pubnonce = creator.CreateMuSig2Nonce(provider, agg_pub, plain_pub, part_pk, nullptr, merkle_root, SigVersion::TAPROOT, sigdata);\r\n-                        if (pubnonce.empty()) continue;\r\n-                        pubnonces[part_pk] = std::move(pubnonce);\r\n-                    }\r\n-                    break;\r\n-                }\r\n+                SignMuSig2(SigVersion::TAPROOT, provider, creator, sigdata, pk, info, merkle_root, /*leaf_hash*/nullptr, /*lookup_key*/nullptr, sig);\r\n             }\r\n         };\r\n \r\n```\r\n</details> ",
      "created_at": "2025-09-16T13:56:25Z",
      "updated_at": "2025-09-16T16:29:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2352608586",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352608586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352617109",
      "pull_request_review_id": 3230155979,
      "id": 2352617109,
      "node_id": "PRRC_kwDOABII586MOhaV",
      "diff_hunk": "",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "7c085554dce336eb1597ab2fc482163876a49270",
      "in_reply_to_id": 2352608586,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This^ diff also uses the function from this earlier suggestion https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2336962962.",
      "created_at": "2025-09-16T13:58:55Z",
      "updated_at": "2025-09-16T13:58:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2352617109",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352617109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353578407",
      "pull_request_review_id": 3231588510,
      "id": 2353578407,
      "node_id": "PRRC_kwDOABII586MSMGn",
      "diff_hunk": "@@ -295,6 +296,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     //! Number of pre-generated keys/scripts (part of the look-ahead process, used to detect payments)\n     int64_t m_keypool_size GUARDED_BY(cs_desc_man){DEFAULT_KEYPOOL_SIZE};\n \n+    /** Map of a session id to MuSig2 secnonce\n+     *\n+     * Stores MuSig2 secnonces while the MuSig2 signing session is still ongoing.\n+     * Note that these secnonces must not be reused. In order to avoid being tricked into\n+     * reusing a nonce, this map is held only in memory and must not be written to disk.\n+     * The side effect is that signing sessions cannot persist across restarts, but this\n+     * must be done in order to prevent nonce reuse.\n+     *\n+     * The session id is an arbitrary value set by the signer in order for the signing logic\n+     * to find ongoing signing sessions. It is the SHA256 of aggregate xonly key, + participant pubkey + sighash.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 62,
      "original_position": 21,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "b9384960374db881285118670beb39228844f142",
      "in_reply_to_id": 2349102518,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it would still be necessary to note what the session id is composed of.",
      "created_at": "2025-09-16T20:26:58Z",
      "updated_at": "2025-09-16T20:26:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353578407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353578407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 308,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353592463",
      "pull_request_review_id": 3231610536,
      "id": 2353592463,
      "node_id": "PRRC_kwDOABII586MSPiP",
      "diff_hunk": "@@ -295,6 +296,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     //! Number of pre-generated keys/scripts (part of the look-ahead process, used to detect payments)\n     int64_t m_keypool_size GUARDED_BY(cs_desc_man){DEFAULT_KEYPOOL_SIZE};\n \n+    /** Map of a session id to MuSig2 secnonce\n+     *\n+     * Stores MuSig2 secnonces while the MuSig2 signing session is still ongoing.\n+     * Note that these secnonces must not be reused. In order to avoid being tricked into\n+     * reusing a nonce, this map is held only in memory and must not be written to disk.\n+     * The side effect is that signing sessions cannot persist across restarts, but this\n+     * must be done in order to prevent nonce reuse.\n+     *\n+     * The session id is an arbitrary value set by the signer in order for the signing logic\n+     * to find ongoing signing sessions. It is the SHA256 of aggregate xonly key, + participant pubkey + sighash.\n+     */\n+    // TODO: Check thread safety of this\n+    mutable std::map<uint256, MuSig2SecNonce> m_musig2_secnonces;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 64,
      "original_position": 24,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "b9384960374db881285118670beb39228844f142",
      "in_reply_to_id": 2349197846,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A cannot add their sig before B has added a pubnonce. Furthermore, if A added their sig, then the secnonce would be already be deleted.\r\n\r\nIf B instead provides a \"new\" PSBT which is really just the original PSBT with their pubnonce, and without A's pubnonce, then it's fine to \"reuse\" the nonce since that is equivalent to combining both PSBTs.",
      "created_at": "2025-09-16T20:33:48Z",
      "updated_at": "2025-09-16T20:33:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353592463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353592463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353675490",
      "pull_request_review_id": 3231732539,
      "id": 2353675490,
      "node_id": "PRRC_kwDOABII586MSjzi",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 12,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": 2348325505,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm going to leave this as-is for now since changing the type causes a ton of other things to be changed, particularly in PSBT and SignatureData. We also use the fact that it's a vector to indicate when a pubnonce was not successfully created, and turning it into an array requires changing all of those returns as well.",
      "created_at": "2025-09-16T21:14:39Z",
      "updated_at": "2025-09-16T21:14:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353675490",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353675490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353681237",
      "pull_request_review_id": 3231740278,
      "id": 2353681237,
      "node_id": "PRRC_kwDOABII586MSlNV",
      "diff_hunk": "@@ -383,6 +383,91 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;",
      "path": "src/key.cpp",
      "position": 131,
      "original_position": 15,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": 2348456444,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We want to avoid libsecp includes and linking being everywhere throughout the codebase that a pubnonce might appear, so we prefer to use something that contains the serialized nonce, and deserializing it into `secp256k1_musig_pubnonce` when needed.",
      "created_at": "2025-09-16T21:17:58Z",
      "updated_at": "2025-09-16T21:17:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353681237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353681237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 400,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353682010",
      "pull_request_review_id": 3231741251,
      "id": 2353682010,
      "node_id": "PRRC_kwDOABII586MSlZa",
      "diff_hunk": "@@ -23,4 +25,35 @@ std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_ca\n //! Compute the full aggregate pubkey from the given participant pubkeys in their current order\n std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);\n \n+/**\n+ * MuSig2SecNonce encapsulates a secret nonce in use in a MuSig2 signing session.\n+ * Since this nonce persists outside of libsecp256k1 signing code, we must handle\n+ * its construction and destruction ourselves.\n+ * The secret nonce must be kept a secret, otherwise the private key may be leaked.\n+ * As such, it needs to be treated in the same way that CKeys are treated.\n+ * So this class handles the secure allocation of the secp256k1_musig_secnonce object\n+ * that libsecp256k1 uses, and only gives out references to this object to avoid\n+ * any possibility of copies being made. Furthermore, objects of this class are not\n+ * copyable to avoid nonce reuse.\n+*/\n+class MuSig2SecNonce\n+{\n+private:\n+    std::unique_ptr<MuSig2SecNonceImpl> m_impl;",
      "path": "src/musig.h",
      "position": 46,
      "original_position": 27,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "645fcaa83108e6a0faed2c49c72ef710f0231407",
      "in_reply_to_id": 2348357357,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's to avoid having to include and link the libsecp module in a bunch of irrelevant places.",
      "created_at": "2025-09-16T21:18:26Z",
      "updated_at": "2025-09-16T21:18:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353682010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353682010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 43,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353725515",
      "pull_request_review_id": 3231801731,
      "id": 2353725515,
      "node_id": "PRRC_kwDOABII586MSwBL",
      "diff_hunk": "@@ -100,3 +100,10 @@ bool MuSig2SecNonce::IsValid()\n {\n     return m_impl->IsValid();\n }\n+\n+uint256 MuSig2SessionID(const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256& sighash)",
      "path": "src/musig.cpp",
      "position": 95,
      "original_position": 5,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": 2349082023,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The callers all pass a `script_pubkey`. It is also more descriptive because it is actually the pubkey that appears in the script, which is not necessarily the same as the aggregate.",
      "created_at": "2025-09-16T21:43:41Z",
      "updated_at": "2025-09-16T21:43:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353725515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353725515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353855601",
      "pull_request_review_id": 3231980773,
      "id": 2353855601,
      "node_id": "PRRC_kwDOABII586MTPxx",
      "diff_hunk": "@@ -472,16 +558,110 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n             }\n         }\n \n-        std::vector<unsigned char> sig;\n-        if (sigdata.taproot_key_path_sig.size() == 0) {\n-            if (creator.CreateSchnorrSig(provider, sig, sigdata.tr_spenddata.internal_key, nullptr, &sigdata.tr_spenddata.merkle_root, SigVersion::TAPROOT)) {\n+        auto make_keypath_sig = [&](const XOnlyPubKey& pk, const uint256* merkle_root) {\n+            std::vector<unsigned char> sig;\n+            if (creator.CreateSchnorrSig(provider, sig, pk, nullptr, merkle_root, SigVersion::TAPROOT)) {\n                 sigdata.taproot_key_path_sig = sig;\n+            } else {\n+                // Lookup derivation paths for this key\n+                KeyOriginInfo info;\n+                auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(pk);\n+                if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+                    info = misc_pk_it->second.second;\n+                }\n+\n+                for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+                    if (part_pks.empty()) continue;\n+\n+                    // Fill participant derivation path info\n+                    for (const auto& part_pk : part_pks) {\n+                        KeyOriginInfo info;\n+                        if (provider.GetKeyOrigin(part_pk.GetID(), info)) {\n+                            XOnlyPubKey xonly_part(part_pk);\n+                            auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                            if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                                sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), info));\n+                            }\n+                        }\n+                    }\n+\n+                    std::vector<std::pair<uint256, bool>> tweaks;\n+                    CPubKey plain_pub = agg_pub;\n+                    if (XOnlyPubKey(agg_pub) != pk) {\n+                        if (info.path.size() > 0) {\n+                            // Compute and compare fingerprint\n+                            CKeyID keyid = agg_pub.GetID();\n+                            if (!std::equal(info.fingerprint, info.fingerprint + sizeof(info.fingerprint), keyid.data())) {\n+                                continue;\n+                            }\n+                            // Get the BIP32 derivation tweaks\n+                            CExtPubKey extpub;\n+                            extpub.nDepth = 0;\n+                            std::memset(extpub.vchFingerprint, 0, 4);\n+                            extpub.nChild = 0;\n+                            extpub.chaincode = MUSIG_CHAINCODE;\n+                            extpub.pubkey = agg_pub;",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 156,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "7c085554dce336eb1597ab2fc482163876a49270",
      "in_reply_to_id": 2336962962,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-16T23:19:45Z",
      "updated_at": "2025-09-16T23:19:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353855601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353855601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 598,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353855886",
      "pull_request_review_id": 3231981086,
      "id": 2353855886,
      "node_id": "PRRC_kwDOABII586MTP2O",
      "diff_hunk": "@@ -383,6 +383,91 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::optional<size_t> our_pubkey_idx;\n+    CPubKey our_pubkey = GetPubKey();\n+    for (const CPubKey& part_pk : pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;\n+        if (part_pk == our_pubkey) {\n+            our_pubkey_idx = signers_data.size();\n+        }\n+\n+        auto& [secp_pk, secp_pn] = signers_data.emplace_back();\n+\n+        if (!secp256k1_ec_pubkey_parse(secp256k1_context_sign, &secp_pk, part_pk.data(), part_pk.size())) {\n+            return std::nullopt;\n+        }\n+\n+        if (!secp256k1_musig_pubnonce_parse(secp256k1_context_sign, &secp_pn, pubnonce.data())) {\n+            return std::nullopt;\n+        }\n+    }\n+    if (our_pubkey_idx == std::nullopt) {\n+        return std::nullopt;\n+    }\n+    pubnonce_ptrs.reserve(signers_data.size());\n+    for (auto& [_, pn] : signers_data) {\n+        pubnonce_ptrs.push_back(&pn);\n+    }\n+\n+    // Aggregate nonces\n+    secp256k1_musig_aggnonce aggnonce;\n+    if (!secp256k1_musig_nonce_agg(secp256k1_context_sign, &aggnonce, pubnonce_ptrs.data(), pubnonce_ptrs.size())) {\n+        return std::nullopt;\n+    }\n+\n+    // Apply tweaks\n+    for (const auto& [tweak, xonly] : tweaks) {\n+        if (xonly) {\n+            if (!secp256k1_musig_pubkey_xonly_tweak_add(secp256k1_context_static, nullptr, &keyagg_cache, tweak.data())) {\n+                return std::nullopt;\n+            }\n+        } else if (!secp256k1_musig_pubkey_ec_tweak_add(secp256k1_context_static, nullptr, &keyagg_cache, tweak.data())) {\n+            return std::nullopt;\n+        }\n+    }\n+\n+    // Create musig_session\n+    secp256k1_musig_session session;\n+    if (!secp256k1_musig_nonce_process(secp256k1_context_sign, &session, &aggnonce, hash.data(), &keyagg_cache)) {\n+        return std::nullopt;\n+    }\n+\n+    // Create partial signature\n+    secp256k1_musig_partial_sig psig;\n+    if (!secp256k1_musig_partial_sign(secp256k1_context_sign, &psig, secnonce.Get(), &keypair, &keyagg_cache, &session)) {\n+        return std::nullopt;\n+    }\n+    secnonce.Invalidate();",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 73,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": 2348217241,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-16T23:20:02Z",
      "updated_at": "2025-09-16T23:20:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353855886",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353855886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 457,
      "original_start_line": 454,
      "start_side": "RIGHT",
      "line": 459,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353856020",
      "pull_request_review_id": 3231981251,
      "id": 2353856020,
      "node_id": "PRRC_kwDOABII586MTP4U",
      "diff_hunk": "@@ -129,6 +129,48 @@ std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const\n     return out;\n }\n \n+bool MutableTransactionSignatureCreator::CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Retrieve private key\n+    CKey key;\n+    if (!provider.GetKey(part_pubkey.GetID(), key)) return false;\n+\n+    // Retrieve participant pubkeys\n+    std::vector<CPubKey> pubkeys = provider.GetMuSig2ParticipantPubkeys(aggregate_pubkey);\n+    if (!pubkeys.size()) return false;\n+    if (std::find(pubkeys.begin(), pubkeys.end(), part_pubkey) == pubkeys.end()) return {};\n+\n+    // Retrieve pubnonces\n+    auto this_leaf_aggkey = std::make_pair(script_pubkey, leaf_hash ? *leaf_hash : uint256());\n+    auto pubnonce_it = sigdata.musig2_pubnonces.find(this_leaf_aggkey);\n+    if (pubnonce_it == sigdata.musig2_pubnonces.end()) return false;\n+    const std::map<CPubKey, std::vector<uint8_t>>& pubnonces = pubnonce_it->second;\n+\n+    // Check if enough pubnonces\n+    if (pubnonces.size() != pubkeys.size()) return false;\n+\n+    // Compute sighash\n+    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\n+    if (!sighash.has_value()) return false;\n+\n+    // Retrieve the secnonce\n+    uint256 session_id = MuSig2SessionID(script_pubkey, part_pubkey, *sighash);\n+    std::optional<std::reference_wrapper<MuSig2SecNonce>> secnonce = provider.GetMuSig2SecNonce(session_id);\n+    if (!secnonce || !secnonce->get().IsValid()) return false;\n+\n+    // Compute the sig\n+    std::optional<uint256> sig = key.CreateMuSig2PartialSig(*sighash, aggregate_pubkey, pubkeys, pubnonces, *secnonce, tweaks);\n+    if (!sig) return false;\n+    partial_sig = std::move(*sig);\n+\n+    // Delete the secnonce now that we're done with it\n+    provider.DeleteMuSig2Session(session_id);",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 41,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": 2348274053,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-16T23:20:11Z",
      "updated_at": "2025-09-16T23:20:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353856020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353856020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 170,
      "original_start_line": 168,
      "start_side": "RIGHT",
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353856126",
      "pull_request_review_id": 3231981412,
      "id": 2353856126,
      "node_id": "PRRC_kwDOABII586MTP5-",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)\n+{\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return {};\n+\n+    // Parse participant pubkey\n+    CPubKey our_pubkey = GetPubKey();\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_sign, &pubkey, our_pubkey.data(), our_pubkey.size())) {\n+        return {};\n+    }\n+\n+    // Generate randomness for nonce\n+    uint256 rand;\n+    GetStrongRandBytes(rand);\n+\n+    // Generate nonce\n+    secp256k1_musig_pubnonce pubnonce;\n+    if (!secp256k1_musig_nonce_gen(secp256k1_context_sign, secnonce.Get(), &pubnonce, rand.data(), UCharCast(begin()), &pubkey, hash.data(), &keyagg_cache, nullptr)) {\n+        return {};\n+    }\n+\n+    // Serialize nonce\n+    std::vector<uint8_t> out;\n+    out.resize(66);",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": 2348311867,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-16T23:20:18Z",
      "updated_at": "2025-09-16T23:20:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353856126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353856126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353856628",
      "pull_request_review_id": 3231981960,
      "id": 2353856628,
      "node_id": "PRRC_kwDOABII586MTQB0",
      "diff_hunk": "@@ -0,0 +1,217 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+        wallets_needed = pat.count(\"$\")\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_key_leaves = 0\n+        for i in range(wallets_needed):\n+            if f\"${i}\" in pat:\n+                expected_key_leaves += pat.count(f\"${i}\")\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for wallet in wallets:\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].send(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", change_position=1)[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+        if has_internal:\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Check all participant pubkeys in the input and change output\n+        psbt_maps = [dec_psbt[\"inputs\"][0]]\n+        if has_internal:\n+            psbt_maps.append(dec_psbt[\"outputs\"][1])\n+        for psbt_map in psbt_maps:\n+            part_pks = set()\n+            for agg in psbt_map[\"musig2_participant_pubkeys\"]:\n+                for part_pub in agg[\"participant_pubkeys\"]:\n+                    part_pks.add(part_pub[2:])\n+            # Check that there are as many participants as we expected\n+            assert_equal(len(part_pks), len(keys))\n+            # Check that each participant has a derivation path\n+            for deriv_path in psbt_map[\"taproot_bip32_derivs\"]:\n+                if deriv_path[\"pubkey\"] in part_pks:\n+                    part_pks.remove(deriv_path[\"pubkey\"])\n+            assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_key_leaves)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\n+\n+        # Add partial sigs\n+        psig_psbts = []\n+        for wallet in wallets:\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), expected_key_leaves)\n+        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\n+            pubkey = ps[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for partial sig not seen as output key or internal key\"\n+\n+        # Non-participant aggregates partial sigs and send\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt, extract=False)\n+        assert_equal(finalized[\"complete\"], True)\n+        witness = self.nodes[0].decodepsbt(finalized[\"psbt\"])[\"inputs\"][0][\"final_scriptwitness\"]\n+        if scriptpath:\n+            assert_greater_than(len(witness), 1)\n+        else:\n+            assert_equal(len(witness), 1)\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)\n+        assert \"hex\" in finalized\n+        self.nodes[0].sendrawtransaction(finalized[\"hex\"])\n+\n+    def run_test(self):\n+        self.def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\n+        self.do_test(\"rawtr(musig(keys/*)) with ALL|ANYONECANPAY\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", \"ALL|ANYONECANPAY\")\n+        self.do_test(\"tr(musig(keys/*)) no multipath\", \"tr(musig($0/0/*,$1/1/*,$2/2/*))\")\n+        self.do_test(\"tr(musig(keys/*)) 2 index multipath\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\n+        self.do_test(\"tr(musig(keys/*)) 3 index multipath\", \"tr(musig($0/<0;1;2>/*,$1/<1;2;3>/*,$2/<2;3;4>/*))\")\n+        self.do_test(\"rawtr(musig/*)\", \"rawtr(musig($0,$1,$2)/<0;1>/*)\")\n+        self.do_test(\"tr(musig/*)\", \"tr(musig($0,$1,$2)/<0;1>/*)\")\n+        self.do_test(\"tr(H, pk(musig(keys/*)))\", \"tr($H,pk(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*)))\", scriptpath=True)\n+        self.do_test(\"tr(H,pk(musig/*))\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\", scriptpath=True)\n+        self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\", scriptpath=True)\n+        self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\", scriptpath=True)\n+        self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\")\n+",
      "path": "test/functional/wallet_musig.py",
      "position": 239,
      "original_position": 214,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "a06017dfce7ce72afbebe6f68d9a29cf72d26593",
      "in_reply_to_id": 2348961437,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done with a different approach",
      "created_at": "2025-09-16T23:20:42Z",
      "updated_at": "2025-09-16T23:20:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353856628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353856628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 239,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353856957",
      "pull_request_review_id": 3231982359,
      "id": 2353856957,
      "node_id": "PRRC_kwDOABII586MTQG9",
      "diff_hunk": "",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "7c085554dce336eb1597ab2fc482163876a49270",
      "in_reply_to_id": 2352608586,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-16T23:21:03Z",
      "updated_at": "2025-09-16T23:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353856957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353856957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353859271",
      "pull_request_review_id": 3231985035,
      "id": 2353859271,
      "node_id": "PRRC_kwDOABII586MTQrH",
      "diff_hunk": "@@ -220,6 +221,8 @@ class CKey\n      *                               Merkle root of the script tree).\n      */\n     KeyPair ComputeKeyPair(const uint256* merkle_root) const;\n+\n+    std::vector<uint8_t> CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys);",
      "path": "src/key.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "6b01d7379b9e29760abd7b549a04db43937a7b8d",
      "in_reply_to_id": 2348994134,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-16T23:23:11Z",
      "updated_at": "2025-09-16T23:23:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353859271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353859271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353859448",
      "pull_request_review_id": 3231985208,
      "id": 2353859448,
      "node_id": "PRRC_kwDOABII586MTQt4",
      "diff_hunk": "@@ -383,6 +383,91 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& hash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "10b7148efa754169cc625e93c98fa54f7b375e5d",
      "in_reply_to_id": 2348997742,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-16T23:23:18Z",
      "updated_at": "2025-09-16T23:23:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2353859448",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353859448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 386,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355100462",
      "pull_request_review_id": 3233829232,
      "id": 2355100462,
      "node_id": "PRRC_kwDOABII586MX_su",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 1614a2da5ea32b3efeecf6c756036539c567b656 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\nOtherwise `part_info` acts as a dummy object.\r\n```diff\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex b60d6dab55..f377a32750 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -277,7 +277,7 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n                 XOnlyPubKey xonly_part(part_pk);\r\n                 auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\r\n                 if (it == sigdata.taproot_misc_pubkeys.end()) {\r\n-                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\r\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), part_info)).first;\r\n                 }\r\n                 if (leaf_hash) it->second.first.insert(*leaf_hash);\r\n             }\r\n\r\n```",
      "created_at": "2025-09-17T10:48:12Z",
      "updated_at": "2025-09-17T13:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355100462",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355100462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355117208",
      "pull_request_review_id": 3233829232,
      "id": 2355117208,
      "node_id": "PRRC_kwDOABII586MYDyY",
      "diff_hunk": "@@ -383,6 +383,92 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::optional<size_t> our_pubkey_idx;\n+    CPubKey our_pubkey = GetPubKey();\n+    for (const CPubKey& part_pk : pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d53a70d769505b28c76d0468ea9503f7e00c1e04",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In d53a70d769505b28c76d0468ea9503f7e00c1e04 \"sign: Add CreateMuSig2PartialSig\"\r\n\r\n```diff\r\ndiff --git a/src/key.cpp b/src/key.cpp\r\nindex 29427689bb..a952acb260 100644\r\n--- a/src/key.cpp\r\n+++ b/src/key.cpp\r\n@@ -401,7 +401,7 @@ std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& sighash, cons\r\n         const auto& pn_it = pubnonces.find(part_pk);\r\n         if (pn_it == pubnonces.end()) return std::nullopt;\r\n         const std::vector<uint8_t> pubnonce = pn_it->second;\r\n-        if (pubnonce.size() != 66) return std::nullopt;\r\n+        if (pubnonce.size() != MUSIG2_PUBNONCE_SIZE) return std::nullopt;\r\n         if (part_pk == our_pubkey) {\r\n             our_pubkey_idx = signers_data.size();\r\n         }\r\n\r\n```",
      "created_at": "2025-09-17T10:54:06Z",
      "updated_at": "2025-09-17T13:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355117208",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355117208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355118477",
      "pull_request_review_id": 3233829232,
      "id": 2355118477,
      "node_id": "PRRC_kwDOABII586MYEGN",
      "diff_hunk": "@@ -118,3 +118,89 @@ uint256 MuSig2SessionID(const CPubKey& script_pubkey, const CPubKey& part_pubkey\n     hasher << script_pubkey << part_pubkey << sighash;\n     return hasher.GetSHA256();\n }\n+\n+std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& part_pubkeys, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs)\n+{\n+    if (!part_pubkeys.size()) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(part_pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Check if enough pubnonces and partial sigs\n+    if (pubnonces.size() != part_pubkeys.size()) return std::nullopt;\n+    if (partial_sigs.size() != part_pubkeys.size()) return std::nullopt;\n+\n+    // Parse the pubnonces and partial sigs\n+    std::vector<std::tuple<secp256k1_pubkey, secp256k1_musig_pubnonce, secp256k1_musig_partial_sig>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::vector<const secp256k1_musig_partial_sig*> partial_sig_ptrs;\n+    for (const CPubKey& part_pk : part_pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;",
      "path": "src/musig.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "09105c55e71d0614508c9111ed448ea1a370b38b",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09105c55e71d0614508c9111ed448ea1a370b38b \"sign: Add CreateMuSig2AggregateSig\"\r\n\r\n```diff\r\ndiff --git a/src/musig.cpp b/src/musig.cpp\r\nindex c8dfe70ef9..686ec5e869 100644\r\n--- a/src/musig.cpp\r\n+++ b/src/musig.cpp\r\n@@ -139,7 +139,7 @@ std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<C\r\n         const auto& pn_it = pubnonces.find(part_pk);\r\n         if (pn_it == pubnonces.end()) return std::nullopt;\r\n         const std::vector<uint8_t> pubnonce = pn_it->second;\r\n-        if (pubnonce.size() != 66) return std::nullopt;\r\n+        if (pubnonce.size() != MUSIG2_PUBNONCE_SIZE) return std::nullopt;\r\n         const auto& it = partial_sigs.find(part_pk);\r\n         if (it == partial_sigs.end()) return std::nullopt;\r\n         const uint256& partial_sig = it->second;\r\n\r\n```",
      "created_at": "2025-09-17T10:54:40Z",
      "updated_at": "2025-09-17T13:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355118477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355118477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355125544",
      "pull_request_review_id": 3233829232,
      "id": 2355125544,
      "node_id": "PRRC_kwDOABII586MYF0o",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.size() > 0) {\n+                // Compute and compare fingerprint\n+                CKeyID keyid = agg_pub.GetID();\n+                if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                    continue;\n+                }\n+                // Get the BIP32 derivation tweaks\n+                CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+                for (const int i : agg_info.path) {\n+                    auto& [t, xonly] = tweaks.emplace_back();\n+                    xonly = false;\n+                    if (!extpub.Derive(extpub, i, &t)) {\n+                        return false;\n+                    }\n+                }\n+                Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+                plain_pub = extpub.pubkey;\n+            } else {\n+                continue;\n+            }\n+        }\n+\n+        // Add the merkle root tweak\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\n+            tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = script_pubkey.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\n+            if (!Assume(tweaked)) return false;\n+            plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\n+        }\n+\n+        // We know this is musig, try musig signing",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 57,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/1614a2da5ea32b3efeecf6c756036539c567b656 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\nThe name of the function makes this comment not required.\r\n\r\n```diff\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex b60d6dab55..a83cf82f19 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -316,7 +316,6 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n             plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\r\n         }\r\n \r\n-        // We know this is musig, try musig signing\r\n         // First try to aggregate\r\n         if (creator.CreateMuSig2AggregateSig(part_pks, sig_out, agg_pub, plain_pub, leaf_hash, tweaks, sigversion, sigdata)) {\r\n             if (sigversion == SigVersion::TAPROOT) {\r\n\r\n```",
      "created_at": "2025-09-17T10:57:49Z",
      "updated_at": "2025-09-17T13:52:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355125544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355125544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355476052",
      "pull_request_review_id": 3233829232,
      "id": 2355476052,
      "node_id": "PRRC_kwDOABII586MZbZU",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info",
      "path": "src/script/sign.cpp",
      "position": 187,
      "original_position": 11,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 1614a2da5ea32b3efeecf6c756036539c567b656 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\n<details open>\r\n<summary>Can reorder to return or continue early on in the process.</summary>\r\n\r\n```diff\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex b60d6dab55..eea6cd0a9f 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -270,19 +270,6 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n     for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\r\n         if (part_pks.empty()) continue;\r\n \r\n-        // Fill participant derivation path info\r\n-        for (const auto& part_pk : part_pks) {\r\n-            KeyOriginInfo part_info;\r\n-            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\r\n-                XOnlyPubKey xonly_part(part_pk);\r\n-                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\r\n-                if (it == sigdata.taproot_misc_pubkeys.end()) {\r\n-                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\r\n-                }\r\n-                if (leaf_hash) it->second.first.insert(*leaf_hash);\r\n-            }\r\n-        }\r\n-\r\n         std::vector<std::pair<uint256, bool>> tweaks;\r\n         CPubKey plain_pub = agg_pub;\r\n         if (XOnlyPubKey(agg_pub) != script_pubkey) {\r\n@@ -308,6 +295,19 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n             }\r\n         }\r\n \r\n+        // Fill participant derivation path info\r\n+        for (const auto& part_pk : part_pks) {\r\n+            KeyOriginInfo part_info;\r\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\r\n+                XOnlyPubKey xonly_part(part_pk);\r\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\r\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\r\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), part_info)).first;\r\n+                }\r\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\r\n+            }\r\n+        }\r\n+\r\n         // Add the merkle root tweak\r\n         if (sigversion == SigVersion::TAPROOT && merkle_root) {\r\n             tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\r\n\r\n```\r\n</details>",
      "created_at": "2025-09-17T13:10:21Z",
      "updated_at": "2025-09-17T13:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355476052",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355476052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 282,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355503340",
      "pull_request_review_id": 3233829232,
      "id": 2355503340,
      "node_id": "PRRC_kwDOABII586MZiDs",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.size() > 0) {\n+                // Compute and compare fingerprint\n+                CKeyID keyid = agg_pub.GetID();\n+                if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                    continue;\n+                }\n+                // Get the BIP32 derivation tweaks\n+                CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+                for (const int i : agg_info.path) {\n+                    auto& [t, xonly] = tweaks.emplace_back();\n+                    xonly = false;\n+                    if (!extpub.Derive(extpub, i, &t)) {\n+                        return false;\n+                    }\n+                }\n+                Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+                plain_pub = extpub.pubkey;\n+            } else {\n+                continue;\n+            }",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/1614a2da5ea32b3efeecf6c756036539c567b656 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\nUsually avoid suggesting this kind of change but in this case it seems quite helpful for readability.\r\n\r\n```diff\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex b60d6dab55..de17219bd5 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -286,26 +286,26 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n         std::vector<std::pair<uint256, bool>> tweaks;\r\n         CPubKey plain_pub = agg_pub;\r\n         if (XOnlyPubKey(agg_pub) != script_pubkey) {\r\n-            if (agg_info.path.size() > 0) {\r\n-                // Compute and compare fingerprint\r\n-                CKeyID keyid = agg_pub.GetID();\r\n-                if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\r\n-                    continue;\r\n-                }\r\n-                // Get the BIP32 derivation tweaks\r\n-                CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\r\n-                for (const int i : agg_info.path) {\r\n-                    auto& [t, xonly] = tweaks.emplace_back();\r\n-                    xonly = false;\r\n-                    if (!extpub.Derive(extpub, i, &t)) {\r\n-                        return false;\r\n-                    }\r\n-                }\r\n-                Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\r\n-                plain_pub = extpub.pubkey;\r\n-            } else {\r\n+            if (agg_info.path.size() == 0) {\r\n+                continue;\r\n+            }\r\n+\r\n+            // Compute and compare fingerprint\r\n+            CKeyID keyid = agg_pub.GetID();\r\n+            if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\r\n                 continue;\r\n             }\r\n+            // Get the BIP32 derivation tweaks\r\n+            CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\r\n+            for (const int i : agg_info.path) {\r\n+                auto& [t, xonly] = tweaks.emplace_back();\r\n+                xonly = false;\r\n+                if (!extpub.Derive(extpub, i, &t)) {\r\n+                    return false;\r\n+                }\r\n+            }\r\n+            Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\r\n+            plain_pub = extpub.pubkey;\r\n         }\r\n \r\n         // Add the merkle root tweak\r\n```",
      "created_at": "2025-09-17T13:19:30Z",
      "updated_at": "2025-09-17T13:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355503340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355503340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 306,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355537665",
      "pull_request_review_id": 3233829232,
      "id": 2355537665,
      "node_id": "PRRC_kwDOABII586MZqcB",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {",
      "path": "src/script/sign.cpp",
      "position": 204,
      "original_position": 26,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/1614a2da5ea32b3efeecf6c756036539c567b656 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\nSuggesting because I ended up spending some time to understand the need for this check.\r\n\r\n```diff\r\n@@ -285,6 +286,7 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n\r\n         std::vector<std::pair<uint256, bool>> tweaks;\r\n         CPubKey plain_pub = agg_pub;\r\n+        // Check if we can derive the script pubkey from this aggregate pubkey\r\n         if (XOnlyPubKey(agg_pub) != script_pubkey) {\r\n             if (agg_info.path.size() > 0) {\r\n                 // Compute and compare fingerprint\r\n```",
      "created_at": "2025-09-17T13:30:43Z",
      "updated_at": "2025-09-17T13:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355537665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355537665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 298,
      "original_start_line": 287,
      "start_side": "RIGHT",
      "line": 299,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355561394",
      "pull_request_review_id": 3233829232,
      "id": 2355561394,
      "node_id": "PRRC_kwDOABII586MZwOy",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.size() > 0) {\n+                // Compute and compare fingerprint\n+                CKeyID keyid = agg_pub.GetID();\n+                if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                    continue;\n+                }\n+                // Get the BIP32 derivation tweaks\n+                CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+                for (const int i : agg_info.path) {\n+                    auto& [t, xonly] = tweaks.emplace_back();\n+                    xonly = false;\n+                    if (!extpub.Derive(extpub, i, &t)) {\n+                        return false;\n+                    }\n+                }\n+                Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+                plain_pub = extpub.pubkey;\n+            } else {\n+                continue;\n+            }\n+        }\n+\n+        // Add the merkle root tweak\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\n+            tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = script_pubkey.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\n+            if (!Assume(tweaked)) return false;",
      "path": "src/script/sign.cpp",
      "position": 228,
      "original_position": 53,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/1614a2da5ea32b3efeecf6c756036539c567b656 \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\"\r\n\r\nThere are 2 instances of returning false from this function (other on line 301) in which case it is expected that the signing process would throw an error at a later stage. Do you think adding an error log here would be helpful for debugging later?",
      "created_at": "2025-09-17T13:38:20Z",
      "updated_at": "2025-09-17T13:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355561394",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355561394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 323,
      "original_line": 323,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355572780",
      "pull_request_review_id": 3233829232,
      "id": 2355572780,
      "node_id": "PRRC_kwDOABII586MZzAs",
      "diff_hunk": "@@ -23,4 +25,35 @@ std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_ca\n //! Compute the full aggregate pubkey from the given participant pubkeys in their current order\n std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);\n \n+/**\n+ * MuSig2SecNonce encapsulates a secret nonce in use in a MuSig2 signing session.\n+ * Since this nonce persists outside of libsecp256k1 signing code, we must handle\n+ * its construction and destruction ourselves.\n+ * The secret nonce must be kept a secret, otherwise the private key may be leaked.\n+ * As such, it needs to be treated in the same way that CKeys are treated.\n+ * So this class handles the secure allocation of the secp256k1_musig_secnonce object\n+ * that libsecp256k1 uses, and only gives out references to this object to avoid\n+ * any possibility of copies being made. Furthermore, objects of this class are not\n+ * copyable to avoid nonce reuse.\n+*/\n+class MuSig2SecNonce\n+{\n+private:\n+    std::unique_ptr<MuSig2SecNonceImpl> m_impl;",
      "path": "src/musig.h",
      "position": 46,
      "original_position": 27,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "645fcaa83108e6a0faed2c49c72ef710f0231407",
      "in_reply_to_id": 2348357357,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, this reason can be mentioned explicitly in the function doc above.",
      "created_at": "2025-09-17T13:42:08Z",
      "updated_at": "2025-09-17T13:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2355572780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2355572780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 43,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356183335",
      "pull_request_review_id": 3235439616,
      "id": 2356183335,
      "node_id": "PRRC_kwDOABII586McIEn",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info",
      "path": "src/script/sign.cpp",
      "position": 187,
      "original_position": 11,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": 2355476052,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The order is intentional, we want to always fill in data that we know about first.",
      "created_at": "2025-09-17T17:08:40Z",
      "updated_at": "2025-09-17T17:08:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2356183335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356183335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 282,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356190597",
      "pull_request_review_id": 3235449543,
      "id": 2356190597,
      "node_id": "PRRC_kwDOABII586McJ2F",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.size() > 0) {\n+                // Compute and compare fingerprint\n+                CKeyID keyid = agg_pub.GetID();\n+                if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                    continue;\n+                }\n+                // Get the BIP32 derivation tweaks\n+                CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+                for (const int i : agg_info.path) {\n+                    auto& [t, xonly] = tweaks.emplace_back();\n+                    xonly = false;\n+                    if (!extpub.Derive(extpub, i, &t)) {\n+                        return false;\n+                    }\n+                }\n+                Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+                plain_pub = extpub.pubkey;\n+            } else {\n+                continue;\n+            }\n+        }\n+\n+        // Add the merkle root tweak\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\n+            tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = script_pubkey.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\n+            if (!Assume(tweaked)) return false;",
      "path": "src/script/sign.cpp",
      "position": 228,
      "original_position": 53,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": 2355561394,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No, signing does not log.",
      "created_at": "2025-09-17T17:11:37Z",
      "updated_at": "2025-09-17T17:11:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2356190597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356190597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 323,
      "original_line": 323,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192082",
      "pull_request_review_id": 3235451361,
      "id": 2356192082,
      "node_id": "PRRC_kwDOABII586McKNS",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 18,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": 2355100462,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed",
      "created_at": "2025-09-17T17:12:19Z",
      "updated_at": "2025-09-17T17:12:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2356192082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192320",
      "pull_request_review_id": 3235451727,
      "id": 2356192320,
      "node_id": "PRRC_kwDOABII586McKRA",
      "diff_hunk": "@@ -383,6 +383,92 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Parse the pubnonces\n+    std::vector<std::pair<secp256k1_pubkey, secp256k1_musig_pubnonce>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::optional<size_t> our_pubkey_idx;\n+    CPubKey our_pubkey = GetPubKey();\n+    for (const CPubKey& part_pk : pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "d53a70d769505b28c76d0468ea9503f7e00c1e04",
      "in_reply_to_id": 2355117208,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-17T17:12:28Z",
      "updated_at": "2025-09-17T17:12:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2356192320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192456",
      "pull_request_review_id": 3235451899,
      "id": 2356192456,
      "node_id": "PRRC_kwDOABII586McKTI",
      "diff_hunk": "@@ -118,3 +118,89 @@ uint256 MuSig2SessionID(const CPubKey& script_pubkey, const CPubKey& part_pubkey\n     hasher << script_pubkey << part_pubkey << sighash;\n     return hasher.GetSHA256();\n }\n+\n+std::optional<std::vector<uint8_t>> CreateMuSig2AggregateSig(const std::vector<CPubKey>& part_pubkeys, const CPubKey& aggregate_pubkey, const std::vector<std::pair<uint256, bool>>& tweaks, const uint256& sighash, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, const std::map<CPubKey, uint256>& partial_sigs)\n+{\n+    if (!part_pubkeys.size()) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(part_pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+\n+    // Check if enough pubnonces and partial sigs\n+    if (pubnonces.size() != part_pubkeys.size()) return std::nullopt;\n+    if (partial_sigs.size() != part_pubkeys.size()) return std::nullopt;\n+\n+    // Parse the pubnonces and partial sigs\n+    std::vector<std::tuple<secp256k1_pubkey, secp256k1_musig_pubnonce, secp256k1_musig_partial_sig>> signers_data;\n+    std::vector<const secp256k1_musig_pubnonce*> pubnonce_ptrs;\n+    std::vector<const secp256k1_musig_partial_sig*> partial_sig_ptrs;\n+    for (const CPubKey& part_pk : part_pubkeys) {\n+        const auto& pn_it = pubnonces.find(part_pk);\n+        if (pn_it == pubnonces.end()) return std::nullopt;\n+        const std::vector<uint8_t> pubnonce = pn_it->second;\n+        if (pubnonce.size() != 66) return std::nullopt;",
      "path": "src/musig.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "09105c55e71d0614508c9111ed448ea1a370b38b",
      "in_reply_to_id": 2355118477,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-17T17:12:32Z",
      "updated_at": "2025-09-17T17:12:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2356192456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192604",
      "pull_request_review_id": 3235452100,
      "id": 2356192604,
      "node_id": "PRRC_kwDOABII586McKVc",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.size() > 0) {\n+                // Compute and compare fingerprint\n+                CKeyID keyid = agg_pub.GetID();\n+                if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                    continue;\n+                }\n+                // Get the BIP32 derivation tweaks\n+                CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+                for (const int i : agg_info.path) {\n+                    auto& [t, xonly] = tweaks.emplace_back();\n+                    xonly = false;\n+                    if (!extpub.Derive(extpub, i, &t)) {\n+                        return false;\n+                    }\n+                }\n+                Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+                plain_pub = extpub.pubkey;\n+            } else {\n+                continue;\n+            }\n+        }\n+\n+        // Add the merkle root tweak\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\n+            tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = script_pubkey.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\n+            if (!Assume(tweaked)) return false;\n+            plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\n+        }\n+\n+        // We know this is musig, try musig signing",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 57,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": 2355125544,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-17T17:12:36Z",
      "updated_at": "2025-09-17T17:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2356192604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192801",
      "pull_request_review_id": 3235452441,
      "id": 2356192801,
      "node_id": "PRRC_kwDOABII586McKYh",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.size() > 0) {\n+                // Compute and compare fingerprint\n+                CKeyID keyid = agg_pub.GetID();\n+                if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                    continue;\n+                }\n+                // Get the BIP32 derivation tweaks\n+                CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+                for (const int i : agg_info.path) {\n+                    auto& [t, xonly] = tweaks.emplace_back();\n+                    xonly = false;\n+                    if (!extpub.Derive(extpub, i, &t)) {\n+                        return false;\n+                    }\n+                }\n+                Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+                plain_pub = extpub.pubkey;\n+            } else {\n+                continue;\n+            }",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": 2355503340,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-17T17:12:45Z",
      "updated_at": "2025-09-17T17:12:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2356192801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356192801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 306,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356193704",
      "pull_request_review_id": 3235453491,
      "id": 2356193704,
      "node_id": "PRRC_kwDOABII586McKmo",
      "diff_hunk": "@@ -263,6 +263,95 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), agg_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {",
      "path": "src/script/sign.cpp",
      "position": 204,
      "original_position": 26,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "1614a2da5ea32b3efeecf6c756036539c567b656",
      "in_reply_to_id": 2355537665,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-17T17:13:10Z",
      "updated_at": "2025-09-17T17:13:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2356193704",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2356193704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 298,
      "original_start_line": 287,
      "start_side": "RIGHT",
      "line": 299,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365556614",
      "pull_request_review_id": 3248963991,
      "id": 2365556614,
      "node_id": "PRRC_kwDOABII586M_4eG",
      "diff_hunk": "@@ -1256,6 +1256,10 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\n         FlatSigningProvider master_provider;\n         master_provider.keys = GetKeys();\n         m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+\n+        // Always include musig_secnonces as this descriptor may have a participant private key\n+        // but not a musig() descriptor",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 133,
      "original_position": 6,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "821d78bddd0ecb04d36d1f860ef7e129b248ccb8",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 821d78bddd0ecb04d36d1f860ef7e129b248ccb8 \"wallet: Keep secnonces in DescriptorScriptPubKeyMan\"\r\n\r\nI believe this comment should be updated as I spent some time trying to verify it. While the scenario mentioned is a good catch which warrants a test case on its own, the following line seems required in the current tests as well, which fail if this line is commented out.\r\n\r\n```diff\r\ndiff --git a/src/wallet/scriptpubkeyman.cpp b/src/wallet/scriptpubkeyman.cpp\r\nindex ff18265d70..1e2bef739a 100644\r\n--- a/src/wallet/scriptpubkeyman.cpp\r\n+++ b/src/wallet/scriptpubkeyman.cpp\r\n@@ -1257,8 +1257,8 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\r\n         master_provider.keys = GetKeys();\r\n         m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\r\n\r\n-        // Always include musig_secnonces as this descriptor may have a participant private key\r\n-        // but not a musig() descriptor\r\n+        // Always include the generated musig_secnonces so that the\r\n+        // partial signature can be created later in the PSBT signing flow\r\n         out_keys->musig2_secnonces = &m_musig2_secnonces;\r\n     }\r\n\r\n```",
      "created_at": "2025-09-20T09:31:51Z",
      "updated_at": "2025-09-22T15:04:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2365556614",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365556614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 1260,
      "original_start_line": 1260,
      "start_side": "RIGHT",
      "line": 1261,
      "original_line": 1261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2367767311",
      "pull_request_review_id": 3248963991,
      "id": 2367767311,
      "node_id": "PRRC_kwDOABII586NIUMP",
      "diff_hunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for wallet in wallets:\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].send(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", change_position=1)[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+        if has_internal:\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Check all participant pubkeys in the input and change output\n+        psbt_maps = [dec_psbt[\"inputs\"][0]]\n+        if has_internal:\n+            psbt_maps.append(dec_psbt[\"outputs\"][1])\n+        for psbt_map in psbt_maps:\n+            part_pks = set()\n+            for agg in psbt_map[\"musig2_participant_pubkeys\"]:\n+                for part_pub in agg[\"participant_pubkeys\"]:\n+                    part_pks.add(part_pub[2:])\n+            # Check that there are as many participants as we expected\n+            assert_equal(len(part_pks), len(keys))\n+            # Check that each participant has a derivation path\n+            for deriv_path in psbt_map[\"taproot_bip32_derivs\"]:\n+                if deriv_path[\"pubkey\"] in part_pks:\n+                    part_pks.remove(deriv_path[\"pubkey\"])\n+            assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for i, wallet in enumerate(wallets):\n+            if nosign_wallets and i in nosign_wallets:\n+                continue\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_pubnonces)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 175,
      "commit_id": "298156a86e206ac37f555b3a63a9f853c1154245",
      "original_commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 93b1d5622194165444ea9e919ccf319a5e990de0 \"test: Test MuSig2 in the wallet\"\r\n\r\n> internal key\r\n\r\nThe internal key doesn't seem to be checked for here in the above two checks. Can we remove it from the assert message?\r\nI checked that both for `rawtr(musig(...))` and `tr(musig(..))`, the `aggregate_pubkey[2:]` is in the `scriptPubKey` in the `witness_utxo` section. I infer that its presence in only the output key is checked.\r\n",
      "created_at": "2025-09-22T11:18:51Z",
      "updated_at": "2025-09-22T15:04:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2367767311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2367767311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2368738533",
      "pull_request_review_id": 3248963991,
      "id": 2368738533,
      "node_id": "PRRC_kwDOABII586NMBTl",
      "diff_hunk": "@@ -1256,6 +1256,10 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\n         FlatSigningProvider master_provider;\n         master_provider.keys = GetKeys();\n         m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+\n+        // Always include musig_secnonces as this descriptor may have a participant private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 132,
      "original_position": 5,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "821d78bddd0ecb04d36d1f860ef7e129b248ccb8",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/821d78bddd0ecb04d36d1f860ef7e129b248ccb8 \"wallet: Keep secnonces in DescriptorScriptPubKeyMan\"\r\n\r\n> this descriptor may have a participant private key but not a musig() descriptor\r\n\r\nI tried to add test for this scenario but the pubnonces are not added for signers that don't have the musig descriptor imported. For the following test, only the first signer that has the musig descriptor is able to add the nonce. Is there a bug or have I misunderstood the intent of this comment?\r\n\r\n<details open>\r\n<summary>No musig descriptor in few signers</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/wallet_musig.py b/test/functional/wallet_musig.py\r\nindex de7c08b9ef..0b6fcdb656 100755\r\n--- a/test/functional/wallet_musig.py\r\n+++ b/test/functional/wallet_musig.py\r\n@@ -28,7 +28,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n     def skip_test_if_missing_module(self):\r\n         self.skip_if_no_wallet()\r\n \r\n-    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None):\r\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, nomusig_wallets=None):\r\n         self.log.info(f\"Testing {comment}\")\r\n         has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\r\n \r\n@@ -80,6 +80,9 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         # Construct and import each wallet's musig descriptor that\r\n         # contains the private key from that wallet and pubkeys of the others\r\n         for i, wallet in enumerate(wallets):\r\n+            if nomusig_wallets and i in nomusig_wallets:\r\n+                continue\r\n+\r\n             desc = pat\r\n             import_descs = []\r\n             for j, (priv, pub) in enumerate(keys):\r\n@@ -101,15 +104,15 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         # Check that the wallets agree on the same musig address\r\n         addr = None\r\n         change_addr = None\r\n-        for wallet in wallets:\r\n+        for i, wallet in enumerate(wallets):\r\n             if addr is None:\r\n                 addr = wallet.getnewaddress(address_type=\"bech32m\")\r\n-            else:\r\n+            elif not nomusig_wallets or i not in nomusig_wallets:\r\n                 assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\r\n             if has_internal:\r\n                 if change_addr is None:\r\n                     change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\r\n-                else:\r\n+                elif not nomusig_wallets or i not in nomusig_wallets:\r\n                     assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\r\n \r\n         # Fund that address\r\n@@ -118,10 +121,10 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n \r\n         # Spend that UTXO\r\n         utxo = None\r\n-        for wallet in wallets:\r\n+        for i, wallet in enumerate(wallets):\r\n             if utxo is None:\r\n                 utxo = wallet.listunspent()[0]\r\n-            else:\r\n+            elif not nomusig_wallets or i not in nomusig_wallets:\r\n                 assert_equal(utxo, wallet.listunspent()[0])\r\n         psbt = wallets[0].send(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", change_position=1)[\"psbt\"]\r\n \r\n@@ -228,7 +231,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\", scriptpath=True)\r\n         self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\")\r\n         self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})} script-path\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\", scriptpath=True, nosign_wallets=[0])\r\n-\r\n+        self.do_test(\"tr(H,pk(musig/*)) nomusig\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\", scriptpath=True, nomusig_wallets=[1, 2])\r\n \r\n if __name__ == '__main__':\r\n     WalletMuSigTest(__file__).main()\r\n\r\n```\r\n</details>\r\n\r\nThe private key is unable to be found here in `MutableTransactionSignatureCreator::CreateMuSig2Nonce`:\r\nhttps://github.com/bitcoin/bitcoin/pull/29675/commits/f7ccce9bf63954f672e4f0a3a71eba89886906d9#diff-8a974828ccf5a554c068f5e859e62d1ab1e5010c66baaa6d6b83f42b26b219adR111",
      "created_at": "2025-09-22T14:34:32Z",
      "updated_at": "2025-09-22T15:04:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2368738533",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2368738533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1260,
      "original_line": 1260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2368821413",
      "pull_request_review_id": 3248963991,
      "id": 2368821413,
      "node_id": "PRRC_kwDOABII586NMVil",
      "diff_hunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for wallet in wallets:\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].send(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", change_position=1)[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+        if has_internal:\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Check all participant pubkeys in the input and change output\n+        psbt_maps = [dec_psbt[\"inputs\"][0]]\n+        if has_internal:\n+            psbt_maps.append(dec_psbt[\"outputs\"][1])\n+        for psbt_map in psbt_maps:\n+            part_pks = set()\n+            for agg in psbt_map[\"musig2_participant_pubkeys\"]:\n+                for part_pub in agg[\"participant_pubkeys\"]:\n+                    part_pks.add(part_pub[2:])\n+            # Check that there are as many participants as we expected\n+            assert_equal(len(part_pks), len(keys))\n+            # Check that each participant has a derivation path\n+            for deriv_path in psbt_map[\"taproot_bip32_derivs\"]:\n+                if deriv_path[\"pubkey\"] in part_pks:\n+                    part_pks.remove(deriv_path[\"pubkey\"])\n+            assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for i, wallet in enumerate(wallets):\n+            if nosign_wallets and i in nosign_wallets:\n+                continue\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_pubnonces)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]",
      "path": "test/functional/wallet_musig.py",
      "position": 171,
      "original_position": 165,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/93b1d5622194165444ea9e919ccf319a5e990de0 \"test: Test MuSig2 in the wallet\"\r\n\r\nWhy does the compressed form of the `aggregate_pubkey` in the nonces and sigs section start with a `03`? Given they are valid x-only keys, shouldn't this representation have a prefix of `02` because of even Y?\r\n\r\nFrom the BIP:\r\n> The plain public key must be the key found in the script and not the aggregate public key that it was derived from, if it was derived from an aggregate key.\r\n\r\n\r\n<details open>\r\n<summary>Sample test output</summary>\r\n\r\n```python\r\n'musig2_participant_pubkeys': [{'aggregate_pubkey': '020a6c24967f768b6b53d2b14833e739c8f60b42da76f7c67a2bab3f1c0d299f4c',\r\n                                 'participant_pubkeys': ['027753a063d3ea73942d07f01e38e9fd0db6f26302666a2591e81a291d40669461',\r\n                                                         '02a92fa1461c78ec6cca81486ee031dc6fcf452d8ef4d2cfa46b21c9c85dd6cc76',\r\n                                                         '02dd225c78173d2d7039247ab1b4c10d942429dee62193fa75f5dea3b470ed76ab']}],\r\n 'musig2_pubnonces': [{'participant_pubkey': '027753a063d3ea73942d07f01e38e9fd0db6f26302666a2591e81a291d40669461',\r\n                       'aggregate_pubkey': '036e1fb4cdd685976482e1edd85bd81d5763ee848c45efcb7c978f74a2d3e9f8d1',\r\n                       'leaf_hash': '25e6e9a3fa4db641ba15c80eccbf0487d3641fde0d39dfce6c85b08e4a622497',\r\n                       'pubnonce': '03bc111dead1b589f57a989cc48ffa1ae33054780b42cdee2edae6d11e7a73f8560303fd927859b469798ed51dad44ae845281f64629c1f6b5009e58748abffa5e00'},\r\n                      {'participant_pubkey': '02a92fa1461c78ec6cca81486ee031dc6fcf452d8ef4d2cfa46b21c9c85dd6cc76',\r\n                       'aggregate_pubkey': '036e1fb4cdd685976482e1edd85bd81d5763ee848c45efcb7c978f74a2d3e9f8d1',\r\n                       'leaf_hash': '25e6e9a3fa4db641ba15c80eccbf0487d3641fde0d39dfce6c85b08e4a622497',\r\n                       'pubnonce': '03907da11bc957fa678c86f5e6b139beaab08378265371760c714ebb7e636fb3bf02c60b83d1e5ed4beb8a03e76f5111eba592186bd717808f2561f52ca7172e0cd7'},\r\n                      {'participant_pubkey': '02dd225c78173d2d7039247ab1b4c10d942429dee62193fa75f5dea3b470ed76ab',\r\n                       'aggregate_pubkey': '036e1fb4cdd685976482e1edd85bd81d5763ee848c45efcb7c978f74a2d3e9f8d1',\r\n                       'leaf_hash': '25e6e9a3fa4db641ba15c80eccbf0487d3641fde0d39dfce6c85b08e4a622497',\r\n                       'pubnonce': '0275c6e5279746e9623f705970c782d62e14031ddd415d937a31d8310bd41821d30204a59593fa7dd6d38b253e986c6e846c54f93e0f7b873e5ab0388f35c5fdcc98'}],\r\n 'musig2_partial_sigs': [{'participant_pubkey': '027753a063d3ea73942d07f01e38e9fd0db6f26302666a2591e81a291d40669461',\r\n                          'aggregate_pubkey': '036e1fb4cdd685976482e1edd85bd81d5763ee848c45efcb7c978f74a2d3e9f8d1',\r\n                          'leaf_hash': '25e6e9a3fa4db641ba15c80eccbf0487d3641fde0d39dfce6c85b08e4a622497',\r\n                          'partial_sig': '92f5270f279da66123076488d653fa14919fb4e5b8b3f778e83ed9cee19b7f94'},\r\n                         {'participant_pubkey': '02a92fa1461c78ec6cca81486ee031dc6fcf452d8ef4d2cfa46b21c9c85dd6cc76',\r\n                          'aggregate_pubkey': '036e1fb4cdd685976482e1edd85bd81d5763ee848c45efcb7c978f74a2d3e9f8d1',\r\n                          'leaf_hash': '25e6e9a3fa4db641ba15c80eccbf0487d3641fde0d39dfce6c85b08e4a622497',\r\n                          'partial_sig': 'db9c4b05ebb60f6432a1a9a35d4c17d1959c0eb277d4c49742ce24dab2fd19f3'},\r\n                         {'participant_pubkey': '02dd225c78173d2d7039247ab1b4c10d942429dee62193fa75f5dea3b470ed76ab',\r\n                          'aggregate_pubkey': '036e1fb4cdd685976482e1edd85bd81d5763ee848c45efcb7c978f74a2d3e9f8d1',\r\n                          'leaf_hash': '25e6e9a3fa4db641ba15c80eccbf0487d3641fde0d39dfce6c85b08e4a622497',\r\n                          'partial_sig': 'a8c02ea58ac0c9351dbd6dfe187b5a87acdfb7f690e7aa1dc120952dc3c37db9'}]}\r\n```\r\n</details>",
      "created_at": "2025-09-22T14:50:31Z",
      "updated_at": "2025-09-22T15:52:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2368821413",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2368821413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2370693304",
      "pull_request_review_id": 3255656914,
      "id": 2370693304,
      "node_id": "PRRC_kwDOABII586NTei4",
      "diff_hunk": "@@ -1256,6 +1256,10 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\n         FlatSigningProvider master_provider;\n         master_provider.keys = GetKeys();\n         m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+\n+        // Always include musig_secnonces as this descriptor may have a participant private key\n+        // but not a musig() descriptor",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 133,
      "original_position": 6,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "821d78bddd0ecb04d36d1f860ef7e129b248ccb8",
      "in_reply_to_id": 2365556614,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The line it is commenting is always required, including in normal operation when a `musig()` is present, and when a `musig()` is now known but the keys are. The comment is there to inform future readers wondering why the secnonces are unconditionally added. I don't think there is anything to update.",
      "created_at": "2025-09-23T00:24:11Z",
      "updated_at": "2025-09-23T00:24:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2370693304",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2370693304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 1260,
      "original_start_line": 1260,
      "start_side": "RIGHT",
      "line": 1261,
      "original_line": 1261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2370723203",
      "pull_request_review_id": 3255695831,
      "id": 2370723203,
      "node_id": "PRRC_kwDOABII586NTl2D",
      "diff_hunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for wallet in wallets:\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].send(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", change_position=1)[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+        if has_internal:\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Check all participant pubkeys in the input and change output\n+        psbt_maps = [dec_psbt[\"inputs\"][0]]\n+        if has_internal:\n+            psbt_maps.append(dec_psbt[\"outputs\"][1])\n+        for psbt_map in psbt_maps:\n+            part_pks = set()\n+            for agg in psbt_map[\"musig2_participant_pubkeys\"]:\n+                for part_pub in agg[\"participant_pubkeys\"]:\n+                    part_pks.add(part_pub[2:])\n+            # Check that there are as many participants as we expected\n+            assert_equal(len(part_pks), len(keys))\n+            # Check that each participant has a derivation path\n+            for deriv_path in psbt_map[\"taproot_bip32_derivs\"]:\n+                if deriv_path[\"pubkey\"] in part_pks:\n+                    part_pks.remove(deriv_path[\"pubkey\"])\n+            assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for i, wallet in enumerate(wallets):\n+            if nosign_wallets and i in nosign_wallets:\n+                continue\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_pubnonces)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]",
      "path": "test/functional/wallet_musig.py",
      "position": 171,
      "original_position": 165,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "in_reply_to_id": 2368821413,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It must still have the correct parity bit. While it is the key must be found in the script, the script is not where the key is sourced from.",
      "created_at": "2025-09-23T00:37:58Z",
      "updated_at": "2025-09-23T00:37:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2370723203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2370723203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2373651147",
      "pull_request_review_id": 3259856164,
      "id": 2373651147,
      "node_id": "PRRC_kwDOABII586NewrL",
      "diff_hunk": "@@ -0,0 +1,234 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for wallet in wallets:\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for wallet in wallets:\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].send(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", change_position=1)[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+        if has_internal:\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Check all participant pubkeys in the input and change output\n+        psbt_maps = [dec_psbt[\"inputs\"][0]]\n+        if has_internal:\n+            psbt_maps.append(dec_psbt[\"outputs\"][1])\n+        for psbt_map in psbt_maps:\n+            part_pks = set()\n+            for agg in psbt_map[\"musig2_participant_pubkeys\"]:\n+                for part_pub in agg[\"participant_pubkeys\"]:\n+                    part_pks.add(part_pub[2:])\n+            # Check that there are as many participants as we expected\n+            assert_equal(len(part_pks), len(keys))\n+            # Check that each participant has a derivation path\n+            for deriv_path in psbt_map[\"taproot_bip32_derivs\"]:\n+                if deriv_path[\"pubkey\"] in part_pks:\n+                    part_pks.remove(deriv_path[\"pubkey\"])\n+            assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for i, wallet in enumerate(wallets):\n+            if nosign_wallets and i in nosign_wallets:\n+                continue\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_pubnonces)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, internal key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 175,
      "commit_id": "298156a86e206ac37f555b3a63a9f853c1154245",
      "original_commit_id": "93b1d5622194165444ea9e919ccf319a5e990de0",
      "in_reply_to_id": 2367767311,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed the message.",
      "created_at": "2025-09-23T23:12:15Z",
      "updated_at": "2025-09-23T23:12:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2373651147",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2373651147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2373652213",
      "pull_request_review_id": 3259858383,
      "id": 2373652213,
      "node_id": "PRRC_kwDOABII586New71",
      "diff_hunk": "@@ -1256,6 +1256,10 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\n         FlatSigningProvider master_provider;\n         master_provider.keys = GetKeys();\n         m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+\n+        // Always include musig_secnonces as this descriptor may have a participant private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 132,
      "original_position": 5,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "821d78bddd0ecb04d36d1f860ef7e129b248ccb8",
      "in_reply_to_id": 2368738533,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is supposed to sign when any descriptor has a private key for a participant. Added a test and fixed.",
      "created_at": "2025-09-23T23:13:17Z",
      "updated_at": "2025-09-23T23:13:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2373652213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2373652213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1260,
      "original_line": 1260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379758795",
      "pull_request_review_id": 3268665628,
      "id": 2379758795,
      "node_id": "PRRC_kwDOABII586N2DzL",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].walletcreatefundedpsbt(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", changePosition=1)[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+        if has_internal:\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Check all participant pubkeys in the input and change output\n+        psbt_maps = [dec_psbt[\"inputs\"][0]]\n+        if has_internal:\n+            psbt_maps.append(dec_psbt[\"outputs\"][1])\n+        for psbt_map in psbt_maps:\n+            part_pks = set()\n+            for agg in psbt_map[\"musig2_participant_pubkeys\"]:\n+                for part_pub in agg[\"participant_pubkeys\"]:\n+                    part_pks.add(part_pub[2:])\n+            # Check that there are as many participants as we expected\n+            assert_equal(len(part_pks), len(keys))\n+            # Check that each participant has a derivation path\n+            for deriv_path in psbt_map[\"taproot_bip32_derivs\"]:\n+                if deriv_path[\"pubkey\"] in part_pks:\n+                    part_pks.remove(deriv_path[\"pubkey\"])\n+            assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for i, wallet in enumerate(wallets):\n+            if nosign_wallets and i in nosign_wallets:\n+                continue\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_pubnonces)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\n+\n+        # Add partial sigs\n+        psig_psbts = []\n+        for i, wallet in enumerate(wallets):\n+            if nosign_wallets and i in nosign_wallets:\n+                continue\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), expected_partial_sigs)\n+        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\n+            pubkey = ps[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for partial sig not seen as output key\"\n+\n+        # Non-participant aggregates partial sigs and send\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt, extract=False)",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 210,
      "commit_id": "4078bbd5c7566e7d4c0edb2d02f0191512911b82",
      "original_commit_id": "4078bbd5c7566e7d4c0edb2d02f0191512911b82",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This line [fails in the no IPC, i686, DEBUG CI](https://github.com/bitcoin/bitcoin/actions/runs/17962047927/job/51087206906?pr=29675#step:9:3082).\r\n\r\n<details><summary>Traceback</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/admin/actions-runner/_work/_temp/test/functional/test_framework/test_framework.py\", line 199, in main\r\n    self.run_test()\r\n  File \"/home/admin/actions-runner/_work/_temp/build/test/functional/wallet_musig.py\", line 224, in run_test\r\n    self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n  File \"/home/admin/actions-runner/_work/_temp/build/test/functional/wallet_musig.py\", line 210, in do_test\r\n    finalized = self.nodes[0].finalizepsbt(comb_psig_psbt, extract=False)\r\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/admin/actions-runner/_work/_temp/test/functional/test_framework/test_node.py\", line 903, in __call__\r\n    return self.cli.send_cli(self.command, *args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/admin/actions-runner/_work/_temp/test/functional/test_framework/test_node.py\", line 982, in send_cli\r\n    raise JSONRPCException(dict(code=int(code), message=message))\r\ntest_framework.authproxy.JSONRPCException: Unknown named parameter cHNidP8BAH0CAAAAAbUnKJncaIWRKF8Z4VNQM8iITMGbABHruhKsmLanYlfxAAAAAAD9////AgBlzR0AAAAAFgAUrHinD6MdahWYjKA/oGghegf7plLUWc0dAAAAACJRIKKi33wOsfScQFUWvH/TNkyj9fsJRKfO5MIQ7twdkfDiAAAAAAABASsAypo7AAAAACJRIL7BwZwV7IU+2BvqGva8s4J9g5X+xZp+kjHUIyBGdDOzIRYH3BLspWfr7htFp3fGnuos0Vdi+6AmcbBcGRh57LDgrBkALMS05VYAAIABAACAAAAAgAIAAAAAAAAAIRaEIegPT/3eb5mTOV9Xtu+jPgB4ykDfNVDiy9Q0KuWxPBkAtrVsNlYAAIABAACAAAAAgAEAAAAAAAAAIRabohOJtNOV2FZPDTBFX+UlztSDmyX//flz2CwSWzSyVhkAEcFSbVYAAIABAACAAAAAgAAAAAAAAAAAIRa+wcGcFeyFPtgb6hr2vLOCfYOV/sWafpIx1CMgRnQzswUAA/wk7iIaAr7BwZwV7IU+2BvqGva8s4J9g5X+xZp+kjHUIyBGdDOzYwKEIegPT/3eb5mTOV9Xtu+jPgB4ykDfNVDiy9Q0KuWxPAMH3BLspWfr7htFp3fGnuos0Vdi+6AmcbBcGRh57LDgrAObohOJtNOV2FZPDTBFX+UlztSDmyX//flz2CwSWzSyVkMbAoQh6A9P/d5vmZM5X1e276M+AHjKQN81UOLL1DQq5bE8Ar7BwZwV7IU+2BvqGva8s4J9g5X+xZp+kjHUIyBGdDOzQgO3vhMvgNsuPAjeUieVp4fpSmnjOZdCbgDrGjnqL7rcOgLqKeqGlbp0gTK2U4gKSWVNQK53ALKrgBCd9tumABM8rEMbAwfcEuylZ+vuG0Wnd8ae6izRV2L7oCZxsFwZGHnssOCsAr7BwZwV7IU+2BvqGva8s4J9g5X+xZp+kjHUIyBGdDOzQgLzM72yrAXYdd045/g97aTF+NSb0uK5hotPG1Z/bFQz3wMgKAn39ddoW+B35bK7aJtFpfZqNEqtq5l9JccWhz5lu0MbA5uiE4m005XYVk8NMEVf5SXO1IObJf/9+XPYLBJbNLJWAr7BwZwV7IU+2BvqGva8s4J9g5X+xZp+kjHUIyBGdDOzQgJqMhE3c2kNklVJHE1CZ3vm0fHj2C1v1x3jNmBkfm29FwI83A9lw3pvXqk3ksVpNLXZ13ASUbuGuLicJ5fHJtD8SEMcAoQh6A9P/d5vmZM5X1e276M+AHjKQN81UOLL1DQq5bE8Ar7BwZwV7IU+2BvqGva8s4J9g5X+xZp+kjHUIyBGdDOzIMQWDp0Dxotzx8sJ+hzX8QJBdA1RJ0jTkx5szuqp1KJBQxwDB9wS7KVn6+4bRad3xp7qLNFXYvugJnGwXBkYeeyw4KwCvsHBnBXshT7YG+oa9ryzgn2Dlf7Fmn6SMdQjIEZ0M7MgJmxjzlp1tCxGxApmFk/6z+gHHLDVmCerAI9y/ivCBF1DHAObohOJtNOV2FZPDTBFX+UlztSDmyX//flz2CwSWzSyVgK+wcGcFeyFPtgb6hr2vLOCfYOV/sWafpIx1CMgRnQzsyCwKwahQMmKKCzH3rToG9MDcV6ehCTCdeRLPtIC2ok37wAAIQdXu4dqFR2Z+m5wKpJjnz+Jkj5BX70dj5I8RTzgbubc2BkAEcFSbVYAAIABAACAAAAAgAEAAAABAAAAIQeJGewgzFALKO9ZqxcXHICNEeKhwnwfvlOmwkF79hodrBkALMS05VYAAIABAACAAAAAgAMAAAABAAAAIQeiot98DrH0nEBVFrx/0zZMo/X7CUSnzuTCEO7cHZHw4gUATAK7PiEHtBQOfhCJBAeqVVveN+wxM6vVSd7pfhYoSB6RQSR52dgZALa1bDZWAACAAQAAgAAAAIACAAAAAQAAACIIAqKi33wOsfScQFUWvH/TNkyj9fsJRKfO5MIQ7twdkfDiYwKJGewgzFALKO9ZqxcXHICNEeKhwnwfvlOmwkF79hodrAK0FA5+EIkEB6pVW9437DEzq9VJ3ul+FihIHpFBJHnZ2ANXu4dqFR2Z+m5wKpJjnz+Jkj5BX70dj5I8RTzgbubc2AA (-8)\r\n```\r\n\r\n</details>\r\n\r\nI assume that happens because of the mix of named and positional arguments and the following would fix this (untested)\r\n\r\n```suggestion\r\n        finalized = self.nodes[0].finalizepsbt(psbt=comb_psig_psbt, extract=False)\r\n```",
      "created_at": "2025-09-25T16:47:55Z",
      "updated_at": "2025-09-25T16:47:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2379758795",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379758795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379831421",
      "pull_request_review_id": 3268765366,
      "id": 2379831421,
      "node_id": "PRRC_kwDOABII586N2Vh9",
      "diff_hunk": "@@ -149,6 +149,9 @@ void PSBTInput::FillSignatureData(SignatureData& sigdata) const\n     for (const auto& [hash, preimage] : hash256_preimages) {\n         sigdata.hash256_preimages.emplace(std::vector<unsigned char>(hash.begin(), hash.end()), preimage);\n     }\n+    sigdata.musig2_pubkeys.insert(m_musig2_participants.begin(), m_musig2_participants.end());\n+    sigdata.musig2_pubnonces.insert(m_musig2_pubnonces.begin(), m_musig2_pubnonces.end());\n+    sigdata.musig2_partial_sigs.insert(m_musig2_partial_sigs.begin(), m_musig2_partial_sigs.end());",
      "path": "src/psbt.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "original_commit_id": "2a49082e491810fab48485e0a63e1fadfb09b1b7",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Compiling at commit 2a49082e491810fab48485e0a63e1fadfb09b1b7 currently fails, as the `musig2_`... fields haven't been added to the `SignatureData` struct yet.",
      "created_at": "2025-09-25T17:20:23Z",
      "updated_at": "2025-09-25T17:20:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2379831421",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379831421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 152,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380012998",
      "pull_request_review_id": 3269026195,
      "id": 2380012998,
      "node_id": "PRRC_kwDOABII586N3B3G",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].walletcreatefundedpsbt(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", changePosition=1)[\"psbt\"]\n+\n+        dec_psbt = self.nodes[0].decodepsbt(psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"]), 1)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+        if has_internal:\n+            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\n+\n+        # Check all participant pubkeys in the input and change output\n+        psbt_maps = [dec_psbt[\"inputs\"][0]]\n+        if has_internal:\n+            psbt_maps.append(dec_psbt[\"outputs\"][1])\n+        for psbt_map in psbt_maps:\n+            part_pks = set()\n+            for agg in psbt_map[\"musig2_participant_pubkeys\"]:\n+                for part_pub in agg[\"participant_pubkeys\"]:\n+                    part_pks.add(part_pub[2:])\n+            # Check that there are as many participants as we expected\n+            assert_equal(len(part_pks), len(keys))\n+            # Check that each participant has a derivation path\n+            for deriv_path in psbt_map[\"taproot_bip32_derivs\"]:\n+                if deriv_path[\"pubkey\"] in part_pks:\n+                    part_pks.remove(deriv_path[\"pubkey\"])\n+            assert_equal(len(part_pks), 0)\n+\n+        # Add pubnonces\n+        nonce_psbts = []\n+        for i, wallet in enumerate(wallets):\n+            if nosign_wallets and i in nosign_wallets:\n+                continue\n+            proc = wallet.walletprocesspsbt(psbt=psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            nonce_psbts.append(proc[\"psbt\"])\n+\n+        comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_pubnonces)\n+        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\n+            pubkey = pn[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\n+\n+        # Add partial sigs\n+        psig_psbts = []\n+        for i, wallet in enumerate(wallets):\n+            if nosign_wallets and i in nosign_wallets:\n+                continue\n+            proc = wallet.walletprocesspsbt(psbt=comb_nonce_psbt, sighashtype=sighash_type)\n+            assert_equal(proc[\"complete\"], False)\n+            psig_psbts.append(proc[\"psbt\"])\n+\n+        comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\n+\n+        dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\n+        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), expected_partial_sigs)\n+        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\n+            pubkey = ps[\"aggregate_pubkey\"][2:]\n+            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\n+                continue\n+            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\n+                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\n+                    if pubkey in leaf_scripts[\"script\"]:\n+                        break\n+                else:\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key or in any scripts\"\n+            else:\n+                assert False, \"Aggregate pubkey for partial sig not seen as output key\"\n+\n+        # Non-participant aggregates partial sigs and send\n+        finalized = self.nodes[0].finalizepsbt(comb_psig_psbt, extract=False)",
      "path": "test/functional/wallet_musig.py",
      "position": 1,
      "original_position": 210,
      "commit_id": "4078bbd5c7566e7d4c0edb2d02f0191512911b82",
      "original_commit_id": "4078bbd5c7566e7d4c0edb2d02f0191512911b82",
      "in_reply_to_id": 2379758795,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-25T18:38:25Z",
      "updated_at": "2025-09-25T18:38:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2380012998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380012998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380013207",
      "pull_request_review_id": 3269026464,
      "id": 2380013207,
      "node_id": "PRRC_kwDOABII586N3B6X",
      "diff_hunk": "@@ -149,6 +149,9 @@ void PSBTInput::FillSignatureData(SignatureData& sigdata) const\n     for (const auto& [hash, preimage] : hash256_preimages) {\n         sigdata.hash256_preimages.emplace(std::vector<unsigned char>(hash.begin(), hash.end()), preimage);\n     }\n+    sigdata.musig2_pubkeys.insert(m_musig2_participants.begin(), m_musig2_participants.end());\n+    sigdata.musig2_pubnonces.insert(m_musig2_pubnonces.begin(), m_musig2_pubnonces.end());\n+    sigdata.musig2_partial_sigs.insert(m_musig2_partial_sigs.begin(), m_musig2_partial_sigs.end());",
      "path": "src/psbt.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "original_commit_id": "2a49082e491810fab48485e0a63e1fadfb09b1b7",
      "in_reply_to_id": 2379831421,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed",
      "created_at": "2025-09-25T18:38:30Z",
      "updated_at": "2025-09-25T18:38:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2380013207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380013207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 152,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382295705",
      "pull_request_review_id": 3272073328,
      "id": 2382295705,
      "node_id": "PRRC_kwDOABII586N_vKZ",
      "diff_hunk": "@@ -196,6 +199,13 @@ void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n     for (const auto& [pubkey, leaf_origin] : sigdata.taproot_misc_pubkeys) {\n         m_tap_bip32_paths.emplace(pubkey, leaf_origin);\n     }\n+    m_musig2_participants.insert(sigdata.musig2_pubkeys.begin(), sigdata.musig2_pubkeys.end());\n+    for (const auto& [agg_key_lh, pubnonces] : sigdata.musig2_pubnonces) {\n+        m_musig2_pubnonces[agg_key_lh].insert(pubnonces.begin(), pubnonces.end());\n+    }\n+    for (const auto& [agg_key_lh, psigs] : sigdata.musig2_partial_sigs) {\n+        m_musig2_partial_sigs[agg_key_lh].insert(psigs.begin(), psigs.end());\n+    }",
      "path": "src/psbt.cpp",
      "position": 24,
      "original_position": 20,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "fd52cd05d2bf11e059472e74fe6a771aa139b136",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit fd52cd05d2bf11e059472e74fe6a771aa139b136: I noticed that the creation/extension of the `PSBTInput.m_musig2_{pubnonces,partial_sigs}` maps is slightly more complex here (involving a loop), in contrast to the counter-part in the other direction in `FillSignatureData`, where a single-line `.insert` is used. Is that intentional, or can they be unified in either way (i.e. also only use bare `.insert` here, or introduce loops in `FillSignatureData` as well if it's needed)?\r\n\r\nRight now, `FillSignatureData` is only called on new empty `SignatureData` objects, but not sure if that is an assumption in the code. If yes, then even just a plain assignment would do it, e.g.:\r\n```diff\r\ndiff --git a/src/psbt.cpp b/src/psbt.cpp\r\nindex d144787571..4b4b988b58 100644\r\n--- a/src/psbt.cpp\r\n+++ b/src/psbt.cpp\r\n@@ -149,9 +149,9 @@ void PSBTInput::FillSignatureData(SignatureData& sigdata) const\r\n     for (const auto& [hash, preimage] : hash256_preimages) {\r\n         sigdata.hash256_preimages.emplace(std::vector<unsigned char>(hash.begin(), hash.end()), preimage);\r\n     }\r\n-    sigdata.musig2_pubkeys.insert(m_musig2_participants.begin(), m_musig2_participants.end());\r\n-    sigdata.musig2_pubnonces.insert(m_musig2_pubnonces.begin(), m_musig2_pubnonces.end());\r\n-    sigdata.musig2_partial_sigs.insert(m_musig2_partial_sigs.begin(), m_musig2_partial_sigs.end());\r\n+    sigdata.musig2_pubkeys = m_musig2_participants;\r\n+    sigdata.musig2_pubnonces = m_musig2_pubnonces;\r\n+    sigdata.musig2_partial_sigs = m_musig2_partial_sigs;\r\n }\r\n```\r\nand the `SignatureData` could be returned directly instead of passing by reference (that's follow-up material though, if it applies).",
      "created_at": "2025-09-26T12:40:05Z",
      "updated_at": "2025-09-26T12:40:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2382295705",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382295705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 207,
      "original_start_line": 203,
      "start_side": "RIGHT",
      "line": 212,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382524112",
      "pull_request_review_id": 3272426673,
      "id": 2382524112,
      "node_id": "PRRC_kwDOABII586OAm7Q",
      "diff_hunk": "@@ -383,6 +383,92 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+",
      "path": "src/key.cpp",
      "position": 125,
      "original_position": 12,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "e54d27d0f81c7a9c8991516f1ed06e86d52d6c79",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit e54d27d0f81c7a9c8991516f1ed06e86d52d6c79: consistency nit: same as in `CreateMuSig2AggregateSig`, could also check that the pubnonces and pubkey count match here, i.e.\r\n```\r\n    // Check if enough pubnonces\r\n    if (pubnonces.size() != pubkeys.size()) return std::nullopt;\r\n\r\n```",
      "created_at": "2025-09-26T13:59:26Z",
      "updated_at": "2025-09-26T14:08:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2382524112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382524112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 391,
      "original_start_line": 391,
      "start_side": "RIGHT",
      "line": 394,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382545727",
      "pull_request_review_id": 3272426673,
      "id": 2382545727,
      "node_id": "PRRC_kwDOABII586OAsM_",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)\n+{\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return {};\n+\n+    // Parse participant pubkey\n+    CPubKey our_pubkey = GetPubKey();\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_sign, &pubkey, our_pubkey.data(), our_pubkey.size())) {",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "original_commit_id": "0829833bf418d3fae35ceac57cae6137c1e9067d",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commits 0829833bf418d3fae35ceac57cae6137c1e9067d, e54d27d0f81c7a9c8991516f1ed06e86d52d6c79 and b6b66426125e46deb331927a5942e157578e712c: nit, in spirit of #33399: could use `secp256k1_context_static` where sufficient. If I didn't miss anything, I think the only two secp256k1 calls introduced in this PR that need the `secp256k1_context_sign` context are:\r\n* `secp256k1_musig_nonce_gen` and\r\n* `secp256k1_keypair_create`\r\n",
      "created_at": "2025-09-26T14:06:13Z",
      "updated_at": "2025-09-26T14:08:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2382545727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382545727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 362,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382674470",
      "pull_request_review_id": 3272643818,
      "id": 2382674470,
      "node_id": "PRRC_kwDOABII586OBLom",
      "diff_hunk": "@@ -265,6 +265,93 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "original_commit_id": "1181568816e32f378f3f9a50a0658d96541771de",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 1181568816e32f378f3f9a50a0658d96541771de \"sign: Create MuSig2 signatures for known MuSig2 aggregate keys\" (but also in the 3 previous commits)\r\n\r\nThe original impetus of this suggestion was for the reader to avoid reading redundant code, but having the `sighash` calculated only once during MuSig2 signing flow for a `script_pubkey` seems better from performance POV as well, even though this redundant calculation is inside wallet signing and not in the more latency sensitive operations of the node. This also made the participant derivation info filling in a separate loop before the `sighash` calculation.\r\n\r\nThe nonce and partial sig calculation is done for every participant pubkey that internally calculates the same sighash every time. Consider this redundancy removal before the first MuSig2 flow is checked in.\r\n\r\n<details>\r\n<summary>Redundant `sighash` calculation removal diff that passes tests</summary>\r\n\r\n```diff\r\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\r\nindex e4e5859de0..8aa9aea12c 100644\r\n--- a/src/script/sign.cpp\r\n+++ b/src/script/sign.cpp\r\n@@ -102,7 +102,7 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\r\n     return true;\r\n }\r\n \r\n-std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const\r\n+std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const\r\n {\r\n     assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\r\n \r\n@@ -116,21 +116,17 @@ std::vector<uint8_t> MutableTransactionSignatureCreator::CreateMuSig2Nonce(const\r\n     const std::vector<CPubKey>& pubkeys = it->second;\r\n     if (std::find(pubkeys.begin(), pubkeys.end(), part_pubkey) == pubkeys.end()) return {};\r\n \r\n-    // Compute sighash\r\n-    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\r\n-    if (!sighash.has_value()) return {};\r\n-\r\n     MuSig2SecNonce secnonce;\r\n-    std::vector<uint8_t> out = key.CreateMuSig2Nonce(secnonce, *sighash, aggregate_pubkey, pubkeys);\r\n+    std::vector<uint8_t> out = key.CreateMuSig2Nonce(secnonce, sighash, aggregate_pubkey, pubkeys);\r\n     if (out.empty()) return {};\r\n \r\n     // Store the secnonce in the SigningProvider\r\n-    provider.SetMuSig2SecNonce(MuSig2SessionID(script_pubkey, part_pubkey, *sighash), std::move(secnonce));\r\n+    provider.SetMuSig2SecNonce(MuSig2SessionID(script_pubkey, part_pubkey, sighash), std::move(secnonce));\r\n \r\n     return out;\r\n }\r\n \r\n-bool MutableTransactionSignatureCreator::CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const\r\n+bool MutableTransactionSignatureCreator::CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const\r\n {\r\n     assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\r\n \r\n@@ -153,17 +149,13 @@ bool MutableTransactionSignatureCreator::CreateMuSig2PartialSig(const SigningPro\r\n     // Check if enough pubnonces\r\n     if (pubnonces.size() != pubkeys.size()) return false;\r\n \r\n-    // Compute sighash\r\n-    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\r\n-    if (!sighash.has_value()) return false;\r\n-\r\n     // Retrieve the secnonce\r\n-    uint256 session_id = MuSig2SessionID(script_pubkey, part_pubkey, *sighash);\r\n+    uint256 session_id = MuSig2SessionID(script_pubkey, part_pubkey, sighash);\r\n     std::optional<std::reference_wrapper<MuSig2SecNonce>> secnonce = provider.GetMuSig2SecNonce(session_id);\r\n     if (!secnonce || !secnonce->get().IsValid()) return false;\r\n \r\n     // Compute the sig\r\n-    std::optional<uint256> sig = key.CreateMuSig2PartialSig(*sighash, aggregate_pubkey, pubkeys, pubnonces, *secnonce, tweaks);\r\n+    std::optional<uint256> sig = key.CreateMuSig2PartialSig(sighash, aggregate_pubkey, pubkeys, pubnonces, *secnonce, tweaks);\r\n     if (!sig) return false;\r\n     partial_sig = std::move(*sig);\r\n \r\n@@ -174,7 +166,7 @@ bool MutableTransactionSignatureCreator::CreateMuSig2PartialSig(const SigningPro\r\n     return true;\r\n }\r\n \r\n-bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, std::vector<uint8_t>& sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const\r\n+bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, std::vector<uint8_t>& sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const\r\n {\r\n     assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\r\n     if (!participants.size()) return false;\r\n@@ -192,11 +184,7 @@ bool MutableTransactionSignatureCreator::CreateMuSig2AggregateSig(const std::vec\r\n     if (pubnonces.size() != participants.size()) return false;\r\n     if (partial_sigs.size() != participants.size()) return false;\r\n \r\n-    // Compute sighash\r\n-    std::optional<uint256> sighash = ComputeSchnorrSignatureHash(leaf_hash, sigversion);\r\n-    if (!sighash.has_value()) return false;\r\n-\r\n-    std::optional<std::vector<uint8_t>> res = ::CreateMuSig2AggregateSig(participants, aggregate_pubkey, tweaks, *sighash, pubnonces, partial_sigs);\r\n+    std::optional<std::vector<uint8_t>> res = ::CreateMuSig2AggregateSig(participants, aggregate_pubkey, tweaks, sighash, pubnonces, partial_sigs);\r\n     if (!res) return false;\r\n     sig = res.value();\r\n     if (nHashType) sig.push_back(nHashType);\r\n@@ -269,10 +257,10 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n {\r\n     Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\r\n \r\n+    // Fill participant derivation path info\r\n     for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\r\n         if (part_pks.empty()) continue;\r\n \r\n-        // Fill participant derivation path info\r\n         for (const auto& part_pk : part_pks) {\r\n             KeyOriginInfo part_info;\r\n             if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\r\n@@ -284,6 +272,15 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n                 if (leaf_hash) it->second.first.insert(*leaf_hash);\r\n             }\r\n         }\r\n+    }\r\n+\r\n+    // Compute sighash\r\n+    std::optional<uint256> sighash = creator.ComputeSchnorrSignatureHash(leaf_hash, sigversion);\r\n+    if (!sighash.has_value()) return false;\r\n+\r\n+    // Execute signing flow\r\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\r\n+        if (part_pks.empty()) continue;\r\n \r\n         // The pubkey in the script may not be the actual aggregate of the participants, but derived from it.\r\n         // Check the derivation, and compute the BIP 32 derivation tweaks\r\n@@ -318,7 +315,7 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n         }\r\n \r\n         // First try to aggregate\r\n-        if (creator.CreateMuSig2AggregateSig(part_pks, sig_out, agg_pub, plain_pub, leaf_hash, tweaks, sigversion, sigdata)) {\r\n+        if (creator.CreateMuSig2AggregateSig(part_pks, sig_out, agg_pub, plain_pub, leaf_hash, tweaks, sigversion, sigdata, *sighash)) {\r\n             if (sigversion == SigVersion::TAPROOT) {\r\n                 sigdata.taproot_key_path_sig = sig_out;\r\n             } else {\r\n@@ -331,7 +328,7 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n         auto pub_key_leaf_hash = std::make_pair(plain_pub, leaf_hash ? *leaf_hash : uint256());\r\n         for (const CPubKey& part_pk : part_pks) {\r\n             uint256 partial_sig;\r\n-            if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, leaf_hash, tweaks, sigversion, sigdata) && Assume(!partial_sig.IsNull())) {\r\n+            if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, leaf_hash, tweaks, sigversion, sigdata, *sighash) && Assume(!partial_sig.IsNull())) {\r\n                 sigdata.musig2_partial_sigs[pub_key_leaf_hash].emplace(part_pk, partial_sig);\r\n             }\r\n         }\r\n@@ -344,7 +341,7 @@ static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigda\r\n         std::map<CPubKey, std::vector<uint8_t>>& pubnonces = sigdata.musig2_pubnonces[pub_key_leaf_hash];\r\n         for (const CPubKey& part_pk : part_pks) {\r\n             if (pubnonces.contains(part_pk)) continue;\r\n-            std::vector<uint8_t> pubnonce = creator.CreateMuSig2Nonce(provider, agg_pub, plain_pub, part_pk, leaf_hash, merkle_root, sigversion, sigdata);\r\n+            std::vector<uint8_t> pubnonce = creator.CreateMuSig2Nonce(provider, agg_pub, plain_pub, part_pk, leaf_hash, merkle_root, sigversion, sigdata, *sighash);\r\n             if (pubnonce.empty()) continue;\r\n             pubnonces[part_pk] = std::move(pubnonce);\r\n         }\r\n@@ -969,18 +966,22 @@ public:\r\n         sig.assign(64, '\\000');\r\n         return true;\r\n     }\r\n-    std::vector<uint8_t> CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const override\r\n+    std::optional<uint256> ComputeSchnorrSignatureHash(const uint256* leaf_hash, SigVersion sigversion) const override\r\n+    {\r\n+        return uint256::ONE;\r\n+    }\r\n+    std::vector<uint8_t> CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const override\r\n     {\r\n         std::vector<uint8_t> out;\r\n         out.assign(MUSIG2_PUBNONCE_SIZE, '\\000');\r\n         return out;\r\n     }\r\n-    bool CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const override\r\n+    bool CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const override\r\n     {\r\n         partial_sig = uint256::ONE;\r\n         return true;\r\n     }\r\n-    bool CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, std::vector<uint8_t>& sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const override\r\n+    bool CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, std::vector<uint8_t>& sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const override\r\n     {\r\n         sig.assign(64, '\\000');\r\n         return true;\r\ndiff --git a/src/script/sign.h b/src/script/sign.h\r\nindex dd86a8066a..009d70b9ac 100644\r\n--- a/src/script/sign.h\r\n+++ b/src/script/sign.h\r\n@@ -34,9 +34,10 @@ public:\r\n     /** Create a singular (non-script) signature. */\r\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\r\n     virtual bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const =0;\r\n-    virtual std::vector<uint8_t> CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const =0;\r\n-    virtual bool CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const =0;\r\n-    virtual bool CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, std::vector<uint8_t>& sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const =0;\r\n+    virtual std::optional<uint256> ComputeSchnorrSignatureHash(const uint256* leaf_hash, SigVersion sigversion) const =0;\r\n+    virtual std::vector<uint8_t> CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const =0;\r\n+    virtual bool CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const =0;\r\n+    virtual bool CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, std::vector<uint8_t>& sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const =0;\r\n };\r\n \r\n /** A signature creator for transactions. */\r\n@@ -49,17 +50,16 @@ class MutableTransactionSignatureCreator : public BaseSignatureCreator\r\n     const MutableTransactionSignatureChecker checker;\r\n     const PrecomputedTransactionData* m_txdata;\r\n \r\n-    std::optional<uint256> ComputeSchnorrSignatureHash(const uint256* leaf_hash, SigVersion sigversion) const;\r\n-\r\n public:\r\n     MutableTransactionSignatureCreator(const CMutableTransaction& tx LIFETIMEBOUND, unsigned int input_idx, const CAmount& amount, int hash_type);\r\n     MutableTransactionSignatureCreator(const CMutableTransaction& tx LIFETIMEBOUND, unsigned int input_idx, const CAmount& amount, const PrecomputedTransactionData* txdata, int hash_type);\r\n     const BaseSignatureChecker& Checker() const override { return checker; }\r\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\r\n     bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const override;\r\n-    std::vector<uint8_t> CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata) const override;\r\n-    bool CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const override;\r\n-    bool CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, std::vector<uint8_t>& sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata) const override;\r\n+    std::optional<uint256> ComputeSchnorrSignatureHash(const uint256* leaf_hash, SigVersion sigversion) const override;\r\n+    std::vector<uint8_t> CreateMuSig2Nonce(const SigningProvider& provider, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const override;\r\n+    bool CreateMuSig2PartialSig(const SigningProvider& provider, uint256& partial_sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const CPubKey& part_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const override;\r\n+    bool CreateMuSig2AggregateSig(const std::vector<CPubKey>& participants, std::vector<uint8_t>& sig, const CPubKey& aggregate_pubkey, const CPubKey& script_pubkey, const uint256* leaf_hash, const std::vector<std::pair<uint256, bool>>& tweaks, SigVersion sigversion, const SignatureData& sigdata, const uint256& sighash) const override;\r\n };\r\n \r\n /** A signature checker that accepts all signatures */\r\n\r\n```\r\n</details>",
      "created_at": "2025-09-26T14:56:08Z",
      "updated_at": "2025-10-01T08:46:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2382674470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382674470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382697115",
      "pull_request_review_id": 3272643818,
      "id": 2382697115,
      "node_id": "PRRC_kwDOABII586OBRKb",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].walletcreatefundedpsbt(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", changePosition=1)[\"psbt\"]",
      "path": "test/functional/wallet_musig.py",
      "position": 132,
      "original_position": 132,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 02994c2cbe2f051b868f49e65fac042feace2edf \"test: Test MuSig2 in the wallet\"\r\n\r\nIn continuation to the previous suggestion of handling the cases where the `musig` descriptor is not known to the wallet and instead only few keys are that could sign - https://github.com/bitcoin/bitcoin/pull/29675/#discussion_r2368738533 (thanks for adding the fix btw).\r\n\r\nWhen I was debugging this case earlier, 2 tests failed because of incorrect number of nonces and partial sigs added - earlier `send` RPC was used instead of `walletcreatefundedpsbt` that also tried to sign initially.\r\n\r\nIMO, using `walletcreatefundedpsbt` seems better for the MuSig2 flow because it is expected (and likely) that the first round (so to speak) will not have the transaction fully signed.\r\n\r\nBut should this be mentioned somewhere either in the RPC doc or in the docs directory that `send` RPC is not to be used for MuSig2 signing?",
      "created_at": "2025-09-26T15:04:48Z",
      "updated_at": "2025-09-26T17:56:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2382697115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2382697115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383164921",
      "pull_request_review_id": 3273389485,
      "id": 2383164921,
      "node_id": "PRRC_kwDOABII586ODDX5",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO\n+        utxo = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if utxo is None:\n+                utxo = wallet.listunspent()[0]\n+            else:\n+                assert_equal(utxo, wallet.listunspent()[0])\n+        psbt = wallets[0].walletcreatefundedpsbt(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", changePosition=1)[\"psbt\"]",
      "path": "test/functional/wallet_musig.py",
      "position": 132,
      "original_position": 132,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "in_reply_to_id": 2382697115,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The test failure with `send` was because of sighash types, not that `send` doesn't work for musig. It was failing on the test that changes the sighash type.",
      "created_at": "2025-09-26T18:26:09Z",
      "updated_at": "2025-09-26T18:26:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2383164921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383164921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383168777",
      "pull_request_review_id": 3273395356,
      "id": 2383168777,
      "node_id": "PRRC_kwDOABII586ODEUJ",
      "diff_hunk": "@@ -265,6 +265,93 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const KeyOriginInfo& agg_info, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "original_commit_id": "1181568816e32f378f3f9a50a0658d96541771de",
      "in_reply_to_id": 2382674470,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The sighash is calculated multiple times during signing outside of musig signing too. I will leave refactoring of this to a followup.",
      "created_at": "2025-09-26T18:27:50Z",
      "updated_at": "2025-09-26T18:27:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2383168777",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383168777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383499341",
      "pull_request_review_id": 3273960652,
      "id": 2383499341,
      "node_id": "PRRC_kwDOABII586OEVBN",
      "diff_hunk": "@@ -196,6 +199,13 @@ void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n     for (const auto& [pubkey, leaf_origin] : sigdata.taproot_misc_pubkeys) {\n         m_tap_bip32_paths.emplace(pubkey, leaf_origin);\n     }\n+    m_musig2_participants.insert(sigdata.musig2_pubkeys.begin(), sigdata.musig2_pubkeys.end());\n+    for (const auto& [agg_key_lh, pubnonces] : sigdata.musig2_pubnonces) {\n+        m_musig2_pubnonces[agg_key_lh].insert(pubnonces.begin(), pubnonces.end());\n+    }\n+    for (const auto& [agg_key_lh, psigs] : sigdata.musig2_partial_sigs) {\n+        m_musig2_partial_sigs[agg_key_lh].insert(psigs.begin(), psigs.end());\n+    }",
      "path": "src/psbt.cpp",
      "position": 24,
      "original_position": 20,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "fd52cd05d2bf11e059472e74fe6a771aa139b136",
      "in_reply_to_id": 2382295705,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unified.\r\n\r\n> Right now, FillSignatureData is only called on new empty SignatureData objects, but not sure if that is an assumption in the code.\r\n\r\nThat is not an assumption.",
      "created_at": "2025-09-26T21:07:48Z",
      "updated_at": "2025-09-26T21:07:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2383499341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383499341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 207,
      "original_start_line": 203,
      "start_side": "RIGHT",
      "line": 212,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383499483",
      "pull_request_review_id": 3273960849,
      "id": 2383499483,
      "node_id": "PRRC_kwDOABII586OEVDb",
      "diff_hunk": "@@ -383,6 +383,92 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\n     return out;\n }\n \n+std::optional<uint256> CKey::CreateMuSig2PartialSig(const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys, const std::map<CPubKey, std::vector<uint8_t>>& pubnonces, MuSig2SecNonce& secnonce, const std::vector<std::pair<uint256, bool>>& tweaks)\n+{\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, UCharCast(begin()))) return std::nullopt;\n+\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return std::nullopt;\n+",
      "path": "src/key.cpp",
      "position": 125,
      "original_position": 12,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "e54d27d0f81c7a9c8991516f1ed06e86d52d6c79",
      "in_reply_to_id": 2382524112,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-26T21:07:54Z",
      "updated_at": "2025-09-26T21:07:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2383499483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383499483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": 391,
      "original_start_line": 391,
      "start_side": "RIGHT",
      "line": 394,
      "original_line": 394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383499646",
      "pull_request_review_id": 3273961043,
      "id": 2383499646,
      "node_id": "PRRC_kwDOABII586OEVF-",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)\n+{\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return {};\n+\n+    // Parse participant pubkey\n+    CPubKey our_pubkey = GetPubKey();\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_sign, &pubkey, our_pubkey.data(), our_pubkey.size())) {",
      "path": "src/key.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "02994c2cbe2f051b868f49e65fac042feace2edf",
      "original_commit_id": "0829833bf418d3fae35ceac57cae6137c1e9067d",
      "in_reply_to_id": 2382545727,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-26T21:08:00Z",
      "updated_at": "2025-09-26T21:08:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2383499646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2383499646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 362,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2387893415",
      "pull_request_review_id": 3279715340,
      "id": 2387893415,
      "node_id": "PRRC_kwDOABII586OVFyn",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)\n+{\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return {};\n+\n+    // Parse participant pubkey\n+    CPubKey our_pubkey = GetPubKey();\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_static, &pubkey, our_pubkey.data(), our_pubkey.size())) {\n+        return {};\n+    }\n+\n+    // Generate randomness for nonce\n+    uint256 rand;\n+    GetStrongRandBytes(rand);\n+\n+    // Generate nonce\n+    secp256k1_musig_pubnonce pubnonce;\n+    if (!secp256k1_musig_nonce_gen(secp256k1_context_sign, secnonce.Get(), &pubnonce, rand.data(), UCharCast(begin()), &pubkey, sighash.data(), &keyagg_cache, nullptr)) {\n+        return {};\n+    }\n+",
      "path": "src/key.cpp",
      "position": 106,
      "original_position": 34,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "793d727791fe042bbb4a9ff5df3db012a77a40fe",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 793d727791fe042bbb4a9ff5df3db012a77a40fe \"sign: Add CreateMuSig2Nonce\"\r\n\r\nWouldn't hurt to add this assert imo. I'm inclining to fail early the whole process in case of any such scenarios. \r\n\r\n```diff\r\ndiff --git a/src/key.cpp b/src/key.cpp\r\nindex a952acb260..f7e065c8da 100644\r\n--- a/src/key.cpp\r\n+++ b/src/key.cpp\r\n@@ -372,6 +372,8 @@ std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uin\r\n     if (!secp256k1_musig_nonce_gen(secp256k1_context_sign, secnonce.Get(), &pubnonce, rand.data(), UCharCast(begin()), &pubkey, sighash.data(), &keyagg_cache, nullptr)) {\r\n         return {};\r\n     }\r\n+    // `rand` should have been set to 0 after the nonces are generated successfully\r\n+    assert(rand.IsNull());\r\n\r\n     // Serialize pubnonce\r\n     std::vector<uint8_t> out;\r\n```",
      "created_at": "2025-09-29T13:06:46Z",
      "updated_at": "2025-09-29T13:24:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2387893415",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2387893415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 375,
      "original_line": 375,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2387919138",
      "pull_request_review_id": 3279715340,
      "id": 2387919138,
      "node_id": "PRRC_kwDOABII586OVMEi",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO",
      "path": "test/functional/wallet_musig.py",
      "position": 123,
      "original_position": 123,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 36f83554a2dc5b397ee3b4495d8bf2aff36cedc6 \"test: Test MuSig2 in the wallet\"\r\n\r\nI feel it'd be prudent to be comprehensive in testing here. A more practical scenario would be where the `MuSig2` unspents are combined with non-MuSig2/Taproot unspents, and/or there could be multiple MuSig2 unspents in the PSBT. The following diff tests for:\r\n1. 2 MuSig2 inputs in the PSBT along with 1 SegWit unspent. A secondary reason is to avoid seeing `dec_psbt[\"inputs\"][0]` in several places.\r\n2. Iterates all the test cases over `ALL|ANYONECANPAY` sighash type.\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/wallet_musig.py b/test/functional/wallet_musig.py\r\nindex 277ca9276e..0b52296e16 100755\r\n--- a/test/functional/wallet_musig.py\r\n+++ b/test/functional/wallet_musig.py\r\n@@ -20,16 +20,29 @@ MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\r\n MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\r\n PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\r\n \r\n+def filter_musig2_unspents(unspents):\r\n+    return [unspent for unspent in unspents if \"musig(\" in unspent[\"parent_descs\"][0]]\r\n+\r\n+def filter_musig2_inputs(psbt_inputs):\r\n+    return [psbt_input for psbt_input in psbt_inputs if \"musig2_participant_pubkeys\" in psbt_input]\r\n+\r\n+def filter_musig2_finalized_inputs(psbt_inputs):\r\n+    # approximate heuristic to filter the MuSig2 input given this test setup\r\n+    return [psbt_input for psbt_input in psbt_inputs if psbt_input[\"witness_utxo\"][\"scriptPubKey\"][\"type\"] == \"witness_v1_taproot\"]\r\n+\r\n class WalletMuSigTest(BitcoinTestFramework):\r\n     WALLET_NUM = 0\r\n+    MUSIG2_INPUTS_NUM = 2\r\n+\r\n     def set_test_params(self):\r\n         self.num_nodes = 1\r\n+        self.extra_args = [[f\"-keypool={self.MUSIG2_INPUTS_NUM}\"]]\r\n \r\n     def skip_test_if_missing_module(self):\r\n         self.skip_if_no_wallet()\r\n \r\n     def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\r\n-        self.log.info(f\"Testing {comment}\")\r\n+        self.log.info(f\"Testing {comment} with sighash_type {sighash_type}\")\r\n         has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\r\n \r\n         wallets = []\r\n@@ -80,6 +93,7 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         # Construct and import each wallet's musig descriptor that\r\n         # contains the private key from that wallet and pubkeys of the others\r\n         for i, wallet in enumerate(wallets):\r\n+            # The first wallet is assumed to be a MuSig2 wallet always\r\n             if only_one_musig_wallet and i > 0:\r\n                 continue\r\n             desc = pat\r\n@@ -100,47 +114,56 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n             for r in res:\r\n                 assert_equal(r[\"success\"], True)\r\n \r\n-        # Check that the wallets agree on the same musig address\r\n-        addr = None\r\n-        change_addr = None\r\n-        for i, wallet in enumerate(wallets):\r\n-            if only_one_musig_wallet and i > 0:\r\n-                continue\r\n-            if addr is None:\r\n-                addr = wallet.getnewaddress(address_type=\"bech32m\")\r\n-            else:\r\n-                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\r\n-            if has_internal:\r\n-                if change_addr is None:\r\n-                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\r\n+        # Check that the wallets agree on the same MuSig2 addresses\r\n+        for _ in range(0, self.MUSIG2_INPUTS_NUM):\r\n+            addr = None\r\n+            change_addr = None\r\n+            for i, wallet in enumerate(wallets):\r\n+                # The first wallet is assumed to be a MuSig2 wallet always\r\n+                if only_one_musig_wallet and i > 0:\r\n+                    continue\r\n+                if addr is None:\r\n+                    addr = wallet.getnewaddress(address_type=\"bech32m\")\r\n                 else:\r\n-                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\r\n+                    assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\r\n+                if has_internal:\r\n+                    if change_addr is None:\r\n+                        change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\r\n+                    else:\r\n+                        assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\r\n+            # Fund that address\r\n+            self.def_wallet.sendtoaddress(addr, 10)\r\n \r\n-        # Fund that address\r\n-        self.def_wallet.sendtoaddress(addr, 10)\r\n+        # Send some funds to a non-MuSig2 address in the first wallet to simulate real-world scenario\r\n+        self.def_wallet.sendtoaddress(wallets[0].getnewaddress(address_type=\"bech32\"), 5)\r\n         self.generate(self.nodes[0], 1)\r\n \r\n-        # Spend that UTXO\r\n-        utxo = None\r\n+        # Spend the MuSig2 UTXOs\r\n+        utxos = None\r\n         for i, wallet in enumerate(wallets):\r\n             if only_one_musig_wallet and i > 0:\r\n                 continue\r\n-            if utxo is None:\r\n-                utxo = wallet.listunspent()[0]\r\n+            if utxos is None:\r\n+                utxos = filter_musig2_unspents(wallet.listunspent())\r\n             else:\r\n-                assert_equal(utxo, wallet.listunspent()[0])\r\n-        psbt = wallets[0].walletcreatefundedpsbt(outputs=[{self.def_wallet.getnewaddress(): 5}], inputs=[utxo], change_type=\"bech32m\", changePosition=1)[\"psbt\"]\r\n+                assert_equal(utxos, wallet.listunspent())\r\n+\r\n+        change_index = 1\r\n+        # Spend more than what the MuSig2 unspents have so that non-MuSig2 inputs are also selected\r\n+        psbt = wallets[0].walletcreatefundedpsbt(outputs=[{self.def_wallet.getnewaddress(): 21}], inputs=utxos, change_type=\"bech32m\", changePosition=change_index, add_inputs=True)[\"psbt\"]\r\n \r\n         dec_psbt = self.nodes[0].decodepsbt(psbt)\r\n-        assert_equal(len(dec_psbt[\"inputs\"]), 1)\r\n-        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\r\n+        musig2_psbt_inputs = filter_musig2_inputs(dec_psbt[\"inputs\"])\r\n+        assert_equal(len(musig2_psbt_inputs), self.MUSIG2_INPUTS_NUM)\r\n+        for musig2_psbt_input in musig2_psbt_inputs:\r\n+            assert_equal(len(musig2_psbt_input[\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\r\n         if has_internal:\r\n-            assert_equal(len(dec_psbt[\"outputs\"][1][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\r\n+            assert_equal(len(dec_psbt[\"outputs\"][change_index][\"musig2_participant_pubkeys\"]), pattern.count(\"musig(\"))\r\n \r\n         # Check all participant pubkeys in the input and change output\r\n-        psbt_maps = [dec_psbt[\"inputs\"][0]]\r\n+        psbt_maps = musig2_psbt_inputs\r\n         if has_internal:\r\n-            psbt_maps.append(dec_psbt[\"outputs\"][1])\r\n+            psbt_maps.append(dec_psbt[\"outputs\"][change_index])\r\n         for psbt_map in psbt_maps:\r\n             part_pks = set()\r\n             for agg in psbt_map[\"musig2_participant_pubkeys\"]:\r\n@@ -166,19 +189,21 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         comb_nonce_psbt = self.nodes[0].combinepsbt(nonce_psbts)\r\n \r\n         dec_psbt = self.nodes[0].decodepsbt(comb_nonce_psbt)\r\n-        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]), expected_pubnonces)\r\n-        for pn in dec_psbt[\"inputs\"][0][\"musig2_pubnonces\"]:\r\n-            pubkey = pn[\"aggregate_pubkey\"][2:]\r\n-            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\r\n-                continue\r\n-            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\r\n-                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\r\n-                    if pubkey in leaf_scripts[\"script\"]:\r\n-                        break\r\n+        musig2_psbt_inputs = filter_musig2_inputs(dec_psbt[\"inputs\"])\r\n+        for musig2_psbt_input in musig2_psbt_inputs:\r\n+            assert_equal(len(musig2_psbt_input[\"musig2_pubnonces\"]), expected_pubnonces)\r\n+            for pn in musig2_psbt_input[\"musig2_pubnonces\"]:\r\n+                pubkey = pn[\"aggregate_pubkey\"][2:]\r\n+                if pubkey in musig2_psbt_input[\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\r\n+                    continue\r\n+                elif \"taproot_scripts\" in musig2_psbt_input:\r\n+                    for leaf_scripts in musig2_psbt_input[\"taproot_scripts\"]:\r\n+                        if pubkey in leaf_scripts[\"script\"]:\r\n+                            break\r\n+                    else:\r\n+                        assert False, \"Aggregate pubkey for pubnonce not seen as output key, or in any scripts\"\r\n                 else:\r\n-                    assert False, \"Aggregate pubkey for pubnonce not seen as output key, or in any scripts\"\r\n-            else:\r\n-                assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\r\n+                    assert False, \"Aggregate pubkey for pubnonce not seen as output key or internal key\"\r\n \r\n         # Add partial sigs\r\n         psig_psbts = []\r\n@@ -192,28 +217,32 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n         comb_psig_psbt = self.nodes[0].combinepsbt(psig_psbts)\r\n \r\n         dec_psbt = self.nodes[0].decodepsbt(comb_psig_psbt)\r\n-        assert_equal(len(dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]), expected_partial_sigs)\r\n-        for ps in dec_psbt[\"inputs\"][0][\"musig2_partial_sigs\"]:\r\n-            pubkey = ps[\"aggregate_pubkey\"][2:]\r\n-            if pubkey in dec_psbt[\"inputs\"][0][\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\r\n-                continue\r\n-            elif \"taproot_scripts\" in dec_psbt[\"inputs\"][0]:\r\n-                for leaf_scripts in dec_psbt[\"inputs\"][0][\"taproot_scripts\"]:\r\n-                    if pubkey in leaf_scripts[\"script\"]:\r\n-                        break\r\n+        musig2_psbt_inputs = filter_musig2_inputs(dec_psbt[\"inputs\"])\r\n+        for musig2_psbt_input in musig2_psbt_inputs:\r\n+            assert_equal(len(musig2_psbt_input[\"musig2_partial_sigs\"]), expected_partial_sigs)\r\n+            for ps in musig2_psbt_input[\"musig2_partial_sigs\"]:\r\n+                pubkey = ps[\"aggregate_pubkey\"][2:]\r\n+                if pubkey in musig2_psbt_input[\"witness_utxo\"][\"scriptPubKey\"][\"hex\"]:\r\n+                    continue\r\n+                elif \"taproot_scripts\" in musig2_psbt_input:\r\n+                    for leaf_scripts in musig2_psbt_input[\"taproot_scripts\"]:\r\n+                        if pubkey in leaf_scripts[\"script\"]:\r\n+                            break\r\n+                    else:\r\n+                        assert False, \"Aggregate pubkey for partial sig not seen as output key or in any scripts\"\r\n                 else:\r\n-                    assert False, \"Aggregate pubkey for partial sig not seen as output key or in any scripts\"\r\n-            else:\r\n-                assert False, \"Aggregate pubkey for partial sig not seen as output key\"\r\n+                    assert False, \"Aggregate pubkey for partial sig not seen as output key\"\r\n \r\n         # Non-participant aggregates partial sigs and send\r\n         finalized = self.nodes[0].finalizepsbt(psbt=comb_psig_psbt, extract=False)\r\n-        assert_equal(finalized[\"complete\"], True)\r\n-        witness = self.nodes[0].decodepsbt(finalized[\"psbt\"])[\"inputs\"][0][\"final_scriptwitness\"]\r\n-        if scriptpath:\r\n-            assert_greater_than(len(witness), 1)\r\n-        else:\r\n-            assert_equal(len(witness), 1)\r\n+        musig2_psbt_inputs = filter_musig2_finalized_inputs(self.nodes[0].decodepsbt(finalized[\"psbt\"])[\"inputs\"])\r\n+        for musig2_psbt_input in musig2_psbt_inputs:\r\n+            witness = musig2_psbt_input[\"final_scriptwitness\"]\r\n+            if scriptpath:\r\n+                assert_greater_than(len(witness), 1)\r\n+            else:\r\n+                assert_equal(len(witness), 1)\r\n+\r\n         finalized = self.nodes[0].finalizepsbt(comb_psig_psbt)\r\n         assert \"hex\" in finalized\r\n         self.nodes[0].sendrawtransaction(finalized[\"hex\"])\r\n@@ -221,22 +250,21 @@ class WalletMuSigTest(BitcoinTestFramework):\r\n     def run_test(self):\r\n         self.def_wallet = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\r\n \r\n-        self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n-        self.do_test(\"rawtr(musig(keys/*)) with ALL|ANYONECANPAY\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", \"ALL|ANYONECANPAY\")\r\n-        self.do_test(\"tr(musig(keys/*)) no multipath\", \"tr(musig($0/0/*,$1/1/*,$2/2/*))\")\r\n-        self.do_test(\"tr(musig(keys/*)) 2 index multipath\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\")\r\n-        self.do_test(\"tr(musig(keys/*)) 3 index multipath\", \"tr(musig($0/<0;1;2>/*,$1/<1;2;3>/*,$2/<2;3;4>/*))\")\r\n-        self.do_test(\"rawtr(musig/*)\", \"rawtr(musig($0,$1,$2)/<0;1>/*)\")\r\n-        self.do_test(\"tr(musig/*)\", \"tr(musig($0,$1,$2)/<0;1>/*)\")\r\n-        self.do_test(\"rawtr(musig(keys/*)) without all wallets importing\", \"rawtr(musig($0/<0;1>/*,$1/<0;1>/*,$2/<0;1>/*))\", only_one_musig_wallet=True)\r\n-        self.do_test(\"tr(musig(keys/*)) without all wallets importing\", \"tr(musig($0/<0;1>/*,$1/<0;1>/*,$2/<0;1>/*))\", only_one_musig_wallet=True)\r\n-        self.do_test(\"tr(H, pk(musig(keys/*)))\", \"tr($H,pk(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*)))\", scriptpath=True)\r\n-        self.do_test(\"tr(H,pk(musig/*))\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\", scriptpath=True)\r\n-        self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\", scriptpath=True)\r\n-        self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\", scriptpath=True)\r\n-        self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\")\r\n-        self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})} script-path\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\", scriptpath=True, nosign_wallets=[0])\r\n-\r\n+        for sighash_type in [None, \"ALL|ANYONECANPAY\"]:\r\n+            self.do_test(\"rawtr(musig(keys/*))\", \"rawtr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", sighash_type)\r\n+            self.do_test(\"tr(musig(keys/*)) no multipath\", \"tr(musig($0/0/*,$1/1/*,$2/2/*))\", sighash_type)\r\n+            self.do_test(\"tr(musig(keys/*)) 2 index multipath\", \"tr(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*))\", sighash_type)\r\n+            self.do_test(\"tr(musig(keys/*)) 3 index multipath\", \"tr(musig($0/<0;1;2>/*,$1/<1;2;3>/*,$2/<2;3;4>/*))\", sighash_type)\r\n+            self.do_test(\"rawtr(musig/*)\", \"rawtr(musig($0,$1,$2)/<0;1>/*)\", sighash_type)\r\n+            self.do_test(\"tr(musig/*)\", \"tr(musig($0,$1,$2)/<0;1>/*)\", sighash_type)\r\n+            self.do_test(\"rawtr(musig(keys/*)) without all wallets importing\", \"rawtr(musig($0/<0;1>/*,$1/<0;1>/*,$2/<0;1>/*))\", sighash_type, only_one_musig_wallet=True)\r\n+            self.do_test(\"tr(musig(keys/*)) without all wallets importing\", \"tr(musig($0/<0;1>/*,$1/<0;1>/*,$2/<0;1>/*))\", sighash_type, only_one_musig_wallet=True)\r\n+            self.do_test(\"tr(H, pk(musig(keys/*)))\", \"tr($H,pk(musig($0/<0;1>/*,$1/<1;2>/*,$2/<2;3>/*)))\", sighash_type, scriptpath=True)\r\n+            self.do_test(\"tr(H,pk(musig/*))\", \"tr($H,pk(musig($0,$1,$2)/<0;1>/*))\", sighash_type, scriptpath=True)\r\n+            self.do_test(\"tr(H,{pk(musig/*), pk(musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($3,$4,$5)/0/*)})\", sighash_type, scriptpath=True)\r\n+            self.do_test(\"tr(H,{pk(musig/*), pk(same keys different musig/*)})\", \"tr($H,{pk(musig($0,$1,$2)/<0;1>/*),pk(musig($1,$2)/0/*)})\", sighash_type, scriptpath=True)\r\n+            self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})}\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\", sighash_type)\r\n+            self.do_test(\"tr(musig/*,{pk(partial keys diff musig-1/*),pk(partial keys diff musig-2/*)})} script-path\", \"tr(musig($0,$1,$2)/<3;4>/*,{pk(musig($0,$1)/<5;6>/*),pk(musig($1,$2)/7/*)})\", sighash_type, scriptpath=True, nosign_wallets=[2])\r\n \r\n if __name__ == '__main__':\r\n     WalletMuSigTest(__file__).main()\r\n```\r\n</details>",
      "created_at": "2025-09-29T13:15:22Z",
      "updated_at": "2025-10-01T05:10:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2387919138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2387919138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2387925458",
      "pull_request_review_id": 3279715340,
      "id": 2387925458,
      "node_id": "PRRC_kwDOABII586OVNnS",
      "diff_hunk": "",
      "path": "src/pubkey.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "2806f8152c751641257f3f1ab0d886d9c8ece1e1",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 2806f8152c751641257f3f1ab0d886d9c8ece1e1 \"pubkey: Return tweaks from BIP32 derivation\"\r\n\r\nReconsider updating the commit description retouched, I can imagine future readers would want to know the intent of this commit, following up on https://github.com/bitcoin/bitcoin/pull/29675#issuecomment-3282694791",
      "created_at": "2025-09-29T13:17:34Z",
      "updated_at": "2025-09-29T16:57:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2387925458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2387925458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388637501",
      "pull_request_review_id": 3280838632,
      "id": 2388637501,
      "node_id": "PRRC_kwDOABII586OX7c9",
      "diff_hunk": "@@ -295,6 +296,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     //! Number of pre-generated keys/scripts (part of the look-ahead process, used to detect payments)\n     int64_t m_keypool_size GUARDED_BY(cs_desc_man){DEFAULT_KEYPOOL_SIZE};\n \n+    /** Map of a session id to MuSig2 secnonce\n+     *\n+     * Stores MuSig2 secnonces while the MuSig2 signing session is still ongoing.\n+     * Note that these secnonces must not be reused. In order to avoid being tricked into\n+     * reusing a nonce, this map is held only in memory and must not be written to disk.\n+     * The side effect is that signing sessions cannot persist across restarts, but this\n+     * must be done in order to prevent nonce reuse.\n+     *\n+     * The session id is an arbitrary value set by the signer in order for the signing logic\n+     * to find ongoing signing sessions. It is the SHA256 of aggregate xonly key, + participant pubkey + sighash.\n+     */\n+    // TODO: Check thread safety of this\n+    mutable std::map<uint256, MuSig2SecNonce> m_musig2_secnonces;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "original_commit_id": "184fbefab7d45db77d6c9acea279134d88101181",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this TODO still relevant? I'm planning to look more in-depth at c14a4bcbb1f84fb4776f43cbb918e7771164029b, but at least on a first rough glance I haven't discovered a scenario where it would be possible to run any of the three methods accessing this map (`FlatSigningProvider::{Set,Get}MuSig2SecNonce` and `FlatSigningProvider::DeleteMuSig2Session`) concurrently for the same `DescriptorScriptPubKeyMan`.",
      "created_at": "2025-09-29T16:58:43Z",
      "updated_at": "2025-09-29T16:58:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2388637501",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2388637501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 310,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2391539772",
      "pull_request_review_id": 3284917169,
      "id": 2391539772,
      "node_id": "PRRC_kwDOABII586OjAA8",
      "diff_hunk": "@@ -59,33 +59,43 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     return true;\n }\n \n-bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const\n+std::optional<uint256> MutableTransactionSignatureCreator::ComputeSchnorrSignatureHash(const uint256* leaf_hash, SigVersion sigversion) const\n {\n     assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n \n-    CKey key;\n-    if (!provider.GetKeyByXOnly(pubkey, key)) return false;\n-\n     // BIP341/BIP342 signing needs lots of precomputed transaction data. While some\n     // (non-SIGHASH_DEFAULT) sighash modes exist that can work with just some subset\n     // of data present, for now, only support signing when everything is provided.\n-    if (!m_txdata || !m_txdata->m_bip341_taproot_ready || !m_txdata->m_spent_outputs_ready) return false;\n+    if (!m_txdata || !m_txdata->m_bip341_taproot_ready || !m_txdata->m_spent_outputs_ready) return std::nullopt;\n \n     ScriptExecutionData execdata;\n     execdata.m_annex_init = true;\n     execdata.m_annex_present = false; // Only support annex-less signing for now.\n     if (sigversion == SigVersion::TAPSCRIPT) {\n         execdata.m_codeseparator_pos_init = true;\n         execdata.m_codeseparator_pos = 0xFFFFFFFF; // Only support non-OP_CODESEPARATOR BIP342 signing for now.\n-        if (!leaf_hash) return false; // BIP342 signing needs leaf hash.\n+        if (!leaf_hash) return std::nullopt; // BIP342 signing needs leaf hash.\n         execdata.m_tapleaf_hash_init = true;\n         execdata.m_tapleaf_hash = *leaf_hash;\n     }\n     uint256 hash;\n-    if (!SignatureHashSchnorr(hash, execdata, m_txto, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return false;\n+    if (!SignatureHashSchnorr(hash, execdata, m_txto, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return std::nullopt;\n+    return hash;\n+}\n+\n+bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);",
      "path": "src/script/sign.cpp",
      "position": 48,
      "original_position": 37,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "fb8720f1e09f4e41802f07be53fb220d6f6c127f",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Not sure if assert is needed in both places now, seems like keeping it in `ComputeSchnorrSignatureHash` might be enough.",
      "created_at": "2025-09-30T13:43:51Z",
      "updated_at": "2025-10-01T22:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2391539772",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2391539772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392113431",
      "pull_request_review_id": 3285717457,
      "id": 2392113431,
      "node_id": "PRRC_kwDOABII586OlMEX",
      "diff_hunk": "@@ -475,16 +573,28 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n             }\n         }\n \n-        std::vector<unsigned char> sig;\n-        if (sigdata.taproot_key_path_sig.size() == 0) {\n-            if (creator.CreateSchnorrSig(provider, sig, sigdata.tr_spenddata.internal_key, nullptr, &sigdata.tr_spenddata.merkle_root, SigVersion::TAPROOT)) {\n+        auto make_keypath_sig = [&](const XOnlyPubKey& pk, const uint256* merkle_root) {\n+            std::vector<unsigned char> sig;\n+            if (creator.CreateSchnorrSig(provider, sig, pk, nullptr, merkle_root, SigVersion::TAPROOT)) {\n                 sigdata.taproot_key_path_sig = sig;\n+            } else {\n+                // Lookup derivation paths for this key\n+                KeyOriginInfo info;\n+                auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(pk);\n+                if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+                    info = misc_pk_it->second.second;\n+                }\n+                SignMuSig2(creator, sigdata, provider, sig, info, pk, merkle_root, /*leaf_hash=*/nullptr, SigVersion::TAPROOT);",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 144,
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "original_commit_id": "c14a4bcbb1f84fb4776f43cbb918e7771164029b",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "potential refactoring idea: the derivation path lookup prior to calling `SignMuSig2` currently happens for both key- and script-path spending. Could it be moved inside of `SignMuSig2` in order to deduplicate (and also reduce the interface by one parameter, as the `KeyOriginInfo` object would be created inside)? Tried this here, and the tests still pass: https://github.com/theStack/bitcoin/commit/fc20504660aed9674ae27482fad885b5b9fe399f",
      "created_at": "2025-09-30T15:56:30Z",
      "updated_at": "2025-09-30T16:16:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2392113431",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392113431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 581,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 587,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392383472",
      "pull_request_review_id": 3286092472,
      "id": 2392383472,
      "node_id": "PRRC_kwDOABII586OmN_w",
      "diff_hunk": "@@ -349,6 +350,39 @@ KeyPair CKey::ComputeKeyPair(const uint256* merkle_root) const\n     return KeyPair(*this, merkle_root);\n }\n \n+std::vector<uint8_t> CKey::CreateMuSig2Nonce(MuSig2SecNonce& secnonce, const uint256& sighash, const CPubKey& aggregate_pubkey, const std::vector<CPubKey>& pubkeys)\n+{\n+    // Get the keyagg cache and aggregate pubkey\n+    secp256k1_musig_keyagg_cache keyagg_cache;\n+    if (!MuSig2AggregatePubkeys(pubkeys, keyagg_cache, aggregate_pubkey)) return {};\n+\n+    // Parse participant pubkey\n+    CPubKey our_pubkey = GetPubKey();\n+    secp256k1_pubkey pubkey;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_static, &pubkey, our_pubkey.data(), our_pubkey.size())) {\n+        return {};\n+    }\n+\n+    // Generate randomness for nonce\n+    uint256 rand;\n+    GetStrongRandBytes(rand);\n+\n+    // Generate nonce\n+    secp256k1_musig_pubnonce pubnonce;\n+    if (!secp256k1_musig_nonce_gen(secp256k1_context_sign, secnonce.Get(), &pubnonce, rand.data(), UCharCast(begin()), &pubkey, sighash.data(), &keyagg_cache, nullptr)) {\n+        return {};\n+    }\n+",
      "path": "src/key.cpp",
      "position": 106,
      "original_position": 34,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "793d727791fe042bbb4a9ff5df3db012a77a40fe",
      "in_reply_to_id": 2387893415,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it is necessary to check this, we can assume that libsecp is working correctly.",
      "created_at": "2025-09-30T17:45:41Z",
      "updated_at": "2025-09-30T17:45:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2392383472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392383472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 375,
      "original_line": 375,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392417001",
      "pull_request_review_id": 3286138034,
      "id": 2392417001,
      "node_id": "PRRC_kwDOABII586OmWLp",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO",
      "path": "test/functional/wallet_musig.py",
      "position": 123,
      "original_position": 123,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "in_reply_to_id": 2387919138,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> A more practical scenario would be where the `MuSig2` unspents are combined with non-MuSig2/Taproot unspents\r\n\r\nI don't think multisig inputs tend to be mixed with non-multisig inputs.\r\n\r\n> A  secondary reason is to avoid seeing `dec_psbt[\"inputs\"][0]` in several places.\r\n\r\nI prefer to have these tests check the input that we know is musig rather than searching for it dynamically.\r\n\r\n> Iterates all the test cases over `ALL|ANYONECANPAY` sighash type.\r\n\r\nThere's nothing special about `ALL|ANYONECANPAY` that it needs to be tested in all cases. We just need one test to use the non-default sighash type.",
      "created_at": "2025-09-30T18:00:31Z",
      "updated_at": "2025-09-30T18:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2392417001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392417001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392462021",
      "pull_request_review_id": 3286201679,
      "id": 2392462021,
      "node_id": "PRRC_kwDOABII586OmhLF",
      "diff_hunk": "",
      "path": "src/pubkey.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "2806f8152c751641257f3f1ab0d886d9c8ece1e1",
      "in_reply_to_id": 2387925458,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-30T18:19:53Z",
      "updated_at": "2025-09-30T18:19:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2392462021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392462021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392462361",
      "pull_request_review_id": 3286202064,
      "id": 2392462361,
      "node_id": "PRRC_kwDOABII586OmhQZ",
      "diff_hunk": "@@ -295,6 +296,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     //! Number of pre-generated keys/scripts (part of the look-ahead process, used to detect payments)\n     int64_t m_keypool_size GUARDED_BY(cs_desc_man){DEFAULT_KEYPOOL_SIZE};\n \n+    /** Map of a session id to MuSig2 secnonce\n+     *\n+     * Stores MuSig2 secnonces while the MuSig2 signing session is still ongoing.\n+     * Note that these secnonces must not be reused. In order to avoid being tricked into\n+     * reusing a nonce, this map is held only in memory and must not be written to disk.\n+     * The side effect is that signing sessions cannot persist across restarts, but this\n+     * must be done in order to prevent nonce reuse.\n+     *\n+     * The session id is an arbitrary value set by the signer in order for the signing logic\n+     * to find ongoing signing sessions. It is the SHA256 of aggregate xonly key, + participant pubkey + sighash.\n+     */\n+    // TODO: Check thread safety of this\n+    mutable std::map<uint256, MuSig2SecNonce> m_musig2_secnonces;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 1,
      "original_position": 24,
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "original_commit_id": "184fbefab7d45db77d6c9acea279134d88101181",
      "in_reply_to_id": 2388637501,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's no longer relevant, removed.",
      "created_at": "2025-09-30T18:20:03Z",
      "updated_at": "2025-09-30T18:20:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2392462361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392462361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 310,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392462540",
      "pull_request_review_id": 3286202292,
      "id": 2392462540,
      "node_id": "PRRC_kwDOABII586OmhTM",
      "diff_hunk": "@@ -475,16 +573,28 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n             }\n         }\n \n-        std::vector<unsigned char> sig;\n-        if (sigdata.taproot_key_path_sig.size() == 0) {\n-            if (creator.CreateSchnorrSig(provider, sig, sigdata.tr_spenddata.internal_key, nullptr, &sigdata.tr_spenddata.merkle_root, SigVersion::TAPROOT)) {\n+        auto make_keypath_sig = [&](const XOnlyPubKey& pk, const uint256* merkle_root) {\n+            std::vector<unsigned char> sig;\n+            if (creator.CreateSchnorrSig(provider, sig, pk, nullptr, merkle_root, SigVersion::TAPROOT)) {\n                 sigdata.taproot_key_path_sig = sig;\n+            } else {\n+                // Lookup derivation paths for this key\n+                KeyOriginInfo info;\n+                auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(pk);\n+                if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+                    info = misc_pk_it->second.second;\n+                }\n+                SignMuSig2(creator, sigdata, provider, sig, info, pk, merkle_root, /*leaf_hash=*/nullptr, SigVersion::TAPROOT);",
      "path": "src/script/sign.cpp",
      "position": 1,
      "original_position": 144,
      "commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "original_commit_id": "c14a4bcbb1f84fb4776f43cbb918e7771164029b",
      "in_reply_to_id": 2392113431,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-30T18:20:08Z",
      "updated_at": "2025-09-30T18:20:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2392462540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392462540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": 581,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 587,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392889562",
      "pull_request_review_id": 3284917169,
      "id": 2392889562,
      "node_id": "PRRC_kwDOABII586OoJja",
      "diff_hunk": "@@ -94,6 +109,26 @@ std::vector<CPubKey> FlatSigningProvider::GetMuSig2ParticipantPubkeys(const CPub\n     return participant_pubkeys;\n }\n \n+void FlatSigningProvider::SetMuSig2SecNonce(const uint256& session_id, MuSig2SecNonce&& nonce) const\n+{\n+    if (!Assume(musig2_secnonces)) return;\n+    musig2_secnonces->emplace(session_id, std::move(nonce));",
      "path": "src/script/signingprovider.cpp",
      "position": 39,
      "original_position": 29,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "4d8b4f53363f013ed3972997f0b05b9c19e9db9d",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this first check that no value exists already for this key? Otherwise, if the key wasn't deleted properly and session id is reused somehow, there will be no effect and this might lead to danger reusing the nonce? It's a bit far fetched but might be good as belt and suspenders.",
      "created_at": "2025-09-30T21:37:33Z",
      "updated_at": "2025-10-01T22:23:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2392889562",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2392889562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2393958445",
      "pull_request_review_id": 3288258652,
      "id": 2393958445,
      "node_id": "PRRC_kwDOABII586OsOgt",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1\n+                self.nodes[0].createwallet(wallet_name)\n+                wallet = self.nodes[0].get_wallet_rpc(wallet_name)\n+                wallets.append(wallet)\n+\n+                for priv_desc in wallet.listdescriptors(True)[\"descriptors\"]:\n+                    desc = priv_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    privkey = PRIVKEY_RE.search(desc).group(1)\n+                    break\n+                for pub_desc in wallet.listdescriptors()[\"descriptors\"]:\n+                    desc = pub_desc[\"desc\"]\n+                    if not desc.startswith(\"tr(\"):\n+                        continue\n+                    pubkey = PUBKEY_RE.search(desc).group(1)\n+                    # Since the pubkey is derived from the private key that we have, we need\n+                    # to extract and insert the origin path from the pubkey as well.\n+                    privkey += ORIGIN_PATH_RE.search(pubkey).group(1)\n+                    break\n+                keys.append((privkey, pubkey))\n+            if musig_partial_sigs is not None:\n+                expected_partial_sigs += musig_partial_sigs\n+\n+        # Construct and import each wallet's musig descriptor that\n+        # contains the private key from that wallet and pubkeys of the others\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            desc = pat\n+            import_descs = []\n+            for j, (priv, pub) in enumerate(keys):\n+                if j == i:\n+                    desc = desc.replace(f\"${i}\", priv)\n+                else:\n+                    desc = desc.replace(f\"${j}\", pub)\n+\n+            import_descs.append({\n+                \"desc\": descsum_create(desc),\n+                \"active\": True,\n+                \"timestamp\": \"now\",\n+            })\n+\n+            res = wallet.importdescriptors(import_descs)\n+            for r in res:\n+                assert_equal(r[\"success\"], True)\n+\n+        # Check that the wallets agree on the same musig address\n+        addr = None\n+        change_addr = None\n+        for i, wallet in enumerate(wallets):\n+            if only_one_musig_wallet and i > 0:\n+                continue\n+            if addr is None:\n+                addr = wallet.getnewaddress(address_type=\"bech32m\")\n+            else:\n+                assert_equal(addr, wallet.getnewaddress(address_type=\"bech32m\"))\n+            if has_internal:\n+                if change_addr is None:\n+                    change_addr = wallet.getrawchangeaddress(address_type=\"bech32m\")\n+                else:\n+                    assert_equal(change_addr, wallet.getrawchangeaddress(address_type=\"bech32m\"))\n+\n+        # Fund that address\n+        self.def_wallet.sendtoaddress(addr, 10)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spend that UTXO",
      "path": "test/functional/wallet_musig.py",
      "position": 123,
      "original_position": 123,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "36f83554a2dc5b397ee3b4495d8bf2aff36cedc6",
      "in_reply_to_id": 2387919138,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't think multisig inputs tend to be mixed with non-multisig inputs.\r\n\r\nAh, I should have rephrased the sentence to highlight spending multiple MuSig2 unspents in the PSBT instead of highlighting the other one.",
      "created_at": "2025-10-01T09:20:59Z",
      "updated_at": "2025-10-01T09:20:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2393958445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2393958445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395048854",
      "pull_request_review_id": 3284917169,
      "id": 2395048854,
      "node_id": "PRRC_kwDOABII586OwYuW",
      "diff_hunk": "@@ -265,6 +265,100 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Lookup derivation paths for the script pubkey\n+    KeyOriginInfo agg_info;\n+    auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(script_pubkey);\n+    if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+        agg_info = misc_pk_it->second.second;\n+    }\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), part_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        // The pubkey in the script may not be the actual aggregate of the participants, but derived from it.\n+        // Check the derivation, and compute the BIP 32 derivation tweaks\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.empty()) continue;\n+            // Compute and compare fingerprint\n+            CKeyID keyid = agg_pub.GetID();\n+            if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                continue;\n+            }\n+            // Get the BIP32 derivation tweaks\n+            CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+            for (const int i : agg_info.path) {\n+                auto& [t, xonly] = tweaks.emplace_back();\n+                xonly = false;\n+                if (!extpub.Derive(extpub, i, &t)) {\n+                    return false;\n+                }\n+            }\n+            Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+            plain_pub = extpub.pubkey;\n+        }\n+\n+        // Add the merkle root tweak\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\n+            tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = script_pubkey.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\n+            if (!Assume(tweaked)) return false;\n+            plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\n+        }\n+\n+        // First try to aggregate\n+        if (creator.CreateMuSig2AggregateSig(part_pks, sig_out, agg_pub, plain_pub, leaf_hash, tweaks, sigversion, sigdata)) {\n+            if (sigversion == SigVersion::TAPROOT) {\n+                sigdata.taproot_key_path_sig = sig_out;\n+            } else {\n+                auto lookup_key = std::make_pair(script_pubkey, leaf_hash ? *leaf_hash : uint256());\n+                sigdata.taproot_script_sigs[lookup_key] = sig_out;\n+            }\n+            continue;\n+        }\n+        // Cannot aggregate, try making partial sigs for every participant\n+        auto pub_key_leaf_hash = std::make_pair(plain_pub, leaf_hash ? *leaf_hash : uint256());\n+        for (const CPubKey& part_pk : part_pks) {\n+            uint256 partial_sig;\n+            if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, leaf_hash, tweaks, sigversion, sigdata) && Assume(!partial_sig.IsNull())) {\n+                sigdata.musig2_partial_sigs[pub_key_leaf_hash].emplace(part_pk, partial_sig);\n+            }\n+        }\n+        // If there are any partial signatures, exit early",
      "path": "src/script/sign.cpp",
      "position": 250,
      "original_position": 81,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I wouldn't call a `continue` exit early, I would expect to exit the whole function here then.",
      "created_at": "2025-10-01T15:36:53Z",
      "updated_at": "2025-10-01T22:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2395048854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395048854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 345,
      "original_line": 345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395059707",
      "pull_request_review_id": 3284917169,
      "id": 2395059707,
      "node_id": "PRRC_kwDOABII586OwbX7",
      "diff_hunk": "@@ -265,6 +265,100 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Lookup derivation paths for the script pubkey\n+    KeyOriginInfo agg_info;\n+    auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(script_pubkey);\n+    if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+        agg_info = misc_pk_it->second.second;\n+    }\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), part_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        // The pubkey in the script may not be the actual aggregate of the participants, but derived from it.\n+        // Check the derivation, and compute the BIP 32 derivation tweaks\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.empty()) continue;\n+            // Compute and compare fingerprint\n+            CKeyID keyid = agg_pub.GetID();\n+            if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                continue;\n+            }\n+            // Get the BIP32 derivation tweaks\n+            CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+            for (const int i : agg_info.path) {\n+                auto& [t, xonly] = tweaks.emplace_back();\n+                xonly = false;\n+                if (!extpub.Derive(extpub, i, &t)) {\n+                    return false;\n+                }\n+            }\n+            Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+            plain_pub = extpub.pubkey;\n+        }\n+\n+        // Add the merkle root tweak\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\n+            tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = script_pubkey.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\n+            if (!Assume(tweaked)) return false;\n+            plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\n+        }\n+\n+        // First try to aggregate\n+        if (creator.CreateMuSig2AggregateSig(part_pks, sig_out, agg_pub, plain_pub, leaf_hash, tweaks, sigversion, sigdata)) {\n+            if (sigversion == SigVersion::TAPROOT) {\n+                sigdata.taproot_key_path_sig = sig_out;\n+            } else {\n+                auto lookup_key = std::make_pair(script_pubkey, leaf_hash ? *leaf_hash : uint256());\n+                sigdata.taproot_script_sigs[lookup_key] = sig_out;\n+            }\n+            continue;\n+        }\n+        // Cannot aggregate, try making partial sigs for every participant\n+        auto pub_key_leaf_hash = std::make_pair(plain_pub, leaf_hash ? *leaf_hash : uint256());\n+        for (const CPubKey& part_pk : part_pks) {\n+            uint256 partial_sig;\n+            if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, leaf_hash, tweaks, sigversion, sigdata) && Assume(!partial_sig.IsNull())) {\n+                sigdata.musig2_partial_sigs[pub_key_leaf_hash].emplace(part_pk, partial_sig);\n+            }\n+        }\n+        // If there are any partial signatures, exit early\n+        auto partial_sigs_it = sigdata.musig2_partial_sigs.find(pub_key_leaf_hash);\n+        if (partial_sigs_it != sigdata.musig2_partial_sigs.end() && !partial_sigs_it->second.empty()) {\n+            continue;",
      "path": "src/script/sign.cpp",
      "position": 253,
      "original_position": 84,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Doesn't this mean that we can never recover from a situation where we have some partial sig but not all pubnonces? I guess this situation is prevented by the calling code but still, I would have expected here to rather check if any new partial sigs were added in the code above just now because that would imply the necessary pubnonce for that particular partial sig was available.",
      "created_at": "2025-10-01T15:40:32Z",
      "updated_at": "2025-10-01T22:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2395059707",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395059707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 348,
      "original_line": 348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395283294",
      "pull_request_review_id": 3290195368,
      "id": 2395283294,
      "node_id": "PRRC_kwDOABII586OxR9e",
      "diff_hunk": "@@ -51,3 +51,14 @@ std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkey\n     }\n     return GetCPubKeyFromMuSig2KeyAggCache(keyagg_cache);\n }\n+\n+CExtPubKey CreateMuSig2SyntheticXpub(const CPubKey& pubkey)\n+{\n+    CExtPubKey extpub;\n+    extpub.nDepth = 0;\n+    std::memset(extpub.vchFingerprint, 0, 4);\n+    extpub.nChild = 0;\n+    extpub.chaincode = MUSIG_CHAINCODE;",
      "path": "src/musig.cpp",
      "position": 50,
      "original_position": 11,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "f14876213aad0e67088b75cae24323db9f2576d8",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could move the MUSIG_CHAINCODE constant from the header to musig.cpp, as its only used there now",
      "created_at": "2025-10-01T17:07:12Z",
      "updated_at": "2025-10-01T17:55:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2395283294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395283294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395372134",
      "pull_request_review_id": 3290195368,
      "id": 2395372134,
      "node_id": "PRRC_kwDOABII586Oxnpm",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1",
      "path": "test/functional/wallet_musig.py",
      "position": 56,
      "original_position": 56,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: seems that this shouldn't be in upper-case, if it's not really a constant",
      "created_at": "2025-10-01T17:49:12Z",
      "updated_at": "2025-10-01T17:55:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2395372134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2395372134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396179351",
      "pull_request_review_id": 3291505228,
      "id": 2396179351,
      "node_id": "PRRC_kwDOABII586O0suX",
      "diff_hunk": "@@ -265,6 +265,100 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Lookup derivation paths for the script pubkey\n+    KeyOriginInfo agg_info;\n+    auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(script_pubkey);\n+    if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+        agg_info = misc_pk_it->second.second;\n+    }\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), part_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        // The pubkey in the script may not be the actual aggregate of the participants, but derived from it.\n+        // Check the derivation, and compute the BIP 32 derivation tweaks\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.empty()) continue;\n+            // Compute and compare fingerprint\n+            CKeyID keyid = agg_pub.GetID();\n+            if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                continue;\n+            }\n+            // Get the BIP32 derivation tweaks\n+            CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+            for (const int i : agg_info.path) {\n+                auto& [t, xonly] = tweaks.emplace_back();\n+                xonly = false;\n+                if (!extpub.Derive(extpub, i, &t)) {\n+                    return false;\n+                }\n+            }\n+            Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+            plain_pub = extpub.pubkey;\n+        }\n+\n+        // Add the merkle root tweak\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\n+            tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = script_pubkey.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\n+            if (!Assume(tweaked)) return false;\n+            plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\n+        }\n+\n+        // First try to aggregate\n+        if (creator.CreateMuSig2AggregateSig(part_pks, sig_out, agg_pub, plain_pub, leaf_hash, tweaks, sigversion, sigdata)) {\n+            if (sigversion == SigVersion::TAPROOT) {\n+                sigdata.taproot_key_path_sig = sig_out;\n+            } else {\n+                auto lookup_key = std::make_pair(script_pubkey, leaf_hash ? *leaf_hash : uint256());\n+                sigdata.taproot_script_sigs[lookup_key] = sig_out;\n+            }\n+            continue;\n+        }\n+        // Cannot aggregate, try making partial sigs for every participant\n+        auto pub_key_leaf_hash = std::make_pair(plain_pub, leaf_hash ? *leaf_hash : uint256());\n+        for (const CPubKey& part_pk : part_pks) {\n+            uint256 partial_sig;\n+            if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, leaf_hash, tweaks, sigversion, sigdata) && Assume(!partial_sig.IsNull())) {\n+                sigdata.musig2_partial_sigs[pub_key_leaf_hash].emplace(part_pk, partial_sig);\n+            }\n+        }\n+        // If there are any partial signatures, exit early\n+        auto partial_sigs_it = sigdata.musig2_partial_sigs.find(pub_key_leaf_hash);\n+        if (partial_sigs_it != sigdata.musig2_partial_sigs.end() && !partial_sigs_it->second.empty()) {\n+            continue;",
      "path": "src/script/sign.cpp",
      "position": 253,
      "original_position": 84,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6",
      "in_reply_to_id": 2395059707,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Having some partial sigs and not all pubnonces should be a contradiction. It is not possible to create a valid partial sig without all of the pubnonces. I think in that situation it is safer to do nothing rather than try to continue by adding a new pubnonce.",
      "created_at": "2025-10-01T23:15:13Z",
      "updated_at": "2025-10-01T23:15:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2396179351",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396179351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 348,
      "original_line": 348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403607077",
      "pull_request_review_id": 3301359818,
      "id": 2403607077,
      "node_id": "PRRC_kwDOABII586PRCIl",
      "diff_hunk": "@@ -51,3 +51,14 @@ std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkey\n     }\n     return GetCPubKeyFromMuSig2KeyAggCache(keyagg_cache);\n }\n+\n+CExtPubKey CreateMuSig2SyntheticXpub(const CPubKey& pubkey)\n+{\n+    CExtPubKey extpub;\n+    extpub.nDepth = 0;\n+    std::memset(extpub.vchFingerprint, 0, 4);\n+    extpub.nChild = 0;\n+    extpub.chaincode = MUSIG_CHAINCODE;",
      "path": "src/musig.cpp",
      "position": 50,
      "original_position": 11,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "f14876213aad0e67088b75cae24323db9f2576d8",
      "in_reply_to_id": 2395283294,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I need to retouch.",
      "created_at": "2025-10-04T00:18:21Z",
      "updated_at": "2025-10-04T00:18:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2403607077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403607077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403607122",
      "pull_request_review_id": 3301359869,
      "id": 2403607122,
      "node_id": "PRRC_kwDOABII586PRCJS",
      "diff_hunk": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import H_POINT\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+PRIVKEY_RE = re.compile(r\"^tr\\((.+?)/.+\\)#.{8}$\")\n+PUBKEY_RE = re.compile(r\"^tr\\((\\[.+?\\].+?)/.+\\)#.{8}$\")\n+ORIGIN_PATH_RE = re.compile(r\"^\\[\\w{8}(/.*)\\].*$\")\n+MULTIPATH_TWO_RE = re.compile(r\"<(\\d+);(\\d+)>\")\n+MUSIG_RE = re.compile(r\"musig\\((.*?)\\)\")\n+PLACEHOLDER_RE = re.compile(r\"\\$\\d\")\n+\n+class WalletMuSigTest(BitcoinTestFramework):\n+    WALLET_NUM = 0\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def do_test(self, comment, pattern, sighash_type=None, scriptpath=False, nosign_wallets=None, only_one_musig_wallet=False):\n+        self.log.info(f\"Testing {comment}\")\n+        has_internal = MULTIPATH_TWO_RE.search(pattern) is not None\n+\n+        wallets = []\n+        keys = []\n+\n+        pat = pattern.replace(\"$H\", H_POINT)\n+\n+        # Figure out how many wallets are needed and create them\n+        expected_pubnonces = 0\n+        expected_partial_sigs = 0\n+        for musig in MUSIG_RE.findall(pat):\n+            musig_partial_sigs = 0\n+            for placeholder in PLACEHOLDER_RE.findall(musig):\n+                wallet_index = int(placeholder[1:])\n+                if nosign_wallets is None or wallet_index not in nosign_wallets:\n+                    expected_pubnonces += 1\n+                else:\n+                    musig_partial_sigs = None\n+                if musig_partial_sigs is not None:\n+                    musig_partial_sigs += 1\n+                if wallet_index < len(wallets):\n+                    continue\n+                wallet_name = f\"musig_{self.WALLET_NUM}\"\n+                self.WALLET_NUM += 1",
      "path": "test/functional/wallet_musig.py",
      "position": 56,
      "original_position": 56,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "in_reply_to_id": 2395372134,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I need to retouch.",
      "created_at": "2025-10-04T00:18:25Z",
      "updated_at": "2025-10-04T00:18:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2403607122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403607122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403607163",
      "pull_request_review_id": 3301359921,
      "id": 2403607163,
      "node_id": "PRRC_kwDOABII586PRCJ7",
      "diff_hunk": "@@ -59,33 +59,43 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     return true;\n }\n \n-bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const\n+std::optional<uint256> MutableTransactionSignatureCreator::ComputeSchnorrSignatureHash(const uint256* leaf_hash, SigVersion sigversion) const\n {\n     assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n \n-    CKey key;\n-    if (!provider.GetKeyByXOnly(pubkey, key)) return false;\n-\n     // BIP341/BIP342 signing needs lots of precomputed transaction data. While some\n     // (non-SIGHASH_DEFAULT) sighash modes exist that can work with just some subset\n     // of data present, for now, only support signing when everything is provided.\n-    if (!m_txdata || !m_txdata->m_bip341_taproot_ready || !m_txdata->m_spent_outputs_ready) return false;\n+    if (!m_txdata || !m_txdata->m_bip341_taproot_ready || !m_txdata->m_spent_outputs_ready) return std::nullopt;\n \n     ScriptExecutionData execdata;\n     execdata.m_annex_init = true;\n     execdata.m_annex_present = false; // Only support annex-less signing for now.\n     if (sigversion == SigVersion::TAPSCRIPT) {\n         execdata.m_codeseparator_pos_init = true;\n         execdata.m_codeseparator_pos = 0xFFFFFFFF; // Only support non-OP_CODESEPARATOR BIP342 signing for now.\n-        if (!leaf_hash) return false; // BIP342 signing needs leaf hash.\n+        if (!leaf_hash) return std::nullopt; // BIP342 signing needs leaf hash.\n         execdata.m_tapleaf_hash_init = true;\n         execdata.m_tapleaf_hash = *leaf_hash;\n     }\n     uint256 hash;\n-    if (!SignatureHashSchnorr(hash, execdata, m_txto, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return false;\n+    if (!SignatureHashSchnorr(hash, execdata, m_txto, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return std::nullopt;\n+    return hash;\n+}\n+\n+bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);",
      "path": "src/script/sign.cpp",
      "position": 48,
      "original_position": 37,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "fb8720f1e09f4e41802f07be53fb220d6f6c127f",
      "in_reply_to_id": 2391539772,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I need to retouch.",
      "created_at": "2025-10-04T00:18:31Z",
      "updated_at": "2025-10-04T00:18:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2403607163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403607163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403610047",
      "pull_request_review_id": 3301363862,
      "id": 2403610047,
      "node_id": "PRRC_kwDOABII586PRC2_",
      "diff_hunk": "@@ -94,6 +109,26 @@ std::vector<CPubKey> FlatSigningProvider::GetMuSig2ParticipantPubkeys(const CPub\n     return participant_pubkeys;\n }\n \n+void FlatSigningProvider::SetMuSig2SecNonce(const uint256& session_id, MuSig2SecNonce&& nonce) const\n+{\n+    if (!Assume(musig2_secnonces)) return;\n+    musig2_secnonces->emplace(session_id, std::move(nonce));",
      "path": "src/script/signingprovider.cpp",
      "position": 39,
      "original_position": 29,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "4d8b4f53363f013ed3972997f0b05b9c19e9db9d",
      "in_reply_to_id": 2392889562,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it's fine as is but can change if I need to retouch.",
      "created_at": "2025-10-04T00:22:57Z",
      "updated_at": "2025-10-04T00:22:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2403610047",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403610047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403610180",
      "pull_request_review_id": 3301364128,
      "id": 2403610180,
      "node_id": "PRRC_kwDOABII586PRC5E",
      "diff_hunk": "@@ -265,6 +265,100 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool SignMuSig2(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const XOnlyPubKey& script_pubkey, const uint256* merkle_root, const uint256* leaf_hash, SigVersion sigversion)\n+{\n+    Assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    // Lookup derivation paths for the script pubkey\n+    KeyOriginInfo agg_info;\n+    auto misc_pk_it = sigdata.taproot_misc_pubkeys.find(script_pubkey);\n+    if (misc_pk_it != sigdata.taproot_misc_pubkeys.end()) {\n+        agg_info = misc_pk_it->second.second;\n+    }\n+\n+    for (const auto& [agg_pub, part_pks] : sigdata.musig2_pubkeys) {\n+        if (part_pks.empty()) continue;\n+\n+        // Fill participant derivation path info\n+        for (const auto& part_pk : part_pks) {\n+            KeyOriginInfo part_info;\n+            if (provider.GetKeyOrigin(part_pk.GetID(), part_info)) {\n+                XOnlyPubKey xonly_part(part_pk);\n+                auto it = sigdata.taproot_misc_pubkeys.find(xonly_part);\n+                if (it == sigdata.taproot_misc_pubkeys.end()) {\n+                    it = sigdata.taproot_misc_pubkeys.emplace(xonly_part, std::make_pair(std::set<uint256>(), part_info)).first;\n+                }\n+                if (leaf_hash) it->second.first.insert(*leaf_hash);\n+            }\n+        }\n+\n+        // The pubkey in the script may not be the actual aggregate of the participants, but derived from it.\n+        // Check the derivation, and compute the BIP 32 derivation tweaks\n+        std::vector<std::pair<uint256, bool>> tweaks;\n+        CPubKey plain_pub = agg_pub;\n+        if (XOnlyPubKey(agg_pub) != script_pubkey) {\n+            if (agg_info.path.empty()) continue;\n+            // Compute and compare fingerprint\n+            CKeyID keyid = agg_pub.GetID();\n+            if (!std::equal(agg_info.fingerprint, agg_info.fingerprint + sizeof(agg_info.fingerprint), keyid.data())) {\n+                continue;\n+            }\n+            // Get the BIP32 derivation tweaks\n+            CExtPubKey extpub = CreateMuSig2SyntheticXpub(agg_pub);\n+            for (const int i : agg_info.path) {\n+                auto& [t, xonly] = tweaks.emplace_back();\n+                xonly = false;\n+                if (!extpub.Derive(extpub, i, &t)) {\n+                    return false;\n+                }\n+            }\n+            Assert(XOnlyPubKey(extpub.pubkey) == script_pubkey);\n+            plain_pub = extpub.pubkey;\n+        }\n+\n+        // Add the merkle root tweak\n+        if (sigversion == SigVersion::TAPROOT && merkle_root) {\n+            tweaks.emplace_back(script_pubkey.ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root), true);\n+            std::optional<std::pair<XOnlyPubKey, bool>> tweaked = script_pubkey.CreateTapTweak(merkle_root->IsNull() ? nullptr : merkle_root);\n+            if (!Assume(tweaked)) return false;\n+            plain_pub = tweaked->first.GetCPubKeys().at(tweaked->second ? 1 : 0);\n+        }\n+\n+        // First try to aggregate\n+        if (creator.CreateMuSig2AggregateSig(part_pks, sig_out, agg_pub, plain_pub, leaf_hash, tweaks, sigversion, sigdata)) {\n+            if (sigversion == SigVersion::TAPROOT) {\n+                sigdata.taproot_key_path_sig = sig_out;\n+            } else {\n+                auto lookup_key = std::make_pair(script_pubkey, leaf_hash ? *leaf_hash : uint256());\n+                sigdata.taproot_script_sigs[lookup_key] = sig_out;\n+            }\n+            continue;\n+        }\n+        // Cannot aggregate, try making partial sigs for every participant\n+        auto pub_key_leaf_hash = std::make_pair(plain_pub, leaf_hash ? *leaf_hash : uint256());\n+        for (const CPubKey& part_pk : part_pks) {\n+            uint256 partial_sig;\n+            if (creator.CreateMuSig2PartialSig(provider, partial_sig, agg_pub, plain_pub, part_pk, leaf_hash, tweaks, sigversion, sigdata) && Assume(!partial_sig.IsNull())) {\n+                sigdata.musig2_partial_sigs[pub_key_leaf_hash].emplace(part_pk, partial_sig);\n+            }\n+        }\n+        // If there are any partial signatures, exit early",
      "path": "src/script/sign.cpp",
      "position": 250,
      "original_position": 81,
      "commit_id": "ac599c4a9cb3b2d424932d3fd91f9eed17426827",
      "original_commit_id": "4a273edda0ec10f0c5ae5d94b9925fa334d1c6e6",
      "in_reply_to_id": 2395048854,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I need to retouch.",
      "created_at": "2025-10-04T00:23:16Z",
      "updated_at": "2025-10-04T00:23:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29675#discussion_r2403610180",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2403610180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29675"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 345,
      "original_line": 345,
      "side": "RIGHT"
    }
  ]
}
{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336",
    "id": 2807039305,
    "node_id": "PR_kwDOABII586nUAVJ",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33336",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33336.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33336.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/45bd8914658a675d00aa9c83373d6903a8a9ece8",
    "number": 33336,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "log: print every script verification state change",
    "user": {
      "login": "l0rinc",
      "id": 1841944,
      "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l0rinc",
      "html_url": "https://github.com/l0rinc",
      "followers_url": "https://api.github.com/users/l0rinc/followers",
      "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
      "organizations_url": "https://api.github.com/users/l0rinc/orgs",
      "repos_url": "https://api.github.com/users/l0rinc/repos",
      "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/l0rinc/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "### Summary\r\n\r\nUsers can encounter cases where script checks are unexpectedly enabled (e.g. after reindex, or when `assumevalid`/`minimumchainwork` gates fail). Without an explicit line, they must infer state from the absence of a message, which is incomplete and error-prone. \r\nThe existing \"Assuming ancestors of block â€¦\" line does not reliably indicate whether script checks are actually enabled, which makes debugging/benchmarking confusing.\r\n\r\n### What this changes\r\n\r\nWe make the initial **script-verification** state explicit and log **why** checks are enabled to avoid confusion.\r\n* Always log the first script-verification state on startup, **before** the first `UpdateTip`.\r\n* Flatten the nested `assumevalid` conditionals into a linear gating sequence for readability.\r\n* Extend the functional test to assert the old behavior with the new reason strings.\r\n\r\nThis is a **logging-only** test change it shouldn't change any other behavior.\r\n\r\n### Example output\r\n\r\nThe state (with reason) is logged at startup and whenever the reason changes, e.g.:\r\n\r\n* `Disabling script verification at block #904336 (000000000000000000014106b2082b1a18aaf3091e8b337c6fed110db8c56620).`\r\n* `Enabling script verification at block #912527 (000000000000000000010bb6aa3ecabd7d41738463b6c6621776c2e40dbe738a): block too recent relative to best header.`\r\n* `Enabling script verification at block #912684 (00000000000000000001375cf7b90b2b86e559d05ed92ca764d376702ead3858): block height above assumevalid height.`\r\n\r\n------\r\n\r\nFollow-up to https://github.com/bitcoin/bitcoin/pull/32975#discussion_r2329269037",
    "labels": [
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "created_at": "2025-09-08T06:40:46Z",
    "updated_at": "2025-10-24T18:05:57Z",
    "closed_at": "2025-10-24T18:00:54Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2025-10-24T18:00:53Z",
    "merged_by": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "0eb554728ca97a53db187c5d15dcd1a4404c3197",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "l0rinc:l0rinc/log-initial-signature-verification-state",
      "ref": "l0rinc/log-initial-signature-verification-state",
      "sha": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 674169038,
        "node_id": "R_kgDOKC8Azg",
        "name": "bitcoin",
        "full_name": "l0rinc/bitcoin",
        "owner": {
          "login": "l0rinc",
          "id": 1841944,
          "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/l0rinc",
          "html_url": "https://github.com/l0rinc",
          "followers_url": "https://api.github.com/users/l0rinc/followers",
          "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
          "organizations_url": "https://api.github.com/users/l0rinc/orgs",
          "repos_url": "https://api.github.com/users/l0rinc/repos",
          "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/l0rinc/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/l0rinc/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/l0rinc/bitcoin",
        "archive_url": "https://api.github.com/repos/l0rinc/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/l0rinc/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/l0rinc/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/l0rinc/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/l0rinc/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/l0rinc/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/l0rinc/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/l0rinc/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/l0rinc/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/l0rinc/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/l0rinc/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/l0rinc/bitcoin/events",
        "forks_url": "https://api.github.com/repos/l0rinc/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/l0rinc/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/l0rinc/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/l0rinc/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/l0rinc/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/l0rinc/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/l0rinc/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/l0rinc/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/l0rinc/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/l0rinc/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/l0rinc/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/l0rinc/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/l0rinc/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/l0rinc/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/l0rinc/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:l0rinc/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/l0rinc/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/l0rinc/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/l0rinc/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/l0rinc/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/l0rinc/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/l0rinc/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/l0rinc/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/l0rinc/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/l0rinc/bitcoin/hooks",
        "svn_url": "https://github.com/l0rinc/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 274618,
        "default_branch": "master",
        "open_issues_count": 12,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-24T18:04:44Z",
        "created_at": "2023-08-03T09:49:12Z",
        "updated_at": "2025-10-22T15:57:00Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "75353a016357f3ed0d2178f8432dfe495df4aa62",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 38075,
        "stargazers_count": 86389,
        "watchers_count": 86389,
        "size": 295223,
        "default_branch": "master",
        "open_issues_count": 741,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-24T18:43:53Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-10-24T18:44:02Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 152,
    "deletions": 52,
    "changed_files": 3,
    "commits": 6,
    "review_comments": 117,
    "comments": 14
  },
  "events": [
    {
      "event": "labeled",
      "id": 19556946535,
      "node_id": "LE_lADOABII587KOpPqzwAAAASNr1Jn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19556946535",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-08T06:40:50Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 3264828268,
      "node_id": "IC_kwDOABII587CmVNs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3264828268",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-08T06:40:52Z",
      "updated_at": "2025-10-24T17:33:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33336.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [hodlinator](https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3292830294), [Eunovo](https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3360275363), [yuvicc](https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3297532271), [andrewtoth](https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3302015530), [ajtowns](https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3369808963), [achow101](https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3444209034) |\n| Approach ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3302633627) |\n| Stale ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3255852704) |\n\nIf your review is incorrectly listed, please react with ðŸ‘Ž to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31615](https://github.com/bitcoin/bitcoin/pull/31615) (validation: ensure assumevalid is always used during reindex by Eunovo)\n* [#30214](https://github.com/bitcoin/bitcoin/pull/30214) (refactor: Improve assumeutxo state representation by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3264828268",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "renamed",
      "id": 19557380669,
      "node_id": "RTE_lADOABII587KOpPqzwAAAASNtfI9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19557380669",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-08T07:07:38Z",
      "rename": {
        "from": "validation: log initial signature verification state",
        "to": "log: always print initial signature verification state"
      }
    },
    {
      "event": "reviewed",
      "id": 3195377066,
      "node_id": "PRR_kwDOABII586-dZWq",
      "url": null,
      "actor": null,
      "commit_id": "64ba2821b5a55aa6d51fbb7a16470d4f7c41c92e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-08T07:54:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. \r\n\r\nThe approach of switching to `std::optional<bool>` here avoids the overhead of atomic operations relying on `cs_main` for synchronization makes sense. \r\n\r\n<details> <summary>Initial script verification state is always logged without unnecessary complexity.</summary>\r\n\r\n```bash\r\n2025-09-08T07:43:58Z Disabling signature validations at block #16893 (00000000113c355415c3417c734a45b62790b91b41ff08028580254c584f5ea8).\r\n```\r\n\r\n</details>",
      "user": {
        "login": "yuvicc",
        "id": 92994932,
        "node_id": "U_kgDOBYr9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92994932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yuvicc",
        "html_url": "https://github.com/yuvicc",
        "followers_url": "https://api.github.com/users/yuvicc/followers",
        "following_url": "https://api.github.com/users/yuvicc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yuvicc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yuvicc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yuvicc/subscriptions",
        "organizations_url": "https://api.github.com/users/yuvicc/orgs",
        "repos_url": "https://api.github.com/users/yuvicc/repos",
        "events_url": "https://api.github.com/users/yuvicc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yuvicc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3195377066",
      "submitted_at": "2025-09-08T07:54:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "commented",
      "id": 3273277122,
      "node_id": "IC_kwDOABII587DGj7C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3273277122",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T04:28:14Z",
      "updated_at": "2025-09-10T04:28:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "For more context, even just restarting the node that was reindexed before (and is at around 200k blocks) with `-assumevalid=0000000000000000000087564caa77e7b3f29d0464256c04d5539e43663f8698` (block 914005), it still starts with signature verification enabled - using 70% of CPU when it should have been disabled in the first place, see:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e6094caf-c0d3-40dd-8edd-92cbe76c3d81\" />\r\nThis PR makes it at least obvious that something's off.\r\nhttps://github.com/bitcoin/bitcoin/pull/31615#issuecomment-3273275956 doesn't seem to fix the issue, but that's orthogonal with at least making it obvious via the logs.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3273277122",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "reviewed",
      "id": 3205338975,
      "node_id": "PRR_kwDOABII586_DZdf",
      "url": null,
      "actor": null,
      "commit_id": "64ba2821b5a55aa6d51fbb7a16470d4f7c41c92e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-10T09:39:57Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3205338975",
      "submitted_at": "2025-09-10T09:39:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19619092218,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASRY5b6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19619092218",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "75688eb05619073af7017c124d422089f5440b34",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/75688eb05619073af7017c124d422089f5440b34",
      "created_at": "2025-09-10T18:24:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19619171473,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASRZMyR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19619171473",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8cb75ee0a63880b55ac695fe884748aa7d604c38",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/8cb75ee0a63880b55ac695fe884748aa7d604c38",
      "created_at": "2025-09-10T18:28:17Z"
    },
    {
      "event": "reviewed",
      "id": 3207641440,
      "node_id": "PRR_kwDOABII586_MLlg",
      "url": null,
      "actor": null,
      "commit_id": "8cb75ee0a63880b55ac695fe884748aa7d604c38",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-10T20:26:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 8cb75ee0a63880b55ac695fe884748aa7d604c38\r\n\r\nWhile it is unsettling that we don't fully understand what causes script checking to occur prior to the assumevalid height (https://github.com/bitcoin/bitcoin/pull/32975#discussion_r2329269037) - having an initial \"`Enabling signature validations at block #1 ...`\" in `-assumevalid=0` cases as per this PR seems fine regardless.\r\n\r\n(Empty `std::optional` does not match `bool fScriptChecks` until set).\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/8cb75ee0a63880b55ac695fe884748aa7d604c38/src/validation.cpp#L2566-L2569\r\n\r\n(Memory behavior when locking/unlocking a mutex (`cs_main`) does AFAIK imply `atomic_` on master was never necessary).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3207641440",
      "submitted_at": "2025-09-10T20:26:57Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 19621172638,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASRg1We",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19621172638",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T20:27:01Z",
      "requested_reviewer": {
        "login": "yuvicc",
        "id": 92994932,
        "node_id": "U_kgDOBYr9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92994932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yuvicc",
        "html_url": "https://github.com/yuvicc",
        "followers_url": "https://api.github.com/users/yuvicc/followers",
        "following_url": "https://api.github.com/users/yuvicc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yuvicc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yuvicc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yuvicc/subscriptions",
        "organizations_url": "https://api.github.com/users/yuvicc/orgs",
        "repos_url": "https://api.github.com/users/yuvicc/repos",
        "events_url": "https://api.github.com/users/yuvicc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yuvicc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3207912876,
      "node_id": "PRR_kwDOABII586_NN2s",
      "url": null,
      "actor": null,
      "commit_id": "8cb75ee0a63880b55ac695fe884748aa7d604c38",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-10T21:33:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 8cb75ee0a63880b55ac695fe884748aa7d604c38\r\n\r\nThe log message is a bit clunky though. Since it now appears on startup I think it would be nice if it also mentioned that this just reflects assumevalid.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3207912876",
      "submitted_at": "2025-09-10T21:33:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "commented",
      "id": 3276630793,
      "node_id": "IC_kwDOABII587DTWsJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3276630793",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T21:36:14Z",
      "updated_at": "2025-09-10T21:36:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "> that this just reflects assumevalid\r\n\r\nUnfortunately it's more complicated than that, see https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3273277122\r\nIf you have a concrete suggestion for how to rephrase it, I don't mind applying it.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3276630793",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19622267424,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASRlAog",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19622267424",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "39f41135c764c6c4705ce2cd36781ca8d43f0114",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/39f41135c764c6c4705ce2cd36781ca8d43f0114",
      "created_at": "2025-09-10T21:36:39Z"
    },
    {
      "event": "commented",
      "id": 3277968407,
      "node_id": "IC_kwDOABII587DYdQX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3277968407",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T05:38:59Z",
      "updated_at": "2025-09-11T05:38:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have instrumented the code, ran some RPC commands and reindexed the whole thing again to see why script verification is always on.\r\nAfter some discussions with @ajtowns it turns out I needed both `-assumevalid=<in-range header>` and `-minimumchainwork=0` to be able to disable script verification.\r\n\r\n---\r\n\r\nAfter `reindex`, my node has ~841k headers, a lot lower than the current tip of ~914k.\r\nThe default `assumevalid` block (height 912,683) is in that missing range, so the header lookup fails since the block isn't found in the block index (even though the log claims \"Assuming ancestors of block ... have valid signatures\").\r\nEven when I set a custom `assumevalid` to a block I actually have, my `chainwork` is still below the bumped `nMinimumChainWork` from [755152ac](https://github.com/bitcoin/bitcoin/blob/755152ac819a23acf2f9e70316134d74a04d589b/src/kernel/chainparams.cpp#L121-L122).\r\n\r\nSo the results were:\r\n* **Default params:** `./build/bin/bitcoind` - `script verification` enabled since block is not among the `headers`\r\n* **Custom `assumevalid` from the `headers` (841,149):** `./build/bin/bitcoind -assumevalid=00000000000000000000529087e51068a98d16a071401d7d43494c4a3bf75cd6` - `script verification` still enabled. Header lookup works fine, but my `chainwork` (`769fbaeb...`) is below the required minimum (`dee8e2a3...`).\r\n* **Default `assumevalid` with low `chainwork`:** `./build/bin/bitcoind -minimumchainwork=0` - still doesn't work because it falls back to the default `assumevalid` which isn't in my `headers`.\r\n* **Custom `assumevalid` with low `chainwork`:** `./build/bin/bitcoind -assumevalid=00000000000000000000529087e51068a98d16a071401d7d43494c4a3bf75cd6 -minimumchainwork=0` - script verification finally gets disabled.\r\n\r\n---\r\n\r\nSo maybe we should update the logs to give the reason for the script verification more precisely: script verification is enabled because the `assumevalid` block cannot be found / the available `nChainWork` isn't sufficient / the blocks are too close to the current tip.\r\n\r\nThe early \"Assuming ancestors of block â€¦\" line is emitted even when that header is not present locally yet - maybe we should adjust this, too.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3277968407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "mentioned",
      "id": 19627077990,
      "node_id": "MEE_lADOABII587KOpPqzwAAAASR3XFm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19627077990",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T05:39:00Z"
    },
    {
      "event": "subscribed",
      "id": 19627078013,
      "node_id": "SE_lADOABII587KOpPqzwAAAASR3XF9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19627078013",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T05:39:00Z"
    },
    {
      "event": "commented",
      "id": 3278199407,
      "node_id": "IC_kwDOABII587DZVpv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3278199407",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T06:04:32Z",
      "updated_at": "2025-09-11T06:06:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "> After `reindex`, my node has ~841k headers, a lot lower than the current tip of ~914k.\r\n> The default `assumevalid` block (height 912,683) is in that missing range,\r\n\r\nI think the behaviour here is probably fine -- it's a weak way of preventing you from triggering assumevalid behaviour on an invalid chain with substantially lower total work than the main chain. It might be nice to have a warning that your headers chain doesn't meet minchainwork though. It would probably be nicer to be able to obtain the missing headers though.\r\n\r\nEDIT: probably fine, compared to the alternative of dropping the `best_header->nChainWork >= MinimumChainWork` check, and just relying on the assumevalid block being in the best_header's ancestry. That didn't seem to have much rationale when it was introduced afaics: https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272469033",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3278199407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "reviewed",
      "id": 3209275659,
      "node_id": "PRR_kwDOABII586_SakL",
      "url": null,
      "actor": null,
      "commit_id": "39f41135c764c6c4705ce2cd36781ca8d43f0114",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-11T06:55:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nUsing `std::optional<bool>` introduces a third state (unset), which guarantees exactly one initial log messageâ€”regardless of whether the first real value is true or false.\r\n\r\nFor reviewers, hereâ€™s a simple way to verify the behavior change:\r\n\r\n```\r\nmkdir temp_data_dir\r\n./build/bin/bitcoind -regtest -datadir=temp_data_dir -daemon\r\n./build/bin/bitcoin-cli -regtest -datadir=temp_data_dir createwallet w\r\n./build/bin/bitcoin-cli -regtest -datadir=temp_data_dir getnewaddress\r\n./build/bin/bitcoin-cli -regtest -datadir=temp_data_dir generatetoaddress 1 <address>\r\n```\r\n\r\nWith this PR, the logs will include:\r\n```\r\nEnabling signature validations at block #1\r\n```\r\nIn master, this line does not appear.\r\n",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3209275659",
      "submitted_at": "2025-09-11T06:55:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3209656734,
      "node_id": "PRR_kwDOABII586_T3me",
      "url": null,
      "actor": null,
      "commit_id": "39f41135c764c6c4705ce2cd36781ca8d43f0114",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-11T08:02:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/33336/commits/39f41135c764c6c4705ce2cd36781ca8d43f0114:\r\n\r\nPreviously, users could only verify that script checks were enabled by confirming the absence of a \"Disabling signature validations at block #1\" message in the logs, which is a confusing negative confirmation pattern.\r\nThis PR adds explicit positive feedback by ensuring an \"Enabling signature validations at block #1\" message appears when script checks are enabled, making the system state clearer and easier to verify. ",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3209656734",
      "submitted_at": "2025-09-11T08:02:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 19629863963,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASSB_Qb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19629863963",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T08:02:46Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19629864755,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASSB_cz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19629864755",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T08:02:47Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19629865255,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASSB_kn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19629865255",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T08:02:49Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3279099513,
      "node_id": "IC_kwDOABII587DcxZ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3279099513",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T08:15:11Z",
      "updated_at": "2025-09-11T08:15:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "> After `reindex`, my node has ~841k headers, a lot lower than the current tip of ~914k. The default `assumevalid` block (height 912,683) is in that missing range, so the header lookup fails since the block isn't found in the block index (even though the log claims \"Assuming ancestors of block ... have valid signatures\"). Even when I set a custom `assumevalid` to a block I actually have, my `chainwork` is still below the bumped `nMinimumChainWork` from [755152ac](https://github.com/bitcoin/bitcoin/blob/755152ac819a23acf2f9e70316134d74a04d589b/src/kernel/chainparams.cpp#L121-L122).\r\n\r\nIt's surprising that https://github.com/bitcoin/bitcoin/pull/31615 didn't help with this. If the block wasn't found in the index, it's supposed to skip script checks while reindexing. If the block was found in the index, it will skip the `MinimumChainwork` check. The only reason why script checks will not get skipped is if the chosen assumed valid block is in the index and it is less than 2 weeks away from the tip of the chain, due to this line\r\n`fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);`",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3279099513",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "reviewed",
      "id": 3209753464,
      "node_id": "PRR_kwDOABII586_UPN4",
      "url": null,
      "actor": null,
      "commit_id": "39f41135c764c6c4705ce2cd36781ca8d43f0114",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-11T08:18:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 39f41135c764c6c4705ce2cd36781ca8d43f0114\r\n\r\nOnly made test less racy (https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2337774261) since the first ACK.\r\n\r\n---\r\n\r\n> > After `reindex`, my node has ~841k headers, a lot lower than the current tip of ~914k.\r\n> > The default `assumevalid` block (height 912,683) is in that missing range, [would say: is outside that range]\r\n> \r\n> I think the behaviour here is probably fine -- it's a weak way of preventing you from triggering assumevalid behaviour on an invalid chain with substantially lower total work than the main chain. It might be nice to have a warning that your headers chain doesn't meet minchainwork though. It would probably be nicer to be able to obtain the missing headers though.\r\n> \r\n> EDIT: probably fine, compared to the alternative of dropping the `best_header->nChainWork >= MinimumChainWork` check, and just relying on the assumevalid block being in the best_header's ancestry. That didn't seem to have much rationale when it was introduced afaics: [#9484 (comment)](https://github.com/bitcoin/bitcoin/pull/9484#issuecomment-272469033)\r\n\r\n(Bottom of https://github.com/bitcoin/bitcoin/pull/9484/commits/e440ac7ef3b6f3ad1cd8fc7027cece40413202d9 is interesting, enforcing script validation within the last 2 weeks regardless of assumevalid settings. It's annoying that the current default assume valid block height of 912'683 is ~10 days ago, but shouldn't matter much).\r\n\r\nI would hope this condition kicked in and filled in the missing headers from 841k to the `nMinimumChainWork` at 912'683 so that the best header could be updated and script validation could be turned off again until the last 2 weeks of blocks:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/39f41135c764c6c4705ce2cd36781ca8d43f0114/src/net_processing.cpp#L5526-L5539\r\n\r\nAny clue to why missing headers are not being fetched / best header isn't updated?",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3209753464",
      "submitted_at": "2025-09-11T08:18:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "milestoned",
      "id": 19641939653,
      "node_id": "MIE_lADOABII587KOpPqzwAAAASSwDbF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19641939653",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-11T16:22:58Z",
      "milestone": {
        "title": "30.0"
      }
    },
    {
      "event": "reviewed",
      "id": 3214063456,
      "node_id": "PRR_kwDOABII586_krdg",
      "url": null,
      "actor": null,
      "commit_id": "39f41135c764c6c4705ce2cd36781ca8d43f0114",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-12T00:11:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/33336/commits/39f41135c764c6c4705ce2cd36781ca8d43f0114\r\n\r\nSimple test on mainnet:\r\n```\r\n./build/bin/bitcoind -datadir=new_data_dir/ -assumevalid=000000009b7262315dbf071787ad3656097b892abffd1f95a1a022f896f533fc -stopatheight=10\r\n```",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3214063456",
      "submitted_at": "2025-09-12T00:11:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "commented",
      "id": 3289052254,
      "node_id": "IC_kwDOABII587ECvRe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3289052254",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:12:58Z",
      "updated_at": "2025-09-14T23:02:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "> It might be nice to have a warning that your headers chain doesn't meet minchainwork though\r\n\r\nGiven how confusing https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3277968407 was for many of us, it may be beneficial to extend this PR to show the reason for why script verification was enabled.\r\n\r\nGiven the number of acks and time constraints, I have to ask @yuvicc, @Eunovo, @hodlinator, @TheCharlatan, @ajtowns, @w0xlt: would that be welcome change, see https://github.com/l0rinc/bitcoin/pull/38/files\r\n\r\nEdit: split the above suggestion into small focused commits and pushed here since I think it's arguably superior to previous logging attempts.\r\n",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3289052254",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "mentioned",
      "id": 19682350356,
      "node_id": "MEE_lADOABII587KOpPqzwAAAASVKNUU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350356",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:12:59Z"
    },
    {
      "event": "subscribed",
      "id": 19682350362,
      "node_id": "SE_lADOABII587KOpPqzwAAAASVKNUa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350362",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:12:59Z"
    },
    {
      "event": "mentioned",
      "id": 19682350366,
      "node_id": "MEE_lADOABII587KOpPqzwAAAASVKNUe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350366",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:12:59Z"
    },
    {
      "event": "subscribed",
      "id": 19682350367,
      "node_id": "SE_lADOABII587KOpPqzwAAAASVKNUf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350367",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:12:59Z"
    },
    {
      "event": "mentioned",
      "id": 19682350368,
      "node_id": "MEE_lADOABII587KOpPqzwAAAASVKNUg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350368",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:12:59Z"
    },
    {
      "event": "subscribed",
      "id": 19682350370,
      "node_id": "SE_lADOABII587KOpPqzwAAAASVKNUi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350370",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:13:00Z"
    },
    {
      "event": "mentioned",
      "id": 19682350372,
      "node_id": "MEE_lADOABII587KOpPqzwAAAASVKNUk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350372",
      "actor": {
        "login": "yuvicc",
        "id": 92994932,
        "node_id": "U_kgDOBYr9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92994932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yuvicc",
        "html_url": "https://github.com/yuvicc",
        "followers_url": "https://api.github.com/users/yuvicc/followers",
        "following_url": "https://api.github.com/users/yuvicc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yuvicc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yuvicc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yuvicc/subscriptions",
        "organizations_url": "https://api.github.com/users/yuvicc/orgs",
        "repos_url": "https://api.github.com/users/yuvicc/repos",
        "events_url": "https://api.github.com/users/yuvicc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yuvicc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:13:00Z"
    },
    {
      "event": "subscribed",
      "id": 19682350376,
      "node_id": "SE_lADOABII587KOpPqzwAAAASVKNUo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350376",
      "actor": {
        "login": "yuvicc",
        "id": 92994932,
        "node_id": "U_kgDOBYr9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92994932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yuvicc",
        "html_url": "https://github.com/yuvicc",
        "followers_url": "https://api.github.com/users/yuvicc/followers",
        "following_url": "https://api.github.com/users/yuvicc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yuvicc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yuvicc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yuvicc/subscriptions",
        "organizations_url": "https://api.github.com/users/yuvicc/orgs",
        "repos_url": "https://api.github.com/users/yuvicc/repos",
        "events_url": "https://api.github.com/users/yuvicc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yuvicc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:13:00Z"
    },
    {
      "event": "mentioned",
      "id": 19682350382,
      "node_id": "MEE_lADOABII587KOpPqzwAAAASVKNUu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350382",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:13:00Z"
    },
    {
      "event": "subscribed",
      "id": 19682350386,
      "node_id": "SE_lADOABII587KOpPqzwAAAASVKNUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350386",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:13:00Z"
    },
    {
      "event": "mentioned",
      "id": 19682350389,
      "node_id": "MEE_lADOABII587KOpPqzwAAAASVKNU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350389",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:13:00Z"
    },
    {
      "event": "subscribed",
      "id": 19682350394,
      "node_id": "SE_lADOABII587KOpPqzwAAAASVKNU6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19682350394",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-14T01:13:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19688757341,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASViphd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19688757341",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "created_at": "2025-09-14T22:57:56Z"
    },
    {
      "event": "commented",
      "id": 3290444826,
      "node_id": "IC_kwDOABII587EIDQa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3290444826",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T04:24:50Z",
      "updated_at": "2025-09-15T04:24:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK.\r\n\r\n> beneficial to extend this PR to show the reason for why script verification was enabled.\r\n\r\nI agree.\r\n\r\n> split the above suggestion into small focused commits\r\n\r\nCommits could be squashed but but keeping them separate makes it clearer to review.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3290444826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "reviewed",
      "id": 3222947655,
      "node_id": "PRR_kwDOABII587AGkdH",
      "url": null,
      "actor": null,
      "commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T05:21:17Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3222947655",
      "submitted_at": "2025-09-15T05:21:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 19692437566,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASVwsA-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19692437566",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T05:35:08Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19692437833,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASVwsFJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19692437833",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T05:35:10Z",
      "requested_reviewer": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19692439038,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASVwsX-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19692439038",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T05:35:15Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3222972953,
      "node_id": "PRR_kwDOABII587AGqoZ",
      "url": null,
      "actor": null,
      "commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T05:36:10Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3222972953",
      "submitted_at": "2025-09-15T05:36:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3222980028,
      "node_id": "PRR_kwDOABII587AGsW8",
      "url": null,
      "actor": null,
      "commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T05:40:35Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3222980028",
      "submitted_at": "2025-09-15T05:40:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3222982498,
      "node_id": "PRR_kwDOABII587AGs9i",
      "url": null,
      "actor": null,
      "commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T05:42:25Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3222982498",
      "submitted_at": "2025-09-15T05:42:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3222992176,
      "node_id": "PRR_kwDOABII587AGvUw",
      "url": null,
      "actor": null,
      "commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T05:46:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/33336/commits/63dc937eea297332ec85c1abbcf3b94b8f74aa85 with non-blocking nits mentioned above.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3222992176",
      "submitted_at": "2025-09-15T05:46:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3223525430,
      "node_id": "PRR_kwDOABII587AIxg2",
      "url": null,
      "actor": null,
      "commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T10:28:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK https://github.com/bitcoin/bitcoin/pull/33336/commits/63dc937eea297332ec85c1abbcf3b94b8f74aa85\r\nLeft some comments.",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3223525430",
      "submitted_at": "2025-09-15T10:28:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19707579928,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASWqc4Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19707579928",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "created_at": "2025-09-15T17:59:27Z"
    },
    {
      "event": "reviewed",
      "id": 3225673910,
      "node_id": "PRR_kwDOABII587AQ-C2",
      "url": null,
      "actor": null,
      "commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-15T18:00:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the suggestions, applied most of them",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3225673910",
      "submitted_at": "2025-09-15T18:00:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3227507782,
      "node_id": "PRR_kwDOABII587AX9xG",
      "url": null,
      "actor": null,
      "commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T05:57:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/33336/commits/9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3227507782",
      "submitted_at": "2025-09-16T05:57:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 19716718975,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASXNUF_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19716718975",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-16T05:57:46Z",
      "requested_reviewer": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3227682434,
      "node_id": "PRR_kwDOABII587AYoaC",
      "url": null,
      "actor": null,
      "commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T09:58:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed 9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3227682434",
      "submitted_at": "2025-09-16T09:58:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 19721923165,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASXhKpd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19721923165",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-16T09:58:49Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3228943578,
      "node_id": "PRR_kwDOABII587AdcTa",
      "url": null,
      "actor": null,
      "commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T11:16:09Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3228943578",
      "submitted_at": "2025-09-16T11:16:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 19723931829,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASXo1C1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19723931829",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-16T11:16:14Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19735715053,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASYVxzt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19735715053",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4ba33ddbcdb7f7aa71aa81638b1e4cb79c466e69",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/4ba33ddbcdb7f7aa71aa81638b1e4cb79c466e69",
      "created_at": "2025-09-16T20:55:48Z"
    },
    {
      "event": "reviewed",
      "id": 3231017555,
      "node_id": "PRR_kwDOABII587AlWpT",
      "url": null,
      "actor": null,
      "commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-16T21:03:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews, I have simplified the commits, removed the enum and replaced it with direct reason string, added an `off bestâ€‘header path` (thanks to @hodlinator), reworded the log to say \"script verification\" instead of \"signature validations\" to be in alignment with the \"Script verification uses ... additional threads\" and reverted the `fScriptChecks` and `m_prev_script_checks_logged` symbols.\n\nThere's a remaining suggestion to have friendlier reason in case of:\n```\n2025-09-16T21:00:03Z Enabling script verification at block #915016 (000000000000000000001a6f6115c32c340a2159b30f9ffd632f63424aa563f9): block not part of assumevalid chain.\n```\nto separate when the block has the assumevalid as an ancestor. I found that a bit riskier change than the rest, I think we should do that in a follow-up instead.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3231017555",
      "submitted_at": "2025-09-16T21:03:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 19735857741,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASYWUpN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19735857741",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-16T21:05:16Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19735899747,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASYWe5j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19735899747",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/f6951cb74bba60fedb2e0c041038561ba2583594",
      "created_at": "2025-09-16T21:07:48Z"
    },
    {
      "event": "commented",
      "id": 3302633627,
      "node_id": "IC_kwDOABII587E2jCb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3302633627",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-17T11:52:44Z",
      "updated_at": "2025-09-17T11:52:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3302633627",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "reviewed",
      "id": 3237297543,
      "node_id": "PRR_kwDOABII587A9T2H",
      "url": null,
      "actor": null,
      "commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-18T05:05:38Z",
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3237297543",
      "submitted_at": "2025-09-18T05:05:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3238340125,
      "node_id": "PRR_kwDOABII587BBSYd",
      "url": null,
      "actor": null,
      "commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-18T11:44:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed f6951cb74bba60fedb2e0c041038561ba2583594",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3238340125",
      "submitted_at": "2025-09-18T11:44:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19781495828,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASbEawU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19781495828",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f66036d47e221bed7fe94c517631be920da66d96",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/f66036d47e221bed7fe94c517631be920da66d96",
      "created_at": "2025-09-18T17:30:05Z"
    },
    {
      "event": "commented",
      "id": 3309585706,
      "node_id": "IC_kwDOABII587FREUq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3309585706",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-18T20:26:57Z",
      "updated_at": "2025-09-18T20:26:57Z",
      "author_association": "MEMBER",
      "body": "Given that the scope of the changes in this PR has expanded quite a bit since it was added to the milestone, and since the changes take place within consensus validation, I think this should be removed from the milestone. I don't think this will be able to get sufficient review for this release, and I don't think the changes here are necessary for the upcoming release.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3309585706",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "demilestoned",
      "id": 19785092987,
      "node_id": "DEME_lADOABII587KOpPqzwAAAASbSI97",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19785092987",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-18T20:27:05Z",
      "milestone": {
        "title": "30.0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19786791581,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASbYnqd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19786791581",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fb5405e43acf6d0e6ce74643f6372410ef8cc41d",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/fb5405e43acf6d0e6ce74643f6372410ef8cc41d",
      "created_at": "2025-09-18T22:52:00Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkxYWM2NGIwYTY2ZmM3OTJlYWJkMGE5YmI1YmIyMjQ1OWM4NTJjNmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91ac64b0a66fc792eabd0a9bb5bb22459c852c6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/91ac64b0a66fc792eabd0a9bb5bb22459c852c6d",
      "tree": {
        "sha": "fd8b4d34dcf92acc8c7c3ba5a9028e57a0c930bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd8b4d34dcf92acc8c7c3ba5a9028e57a0c930bf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaf2c464758b41638dd0dc85723d05b8ee60672e",
          "sha": "eaf2c464758b41638dd0dc85723d05b8ee60672e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/eaf2c464758b41638dd0dc85723d05b8ee60672e"
        }
      ],
      "message": "log: reword `signature validations` to `script verification` in `assumevalid` log\n\nEven though not all script verification is turned off currently (e.g. we're still doing the cheaper sigop counts), this naming is more consistent with other usages.",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-18T22:52:01Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-16T20:21:30Z"
      },
      "sha": "91ac64b0a66fc792eabd0a9bb5bb22459c852c6d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19786792891,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASbYn-7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19786792891",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/38025edd1978670bfa3c32cf518acd0b01644167",
      "created_at": "2025-09-18T22:52:10Z"
    },
    {
      "event": "reviewed",
      "id": 3242130677,
      "node_id": "PRR_kwDOABII587BPvz1",
      "url": null,
      "actor": null,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-18T22:56:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the comments, adjusted the test and code to differentiate between cases when the block is after the assumevalid block from when it's not even on the same chain.\nAlso adjusted the style of the test to have more self-contained blocks separated by the `with` blocks, unified the test string styles, updated old commit messages.\nPushed the [change](https://github.com/bitcoin/bitcoin/compare/f66036d47e221bed7fe94c517631be920da66d96..fb5405e43acf6d0e6ce74643f6372410ef8cc41d) and the rebase separately.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3242130677",
      "submitted_at": "2025-09-18T22:56:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3243827867,
      "node_id": "PRR_kwDOABII587BWOKb",
      "url": null,
      "actor": null,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-19T09:35:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed 38025edd1978670bfa3c32cf518acd0b01644167",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3243827867",
      "submitted_at": "2025-09-19T09:35:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "renamed",
      "id": 19808776715,
      "node_id": "RTE_lADOABII587KOpPqzwAAAAScsfIL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19808776715",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-19T20:49:08Z",
      "rename": {
        "from": "log: always print initial signature verification state",
        "to": "log: always print initial script verification state"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19810161732,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAAScxxRE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19810161732",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/010cf81407c0df8de766fd2a116463d180f25f33",
      "created_at": "2025-09-19T22:12:45Z"
    },
    {
      "event": "reviewed",
      "id": 3249291256,
      "node_id": "PRR_kwDOABII587BrD_4",
      "url": null,
      "actor": null,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-20T21:47:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 010cf81407c0df8de766fd2a116463d180f25f33",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3249291256",
      "submitted_at": "2025-09-20T21:47:52Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3252294836,
      "node_id": "PRR_kwDOABII587B2hS0",
      "url": null,
      "actor": null,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-22T12:08:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Left a few comments",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3252294836",
      "submitted_at": "2025-09-22T12:08:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 19836756772,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASeXOMk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19836756772",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-22T12:08:38Z",
      "requested_reviewer": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3255852704,
      "node_id": "PRR_kwDOABII587CEF6g",
      "url": null,
      "actor": null,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-23T02:42:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/33336/commits/010cf81407c0df8de766fd2a116463d180f25f33",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3255852704",
      "submitted_at": "2025-09-23T02:42:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3256339146,
      "node_id": "PRR_kwDOABII587CF8rK",
      "url": null,
      "actor": null,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-23T06:25:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Some possible nits",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3256339146",
      "submitted_at": "2025-09-23T06:25:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3256881020,
      "node_id": "PRR_kwDOABII587CIA98",
      "url": null,
      "actor": null,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-23T08:40:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/33336/commits/010cf81407c0df8de766fd2a116463d180f25f33",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3256881020",
      "submitted_at": "2025-09-23T08:40:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3263072412,
      "node_id": "PRR_kwDOABII587Cfoic",
      "url": null,
      "actor": null,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-24T14:43:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK.\r\n\r\nThe way this PR untangles the assumevalid conditions and explicitly logs them is great for readability and debugging. I'm not sure this should go into v30 though since it does touch a lot of consensus code.\r\n\r\nThe PR title understates quite a bit what this PR is doing. I assume since it has evolved since being initially proposed. I think it can be updated to better detail what this is doing.",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3263072412",
      "submitted_at": "2025-09-24T14:43:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "renamed",
      "id": 19903213364,
      "node_id": "RTE_lADOABII587KOpPqzwAAAASiUu80",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19903213364",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-24T21:11:19Z",
      "rename": {
        "from": "log: always print initial script verification state",
        "to": "log: print every script verification state change"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRmYWQ0ZTk5MmM0OWE1MzJlM2E4OTI4OTY1ZjI0MmNiMzExZWViMjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fad4e992c49a532e3a8928965f242cb311eeb29",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4fad4e992c49a532e3a8928965f242cb311eeb29",
      "tree": {
        "sha": "c2f6a5cee2560f25ee3684f1effcdd7bf5897650",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2f6a5cee2560f25ee3684f1effcdd7bf5897650"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91ac64b0a66fc792eabd0a9bb5bb22459c852c6d",
          "sha": "91ac64b0a66fc792eabd0a9bb5bb22459c852c6d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/91ac64b0a66fc792eabd0a9bb5bb22459c852c6d"
        }
      ],
      "message": "test: add assumevalid scenarios scaffold\n\nIncrease the test to 6 nodes and add flows for baseline, deep anchor, and too-recent cases, plus scaffolding for off-best-header, not-in-assumevalid,\nand reindex gates.\nAssertions are minimal here; follow-ups add reason checks.\n\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T03:32:53Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-14T21:01:27Z"
      },
      "sha": "4fad4e992c49a532e3a8928965f242cb311eeb29"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDliYzI5ODU1NmNiMDJjZmExMzgyYmJhYTllNTYzODAwNmI0MDM1NzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bc298556cb02cfa1382bbaa9e5638006b403576",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc298556cb02cfa1382bbaa9e5638006b403576",
      "tree": {
        "sha": "9a1efdf45aba10a4cae72005bf415400396e39e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a1efdf45aba10a4cae72005bf415400396e39e6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fad4e992c49a532e3a8928965f242cb311eeb29",
          "sha": "4fad4e992c49a532e3a8928965f242cb311eeb29",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4fad4e992c49a532e3a8928965f242cb311eeb29"
        }
      ],
      "message": "validation: log initial script verification state\n\nReplaced `atomic<bool>` with `std::optional<bool>` (logged once on first observation). Safe because `ConnectBlock` holds `cs_main`.\\\nAfter this change, the state is logged before the very first `UpdateTip` line.\n\nCo-authored-by: Eunovo <eunovo9@gmail.com>\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>\nCo-authored-by: w0xlt <woltx@protonmail.com>",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T03:34:23Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-08T06:37:10Z"
      },
      "sha": "9bc298556cb02cfa1382bbaa9e5638006b403576"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYyZWE2ZjA0ZTc5YjY2NDZiOTMyMGE5MTA2OTRhMjJjNTUyMDk3N2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2ea6f04e79b6646b9320a910694a22c5520977d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f2ea6f04e79b6646b9320a910694a22c5520977d",
      "tree": {
        "sha": "3326f550f60299819544bd9541c269efb276290b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3326f550f60299819544bd9541c269efb276290b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bc298556cb02cfa1382bbaa9e5638006b403576",
          "sha": "9bc298556cb02cfa1382bbaa9e5638006b403576",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc298556cb02cfa1382bbaa9e5638006b403576"
        }
      ],
      "message": "refactor: untangle assumevalid decision branches\n\nFlatten nested conditionals into a linear gating sequence for readability and precise logging. No functional change, TODOs are addressed in next commit",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T03:34:23Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-14T21:40:45Z"
      },
      "sha": "f2ea6f04e79b6646b9320a910694a22c5520977d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZjMTNhMzhhYjUxY2FmMWZhNzUwMmY3NDZlMzNiYmY4NjE1M2E1NDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c13a38ab51caf1fa7502f746e33bbf86153a541",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6c13a38ab51caf1fa7502f746e33bbf86153a541",
      "tree": {
        "sha": "b75f2ef5318e406869e0a39d1c4f01b41b32db1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b75f2ef5318e406869e0a39d1c4f01b41b32db1f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2ea6f04e79b6646b9320a910694a22c5520977d",
          "sha": "f2ea6f04e79b6646b9320a910694a22c5520977d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f2ea6f04e79b6646b9320a910694a22c5520977d"
        }
      ],
      "message": "log: separate script verification reasons\n\nReplace `fScriptChecks` with `script_check_reason` and log the precise reason when checks are enabled; log a plain \"Disabling\" when they are skipped.\nAdjust the functional test to assert the new reason strings.\n\nCo-authored-by: w0xlt <woltx@protonmail.com>\nCo-authored-by: Eunovo <eunovo9@gmail.com>\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>\nCo-authored-by: TheCharlatan <seb.kung@gmail.com>\nCo-authored-by: Andrew Toth <andrewstoth@gmail.com>",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T03:34:23Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-08T06:37:10Z"
      },
      "sha": "6c13a38ab51caf1fa7502f746e33bbf86153a541"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ1YmQ4OTE0NjU4YTY3NWQwMGFhOWM4MzM3M2Q2OTAzYThhOWVjZTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "tree": {
        "sha": "f645976c08c3e1088a5a828f21b1dacaacde8e19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f645976c08c3e1088a5a828f21b1dacaacde8e19"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c13a38ab51caf1fa7502f746e33bbf86153a541",
          "sha": "6c13a38ab51caf1fa7502f746e33bbf86153a541",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6c13a38ab51caf1fa7502f746e33bbf86153a541"
        }
      ],
      "message": "log: split assumevalid ancestry-failure-reason message\n\nWhen the assumevalid ancestry check fails, log a precise reason:\n- \"block height above assumevalid height\" if the block is above the assumevalid block (the default reason)\n- \"block not in of assumevalid chain\" otherwise\n\nThe new split was added under the existing condition to simplify conceptually that the two cases are related.\nIt could still be useful to know when the block is just above the assumevalid block or when it's not even on the same chain.\n\nUpdate the functional test to assert the new reason strings. No behavior change.\n\nCo-authored-by: Hodlinator <172445034+hodlinator@users.noreply.github.com>",
      "committer": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-10-02T03:34:23Z"
      },
      "author": {
        "name": "LÅ‘rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2025-09-18T21:46:45Z"
      },
      "sha": "45bd8914658a675d00aa9c83373d6903a8a9ece8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 20048891977,
      "node_id": "HRFPE_lADOABII587KOpPqzwAAAASrAdBJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20048891977",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "created_at": "2025-10-02T03:35:43Z"
    },
    {
      "event": "reviewed",
      "id": 3292830294,
      "node_id": "PRR_kwDOABII587ERJpW",
      "url": null,
      "actor": null,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-02T07:00:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 45bd8914658a675d00aa9c83373d6903a8a9ece8\n\nJust fixed some nits since previous review.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3292830294",
      "submitted_at": "2025-10-02T07:00:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "review_requested",
      "id": 20051956885,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASrMJSV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20051956885",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-02T07:00:24Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 20051957209,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASrMJXZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20051957209",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-02T07:00:26Z",
      "requested_reviewer": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 20051957423,
      "node_id": "RRE_lADOABII587KOpPqzwAAAASrMJav",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20051957423",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-02T07:00:27Z",
      "requested_reviewer": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3360275363,
      "node_id": "IC_kwDOABII587ISbuj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3360275363",
      "actor": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-02T10:04:24Z",
      "updated_at": "2025-10-02T10:04:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK https://github.com/bitcoin/bitcoin/pull/33336/commits/45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3360275363",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "reviewed",
      "id": 3297532271,
      "node_id": "PRR_kwDOABII587EjFlv",
      "url": null,
      "actor": null,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-03T05:51:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 45bd8914658a675d00aa9c83373d6903a8a9ece8\r\n\r\nReviewed all commits.",
      "user": {
        "login": "yuvicc",
        "id": 92994932,
        "node_id": "U_kgDOBYr9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92994932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yuvicc",
        "html_url": "https://github.com/yuvicc",
        "followers_url": "https://api.github.com/users/yuvicc/followers",
        "following_url": "https://api.github.com/users/yuvicc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yuvicc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yuvicc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yuvicc/subscriptions",
        "organizations_url": "https://api.github.com/users/yuvicc/orgs",
        "repos_url": "https://api.github.com/users/yuvicc/repos",
        "events_url": "https://api.github.com/users/yuvicc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yuvicc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3297532271",
      "submitted_at": "2025-10-03T05:51:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3302015530,
      "node_id": "PRR_kwDOABII587E0MIq",
      "url": null,
      "actor": null,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-04T16:57:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3302015530",
      "submitted_at": "2025-10-04T16:57:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "reviewed",
      "id": 3369808963,
      "node_id": "PRR_kwDOABII587I2zRD",
      "url": null,
      "actor": null,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-23T13:00:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 45bd8914658a675d00aa9c83373d6903a8a9ece8\r\n\r\nnits don't need fixing",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#pullrequestreview-3369808963",
      "submitted_at": "2025-10-23T13:00:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
    },
    {
      "event": "commented",
      "id": 3437547083,
      "node_id": "IC_kwDOABII587M5M5L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3437547083",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-23T15:11:06Z",
      "updated_at": "2025-10-23T15:11:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "rfm",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3437547083",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "commented",
      "id": 3444209034,
      "node_id": "IC_kwDOABII587NSnWK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3444209034",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T17:33:44Z",
      "updated_at": "2025-10-24T17:33:44Z",
      "author_association": "MEMBER",
      "body": "ACK 45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3444209034",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    },
    {
      "event": "merged",
      "id": 20490118656,
      "node_id": "ME_lADOABII587KOpPqzwAAAATFTmYA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20490118656",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0eb554728ca97a53db187c5d15dcd1a4404c3197",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eb554728ca97a53db187c5d15dcd1a4404c3197",
      "created_at": "2025-10-24T18:00:53Z"
    },
    {
      "event": "closed",
      "id": 20490118691,
      "node_id": "CE_lADOABII587KOpPqzwAAAATFTmYj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20490118691",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T18:00:54Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 20490216645,
      "node_id": "HRDE_lADOABII587KOpPqzwAAAATFT-TF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20490216645",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T18:04:44Z"
    },
    {
      "event": "commented",
      "id": 3444302074,
      "node_id": "IC_kwDOABII587NS-D6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3444302074",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-24T18:05:57Z",
      "updated_at": "2025-10-24T18:05:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you all for the reviews, appreciate the help.\r\nOnce we're branching for `30.1` I'd like to suggest we backport this.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#issuecomment-3444302074",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33336"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336183930",
      "pull_request_review_id": 3205338975,
      "id": 2336183930,
      "node_id": "PRRC_kwDOABII586LP1Z6",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::atomic_bool m_prev_script_checks_logged{true};\n+    std::optional<bool> m_prev_script_checks_logged{};",
      "path": "src/validation.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "64ba2821b5a55aa6d51fbb7a16470d4f7c41c92e",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/64ba2821b5a55aa6d51fbb7a16470d4f7c41c92e:\r\nI believe you now need to add `GUARDED_BY(::cs_main)` here to use Clang's Thread Safety Analysis",
      "created_at": "2025-09-10T09:39:57Z",
      "updated_at": "2025-09-10T09:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2336183930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2336183930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2337572396",
      "pull_request_review_id": 3207343048,
      "id": 2337572396,
      "node_id": "PRRC_kwDOABII586LVIYs",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::atomic_bool m_prev_script_checks_logged{true};\n+    std::optional<bool> m_prev_script_checks_logged{};",
      "path": "src/validation.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "64ba2821b5a55aa6d51fbb7a16470d4f7c41c92e",
      "in_reply_to_id": 2336183930,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Excellent, added you as a coathor, thanks.",
      "created_at": "2025-09-10T18:24:16Z",
      "updated_at": "2025-09-10T18:24:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2337572396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2337572396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2337774261",
      "pull_request_review_id": 3207641440,
      "id": 2337774261,
      "node_id": "PRRC_kwDOABII586LV5q1",
      "diff_hunk": "@@ -146,7 +146,8 @@ def run_test(self):\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1']):\n+            self.send_blocks_until_disconnected(p2p0)\n         self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 7,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "8cb75ee0a63880b55ac695fe884748aa7d604c38",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: In case we are ever able to send away all blocks before detecting the expected log message, we could also wait for the block height before stopping the search of the log:\r\n```suggestion\r\n            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\r\n```\r\n\r\n(Edit: I was modifying `send_blocks_until_disconnected()` and noticed a fairly high variability in how many blocks would be sent off, CI probably would have higher variability).",
      "created_at": "2025-09-10T20:02:58Z",
      "updated_at": "2025-09-10T21:46:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2337774261",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2337774261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2337975289",
      "pull_request_review_id": 3207921955,
      "id": 2337975289,
      "node_id": "PRRC_kwDOABII586LWqv5",
      "diff_hunk": "@@ -146,7 +146,8 @@ def run_test(self):\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1']):\n+            self.send_blocks_until_disconnected(p2p0)\n         self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 7,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "8cb75ee0a63880b55ac695fe884748aa7d604c38",
      "in_reply_to_id": 2337774261,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems less racy, indeed, updated, added you as coauthor, thanks",
      "created_at": "2025-09-10T21:36:52Z",
      "updated_at": "2025-09-10T21:36:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2337975289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2337975289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347899862",
      "pull_request_review_id": 3222947655,
      "id": 2347899862,
      "node_id": "PRRC_kwDOABII586L8hvW",
      "diff_hunk": "@@ -2423,34 +2439,41 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto assume_valid{AssumeValid::CHECKED};\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        using enum AssumeValid;\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            assume_valid = CHECKED_HASH_NOT_IN_HEADERS;\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_NOT_UNDER_ASSUMEVALID;\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_OFF_BESTHEADER_PATH;\n+        } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n+            assume_valid = CHECKED_BELOW_MIN_CHAINWORK;\n+        } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2) {",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 78,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just to make clearer what  `60 * 60 * 24 * 7 * 2` means.\r\n\r\n```cpp\r\nconstexpr int64_t TWO_WEEKS = 14 * 24 * 60 * 60;\r\nif (GetBlockProofEquivalentTime(... ) <= TWO_WEEKS) { ... }\r\n```\r\n\r\nOr (not tested)\r\n\r\n```cpp\r\n#include <chrono>\r\nusing namespace std::chrono;\r\n\r\nconstexpr auto TWO_WEEKS = 14d; // 14 days\r\n\r\nif (GetBlockProofEquivalentTime(...) <= duration_cast<seconds>(TWO_WEEKS).count()) {\r\n    ...\r\n}\r\n```",
      "created_at": "2025-09-15T05:21:00Z",
      "updated_at": "2025-09-15T05:21:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347899862",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347899862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347916838",
      "pull_request_review_id": 3222971198,
      "id": 2347916838,
      "node_id": "PRRC_kwDOABII586L8l4m",
      "diff_hunk": "@@ -2423,34 +2439,41 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto assume_valid{AssumeValid::CHECKED};\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        using enum AssumeValid;\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            assume_valid = CHECKED_HASH_NOT_IN_HEADERS;\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_NOT_UNDER_ASSUMEVALID;\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_OFF_BESTHEADER_PATH;\n+        } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n+            assume_valid = CHECKED_BELOW_MIN_CHAINWORK;\n+        } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2) {",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 78,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347899862,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems a bit risky this close to the release, maybe we can do that in a follow-up",
      "created_at": "2025-09-15T05:34:45Z",
      "updated_at": "2025-09-15T05:34:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347916838",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347916838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347918277",
      "pull_request_review_id": 3222972953,
      "id": 2347918277,
      "node_id": "PRRC_kwDOABII586L8mPF",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";\n+    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below nMinimumChainWork\";\n+    case CHECKED_NOT_BURIED_ENOUGH:     return \"too recent relative to best header\";\n+    default:                            std::abort();",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 30,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Provide safe fallback in release builds. Aborting solely because of logging seems unnecessary.\r\n\r\n```suggestion\r\n    default:                            return \"unknown reason\";\r\n```",
      "created_at": "2025-09-15T05:36:06Z",
      "updated_at": "2025-09-15T05:36:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347918277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347918277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347923281",
      "pull_request_review_id": 3222980028,
      "id": 2347923281,
      "node_id": "PRRC_kwDOABII586L8ndR",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not found in headers\";\r\n```",
      "created_at": "2025-09-15T05:40:31Z",
      "updated_at": "2025-09-15T05:40:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347923281",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347923281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347925235",
      "pull_request_review_id": 3222982498,
      "id": 2347925235,
      "node_id": "PRRC_kwDOABII586L8n7z",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";\n+    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below nMinimumChainWork\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: logs shouldnâ€™t expose internal variable names\r\n\r\n```suggestion\r\n    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below -minimumchainwork\";\r\n```",
      "created_at": "2025-09-15T05:42:20Z",
      "updated_at": "2025-09-15T05:42:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347925235",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347925235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347935159",
      "pull_request_review_id": 3222997150,
      "id": 2347935159,
      "node_id": "PRRC_kwDOABII586L8qW3",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347923281,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This was deliberate, are you suggesting that's not grammatically correct?\r\n\"File not found\" -> we don't usually say \"File *is* not found\". The internets tell me this is called \"elliptical sentence\" with \"implied copula\".",
      "created_at": "2025-09-15T05:49:05Z",
      "updated_at": "2025-09-15T05:49:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347935159",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347935159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347936278",
      "pull_request_review_id": 3222998558,
      "id": 2347936278,
      "node_id": "PRRC_kwDOABII586L8qoW",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";\n+    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below nMinimumChainWork\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347925235,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm curious what others think. The current one makes the error searchable, that's why I left it as such.",
      "created_at": "2025-09-15T05:50:04Z",
      "updated_at": "2025-09-15T05:50:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347936278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347936278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347937789",
      "pull_request_review_id": 3223000433,
      "id": 2347937789,
      "node_id": "PRRC_kwDOABII586L8q_9",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";\n+    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below nMinimumChainWork\";\n+    case CHECKED_NOT_BURIED_ENOUGH:     return \"too recent relative to best header\";\n+    default:                            std::abort();",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 30,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347918277,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I want a very obvious error if this isn't correct - I don't like these soft failures. What do other reviewers think?",
      "created_at": "2025-09-15T05:51:22Z",
      "updated_at": "2025-09-15T05:51:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347937789",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2347937789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348292328",
      "pull_request_review_id": 3223525430,
      "id": 2348292328,
      "node_id": "PRRC_kwDOABII586L-Bjo",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";\n+    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below nMinimumChainWork\";\n+    case CHECKED_NOT_BURIED_ENOUGH:     return \"too recent relative to best header\";\n+    default:                            std::abort();",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 30,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347918277,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/63dc937eea297332ec85c1abbcf3b94b8f74aa85:\r\n+1 on returning \"unknown reason\" instead of aborting.",
      "created_at": "2025-09-15T08:48:04Z",
      "updated_at": "2025-09-15T10:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2348292328",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348292328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348447122",
      "pull_request_review_id": 3223525430,
      "id": 2348447122,
      "node_id": "PRRC_kwDOABII586L-nWS",
      "diff_hunk": "@@ -170,5 +179,20 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"])\n+        assert_equal(self.nodes[3].getblockcount(), 1)\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=\" + block102.hash_hex, \"-minimumchainwork=0xffff\"])\n+        assert_equal(self.nodes[3].getblockcount(), 1)\n+\n+        # TODO test what happens when block is not on the best header path",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 98,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "3ddd4c84af2bf0b5d3e403b71f4750b2326118e1",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/3ddd4c84af2bf0b5d3e403b71f4750b2326118e1: I think it's best to take out this TODO from the commit. You should also adjust the commit message to focus on what this commit is adding specifically.",
      "created_at": "2025-09-15T09:47:22Z",
      "updated_at": "2025-09-15T10:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2348447122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348447122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348449770",
      "pull_request_review_id": 3223525430,
      "id": 2348449770,
      "node_id": "PRRC_kwDOABII586L-n_q",
      "diff_hunk": "@@ -64,11 +65,11 @@ def send_header_for_blocks(self, new_blocks):\n class AssumeValidTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n+        self.num_nodes = 4",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 38,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "3ddd4c84af2bf0b5d3e403b71f4750b2326118e1",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/3ddd4c84af2bf0b5d3e403b71f4750b2326118e1: This should probably still be set to `3` since the 4th node is not used in this commit.",
      "created_at": "2025-09-15T09:48:08Z",
      "updated_at": "2025-09-15T10:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2348449770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348449770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348462197",
      "pull_request_review_id": 3223525430,
      "id": 2348462197,
      "node_id": "PRRC_kwDOABII586L-rB1",
      "diff_hunk": "@@ -170,5 +179,20 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"])",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 92,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "3ddd4c84af2bf0b5d3e403b71f4750b2326118e1",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/3ddd4c84af2bf0b5d3e403b71f4750b2326118e1: A comment explaining this check will be beneficial.",
      "created_at": "2025-09-15T09:52:37Z",
      "updated_at": "2025-09-15T10:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2348462197",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348462197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348463061",
      "pull_request_review_id": 3223525430,
      "id": 2348463061,
      "node_id": "PRRC_kwDOABII586L-rPV",
      "diff_hunk": "@@ -170,5 +179,20 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"])\n+        assert_equal(self.nodes[3].getblockcount(), 1)\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=\" + block102.hash_hex, \"-minimumchainwork=0xffff\"])",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 95,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "3ddd4c84af2bf0b5d3e403b71f4750b2326118e1",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/3ddd4c84af2bf0b5d3e403b71f4750b2326118e1: A comment here will also be beneficial.",
      "created_at": "2025-09-15T09:52:59Z",
      "updated_at": "2025-09-15T10:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2348463061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348463061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348503453",
      "pull_request_review_id": 3223525430,
      "id": 2348503453,
      "node_id": "PRRC_kwDOABII586L-1Gd",
      "diff_hunk": "@@ -2423,7 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    auto assume_valid{true};\n+    auto assume_valid{AssumeValid::CHECKED};",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "6222d8cced4828b83a9dde20b9da9df44848b9bd",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/6222d8cced4828b83a9dde20b9da9df44848b9bd:\r\nWhy not `AssumeValid::DISABLED` instead of `AssumeValid::CHECKED` and `AssumeValid::ENABLED` instead of `AssumeValid:SKIPPED`?\r\nI find the current names to be confusing. I think using `AssumeValid::ENABLED` to indicate that assume_valid is enabled is better. ",
      "created_at": "2025-09-15T10:08:59Z",
      "updated_at": "2025-09-15T10:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2348503453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348503453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348538334",
      "pull_request_review_id": 3223525430,
      "id": 2348538334,
      "node_id": "PRRC_kwDOABII586L-9ne",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/63dc937eea297332ec85c1abbcf3b94b8f74aa85:\r\nshould be \"block not on best header chain\"",
      "created_at": "2025-09-15T10:24:39Z",
      "updated_at": "2025-09-15T10:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2348538334",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348538334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348540085",
      "pull_request_review_id": 3223525430,
      "id": 2348540085,
      "node_id": "PRRC_kwDOABII586L--C1",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 26,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/63dc937eea297332ec85c1abbcf3b94b8f74aa85:\r\nconsider \"block not part of assumevalid chain\"",
      "created_at": "2025-09-15T10:25:23Z",
      "updated_at": "2025-09-15T10:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2348540085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2348540085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349670936",
      "pull_request_review_id": 3225641846,
      "id": 2349670936,
      "node_id": "PRRC_kwDOABII586MDSIY",
      "diff_hunk": "@@ -2423,7 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    auto assume_valid{true};\n+    auto assume_valid{AssumeValid::CHECKED};",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "6222d8cced4828b83a9dde20b9da9df44848b9bd",
      "in_reply_to_id": 2348503453,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried explaining it in \r\n[`6222d8c` (#33336)](https://github.com/bitcoin/bitcoin/pull/33336/commits/6222d8cced4828b83a9dde20b9da9df44848b9bd) \r\n> Instead of true/false or enabled/disabled, the checked/skipped naming should help with understanding when signature verification is actually performed.\r\n\r\nI found it confusing to say that we disable assume valid - so are we doing the script checks or not, will IBD be faster or slower is it's disabled?! So what's a better expression to avoid the confusion?",
      "created_at": "2025-09-15T17:32:02Z",
      "updated_at": "2025-09-15T17:35:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349670936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349670936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349693427",
      "pull_request_review_id": 3225673910,
      "id": 2349693427,
      "node_id": "PRRC_kwDOABII586MDXnz",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 26,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2348540085,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks",
      "created_at": "2025-09-15T17:43:08Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349693427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349693427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349696433",
      "pull_request_review_id": 3225673910,
      "id": 2349696433,
      "node_id": "PRRC_kwDOABII586MDYWx",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 27,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2348538334,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks, added you as coauthor",
      "created_at": "2025-09-15T17:43:53Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349696433",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349696433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349699960",
      "pull_request_review_id": 3225673910,
      "id": 2349699960,
      "node_id": "PRRC_kwDOABII586MDZN4",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";\n+    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below nMinimumChainWork\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347925235,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed in latest push, thanks",
      "created_at": "2025-09-15T17:44:54Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349699960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349699960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349700463",
      "pull_request_review_id": 3225673910,
      "id": 2349700463,
      "node_id": "PRRC_kwDOABII586MDZVv",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";\n+    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below nMinimumChainWork\";\n+    case CHECKED_NOT_BURIED_ENOUGH:     return \"too recent relative to best header\";\n+    default:                            std::abort();",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 30,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347918277,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-15T17:45:04Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349700463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349700463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349705964",
      "pull_request_review_id": 3225673910,
      "id": 2349705964,
      "node_id": "PRRC_kwDOABII586MDars",
      "diff_hunk": "@@ -2423,34 +2439,41 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto assume_valid{AssumeValid::CHECKED};\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        using enum AssumeValid;\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            assume_valid = CHECKED_HASH_NOT_IN_HEADERS;\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_NOT_UNDER_ASSUMEVALID;\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_OFF_BESTHEADER_PATH;\n+        } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n+            assume_valid = CHECKED_BELOW_MIN_CHAINWORK;\n+        } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2) {",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 78,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347899862,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But extracting `TWO_WEEKS_IN_SECONDS` is safe, did that, thanks. Added you as coauthor.",
      "created_at": "2025-09-15T17:47:42Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349705964",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349705964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349709237",
      "pull_request_review_id": 3225673910,
      "id": 2349709237,
      "node_id": "PRRC_kwDOABII586MDbe1",
      "diff_hunk": "@@ -64,11 +65,11 @@ def send_header_for_blocks(self, new_blocks):\n class AssumeValidTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n+        self.num_nodes = 4",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 38,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "3ddd4c84af2bf0b5d3e403b71f4750b2326118e1",
      "in_reply_to_id": 2348449770,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "the 4th is doing a reindex even in the first commit, right?",
      "created_at": "2025-09-15T17:49:21Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349709237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349709237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349714482",
      "pull_request_review_id": 3225673910,
      "id": 2349714482,
      "node_id": "PRRC_kwDOABII586MDcwy",
      "diff_hunk": "@@ -170,5 +179,20 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"])\n+        assert_equal(self.nodes[3].getblockcount(), 1)\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=\" + block102.hash_hex, \"-minimumchainwork=0xffff\"])\n+        assert_equal(self.nodes[3].getblockcount(), 1)\n+\n+        # TODO test what happens when block is not on the best header path",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 98,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "3ddd4c84af2bf0b5d3e403b71f4750b2326118e1",
      "in_reply_to_id": 2348447122,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Lol, valid point, let's document what we *are* doing, not just what we're not :D\nAdded comment and updated the commit message (but kept the todo for now), added you as coauthor.",
      "created_at": "2025-09-15T17:51:52Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349714482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349714482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349727088",
      "pull_request_review_id": 3225673910,
      "id": 2349727088,
      "node_id": "PRRC_kwDOABII586MDf1w",
      "diff_hunk": "@@ -170,5 +179,20 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"])",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 92,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "3ddd4c84af2bf0b5d3e403b71f4750b2326118e1",
      "in_reply_to_id": 2348462197,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-15T17:58:20Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349727088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349727088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349727601",
      "pull_request_review_id": 3225673910,
      "id": 2349727601,
      "node_id": "PRRC_kwDOABII586MDf9x",
      "diff_hunk": "@@ -170,5 +179,20 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"])\n+        assert_equal(self.nodes[3].getblockcount(), 1)\n+\n+        self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=\" + block102.hash_hex, \"-minimumchainwork=0xffff\"])",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 95,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "3ddd4c84af2bf0b5d3e403b71f4750b2326118e1",
      "in_reply_to_id": 2348463061,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added one above + explained lightly in commit message",
      "created_at": "2025-09-15T17:58:30Z",
      "updated_at": "2025-09-15T18:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349727601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349727601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349859713",
      "pull_request_review_id": 3225916481,
      "id": 2349859713,
      "node_id": "PRRC_kwDOABII586MEAOB",
      "diff_hunk": "@@ -106,6 +108,20 @@ const std::vector<std::string> CHECKLEVEL_DOC {\n     \"level 4 tries to reconnect the blocks\",\n     \"each level includes the checks of the previous levels\",\n };\n+inline std::string_view assumevalid_reason(const AssumeValid v) noexcept\n+{\n+    using enum AssumeValid;\n+    switch (v) {\n+    case SKIPPED:                       return \"\";\n+    case CHECKED:                       return \"assumevalid=0 (always verify)\";\n+    case CHECKED_HASH_NOT_IN_HEADERS:   return \"assumevalid hash not in headers\";\n+    case CHECKED_NOT_UNDER_ASSUMEVALID: return \"block not under assumevalid anchor\";\n+    case CHECKED_OFF_BESTHEADER_PATH:   return \"block not on best header path\";\n+    case CHECKED_BELOW_MIN_CHAINWORK:   return \"best header chainwork below nMinimumChainWork\";\n+    case CHECKED_NOT_BURIED_ENOUGH:     return \"too recent relative to best header\";\n+    default:                            std::abort();",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 30,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "63dc937eea297332ec85c1abbcf3b94b8f74aa85",
      "in_reply_to_id": 2347918277,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please consider triggering a compiler warning instead.\r\n```\r\nâ‚¿ git grep \"// no default case, so the compiler can warn about missing cases\" |wc -l\r\n70\r\n```\r\nhttps://github.com/bitcoin/bitcoin/blob/9b04e4f96200daf7516d1b8b6b0dfc4c077837e8/src/deploymentinfo.cpp#L36-L37\r\nEdit: could of course return \"unknown reason\" rather than empty string in this case, just outside the `switch`.",
      "created_at": "2025-09-15T19:02:22Z",
      "updated_at": "2025-09-15T19:03:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2349859713",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2349859713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351004321",
      "pull_request_review_id": 3227682434,
      "id": 2351004321,
      "node_id": "PRRC_kwDOABII586MIXqh",
      "diff_hunk": "@@ -2423,7 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto assume_valid{true};",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "e4077fe0d7ae245e1dd3e89903e818703c0ab130",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In e4077fe0d7ae245e1dd3e89903e818703c0ab130: `fScriptChecks` seems to be the opposite of what I would expect `assume_valid` to mean (no script checking)?",
      "created_at": "2025-09-16T06:27:02Z",
      "updated_at": "2025-09-16T09:58:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351004321",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351004321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "LEFT",
      "line": null,
      "original_line": 2426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351044620",
      "pull_request_review_id": 3227682434,
      "id": 2351044620,
      "node_id": "PRRC_kwDOABII586MIhgM",
      "diff_hunk": "@@ -513,6 +513,17 @@ constexpr int64_t LargeCoinsCacheThreshold(int64_t total_space) noexcept\n                     total_space - MAX_BLOCK_COINSDB_USAGE_BYTES);\n }\n \n+enum class AssumeValid : uint8_t\n+{\n+    SKIPPED = 0,                       //!< skip script verification\n+    CHECKED = 1,                       //!< always verify scripts\n+    CHECKED_HASH_NOT_IN_HEADERS = 2,   //!< assumevalid hash not found in m_block_index\n+    CHECKED_NOT_UNDER_ASSUMEVALID = 3, //!< pindex is not an ancestor of the assumevalid anchor\n+    CHECKED_OFF_BESTHEADER_PATH = 4,   //!< pindex is not an ancestor of m_best_header\n+    CHECKED_BELOW_MIN_CHAINWORK = 5,   //!< best header's cumulative work is below the built-in minimum\n+    CHECKED_NOT_BURIED_ENOUGH = 6,     //!< too recent compared to best header\n+};",
      "path": "src/validation.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Again, `AssumeValid::SKIPPED` meaning script checking is off seems like some weird double-negation to me. Below naming would make more sense to me.\r\n```suggestion\r\nenum class ScriptCheck : uint8_t\r\n{\r\n    DISABLED_ASSUME_VALID,         //!< skip script verification\r\n    ENABLED_NO_ASSUME_VALID,       //!< always verify scripts\r\n    ENABLED_HASH_NOT_IN_HEADERS,   //!< assumevalid hash not found in m_block_index\r\n    ENABLED_NOT_UNDER_ASSUMEVALID, //!< pindex is not an ancestor of the assumevalid anchor\r\n    ENABLED_OFF_BESTHEADER_FORK,   //!< pindex is not an ancestor of m_best_header\r\n    ENABLED_BELOW_MIN_CHAINWORK,   //!< best header's cumulative work is below the built-in minimum\r\n    ENABLED_NOT_BURIED_ENOUGH,     //!< too recent compared to best header\r\n};\r\n```\r\n(Also removed explicit numbers as we aren't serializing them to disk or even writing them to the log, but keep if you want).\r\n\r\n(PATH -> FORK).",
      "created_at": "2025-09-16T06:39:22Z",
      "updated_at": "2025-09-16T09:58:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351044620",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351044620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 516,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351302165",
      "pull_request_review_id": 3227682434,
      "id": 2351302165,
      "node_id": "PRRC_kwDOABII586MJgYV",
      "diff_hunk": "@@ -140,35 +141,68 @@ def run_test(self):\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n         self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(3)\n \n+\n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1',\n+                                                           'assumevalid=0 (always verify)']):  # AssumeValid::CHECKED",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 63,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could be more precise in that these strings are on the same log line:\r\n```diff\r\ndiff --git a/test/functional/feature_assumevalid.py b/test/functional/feature_assumevalid.py\r\nindex 544edfdb99..9ebaddb74f 100755\r\n--- a/test/functional/feature_assumevalid.py\r\n+++ b/test/functional/feature_assumevalid.py\r\n@@ -150,8 +150,9 @@ class AssumeValidTest(BitcoinTestFramework):\r\n         p2p0.send_header_for_blocks(self.blocks[2000:])\r\n \r\n         # Send blocks to node0. Block 102 will be rejected.\r\n-        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1',\r\n-                                                           'assumevalid=0 (always verify)']):  # AssumeValid::CHECKED\r\n+        block_1_hash = self.blocks[0].hash_hex\r\n+        with self.nodes[0].assert_debug_log(expected_msgs=[f'Enabling signature validations at block #1 ({block_1_hash}): assumevalid=0 (always verify)',  # AssumeValid::CHECKED\r\n+                                                           'Block validation error: block-script-verify-flag-failed']):\r\n             self.send_blocks_until_disconnected(p2p0)\r\n             self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\r\n         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\r\n@@ -162,8 +163,7 @@ class AssumeValidTest(BitcoinTestFramework):\r\n         p2p1.send_header_for_blocks(self.blocks[0:2000])\r\n         p2p1.send_header_for_blocks(self.blocks[2000:])\r\n         with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1',  # AssumeValid::SKIPPED\r\n-                                                           'Enabling signature validations at block #103',\r\n-                                                           'block not part of assumevalid chain']):  # AssumeValid::CHECKED_NOT_UNDER_ASSUMEVALID\r\n+                                                           f'Enabling signature validations at block #103 ({self.blocks[102].hash_hex}): block not part of assumevalid chain']):  # AssumeValid::CHECKED_NOT_UNDER_ASSUMEVALID\r\n             # Send all blocks to node1. All blocks will be accepted.\r\n             for i in range(2202):\r\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\r\n@@ -177,8 +177,8 @@ class AssumeValidTest(BitcoinTestFramework):\r\n         p2p2.send_header_for_blocks(self.blocks[0:200])\r\n \r\n         # Send blocks to node2. Block 102 will be rejected.\r\n-        with self.nodes[2].assert_debug_log(expected_msgs=[\"Enabling signature validations at block #1\",\r\n-                                                           \"too recent relative to best header\"]):  # AssumeValid::CHECKED_NOT_BURIED_ENOUGH\r\n+        with self.nodes[2].assert_debug_log(expected_msgs=[f\"Enabling signature validations at block #1 ({block_1_hash}): too recent relative to best header\",  # AssumeValid::CHECKED_NOT_BURIED_ENOUGH\r\n+                                                           \"Block validation error: block-script-verify-flag-failed\"]):\r\n             self.send_blocks_until_disconnected(p2p2)\r\n             self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\r\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\r\n@@ -191,13 +191,11 @@ class AssumeValidTest(BitcoinTestFramework):\r\n         self.wait_until(lambda: self.nodes[3].getblockcount())\r\n \r\n         # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).\r\n-        with self.nodes[3].assert_debug_log(expected_msgs=[\"Enabling signature validations at block #1\",\r\n-                                                           \"assumevalid hash not in headers\"]):  # AssumeValid::CHECKED_HASH_NOT_IN_HEADERS\r\n+        with self.nodes[3].assert_debug_log(expected_msgs=[f\"Enabling signature validations at block #1 ({block_1_hash}): assumevalid hash not in headers\"]):  # AssumeValid::CHECKED_HASH_NOT_IN_HEADERS\r\n             self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\"])\r\n         assert_equal(self.nodes[3].getblockcount(), 1)\r\n \r\n-        with self.nodes[3].assert_debug_log(expected_msgs=[\"Enabling signature validations at block #1\",\r\n-                                                           \"best header chainwork below minimumchainwork\"]):  # AssumeValid::CHECKED_BELOW_MIN_CHAINWORK\r\n+        with self.nodes[3].assert_debug_log(expected_msgs=[f\"Enabling signature validations at block #1 ({block_1_hash}): best header chainwork below minimumchainwork\"]):  # AssumeValid::CHECKED_BELOW_MIN_CHAINWORK\r\n             self.restart_node(3, extra_args=[\"-reindex-chainstate\", \"-assumevalid=\" + block102.hash_hex, \"-minimumchainwork=0xffff\"])\r\n         assert_equal(self.nodes[3].getblockcount(), 1)\r\n \r\n```\r\n(Also adds check for \"Block validation error\").",
      "created_at": "2025-09-16T07:51:49Z",
      "updated_at": "2025-09-16T09:58:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351302165",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351302165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 153,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351556972",
      "pull_request_review_id": 3227682434,
      "id": 2351556972,
      "node_id": "PRRC_kwDOABII586MKels",
      "diff_hunk": "@@ -140,35 +141,68 @@ def run_test(self):\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n         self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(3)\n \n+\n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1',\n+                                                           'assumevalid=0 (always verify)']):  # AssumeValid::CHECKED\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n+\n+        # nodes[1]\n         p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p1.send_header_for_blocks(self.blocks[0:2000])\n         p2p1.send_header_for_blocks(self.blocks[2000:])\n-        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1', 'Enabling signature validations at block #103']):\n+        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1',  # AssumeValid::SKIPPED\n+                                                           'Enabling signature validations at block #103',\n+                                                           'block not part of assumevalid chain']):  # AssumeValid::CHECKED_NOT_UNDER_ASSUMEVALID",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 76,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It feels a bit lacking to have `CHECKED_NOT_UNDER_ASSUMEVALID` when the block is based upon the assumevalid block. Would expect something like `CHECKED_EXCEEDS_ASSUMEVALID`. For *validation.cpp*:\r\n```C++\r\n        } else if (it->second.nHeight < pindex->nHeight) {\r\n            assume_valid = CHECKED_EXCEEDS_ASSUMEVALID;\r\n        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\r\n            assume_valid = CHECKED_NOT_UNDER_ASSUMEVALID;\r\n```",
      "created_at": "2025-09-16T08:55:11Z",
      "updated_at": "2025-09-16T09:58:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351556972",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351556972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351694634",
      "pull_request_review_id": 3227682434,
      "id": 2351694634,
      "node_id": "PRRC_kwDOABII586MLAMq",
      "diff_hunk": "@@ -2423,34 +2438,42 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto assume_valid{AssumeValid::CHECKED};\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n+        using enum AssumeValid;\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            assume_valid = CHECKED_HASH_NOT_IN_HEADERS;\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_NOT_UNDER_ASSUMEVALID;\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_OFF_BESTHEADER_PATH;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 69,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we get here, we know from the previous check (`if (it->second.GetAncestor(pindex->nHeight) != pindex) assume_valid = CHECKED_NOT_UNDER_ASSUMEVALID`) that `pindex` now *does exist* below the assumevalid header (or *is* the assumevalid block).\r\n\r\nFor the check against best header chain to fail for `pindex`, it could either be:\r\n\r\n1. The best header height somehow being below both `pindex` *and assumevalid*. (Edit: I guess this could theoretically happen if a really strong miner ramped up the difficulty and mined a fork of the chain from below the assumevalid height, but still with more total chain work).\r\n2. The best header chain being a totally different chain that doesn't even include the assumevalid hash (unless someone has broken SHA256).\r\n\r\nWhy would we want to do script checking of the `pindex` block which is in the chain below the assumevalid hash for any of those cases? This is keeping the existing behavior on master, but that behavior is weird to me.\r\n\r\nI guess this is also why you've had issues adding a test for `CHECKED_OFF_BESTHEADER_PATH`.",
      "created_at": "2025-09-16T09:36:42Z",
      "updated_at": "2025-09-16T10:03:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351694634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351694634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2455,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351814133",
      "pull_request_review_id": 3228943578,
      "id": 2351814133,
      "node_id": "PRRC_kwDOABII586MLdX1",
      "diff_hunk": "@@ -170,5 +179,21 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 90,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "4cd11cef0fd24d2413b624c6666e5fde9b1e9d42",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm a bit confused what the condition in this test is supposed to trigger if all we are testing are invalid args. What is the rationale here?",
      "created_at": "2025-09-16T10:11:44Z",
      "updated_at": "2025-09-16T11:16:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351814133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351814133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 183,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351892330",
      "pull_request_review_id": 3229080715,
      "id": 2351892330,
      "node_id": "PRRC_kwDOABII586MLwdq",
      "diff_hunk": "@@ -2423,34 +2438,42 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto assume_valid{AssumeValid::CHECKED};\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n+        using enum AssumeValid;\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            assume_valid = CHECKED_HASH_NOT_IN_HEADERS;\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_NOT_UNDER_ASSUMEVALID;\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_OFF_BESTHEADER_PATH;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 69,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2351694634,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Found a way to test 2):\r\n```python\r\n        # nodes[4]\r\n        self.start_node(4, extra_args=[\"-assumevalid=\" + block102.hash_hex])\r\n        second_chain_tip = int(self.nodes[4].getbestblockhash(), 16)\r\n        second_chain_time = self.nodes[4].getblock(self.nodes[4].getbestblockhash())['time'] + 1\r\n        second_chain_height = self.nodes[4].getblock(self.nodes[4].getbestblockhash())['height'] + 1\r\n\r\n        second_chain = []\r\n        for _ in range(2100):\r\n            block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\r\n            block.solve()\r\n            second_chain.append(block)\r\n            second_chain_tip = block.hash_int\r\n            second_chain_time += 1\r\n            second_chain_height += 1\r\n\r\n        p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\r\n        p2p4.send_header_for_blocks(second_chain[0:2000])\r\n        p2p4.send_header_for_blocks(second_chain[2000:])\r\n        p2p4.send_header_for_blocks(self.blocks[0:103])\r\n\r\n        with self.nodes[4].assert_debug_log(expected_msgs=[f'Enabling signature validations at block #1 ({block_1_hash}): block not on best header chain']):  # AssumeValid::CHECKED_OFF_BESTHEADER_PATH\r\n            # Send all blocks to node1. All blocks will be accepted.\r\n            p2p4.send_without_ping(msg_block(self.blocks[0]))\r\n            self.wait_until(lambda: self.nodes[2].getblockcount() >= 1)\r\n```",
      "created_at": "2025-09-16T10:31:55Z",
      "updated_at": "2025-09-16T10:31:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351892330",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2351892330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2455,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352051546",
      "pull_request_review_id": 3228943578,
      "id": 2352051546,
      "node_id": "PRRC_kwDOABII586MMXVa",
      "diff_hunk": "@@ -2563,9 +2586,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (assume_valid != m_prev_assume_valid_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (assume_valid == AssumeValid::SKIPPED) {\n+            LogInfo(\"Disabling signature validations at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        } else {\n+            LogInfo(\"Enabling signature validations at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), assumevalid_reason(assume_valid));\n+        }\n+        m_prev_assume_valid_logged = assume_valid;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 108,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are the enums really only added for logging? That seems a bit heavy. How about moving this `if` block up and making it a lambda that gets called directly from your `if else` branches? afaict that could remove the need for them, which judged by the comments left here so far, seem to confuse people a bit with their communicated intent.",
      "created_at": "2025-09-16T11:15:50Z",
      "updated_at": "2025-09-16T11:16:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2352051546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2352051546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2589,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2597,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353190912",
      "pull_request_review_id": 3231017555,
      "id": 2353190912,
      "node_id": "PRRC_kwDOABII586MQtgA",
      "diff_hunk": "@@ -140,35 +141,68 @@ def run_test(self):\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n         self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(3)\n \n+\n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1',\n+                                                           'assumevalid=0 (always verify)']):  # AssumeValid::CHECKED",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 63,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2351302165,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Was trying to recreate production code logic in test, but I don't mind making it more explicit if you think it's more descriptive.\nThe block validation errors seem out-of-scope, but I don't mind them either, thanks, added you as coauthor to the last commit as well.",
      "created_at": "2025-09-16T17:32:06Z",
      "updated_at": "2025-09-16T21:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2353190912",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353190912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 153,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353201643",
      "pull_request_review_id": 3231017555,
      "id": 2353201643,
      "node_id": "PRRC_kwDOABII586MQwHr",
      "diff_hunk": "@@ -170,5 +179,21 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 90,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "4cd11cef0fd24d2413b624c6666e5fde9b1e9d42",
      "in_reply_to_id": 2351814133,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The args are only invalid in relation to the blocks, so we need at least one block to invalidate the args.",
      "created_at": "2025-09-16T17:36:27Z",
      "updated_at": "2025-09-16T21:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2353201643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353201643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 183,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353349979",
      "pull_request_review_id": 3231017555,
      "id": 2353349979,
      "node_id": "PRRC_kwDOABII586MRUVb",
      "diff_hunk": "@@ -513,6 +513,17 @@ constexpr int64_t LargeCoinsCacheThreshold(int64_t total_space) noexcept\n                     total_space - MAX_BLOCK_COINSDB_USAGE_BYTES);\n }\n \n+enum class AssumeValid : uint8_t\n+{\n+    SKIPPED = 0,                       //!< skip script verification\n+    CHECKED = 1,                       //!< always verify scripts\n+    CHECKED_HASH_NOT_IN_HEADERS = 2,   //!< assumevalid hash not found in m_block_index\n+    CHECKED_NOT_UNDER_ASSUMEVALID = 3, //!< pindex is not an ancestor of the assumevalid anchor\n+    CHECKED_OFF_BESTHEADER_PATH = 4,   //!< pindex is not an ancestor of m_best_header\n+    CHECKED_BELOW_MIN_CHAINWORK = 5,   //!< best header's cumulative work is below the built-in minimum\n+    CHECKED_NOT_BURIED_ENOUGH = 6,     //!< too recent compared to best header\n+};",
      "path": "src/validation.h",
      "position": 1,
      "original_position": 13,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2351044620,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Cheap script checks (such as sigop counts) are still checked regardless of this option, it's the signatures that aren't (so *some* script sanity checking is still happening, but the scripts aren't interpreted - that's my understanding, please correct me if I'm wrong. Maybe I should update the warning message in that case to make it clear that a few other checks are also skipped, not just the signatures).\n\nAnd I want to propose a change to [skip bip30 checks](https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L2539-L2548) as part of \"assumevalid\" (and to skip other script related checks like the mentioned sigop count), so I don't want to introduce name that forces the option to only apply to signatures. I'll just revert the rename for now and we can decide later.",
      "created_at": "2025-09-16T18:43:06Z",
      "updated_at": "2025-09-16T21:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2353349979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353349979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 516,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353625992",
      "pull_request_review_id": 3231017555,
      "id": 2353625992,
      "node_id": "PRRC_kwDOABII586MSXuI",
      "diff_hunk": "@@ -2423,7 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    auto assume_valid{true};\n+    auto assume_valid{AssumeValid::CHECKED};",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "6222d8cced4828b83a9dde20b9da9df44848b9bd",
      "in_reply_to_id": 2348503453,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reverted since it caused more confusion that it fixed",
      "created_at": "2025-09-16T20:50:59Z",
      "updated_at": "2025-09-16T21:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2353625992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353625992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353628930",
      "pull_request_review_id": 3231017555,
      "id": 2353628930,
      "node_id": "PRRC_kwDOABII586MSYcC",
      "diff_hunk": "@@ -2423,34 +2438,42 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto assume_valid{AssumeValid::CHECKED};\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n+        using enum AssumeValid;\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            assume_valid = CHECKED_HASH_NOT_IN_HEADERS;\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_NOT_UNDER_ASSUMEVALID;\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            assume_valid = CHECKED_OFF_BESTHEADER_PATH;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 69,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2351694634,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fantastic, I had something similar but only got to 90%.\nAdded the change as node 3 since it has a similar starting condition as the rest of the nodes, simplifies the header send to only create the needed headers and send all of them and fixed the waiting condition.\nAdded you as coauthor.",
      "created_at": "2025-09-16T20:52:35Z",
      "updated_at": "2025-09-16T21:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2353628930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353628930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2455,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353634828",
      "pull_request_review_id": 3231017555,
      "id": 2353634828,
      "node_id": "PRRC_kwDOABII586MSZ4M",
      "diff_hunk": "@@ -2563,9 +2586,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (assume_valid != m_prev_assume_valid_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (assume_valid == AssumeValid::SKIPPED) {\n+            LogInfo(\"Disabling signature validations at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        } else {\n+            LogInfo(\"Enabling signature validations at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), assumevalid_reason(assume_valid));\n+        }\n+        m_prev_assume_valid_logged = assume_valid;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 108,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2352051546,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have added a reason string with limited scope next to the `bool`, let me know what you think. Added you ad coauthor.",
      "created_at": "2025-09-16T20:55:53Z",
      "updated_at": "2025-09-16T21:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2353634828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353634828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2589,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2597,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353637282",
      "pull_request_review_id": 3231017555,
      "id": 2353637282,
      "node_id": "PRRC_kwDOABII586MSaei",
      "diff_hunk": "@@ -140,35 +141,68 @@ def run_test(self):\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n         self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(3)\n \n+\n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1',\n+                                                           'assumevalid=0 (always verify)']):  # AssumeValid::CHECKED\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n+\n+        # nodes[1]\n         p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p1.send_header_for_blocks(self.blocks[0:2000])\n         p2p1.send_header_for_blocks(self.blocks[2000:])\n-        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1', 'Enabling signature validations at block #103']):\n+        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1',  # AssumeValid::SKIPPED\n+                                                           'Enabling signature validations at block #103',\n+                                                           'block not part of assumevalid chain']):  # AssumeValid::CHECKED_NOT_UNDER_ASSUMEVALID",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 76,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2351556972,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure I fully understand - do you want me to add a different reason when the current block is valid, but just after the assumevalid block? That's a very good idea, but I think we should do it separately since it modifies the behavior a tiny bit",
      "created_at": "2025-09-16T20:57:20Z",
      "updated_at": "2025-09-16T21:08:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2353637282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353637282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353652988",
      "pull_request_review_id": 3231696322,
      "id": 2353652988,
      "node_id": "PRRC_kwDOABII586MSeT8",
      "diff_hunk": "@@ -2423,7 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto assume_valid{true};",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "e4077fe0d7ae245e1dd3e89903e818703c0ab130",
      "in_reply_to_id": 2351004321,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ii have reverted the naming",
      "created_at": "2025-09-16T21:05:46Z",
      "updated_at": "2025-09-16T21:05:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2353652988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2353652988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "LEFT",
      "line": null,
      "original_line": 2426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2357526353",
      "pull_request_review_id": 3237297543,
      "id": 2357526353,
      "node_id": "PRRC_kwDOABII586MhP9R",
      "diff_hunk": "@@ -2564,7 +2574,14 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n     if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n+        if (fScriptChecks) {\n+            Assume(!script_check_reason.empty());\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 78,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should we be logging which chainstate this is, in case there's multiple?",
      "created_at": "2025-09-18T05:05:38Z",
      "updated_at": "2025-09-18T05:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2357526353",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2357526353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": 2578,
      "original_start_line": 2579,
      "start_side": "RIGHT",
      "line": 2582,
      "original_line": 2582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2357539686",
      "pull_request_review_id": 3237314581,
      "id": 2357539686,
      "node_id": "PRRC_kwDOABII586MhTNm",
      "diff_hunk": "@@ -2564,7 +2574,14 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n     if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n+        if (fScriptChecks) {\n+            Assume(!script_check_reason.empty());\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 78,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": 2357526353,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Currently we're only logging this if there's a single one, i.e. `GetRole() == ChainstateRole::NORMAL`",
      "created_at": "2025-09-18T05:15:49Z",
      "updated_at": "2025-09-18T05:15:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2357539686",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2357539686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": 2578,
      "original_start_line": 2579,
      "start_side": "RIGHT",
      "line": 2582,
      "original_line": 2582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358151635",
      "pull_request_review_id": 3238340125,
      "id": 2358151635,
      "node_id": "PRRC_kwDOABII586MjonT",
      "diff_hunk": "@@ -1,33 +1,25 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2022 The Bitcoin Core developers\n+# Copyright (c) 2014-present The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test logic for skipping signature validation on old blocks.\n \n Test logic for skipping signature validation on blocks which we've assumed\n valid (https://github.com/bitcoin/bitcoin/pull/9484)\n \n-We build a chain that includes and invalid signature for one of the\n-transactions:\n+We build a chain that includes an invalid signature for one of the transactions:\n \n-    0:        genesis block\n-    1:        block 1 with coinbase transaction output.\n-    2-101:    bury that block with 100 blocks so the coinbase transaction\n-              output can be spent\n-    102:      a block containing a transaction spending the coinbase\n-              transaction output. The transaction has an invalid signature.\n-    103-2202: bury the bad block with just over two weeks' worth of blocks\n-              (2100 blocks)\n+ 0:        genesis block\n+ 1:        block 1 with coinbase transaction output.\n+ 2-101:    bury that block with 100 blocks so the coinbase transaction output can be spent\n+ 102:      a block containing a transaction spending the coinbase transaction output. The transaction has an invalid signature.\n+ 103-2202: bury the bad block with just over two weeks' worth of blocks (2100 blocks)",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 27,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "788e45a5b210224e476543cbd31dffc7ae39b13e",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 788e45a5b210224e476543cbd31dffc7ae39b13e: Some sympathy for unwrapping the initial sentence since with the (and/an) typo fix it's just at 80 chars, but 4 space indent seems less arbitrary than 1 space, and not worth touching these lines for.",
      "created_at": "2025-09-18T09:06:15Z",
      "updated_at": "2025-09-18T11:44:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2358151635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358151635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 10,
      "start_side": "LEFT",
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358167560",
      "pull_request_review_id": 3238340125,
      "id": 2358167560,
      "node_id": "PRRC_kwDOABII586MjsgI",
      "diff_hunk": "@@ -129,19 +131,23 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])",
      "path": "test/functional/feature_assumevalid.py",
      "position": 61,
      "original_position": 35,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "9ecaadc94a5a4a61263aa17ddaba23ee5d155042",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 9ecaadc94a5a4a61263aa17ddaba23ee5d155042: Think there is some value in benefit from nodes starting up in parallel with the python code running. Would prefer starting them all here or even sooner, before the loop generating 2100 blocks above.\r\n\r\nSorry if my suggestion in https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351892330 precipitated this, I was just trying to reduce complexity in the example.",
      "created_at": "2025-09-18T09:12:39Z",
      "updated_at": "2025-09-18T11:44:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2358167560",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358167560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": 140,
      "original_start_line": 132,
      "start_side": "LEFT",
      "line": 142,
      "original_line": 142,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358189439",
      "pull_request_review_id": 3238340125,
      "id": 2358189439,
      "node_id": "PRRC_kwDOABII586Mjx1_",
      "diff_hunk": "@@ -2423,35 +2423,45 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto fScriptChecks{true};",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In b577becd7167593ba55f1f084cfded59f4c11e47: Touching this line to reduce it by 1 char seems uncalled for now that you are keeping the name.",
      "created_at": "2025-09-18T09:20:42Z",
      "updated_at": "2025-09-18T11:44:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2358189439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358189439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "LEFT",
      "line": null,
      "original_line": 2426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358241717",
      "pull_request_review_id": 3238340125,
      "id": 2358241717,
      "node_id": "PRRC_kwDOABII586Mj-m1",
      "diff_hunk": "@@ -137,38 +131,98 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n \n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        block_1_hash = self.blocks[0].hash_hex\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            f'Enabling script verification at block #1 ({block_1_hash}): assumevalid=0 (always verify)',\n+            'Block validation error: block-script-verify-flag-failed'\n+        ]):\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n+\n+        # nodes[1]\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n         p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p1.send_header_for_blocks(self.blocks[0:2000])\n         p2p1.send_header_for_blocks(self.blocks[2000:])\n-        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1', 'Enabling signature validations at block #103']):\n+        with self.nodes[1].assert_debug_log(expected_msgs=[\n+            'Disabling script verification at block #1',\n+            f'Enabling script verification at block #103 ({self.blocks[102].hash_hex}): block not part of assumevalid chain'\n+        ]):\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n+\n+        # nodes[2]\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n         p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n         p2p2.send_header_for_blocks(self.blocks[0:200])\n \n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            f\"Enabling script verification at block #1 ({block_1_hash}): too recent relative to best header\",\n+            \"Block validation error: block-script-verify-flag-failed\"\n+        ]):\n+            self.send_blocks_until_disconnected(p2p2)\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        best_hash = self.nodes[3].getbestblockhash()\n+        tip_block = self.nodes[3].getblock(best_hash)\n+        second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+        second_chain = []\n+        for _ in range(150):\n+            block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+            block.solve()\n+            second_chain.append(block)\n+            second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+        p2p4 = self.nodes[3].add_p2p_connection(BaseNode())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 137,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\r\n```",
      "created_at": "2025-09-18T09:38:02Z",
      "updated_at": "2025-09-18T11:44:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2358241717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358241717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358761689",
      "pull_request_review_id": 3238340125,
      "id": 2358761689,
      "node_id": "PRRC_kwDOABII586Ml9jZ",
      "diff_hunk": "@@ -2423,35 +2423,45 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto fScriptChecks{true};\n+    std::string script_check_reason;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I'd prefer avoiding having this dual state. Here are 2 variations which do that:\r\n\r\nPreserving behavior:\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 7e82c3bbad..008bfe4d71 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -2423,8 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n         return true;\r\n     }\r\n \r\n-    auto fScriptChecks{true};\r\n-    std::string script_check_reason;\r\n+    const char* script_check_reason{nullptr};\r\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\r\n         constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\r\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\r\n@@ -2458,7 +2457,6 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n             //  artificially set the default assumed verified block further back.\r\n             // The test against the minimum chain work prevents the skipping when denied access to any chain at\r\n             //  least as good as the expected chain.\r\n-            fScriptChecks = false;\r\n         }\r\n     } else {\r\n         script_check_reason = \"assumevalid=0 (always verify)\";\r\n@@ -2573,16 +2571,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n              Ticks<SecondsDouble>(m_chainman.time_forks),\r\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\r\n \r\n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\r\n-        if (fScriptChecks) {\r\n-            Assume(!script_check_reason.empty());\r\n+    if ((script_check_reason != nullptr) != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\r\n+        if (script_check_reason) {\r\n             LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\r\n                     pindex->nHeight, block_hash.ToString(), script_check_reason);\r\n         } else {\r\n             LogInfo(\"Disabling script verification at block #%d (%s).\",\r\n                     pindex->nHeight, block_hash.ToString());\r\n         }\r\n-        m_prev_script_checks_logged = fScriptChecks;\r\n+        m_prev_script_checks_logged = script_check_reason != nullptr;\r\n     }\r\n \r\n     CBlockUndo blockundo;\r\n@@ -2593,7 +2590,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n     // doesn't invalidate pointers into the vector, and keep txsdata in scope\r\n     // for as long as `control`.\r\n     std::optional<CCheckQueueControl<CScriptCheck>> control;\r\n-    if (auto& queue = m_chainman.GetCheckQueue(); queue.HasThreads() && fScriptChecks) control.emplace(queue);\r\n+    if (auto& queue = m_chainman.GetCheckQueue(); queue.HasThreads() && script_check_reason != nullptr) control.emplace(queue);\r\n \r\n     std::vector<PrecomputedTransactionData> txsdata(block.vtx.size());\r\n \r\n@@ -2652,7 +2649,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n             break;\r\n         }\r\n \r\n-        if (!tx.IsCoinBase() && fScriptChecks)\r\n+        if (!tx.IsCoinBase() && script_check_reason != nullptr)\r\n         {\r\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\r\n             bool tx_ok;\r\n```\r\n\r\n<details><summary>The below version will output more often, when switching reasons, not sure which behavior is more desirable (there is no risk of dangling pointers from using `const char*`, but it requires us to be vigilant going forward):</summary>\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 7e82c3bbad..79ad71b64c 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -2423,8 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n         return true;\r\n     }\r\n \r\n-    auto fScriptChecks{true};\r\n-    std::string script_check_reason;\r\n+    const char* script_check_reason{nullptr};\r\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\r\n         constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\r\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\r\n@@ -2458,7 +2457,6 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n             //  artificially set the default assumed verified block further back.\r\n             // The test against the minimum chain work prevents the skipping when denied access to any chain at\r\n             //  least as good as the expected chain.\r\n-            fScriptChecks = false;\r\n         }\r\n     } else {\r\n         script_check_reason = \"assumevalid=0 (always verify)\";\r\n@@ -2573,16 +2571,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n              Ticks<SecondsDouble>(m_chainman.time_forks),\r\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\r\n \r\n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\r\n-        if (fScriptChecks) {\r\n-            Assume(!script_check_reason.empty());\r\n+    if (script_check_reason != m_prev_script_check_reason && GetRole() == ChainstateRole::NORMAL) {\r\n+        if (script_check_reason) {\r\n             LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\r\n                     pindex->nHeight, block_hash.ToString(), script_check_reason);\r\n         } else {\r\n             LogInfo(\"Disabling script verification at block #%d (%s).\",\r\n                     pindex->nHeight, block_hash.ToString());\r\n         }\r\n-        m_prev_script_checks_logged = fScriptChecks;\r\n+        m_prev_script_check_reason = script_check_reason;\r\n     }\r\n \r\n     CBlockUndo blockundo;\r\n@@ -2593,7 +2590,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n     // doesn't invalidate pointers into the vector, and keep txsdata in scope\r\n     // for as long as `control`.\r\n     std::optional<CCheckQueueControl<CScriptCheck>> control;\r\n-    if (auto& queue = m_chainman.GetCheckQueue(); queue.HasThreads() && fScriptChecks) control.emplace(queue);\r\n+    if (auto& queue = m_chainman.GetCheckQueue(); queue.HasThreads() && script_check_reason) control.emplace(queue);\r\n \r\n     std::vector<PrecomputedTransactionData> txsdata(block.vtx.size());\r\n \r\n@@ -2652,7 +2649,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n             break;\r\n         }\r\n \r\n-        if (!tx.IsCoinBase() && fScriptChecks)\r\n+        if (!tx.IsCoinBase() && script_check_reason)\r\n         {\r\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\r\n             bool tx_ok;\r\ndiff --git a/src/validation.h b/src/validation.h\r\nindex fea11c5515..6e426a4660 100644\r\n--- a/src/validation.h\r\n+++ b/src/validation.h\r\n@@ -560,7 +560,7 @@ protected:\r\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\r\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\r\n \r\n-    std::optional<bool> m_prev_script_checks_logged GUARDED_BY(::cs_main){};\r\n+    std::optional<const char*> m_prev_script_check_reason GUARDED_BY(::cs_main){};\r\n \r\n public:\r\n     //! Reference to a BlockManager instance which itself is shared across all\r\n```\r\n</details>",
      "created_at": "2025-09-18T11:38:16Z",
      "updated_at": "2025-09-18T11:44:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2358761689",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358761689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358840909",
      "pull_request_review_id": 3239180046,
      "id": 2358840909,
      "node_id": "PRRC_kwDOABII586MmQ5N",
      "diff_hunk": "@@ -140,35 +141,68 @@ def run_test(self):\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n         self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(3)\n \n+\n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1',\n+                                                           'assumevalid=0 (always verify)']):  # AssumeValid::CHECKED\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n+\n+        # nodes[1]\n         p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p1.send_header_for_blocks(self.blocks[0:2000])\n         p2p1.send_header_for_blocks(self.blocks[2000:])\n-        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1', 'Enabling signature validations at block #103']):\n+        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1',  # AssumeValid::SKIPPED\n+                                                           'Enabling signature validations at block #103',\n+                                                           'block not part of assumevalid chain']):  # AssumeValid::CHECKED_NOT_UNDER_ASSUMEVALID",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 76,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2351556972,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I would prefer having a separate reason message for when we have passed beyond the assumevalid height since it's so fundamental to assumevalid, and so different from being at a height below assumevalid on a forked chain.\r\n\r\nAgree it probably belongs in a separate commit, but still think it would be good to have in this PR.\r\nYour first commit that currently introduces `\"block not part of assumevalid chain\"` should probably state something more neutral like `\"block is not an ancestor of the assumevalid block\"`.\r\nThen with the separate commit:\r\n```diff\r\n+        } else if (it->second.nHeight < pindex->nHeight) {\r\n+            script_check_reason = \"block height exceeds assumevalid height\";\r\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\r\n-            script_check_reason = \"block is not an ancestor of the assumevalid block\";\r\n+            script_check_reason = \"block not part of assumevalid chain\";\r\n```\r\n",
      "created_at": "2025-09-18T11:56:02Z",
      "updated_at": "2025-09-18T11:56:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2358840909",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2358840909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360439251",
      "pull_request_review_id": 3241150159,
      "id": 2360439251,
      "node_id": "PRRC_kwDOABII586MsXHT",
      "diff_hunk": "@@ -2423,35 +2423,45 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto fScriptChecks{true};",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": 2358189439,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is trivial to review. Edit: removed eventually because of reason refactor.",
      "created_at": "2025-09-18T17:30:07Z",
      "updated_at": "2025-09-18T22:53:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2360439251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360439251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "LEFT",
      "line": null,
      "original_line": 2426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360439278",
      "pull_request_review_id": 3241150159,
      "id": 2360439278,
      "node_id": "PRRC_kwDOABII586MsXHu",
      "diff_hunk": "@@ -137,38 +131,98 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n \n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        block_1_hash = self.blocks[0].hash_hex\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            f'Enabling script verification at block #1 ({block_1_hash}): assumevalid=0 (always verify)',\n+            'Block validation error: block-script-verify-flag-failed'\n+        ]):\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n+\n+        # nodes[1]\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n         p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p1.send_header_for_blocks(self.blocks[0:2000])\n         p2p1.send_header_for_blocks(self.blocks[2000:])\n-        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1', 'Enabling signature validations at block #103']):\n+        with self.nodes[1].assert_debug_log(expected_msgs=[\n+            'Disabling script verification at block #1',\n+            f'Enabling script verification at block #103 ({self.blocks[102].hash_hex}): block not part of assumevalid chain'\n+        ]):\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n+\n+        # nodes[2]\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n         p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n         p2p2.send_header_for_blocks(self.blocks[0:200])\n \n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            f\"Enabling script verification at block #1 ({block_1_hash}): too recent relative to best header\",\n+            \"Block validation error: block-script-verify-flag-failed\"\n+        ]):\n+            self.send_blocks_until_disconnected(p2p2)\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        best_hash = self.nodes[3].getbestblockhash()\n+        tip_block = self.nodes[3].getblock(best_hash)\n+        second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+        second_chain = []\n+        for _ in range(150):\n+            block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+            block.solve()\n+            second_chain.append(block)\n+            second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+        p2p4 = self.nodes[3].add_p2p_connection(BaseNode())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 137,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": 2358241717,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed name",
      "created_at": "2025-09-18T17:30:07Z",
      "updated_at": "2025-09-18T17:30:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2360439278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360439278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360439282",
      "pull_request_review_id": 3241150159,
      "id": 2360439282,
      "node_id": "PRRC_kwDOABII586MsXHy",
      "diff_hunk": "@@ -129,19 +131,23 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])",
      "path": "test/functional/feature_assumevalid.py",
      "position": 61,
      "original_position": 35,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "9ecaadc94a5a4a61263aa17ddaba23ee5d155042",
      "in_reply_to_id": 2358167560,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No problem, I put them back to the beginning",
      "created_at": "2025-09-18T17:30:07Z",
      "updated_at": "2025-09-18T17:30:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2360439282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360439282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": 140,
      "original_start_line": 132,
      "start_side": "LEFT",
      "line": 142,
      "original_line": 142,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360439503",
      "pull_request_review_id": 3241150398,
      "id": 2360439503,
      "node_id": "PRRC_kwDOABII586MsXLP",
      "diff_hunk": "@@ -1,33 +1,25 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2022 The Bitcoin Core developers\n+# Copyright (c) 2014-present The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test logic for skipping signature validation on old blocks.\n \n Test logic for skipping signature validation on blocks which we've assumed\n valid (https://github.com/bitcoin/bitcoin/pull/9484)\n \n-We build a chain that includes and invalid signature for one of the\n-transactions:\n+We build a chain that includes an invalid signature for one of the transactions:\n \n-    0:        genesis block\n-    1:        block 1 with coinbase transaction output.\n-    2-101:    bury that block with 100 blocks so the coinbase transaction\n-              output can be spent\n-    102:      a block containing a transaction spending the coinbase\n-              transaction output. The transaction has an invalid signature.\n-    103-2202: bury the bad block with just over two weeks' worth of blocks\n-              (2100 blocks)\n+ 0:        genesis block\n+ 1:        block 1 with coinbase transaction output.\n+ 2-101:    bury that block with 100 blocks so the coinbase transaction output can be spent\n+ 102:      a block containing a transaction spending the coinbase transaction output. The transaction has an invalid signature.\n+ 103-2202: bury the bad block with just over two weeks' worth of blocks (2100 blocks)",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 27,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "788e45a5b210224e476543cbd31dffc7ae39b13e",
      "in_reply_to_id": 2358151635,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seemed like the time to simplify these, but I don't mind, reverted.",
      "created_at": "2025-09-18T17:30:10Z",
      "updated_at": "2025-09-18T17:30:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2360439503",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360439503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 10,
      "start_side": "LEFT",
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360440096",
      "pull_request_review_id": 3241151273,
      "id": 2360440096,
      "node_id": "PRRC_kwDOABII586MsXUg",
      "diff_hunk": "@@ -2423,35 +2423,45 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto fScriptChecks{true};\n+    std::string script_check_reason;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": 2358761689,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I did this deliberately (edit: I added enums originally to separate the validation decision from the error message), but thinking a bit more I think we can make it work. Pushed something similar, let me know what you think.",
      "created_at": "2025-09-18T17:30:19Z",
      "updated_at": "2025-09-18T18:48:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2360440096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360440096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360894055",
      "pull_request_review_id": 3241734167,
      "id": 2360894055,
      "node_id": "PRRC_kwDOABII586MuGJn",
      "diff_hunk": "@@ -1,33 +1,25 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2022 The Bitcoin Core developers\n+# Copyright (c) 2014-present The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test logic for skipping signature validation on old blocks.\n \n Test logic for skipping signature validation on blocks which we've assumed\n valid (https://github.com/bitcoin/bitcoin/pull/9484)\n \n-We build a chain that includes and invalid signature for one of the\n-transactions:\n+We build a chain that includes an invalid signature for one of the transactions:\n \n-    0:        genesis block\n-    1:        block 1 with coinbase transaction output.\n-    2-101:    bury that block with 100 blocks so the coinbase transaction\n-              output can be spent\n-    102:      a block containing a transaction spending the coinbase\n-              transaction output. The transaction has an invalid signature.\n-    103-2202: bury the bad block with just over two weeks' worth of blocks\n-              (2100 blocks)\n+ 0:        genesis block\n+ 1:        block 1 with coinbase transaction output.\n+ 2-101:    bury that block with 100 blocks so the coinbase transaction output can be spent\n+ 102:      a block containing a transaction spending the coinbase transaction output. The transaction has an invalid signature.\n+ 103-2202: bury the bad block with just over two weeks' worth of blocks (2100 blocks)",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 27,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "788e45a5b210224e476543cbd31dffc7ae39b13e",
      "in_reply_to_id": 2358151635,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks like the revert is in the wrong commit.",
      "created_at": "2025-09-18T19:35:01Z",
      "updated_at": "2025-09-18T19:35:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2360894055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2360894055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 10,
      "start_side": "LEFT",
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361210534",
      "pull_request_review_id": 3242130677,
      "id": 2361210534,
      "node_id": "PRRC_kwDOABII586MvTam",
      "diff_hunk": "@@ -1,33 +1,25 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2022 The Bitcoin Core developers\n+# Copyright (c) 2014-present The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test logic for skipping signature validation on old blocks.\n \n Test logic for skipping signature validation on blocks which we've assumed\n valid (https://github.com/bitcoin/bitcoin/pull/9484)\n \n-We build a chain that includes and invalid signature for one of the\n-transactions:\n+We build a chain that includes an invalid signature for one of the transactions:\n \n-    0:        genesis block\n-    1:        block 1 with coinbase transaction output.\n-    2-101:    bury that block with 100 blocks so the coinbase transaction\n-              output can be spent\n-    102:      a block containing a transaction spending the coinbase\n-              transaction output. The transaction has an invalid signature.\n-    103-2202: bury the bad block with just over two weeks' worth of blocks\n-              (2100 blocks)\n+ 0:        genesis block\n+ 1:        block 1 with coinbase transaction output.\n+ 2-101:    bury that block with 100 blocks so the coinbase transaction output can be spent\n+ 102:      a block containing a transaction spending the coinbase transaction output. The transaction has an invalid signature.\n+ 103-2202: bury the bad block with just over two weeks' worth of blocks (2100 blocks)",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 27,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "788e45a5b210224e476543cbd31dffc7ae39b13e",
      "in_reply_to_id": 2358151635,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-18T21:11:28Z",
      "updated_at": "2025-09-18T22:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2361210534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361210534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 10,
      "start_side": "LEFT",
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361341176",
      "pull_request_review_id": 3242130677,
      "id": 2361341176,
      "node_id": "PRRC_kwDOABII586MvzT4",
      "diff_hunk": "@@ -140,35 +141,68 @@ def run_test(self):\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n         self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(3)\n \n+\n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1',\n+                                                           'assumevalid=0 (always verify)']):  # AssumeValid::CHECKED\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n+\n+        # nodes[1]\n         p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p1.send_header_for_blocks(self.blocks[0:2000])\n         p2p1.send_header_for_blocks(self.blocks[2000:])\n-        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1', 'Enabling signature validations at block #103']):\n+        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1',  # AssumeValid::SKIPPED\n+                                                           'Enabling signature validations at block #103',\n+                                                           'block not part of assumevalid chain']):  # AssumeValid::CHECKED_NOT_UNDER_ASSUMEVALID",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 76,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2351556972,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I missed this comment somehow.\r\nWhile this is a tiny change to the validation logic, I think we can make it more focused by putting it inside the original  `GetAncestor(pindex->nHeight) != pindex` block.\r\nNow that it was removed from V30 we can safely do this I think - and the messages would be a lot more useful this way. Added a new test to cover this and unified the test styles as well since it's not *that* urgent anymore.",
      "created_at": "2025-09-18T22:54:01Z",
      "updated_at": "2025-09-18T22:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2361341176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2361341176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362200979",
      "pull_request_review_id": 3243827867,
      "id": 2362200979,
      "node_id": "PRRC_kwDOABII586MzFOT",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::optional<bool> m_prev_script_checks_logged GUARDED_BY(::cs_main){};\n+    std::optional<std::string> m_last_script_check_reason_logged GUARDED_BY(::cs_main){\"\"}; // init with foreign value",
      "path": "src/validation.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "ed9d573dbfbfa6c4cbebf6da520f70bdb23fb678",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Don't see much of a point to change `m_prev_script_checks_logged` types twice within the PR (`atomic_bool` -> `optional<bool>` -> `optional<string>`)?\r\nWould suggest swapping the order of 00194b5c and 0ab8939c and then squashing 0ab8939c together with ed9d573d.",
      "created_at": "2025-09-19T08:43:55Z",
      "updated_at": "2025-09-19T09:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2362200979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362200979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 563,
      "start_side": "LEFT",
      "line": null,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362210661",
      "pull_request_review_id": 3243827867,
      "id": 2362210661,
      "node_id": "PRRC_kwDOABII586MzHll",
      "diff_hunk": "@@ -140,35 +141,68 @@ def run_test(self):\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n         self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(3)\n \n+\n+        # nodes[0]\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Enabling signature validations at block #1',\n+                                                           'assumevalid=0 (always verify)']):  # AssumeValid::CHECKED\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n+\n+        # nodes[1]\n         p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p1.send_header_for_blocks(self.blocks[0:2000])\n         p2p1.send_header_for_blocks(self.blocks[2000:])\n-        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1', 'Enabling signature validations at block #103']):\n+        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1',  # AssumeValid::SKIPPED\n+                                                           'Enabling signature validations at block #103',\n+                                                           'block not part of assumevalid chain']):  # AssumeValid::CHECKED_NOT_UNDER_ASSUMEVALID",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 76,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "9b04e4f96200daf7516d1b8b6b0dfc4c077837e8",
      "in_reply_to_id": 2351556972,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks!",
      "created_at": "2025-09-19T08:47:56Z",
      "updated_at": "2025-09-19T09:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2362210661",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362210661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362231753",
      "pull_request_review_id": 3243827867,
      "id": 2362231753,
      "node_id": "PRRC_kwDOABII586MzMvJ",
      "diff_hunk": "@@ -2423,35 +2423,45 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto fScriptChecks{true};\n+    std::string script_check_reason;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": 2358761689,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for combining the variables!\r\n\r\nCould you please lay down your aversion to using `const char*` here? Benefits I see over `std::string`:\r\n* Allocation-free.\r\n* Quick comparisons (pointer values rather than fetching the two cache lines where the strings are allocated on the heap and doing string comparisons).\r\n\r\nI know it's not performance-critical, but don't see any major drawbacks to it. `std::string` has never been claimed to be a zero-cost abstraction alternative to `const char*`.",
      "created_at": "2025-09-19T08:56:33Z",
      "updated_at": "2025-09-19T09:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2362231753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362231753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362266224",
      "pull_request_review_id": 3243827867,
      "id": 2362266224,
      "node_id": "PRRC_kwDOABII586MzVJw",
      "diff_hunk": "@@ -170,5 +179,21 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n+        # nodes[3]\n+        p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+        p2p3.send_header_for_blocks(self.blocks[0:200])\n+        p2p3.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[3].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 90,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "4cd11cef0fd24d2413b624c6666e5fde9b1e9d42",
      "in_reply_to_id": 2351814133,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Thanks for changing to `self.wait_until(lambda: self.nodes[3].getblockcount() == 1)`).",
      "created_at": "2025-09-19T09:10:50Z",
      "updated_at": "2025-09-19T09:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2362266224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362266224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 183,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362289291",
      "pull_request_review_id": 3243827867,
      "id": 2362289291,
      "node_id": "PRRC_kwDOABII586MzayL",
      "diff_hunk": "@@ -28,6 +27,12 @@\n     - node2 has -assumevalid set to the hash of block 102. Try to sync to\n       block 200. node2 will reject block 102 since it's assumed valid, but it\n       isn't buried by at least two weeks' work.\n+    - node3 has -assumevalid set to the hash of block 102. Feed a longer\n+      competing headers-only branch so block #1 is not on the best header chain.\n+    - node4 has -assumevalid set to the hash of block 102. Submit an alternative\n+      block #1 that is not part of the assumevalid chain.\n+    - node5 has no -assumevalid parameter. Reindex to deterministically hit\n+      \"assumevalid hash not in headers\" and \"below minimum chainwork\".",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 35,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    - node5 starts with no -assumevalid parameter. Reindex to deterministically hit\r\n      \"assumevalid hash not in headers\" and \"below minimum chainwork\".\r\n```",
      "created_at": "2025-09-19T09:20:48Z",
      "updated_at": "2025-09-19T09:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2362289291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362289291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 34,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362319419",
      "pull_request_review_id": 3243827867,
      "id": 2362319419,
      "node_id": "PRRC_kwDOABII586MziI7",
      "diff_hunk": "@@ -136,38 +141,117 @@ def run_test(self):\n             self.tip = block.hash_int\n             self.block_time += 1\n             height += 1\n+        block_1_hash = self.blocks[0].hash_hex\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n-\n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n-        with self.nodes[1].assert_debug_log(expected_msgs=['Disabling signature validations at block #1', 'Enabling signature validations at block #103']):\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            f\"Enabling script verification at block #1 ({block_1_hash}): assumevalid=0 (always verify).\",\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)",
      "path": "test/functional/feature_assumevalid.py",
      "position": 93,
      "original_position": 93,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Had a back & forth out-of-band about increasing the `with`-block scopes. While it makes the code layout nicer, it makes for slightly sloppier tests. But initializing a p2p connection and then doing some asserts at the end of the block doesn't seem too bad, so this is nit-level.",
      "created_at": "2025-09-19T09:33:48Z",
      "updated_at": "2025-09-19T09:35:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2362319419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2362319419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": 155,
      "original_start_line": 155,
      "start_side": "RIGHT",
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364568090",
      "pull_request_review_id": 3247176290,
      "id": 2364568090,
      "node_id": "PRRC_kwDOABII586M8HIa",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::optional<bool> m_prev_script_checks_logged GUARDED_BY(::cs_main){};\n+    std::optional<std::string> m_last_script_check_reason_logged GUARDED_BY(::cs_main){\"\"}; // init with foreign value",
      "path": "src/validation.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "ed9d573dbfbfa6c4cbebf6da520f70bdb23fb678",
      "in_reply_to_id": 2362200979,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Don't see much of a point to change m_prev_script_checks_logged types twice\r\n\r\nI deliberately separated \"enabling\" logs changes from enabling reasons to show the changes in small steps, reflected in the tests. They're fundamentally different changes that are reflected in separate test and behavior changes, do you feel strongly about merging them?",
      "created_at": "2025-09-19T21:25:45Z",
      "updated_at": "2025-09-19T21:25:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2364568090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364568090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 563,
      "start_side": "LEFT",
      "line": null,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364630671",
      "pull_request_review_id": 3247285284,
      "id": 2364630671,
      "node_id": "PRRC_kwDOABII586M8WaP",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::optional<bool> m_prev_script_checks_logged GUARDED_BY(::cs_main){};\n+    std::optional<std::string> m_last_script_check_reason_logged GUARDED_BY(::cs_main){\"\"}; // init with foreign value",
      "path": "src/validation.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "ed9d573dbfbfa6c4cbebf6da520f70bdb23fb678",
      "in_reply_to_id": 2362200979,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Curious what other reviewers think, but not a blocker.",
      "created_at": "2025-09-19T21:56:06Z",
      "updated_at": "2025-09-19T21:56:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2364630671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364630671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 563,
      "start_side": "LEFT",
      "line": null,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364638838",
      "pull_request_review_id": 3247296945,
      "id": 2364638838,
      "node_id": "PRRC_kwDOABII586M8YZ2",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::optional<bool> m_prev_script_checks_logged GUARDED_BY(::cs_main){};\n+    std::optional<std::string> m_last_script_check_reason_logged GUARDED_BY(::cs_main){\"\"}; // init with foreign value",
      "path": "src/validation.h",
      "position": 1,
      "original_position": 5,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "ed9d573dbfbfa6c4cbebf6da520f70bdb23fb678",
      "in_reply_to_id": 2362200979,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find it important to modify this area of the code in tiny steps, it's why I separated the two concerns in the first place.",
      "created_at": "2025-09-19T22:03:35Z",
      "updated_at": "2025-09-19T22:03:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2364638838",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364638838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 563,
      "start_side": "LEFT",
      "line": null,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364654157",
      "pull_request_review_id": 3247324566,
      "id": 2364654157,
      "node_id": "PRRC_kwDOABII586M8cJN",
      "diff_hunk": "@@ -28,6 +27,12 @@\n     - node2 has -assumevalid set to the hash of block 102. Try to sync to\n       block 200. node2 will reject block 102 since it's assumed valid, but it\n       isn't buried by at least two weeks' work.\n+    - node3 has -assumevalid set to the hash of block 102. Feed a longer\n+      competing headers-only branch so block #1 is not on the best header chain.\n+    - node4 has -assumevalid set to the hash of block 102. Submit an alternative\n+      block #1 that is not part of the assumevalid chain.\n+    - node5 has no -assumevalid parameter. Reindex to deterministically hit\n+      \"assumevalid hash not in headers\" and \"below minimum chainwork\".",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 35,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "in_reply_to_id": 2362289291,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-09-19T22:12:46Z",
      "updated_at": "2025-09-19T22:12:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2364654157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364654157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 34,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364654341",
      "pull_request_review_id": 3247324790,
      "id": 2364654341,
      "node_id": "PRRC_kwDOABII586M8cMF",
      "diff_hunk": "@@ -2423,35 +2423,45 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto fScriptChecks{true};\n+    std::string script_check_reason;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": 2358761689,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it makes much difference, but looks like you do, so I have changed it to `const char*`, let me know what you think.",
      "created_at": "2025-09-19T22:12:53Z",
      "updated_at": "2025-09-19T22:12:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2364654341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2364654341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365841816",
      "pull_request_review_id": 3249291256,
      "id": 2365841816,
      "node_id": "PRRC_kwDOABII586NA-GY",
      "diff_hunk": "@@ -2423,35 +2423,45 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    auto fScriptChecks{true};\n+    std::string script_check_reason;",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "38025edd1978670bfa3c32cf518acd0b01644167",
      "original_commit_id": "f6951cb74bba60fedb2e0c041038561ba2583594",
      "in_reply_to_id": 2358761689,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Warp speed engaged, thank you!",
      "created_at": "2025-09-20T21:44:12Z",
      "updated_at": "2025-09-20T21:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2365841816",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2365841816"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": 2426,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2367994445",
      "pull_request_review_id": 3252294836,
      "id": 2367994445,
      "node_id": "PRRC_kwDOABII586NJLpN",
      "diff_hunk": "@@ -2423,7 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;",
      "path": "src/validation.cpp",
      "position": 6,
      "original_position": 5,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/c99fde2c0ac181da656e8c942fa6fea93713de75: wouldn't it be better to just do `std::optional<std::string> script_check_reason`?",
      "created_at": "2025-09-22T12:07:06Z",
      "updated_at": "2025-09-22T12:08:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2367994445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2367994445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2426,
      "original_line": 2426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2367997436",
      "pull_request_review_id": 3252294836,
      "id": 2367997436,
      "node_id": "PRRC_kwDOABII586NJMX8",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::optional<bool> m_prev_script_checks_logged GUARDED_BY(::cs_main){};\n+    std::optional<const char*> m_last_script_check_reason_logged GUARDED_BY(::cs_main){};",
      "path": "src/validation.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": null,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/33336/commits/c99fde2c0ac181da656e8c942fa6fea93713de75: I think this was better as `std::optional<bool>`",
      "created_at": "2025-09-22T12:07:59Z",
      "updated_at": "2025-09-22T12:08:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2367997436",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2367997436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2368959548",
      "pull_request_review_id": 3253477913,
      "id": 2368959548,
      "node_id": "PRRC_kwDOABII586NM3Q8",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::optional<bool> m_prev_script_checks_logged GUARDED_BY(::cs_main){};\n+    std::optional<const char*> m_last_script_check_reason_logged GUARDED_BY(::cs_main){};",
      "path": "src/validation.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2367997436,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "it was specifically requested in https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2358761689",
      "created_at": "2025-09-22T15:18:22Z",
      "updated_at": "2025-09-22T15:18:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2368959548",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2368959548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2370760229",
      "pull_request_review_id": 3255744110,
      "id": 2370760229,
      "node_id": "PRRC_kwDOABII586NTu4l",
      "diff_hunk": "@@ -2423,7 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;",
      "path": "src/validation.cpp",
      "position": 6,
      "original_position": 5,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2367994445,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's what I had before, but this was specifically requested: https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2362231753\r\nIt's not a very big difference in my opinion, I don't mind either.",
      "created_at": "2025-09-23T01:18:59Z",
      "updated_at": "2025-09-23T01:18:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2370760229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2370760229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2426,
      "original_line": 2426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371206072",
      "pull_request_review_id": 3256306669,
      "id": 2371206072,
      "node_id": "PRRC_kwDOABII586NVbu4",
      "diff_hunk": "@@ -2423,7 +2423,7 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;",
      "path": "src/validation.cpp",
      "position": 6,
      "original_position": 5,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2367994445,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Alright",
      "created_at": "2025-09-23T05:32:57Z",
      "updated_at": "2025-09-23T05:32:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2371206072",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371206072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2426,
      "original_line": 2426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371206290",
      "pull_request_review_id": 3256306946,
      "id": 2371206290,
      "node_id": "PRRC_kwDOABII586NVbyS",
      "diff_hunk": "@@ -560,7 +560,7 @@ class Chainstate\n     //! Cached result of LookupBlockIndex(*m_from_snapshot_blockhash)\n     mutable const CBlockIndex* m_cached_snapshot_base GUARDED_BY(::cs_main){nullptr};\n \n-    std::optional<bool> m_prev_script_checks_logged GUARDED_BY(::cs_main){};\n+    std::optional<const char*> m_last_script_check_reason_logged GUARDED_BY(::cs_main){};",
      "path": "src/validation.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2367997436,
      "user": {
        "login": "Eunovo",
        "id": 37949128,
        "node_id": "MDQ6VXNlcjM3OTQ5MTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37949128?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Eunovo",
        "html_url": "https://github.com/Eunovo",
        "followers_url": "https://api.github.com/users/Eunovo/followers",
        "following_url": "https://api.github.com/users/Eunovo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Eunovo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Eunovo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Eunovo/subscriptions",
        "organizations_url": "https://api.github.com/users/Eunovo/orgs",
        "repos_url": "https://api.github.com/users/Eunovo/repos",
        "events_url": "https://api.github.com/users/Eunovo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Eunovo/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Alright",
      "created_at": "2025-09-23T05:33:08Z",
      "updated_at": "2025-09-23T05:33:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2371206290",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371206290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371229366",
      "pull_request_review_id": 3256339146,
      "id": 2371229366,
      "node_id": "PRRC_kwDOABII586NVha2",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};",
      "path": "src/validation.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps:\r\n\r\n```c++\r\nconstexpr std::chrono::days TOO_RECENT_FOR_ASSUMEVALID{14};\r\n...\r\n} else if (GBPET(...) <= count_seconds(TOO_RECENT_FOR_ASSUME_VALID)) {\r\n```",
      "created_at": "2025-09-23T05:49:50Z",
      "updated_at": "2025-09-23T06:47:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2371229366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371229366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2430,
      "original_line": 2430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371233054",
      "pull_request_review_id": 3256339146,
      "id": 2371233054,
      "node_id": "PRRC_kwDOABII586NViUe",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            script_check_reason = \"assumevalid hash not in headers\";\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = (pindex->nHeight > it->second.nHeight) ? \"block height above assumevalid height\" : \"block not part of assumevalid chain\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```c++\r\n} else if (pindex->nHeight > it->second.nHeight) {\r\n    script_check_reason = \"block height above ..\";\r\n} else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\r\n    script_check_Reason = \"block not part of av chain\";\r\n...\r\n```",
      "created_at": "2025-09-23T05:52:25Z",
      "updated_at": "2025-09-23T06:25:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2371233054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371233054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2438,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371245648",
      "pull_request_review_id": 3256339146,
      "id": 2371245648,
      "node_id": "PRRC_kwDOABII586NVlZQ",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            script_check_reason = \"assumevalid hash not in headers\";\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = (pindex->nHeight > it->second.nHeight) ? \"block height above assumevalid height\" : \"block not part of assumevalid chain\";\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = \"block not on best header chain\";\n+        } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n+            script_check_reason = \"best header chainwork below minimumchainwork\";\n+        } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= TWO_WEEKS_IN_SECONDS) {\n+            script_check_reason = \"too recent relative to best header\";\n+        } else {\n+            // This block is a member of the assumed verified chain and an ancestor of the best header.\n+            // Script verification is skipped when connecting blocks under the\n+            //  assumevalid block. Assuming the assumevalid block is valid this\n+            //  is safe because block merkle hashes are still computed and checked,\n+            // Of course, if an assumed valid block is invalid due to false scriptSigs\n+            //  this optimization would allow an invalid chain to be accepted.\n+            // The equivalent time check discourages hash power from extorting the network via DOS attack\n+            //  into accepting an invalid block through telling users they must manually set assumevalid.\n+            //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n+            //  it hard to hide the implication of the demand. This also avoids having release candidates\n+            //  that are hardly doing any signature verification at all in testing without having to\n+            //  artificially set the default assumed verified block further back.\n+            // The test against the minimum chain work prevents the skipping when denied access to any chain at\n+            //  least as good as the expected chain.\n+            script_check_reason = nullptr;\n         }\n+    } else {\n+        script_check_reason = \"assumevalid=0 (always verify)\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 62,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "switch the check to:\r\n\r\n```c++\r\nif (AssumedValidBlock().IsNull()) {\r\n    script_check_reason = \"assumevalid=0\";\r\n} else {\r\n     // ... long code block ...\r\n}\r\n```\r\n\r\n?",
      "created_at": "2025-09-23T06:02:05Z",
      "updated_at": "2025-09-23T06:25:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2371245648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371245648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371247053",
      "pull_request_review_id": 3256339146,
      "id": 2371247053,
      "node_id": "PRRC_kwDOABII586NVlvN",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            script_check_reason = \"assumevalid hash not in headers\";\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = (pindex->nHeight > it->second.nHeight) ? \"block height above assumevalid height\" : \"block not part of assumevalid chain\";\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = \"block not on best header chain\";\n+        } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n+            script_check_reason = \"best header chainwork below minimumchainwork\";\n+        } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= TWO_WEEKS_IN_SECONDS) {\n+            script_check_reason = \"too recent relative to best header\";\n+        } else {\n+            // This block is a member of the assumed verified chain and an ancestor of the best header.\n+            // Script verification is skipped when connecting blocks under the\n+            //  assumevalid block. Assuming the assumevalid block is valid this\n+            //  is safe because block merkle hashes are still computed and checked,\n+            // Of course, if an assumed valid block is invalid due to false scriptSigs\n+            //  this optimization would allow an invalid chain to be accepted.",
      "path": "src/validation.cpp",
      "position": 53,
      "original_position": 50,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Separate text with a blank line rather than indenting?",
      "created_at": "2025-09-23T06:03:03Z",
      "updated_at": "2025-09-23T06:25:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2371247053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371247053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2453,
      "original_line": 2453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371280673",
      "pull_request_review_id": 3256339146,
      "id": 2371280673,
      "node_id": "PRRC_kwDOABII586NVt8h",
      "diff_hunk": "@@ -2563,9 +2572,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (script_check_reason != m_last_script_check_reason_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (script_check_reason) {\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        }\n+        m_last_script_check_reason_logged = script_check_reason;",
      "path": "src/validation.cpp",
      "position": 82,
      "original_position": 81,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "consider setting `const bool fScriptChecks = (script_check_reason != nullptr);` here, and leaving the following code unchanged?",
      "created_at": "2025-09-23T06:23:36Z",
      "updated_at": "2025-09-23T06:25:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2371280673",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2371280673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2584,
      "original_line": 2584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372950950",
      "pull_request_review_id": 3258910916,
      "id": 2372950950,
      "node_id": "PRRC_kwDOABII586NcFum",
      "diff_hunk": "@@ -2563,9 +2572,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (script_check_reason != m_last_script_check_reason_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (script_check_reason) {\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        }\n+        m_last_script_check_reason_logged = script_check_reason;",
      "path": "src/validation.cpp",
      "position": 82,
      "original_position": 81,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371280673,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You mean to only log enabled/disabled changes, but not enabled-after-assumevalid/enabled-no-burried changes? This was also deliberate to show the exact reason so that users understand the *why* and not just whether it's enabled.",
      "created_at": "2025-09-23T17:02:06Z",
      "updated_at": "2025-09-23T17:05:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2372950950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372950950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2584,
      "original_line": 2584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372950999",
      "pull_request_review_id": 3258910993,
      "id": 2372950999,
      "node_id": "PRRC_kwDOABII586NcFvX",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            script_check_reason = \"assumevalid hash not in headers\";\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = (pindex->nHeight > it->second.nHeight) ? \"block height above assumevalid height\" : \"block not part of assumevalid chain\";\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = \"block not on best header chain\";\n+        } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n+            script_check_reason = \"best header chainwork below minimumchainwork\";\n+        } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= TWO_WEEKS_IN_SECONDS) {\n+            script_check_reason = \"too recent relative to best header\";\n+        } else {\n+            // This block is a member of the assumed verified chain and an ancestor of the best header.\n+            // Script verification is skipped when connecting blocks under the\n+            //  assumevalid block. Assuming the assumevalid block is valid this\n+            //  is safe because block merkle hashes are still computed and checked,\n+            // Of course, if an assumed valid block is invalid due to false scriptSigs\n+            //  this optimization would allow an invalid chain to be accepted.",
      "path": "src/validation.cpp",
      "position": 53,
      "original_position": 50,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371247053,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The original message contained these indentations - except in a very few cases that I adjusted for consistency. It seemed simpler to me to unify the text that way - otherwise I would have rewritten it completely since I don't particularly like the way it describes the situation.",
      "created_at": "2025-09-23T17:02:07Z",
      "updated_at": "2025-09-23T17:05:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2372950999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372950999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2453,
      "original_line": 2453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372951037",
      "pull_request_review_id": 3258911053,
      "id": 2372951037,
      "node_id": "PRRC_kwDOABII586NcFv9",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            script_check_reason = \"assumevalid hash not in headers\";\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = (pindex->nHeight > it->second.nHeight) ? \"block height above assumevalid height\" : \"block not part of assumevalid chain\";\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = \"block not on best header chain\";\n+        } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n+            script_check_reason = \"best header chainwork below minimumchainwork\";\n+        } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= TWO_WEEKS_IN_SECONDS) {\n+            script_check_reason = \"too recent relative to best header\";\n+        } else {\n+            // This block is a member of the assumed verified chain and an ancestor of the best header.\n+            // Script verification is skipped when connecting blocks under the\n+            //  assumevalid block. Assuming the assumevalid block is valid this\n+            //  is safe because block merkle hashes are still computed and checked,\n+            // Of course, if an assumed valid block is invalid due to false scriptSigs\n+            //  this optimization would allow an invalid chain to be accepted.\n+            // The equivalent time check discourages hash power from extorting the network via DOS attack\n+            //  into accepting an invalid block through telling users they must manually set assumevalid.\n+            //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n+            //  it hard to hide the implication of the demand. This also avoids having release candidates\n+            //  that are hardly doing any signature verification at all in testing without having to\n+            //  artificially set the default assumed verified block further back.\n+            // The test against the minimum chain work prevents the skipping when denied access to any chain at\n+            //  least as good as the expected chain.\n+            script_check_reason = nullptr;\n         }\n+    } else {\n+        script_check_reason = \"assumevalid=0 (always verify)\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 62,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371245648,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I thought of this also, we can even add this error message as default and overwrite in every other case. If other reviewers also thing this would be simpler, I can do it in the next push, if needed.",
      "created_at": "2025-09-23T17:02:08Z",
      "updated_at": "2025-09-23T17:02:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2372951037",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372951037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372951112",
      "pull_request_review_id": 3258911168,
      "id": 2372951112,
      "node_id": "PRRC_kwDOABII586NcFxI",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            script_check_reason = \"assumevalid hash not in headers\";\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = (pindex->nHeight > it->second.nHeight) ? \"block height above assumevalid height\" : \"block not part of assumevalid chain\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371233054,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "that was the original suggestion as well, see https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2351556972\r\nI decided against it since I don't want to introduce an extra explicit assumevalid branch, it's still the same case (not part of av chain), just with better message - seems conceptually easier to grasp if we have fewer overall categories.",
      "created_at": "2025-09-23T17:02:10Z",
      "updated_at": "2025-09-23T17:02:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2372951112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372951112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2438,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372951175",
      "pull_request_review_id": 3258911288,
      "id": 2372951175,
      "node_id": "PRRC_kwDOABII586NcFyH",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};",
      "path": "src/validation.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371229366,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't mind doing this in a separate PR, but here I have decided against it since it's not strictly related to the change and is in consensus code, see: https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2347916838",
      "created_at": "2025-09-23T17:02:13Z",
      "updated_at": "2025-09-23T17:02:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2372951175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2372951175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2430,
      "original_line": 2430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375904163",
      "pull_request_review_id": 3263072412,
      "id": 2375904163,
      "node_id": "PRRC_kwDOABII586NnWuj",
      "diff_hunk": "@@ -27,6 +27,12 @@\n     - node2 has -assumevalid set to the hash of block 102. Try to sync to\n       block 200. node2 will reject block 102 since it's assumed valid, but it\n       isn't buried by at least two weeks' work.\n+    - node3 has -assumevalid set to the hash of block 102. Feed a longer\n+      competing headers-only branch so block #1 is not on the best header chain.\n+    - node4 has -assumevalid set to the hash of block 102. Submit an alternative\n+      block #1 that is not part of the assumevalid chain.\n+    - node5 starts with no -assumevalid parameter. Reindex to deterministically hit",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 17,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I think we can remove \"deterministically\" here. It's implied.",
      "created_at": "2025-09-24T13:59:02Z",
      "updated_at": "2025-09-24T14:43:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2375904163",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375904163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375948743",
      "pull_request_review_id": 3263072412,
      "id": 2375948743,
      "node_id": "PRRC_kwDOABII586NnhnH",
      "diff_hunk": "@@ -136,40 +142,109 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n+\n+        # nodes[1]\n         with self.nodes[1].assert_debug_log(expected_msgs=[\n-            \"Disabling script verification at block #1\",\n-            \"Enabling script verification at block #103\",\n+            f\"Disabling script verification at block #1 ({self.blocks[0].hash_hex}).\",\n+            f\"Enabling script verification at block #103 ({self.blocks[102].hash_hex}).\",\n         ]):\n+            p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n+\n+            p2p1.send_header_for_blocks(self.blocks[0:2000])\n+            p2p1.send_header_for_blocks(self.blocks[2000:])\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n-        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+            assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n-        p2p2.send_header_for_blocks(self.blocks[0:200])\n \n+        # nodes[2]\n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+            p2p2.send_header_for_blocks(self.blocks[0:200])\n+\n+            self.send_blocks_until_disconnected(p2p2)\n+\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+\n+\n+        # nodes[3]\n+        with self.nodes[3].assert_debug_log(expected_msgs=[\n+        ]):\n+            best_hash = self.nodes[3].getbestblockhash()\n+            tip_block = self.nodes[3].getblock(best_hash)\n+            second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+            second_chain = []\n+            for _ in range(150):\n+                block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+                block.solve()\n+                second_chain.append(block)\n+                second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+            p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+\n+            p2p3.send_header_for_blocks(second_chain)\n+            p2p3.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p3.send_without_ping(msg_block(self.blocks[0]))\n+            self.wait_until(lambda: self.nodes[3].getblockcount() == 1)\n+\n+\n+        # nodes[4]\n+        genesis_hash = self.nodes[4].getbestblockhash()\n+        genesis_time = self.nodes[4].getblock(genesis_hash)['time']\n+        alt1 = create_block(int(genesis_hash, 16), create_coinbase(1), genesis_time + 2)\n+        alt1.solve()\n+        with self.nodes[4].assert_debug_log(expected_msgs=[\n+        ]):\n+            p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\n+            p2p4.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p4.send_without_ping(msg_block(alt1))\n+            self.wait_until(lambda: self.nodes[4].getblockcount() == 1)\n+\n+\n+        # nodes[5]\n+        # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 150,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: same, no need for \"deterministically\" here.",
      "created_at": "2025-09-24T14:12:55Z",
      "updated_at": "2025-09-24T14:43:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2375948743",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375948743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375961559",
      "pull_request_review_id": 3263072412,
      "id": 2375961559,
      "node_id": "PRRC_kwDOABII586NnkvX",
      "diff_hunk": "@@ -136,40 +142,109 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n+\n+        # nodes[1]\n         with self.nodes[1].assert_debug_log(expected_msgs=[\n-            \"Disabling script verification at block #1\",\n-            \"Enabling script verification at block #103\",\n+            f\"Disabling script verification at block #1 ({self.blocks[0].hash_hex}).\",\n+            f\"Enabling script verification at block #103 ({self.blocks[102].hash_hex}).\",\n         ]):\n+            p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n+\n+            p2p1.send_header_for_blocks(self.blocks[0:2000])\n+            p2p1.send_header_for_blocks(self.blocks[2000:])\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n-        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+            assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n-        p2p2.send_header_for_blocks(self.blocks[0:200])\n \n+        # nodes[2]\n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+            p2p2.send_header_for_blocks(self.blocks[0:200])\n+\n+            self.send_blocks_until_disconnected(p2p2)\n+\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+\n+\n+        # nodes[3]\n+        with self.nodes[3].assert_debug_log(expected_msgs=[\n+        ]):\n+            best_hash = self.nodes[3].getbestblockhash()\n+            tip_block = self.nodes[3].getblock(best_hash)\n+            second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+            second_chain = []\n+            for _ in range(150):\n+                block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+                block.solve()\n+                second_chain.append(block)\n+                second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+            p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+\n+            p2p3.send_header_for_blocks(second_chain)\n+            p2p3.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p3.send_without_ping(msg_block(self.blocks[0]))\n+            self.wait_until(lambda: self.nodes[3].getblockcount() == 1)\n+\n+\n+        # nodes[4]\n+        genesis_hash = self.nodes[4].getbestblockhash()\n+        genesis_time = self.nodes[4].getblock(genesis_hash)['time']\n+        alt1 = create_block(int(genesis_hash, 16), create_coinbase(1), genesis_time + 2)\n+        alt1.solve()\n+        with self.nodes[4].assert_debug_log(expected_msgs=[\n+        ]):\n+            p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\n+            p2p4.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p4.send_without_ping(msg_block(alt1))\n+            self.wait_until(lambda: self.nodes[4].getblockcount() == 1)\n+\n+\n+        # nodes[5]\n+        # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).\n+        p2p5 = self.nodes[5].add_p2p_connection(BaseNode())\n+        p2p5.send_header_for_blocks(self.blocks[0:200])\n+        p2p5.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[5].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 154,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't this be `getblockcount() == 1`?",
      "created_at": "2025-09-24T14:16:55Z",
      "updated_at": "2025-09-24T14:43:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2375961559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2375961559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376005833",
      "pull_request_review_id": 3263072412,
      "id": 2376005833,
      "node_id": "PRRC_kwDOABII586NnvjJ",
      "diff_hunk": "@@ -2433,15 +2433,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n         if (it == m_blockman.m_block_index.end()) {\n-            // TODO\n+            script_check_reason = \"assumevalid hash not in headers\";\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not part of assumevalid chain\";\n         } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not on best header chain\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: \"block not in best header chain\"",
      "created_at": "2025-09-24T14:29:12Z",
      "updated_at": "2025-09-24T14:43:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2376005833",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376005833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376007280",
      "pull_request_review_id": 3263072412,
      "id": 2376007280,
      "node_id": "PRRC_kwDOABII586Nnv5w",
      "diff_hunk": "@@ -2433,15 +2433,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n         if (it == m_blockman.m_block_index.end()) {\n-            // TODO\n+            script_check_reason = \"assumevalid hash not in headers\";\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not part of assumevalid chain\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 17,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: for consistency \"block not in assumevalid chain\"",
      "created_at": "2025-09-24T14:29:43Z",
      "updated_at": "2025-09-24T14:43:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2376007280",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376007280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2438,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376011525",
      "pull_request_review_id": 3263072412,
      "id": 2376011525,
      "node_id": "PRRC_kwDOABII586Nnw8F",
      "diff_hunk": "@@ -2433,15 +2433,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n         if (it == m_blockman.m_block_index.end()) {\n-            // TODO\n+            script_check_reason = \"assumevalid hash not in headers\";\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not part of assumevalid chain\";\n         } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not on best header chain\";\n         } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n-            // TODO\n+            script_check_reason = \"best header chainwork below minimumchainwork\";\n         } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= TWO_WEEKS_IN_SECONDS) {\n-            // TODO\n+            script_check_reason = \"too recent relative to best header\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 26,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: \"block too recent relative to best header\"",
      "created_at": "2025-09-24T14:30:56Z",
      "updated_at": "2025-09-24T14:43:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2376011525",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376011525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376038253",
      "pull_request_review_id": 3263072412,
      "id": 2376038253,
      "node_id": "PRRC_kwDOABII586Nn3dt",
      "diff_hunk": "@@ -2563,9 +2572,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (script_check_reason != m_last_script_check_reason_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (script_check_reason) {\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        }\n+        m_last_script_check_reason_logged = script_check_reason;",
      "path": "src/validation.cpp",
      "position": 82,
      "original_position": 81,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371280673,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe the parent comment means to set a `const bool fScriptChecks` variable here below the closing if bracket, so that we don't have to change any code below on lines 2594 and 2653. That makes sense to me.",
      "created_at": "2025-09-24T14:39:26Z",
      "updated_at": "2025-09-24T14:43:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2376038253",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2376038253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2584,
      "original_line": 2584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379948259",
      "pull_request_review_id": 3268931296,
      "id": 2379948259,
      "node_id": "PRRC_kwDOABII586N2yDj",
      "diff_hunk": "@@ -2433,15 +2433,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n         if (it == m_blockman.m_block_index.end()) {\n-            // TODO\n+            script_check_reason = \"assumevalid hash not in headers\";\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not part of assumevalid chain\";\n         } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not on best header chain\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2376005833,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure about this, I have never seen \"inchain transaction\" but I have seen \"onchain\". I would also say \"it's not in the set\" instead of \"on the set\" but I *would* say \"it's on the blockchain\" not \"in\". What do others think?",
      "created_at": "2025-09-25T18:12:36Z",
      "updated_at": "2025-09-25T18:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2379948259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379948259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379949764",
      "pull_request_review_id": 3268933486,
      "id": 2379949764,
      "node_id": "PRRC_kwDOABII586N2ybE",
      "diff_hunk": "@@ -136,40 +142,109 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n+\n+        # nodes[1]\n         with self.nodes[1].assert_debug_log(expected_msgs=[\n-            \"Disabling script verification at block #1\",\n-            \"Enabling script verification at block #103\",\n+            f\"Disabling script verification at block #1 ({self.blocks[0].hash_hex}).\",\n+            f\"Enabling script verification at block #103 ({self.blocks[102].hash_hex}).\",\n         ]):\n+            p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n+\n+            p2p1.send_header_for_blocks(self.blocks[0:2000])\n+            p2p1.send_header_for_blocks(self.blocks[2000:])\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n-        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+            assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n-        p2p2.send_header_for_blocks(self.blocks[0:200])\n \n+        # nodes[2]\n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+            p2p2.send_header_for_blocks(self.blocks[0:200])\n+\n+            self.send_blocks_until_disconnected(p2p2)\n+\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+\n+\n+        # nodes[3]\n+        with self.nodes[3].assert_debug_log(expected_msgs=[\n+        ]):\n+            best_hash = self.nodes[3].getbestblockhash()\n+            tip_block = self.nodes[3].getblock(best_hash)\n+            second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+            second_chain = []\n+            for _ in range(150):\n+                block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+                block.solve()\n+                second_chain.append(block)\n+                second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+            p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+\n+            p2p3.send_header_for_blocks(second_chain)\n+            p2p3.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p3.send_without_ping(msg_block(self.blocks[0]))\n+            self.wait_until(lambda: self.nodes[3].getblockcount() == 1)\n+\n+\n+        # nodes[4]\n+        genesis_hash = self.nodes[4].getbestblockhash()\n+        genesis_time = self.nodes[4].getblock(genesis_hash)['time']\n+        alt1 = create_block(int(genesis_hash, 16), create_coinbase(1), genesis_time + 2)\n+        alt1.solve()\n+        with self.nodes[4].assert_debug_log(expected_msgs=[\n+        ]):\n+            p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\n+            p2p4.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p4.send_without_ping(msg_block(alt1))\n+            self.wait_until(lambda: self.nodes[4].getblockcount() == 1)\n+\n+\n+        # nodes[5]\n+        # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).\n+        p2p5 = self.nodes[5].add_p2p_connection(BaseNode())\n+        p2p5.send_header_for_blocks(self.blocks[0:200])\n+        p2p5.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[5].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 154,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": 2375961559,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Wouldn't that cause a race condition if the check misses it?",
      "created_at": "2025-09-25T18:13:17Z",
      "updated_at": "2025-09-25T18:13:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2379949764",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379949764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379988259",
      "pull_request_review_id": 3268986487,
      "id": 2379988259,
      "node_id": "PRRC_kwDOABII586N270j",
      "diff_hunk": "@@ -2433,15 +2433,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n         if (it == m_blockman.m_block_index.end()) {\n-            // TODO\n+            script_check_reason = \"assumevalid hash not in headers\";\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not part of assumevalid chain\";\n         } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not on best header chain\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2376005833,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Blocks are \"in the chain\" to me, like metal links being in a chain. Maybe on-chain tx is more in contrast to off-chain tx, but a tx is in a block, in a chain.\r\n\r\nNot important enough that I reacted upon first review, but would definitely suggest changing if you re-touch.",
      "created_at": "2025-09-25T18:27:20Z",
      "updated_at": "2025-09-25T18:29:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2379988259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379988259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379991579",
      "pull_request_review_id": 3268986487,
      "id": 2379991579,
      "node_id": "PRRC_kwDOABII586N28ob",
      "diff_hunk": "@@ -136,40 +142,109 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n+\n+        # nodes[1]\n         with self.nodes[1].assert_debug_log(expected_msgs=[\n-            \"Disabling script verification at block #1\",\n-            \"Enabling script verification at block #103\",\n+            f\"Disabling script verification at block #1 ({self.blocks[0].hash_hex}).\",\n+            f\"Enabling script verification at block #103 ({self.blocks[102].hash_hex}).\",\n         ]):\n+            p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n+\n+            p2p1.send_header_for_blocks(self.blocks[0:2000])\n+            p2p1.send_header_for_blocks(self.blocks[2000:])\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n-        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+            assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n-        p2p2.send_header_for_blocks(self.blocks[0:200])\n \n+        # nodes[2]\n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+            p2p2.send_header_for_blocks(self.blocks[0:200])\n+\n+            self.send_blocks_until_disconnected(p2p2)\n+\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+\n+\n+        # nodes[3]\n+        with self.nodes[3].assert_debug_log(expected_msgs=[\n+        ]):\n+            best_hash = self.nodes[3].getbestblockhash()\n+            tip_block = self.nodes[3].getblock(best_hash)\n+            second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+            second_chain = []\n+            for _ in range(150):\n+                block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+                block.solve()\n+                second_chain.append(block)\n+                second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+            p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+\n+            p2p3.send_header_for_blocks(second_chain)\n+            p2p3.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p3.send_without_ping(msg_block(self.blocks[0]))\n+            self.wait_until(lambda: self.nodes[3].getblockcount() == 1)\n+\n+\n+        # nodes[4]\n+        genesis_hash = self.nodes[4].getbestblockhash()\n+        genesis_time = self.nodes[4].getblock(genesis_hash)['time']\n+        alt1 = create_block(int(genesis_hash, 16), create_coinbase(1), genesis_time + 2)\n+        alt1.solve()\n+        with self.nodes[4].assert_debug_log(expected_msgs=[\n+        ]):\n+            p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\n+            p2p4.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p4.send_without_ping(msg_block(alt1))\n+            self.wait_until(lambda: self.nodes[4].getblockcount() == 1)\n+\n+\n+        # nodes[5]\n+        # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).\n+        p2p5 = self.nodes[5].add_p2p_connection(BaseNode())\n+        p2p5.send_header_for_blocks(self.blocks[0:200])\n+        p2p5.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[5].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 154,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": 2375961559,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But you've only sent it one block?",
      "created_at": "2025-09-25T18:28:51Z",
      "updated_at": "2025-09-25T18:29:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2379991579",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2379991579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380001489",
      "pull_request_review_id": 3269009034,
      "id": 2380001489,
      "node_id": "PRRC_kwDOABII586N2_DR",
      "diff_hunk": "@@ -2563,9 +2572,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (script_check_reason != m_last_script_check_reason_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (script_check_reason) {\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        }\n+        m_last_script_check_reason_logged = script_check_reason;",
      "path": "src/validation.cpp",
      "position": 82,
      "original_position": 81,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371280673,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I understood that, but that will be a behavior change, since currently after `Enabling... too recent...` we're still getting a log for `Enabling ... block height above...` while if we only check empty vs non-empty we'd only be logging `Disabled` -> `Enabled` (or vice versa) but not slightly more confusing cases like the one above. Given that the logging was added because even we got confused by this, I thought we should log every state change.",
      "created_at": "2025-09-25T18:33:02Z",
      "updated_at": "2025-09-25T18:33:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2380001489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380001489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2584,
      "original_line": 2584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380011100",
      "pull_request_review_id": 3269023687,
      "id": 2380011100,
      "node_id": "PRRC_kwDOABII586N3BZc",
      "diff_hunk": "@@ -2563,9 +2572,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (script_check_reason != m_last_script_check_reason_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (script_check_reason) {\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        }\n+        m_last_script_check_reason_logged = script_check_reason;",
      "path": "src/validation.cpp",
      "position": 82,
      "original_position": 81,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371280673,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't understand why you think it's a behavior change. It has nothing to do with logging. Add this on line 2585: `const bool fScriptChecks = (script_check_reason != nullptr);`\r\nRemove changes on lines 2594, 2653.",
      "created_at": "2025-09-25T18:37:24Z",
      "updated_at": "2025-09-25T18:37:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2380011100",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380011100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2584,
      "original_line": 2584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380068845",
      "pull_request_review_id": 3269103371,
      "id": 2380068845,
      "node_id": "PRRC_kwDOABII586N3Pft",
      "diff_hunk": "@@ -2563,9 +2572,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (script_check_reason != m_last_script_check_reason_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (script_check_reason) {\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        }\n+        m_last_script_check_reason_logged = script_check_reason;",
      "path": "src/validation.cpp",
      "position": 82,
      "original_position": 81,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371280673,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't understand why you think it's a behavior change\r\n\r\n~Compared to the latest state of the code it's a change (not compared `master`).\r\nIf we only log when the nullnes changes that will be a different behavior than when the reason changes.\r\nOr am I misunderstanding the comments?~\r\n\r\nAh, you mean to keep lines\r\n* `if (auto& queue = m_chainman.GetCheckQueue(); queue.HasThreads() && fScriptChecks)`\r\n* `if (!tx.IsCoinBase() && fScriptChecks)`\r\nyes, I can do that, will do on next push.",
      "created_at": "2025-09-25T19:02:28Z",
      "updated_at": "2025-09-25T19:20:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2380068845",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380068845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2584,
      "original_line": 2584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380071174",
      "pull_request_review_id": 3269106054,
      "id": 2380071174,
      "node_id": "PRRC_kwDOABII586N3QEG",
      "diff_hunk": "@@ -136,40 +142,109 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n+\n+        # nodes[1]\n         with self.nodes[1].assert_debug_log(expected_msgs=[\n-            \"Disabling script verification at block #1\",\n-            \"Enabling script verification at block #103\",\n+            f\"Disabling script verification at block #1 ({self.blocks[0].hash_hex}).\",\n+            f\"Enabling script verification at block #103 ({self.blocks[102].hash_hex}).\",\n         ]):\n+            p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n+\n+            p2p1.send_header_for_blocks(self.blocks[0:2000])\n+            p2p1.send_header_for_blocks(self.blocks[2000:])\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n-        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+            assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n-        p2p2.send_header_for_blocks(self.blocks[0:200])\n \n+        # nodes[2]\n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+            p2p2.send_header_for_blocks(self.blocks[0:200])\n+\n+            self.send_blocks_until_disconnected(p2p2)\n+\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+\n+\n+        # nodes[3]\n+        with self.nodes[3].assert_debug_log(expected_msgs=[\n+        ]):\n+            best_hash = self.nodes[3].getbestblockhash()\n+            tip_block = self.nodes[3].getblock(best_hash)\n+            second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+            second_chain = []\n+            for _ in range(150):\n+                block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+                block.solve()\n+                second_chain.append(block)\n+                second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+            p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+\n+            p2p3.send_header_for_blocks(second_chain)\n+            p2p3.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p3.send_without_ping(msg_block(self.blocks[0]))\n+            self.wait_until(lambda: self.nodes[3].getblockcount() == 1)\n+\n+\n+        # nodes[4]\n+        genesis_hash = self.nodes[4].getbestblockhash()\n+        genesis_time = self.nodes[4].getblock(genesis_hash)['time']\n+        alt1 = create_block(int(genesis_hash, 16), create_coinbase(1), genesis_time + 2)\n+        alt1.solve()\n+        with self.nodes[4].assert_debug_log(expected_msgs=[\n+        ]):\n+            p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\n+            p2p4.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p4.send_without_ping(msg_block(alt1))\n+            self.wait_until(lambda: self.nodes[4].getblockcount() == 1)\n+\n+\n+        # nodes[5]\n+        # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).\n+        p2p5 = self.nodes[5].add_p2p_connection(BaseNode())\n+        p2p5.send_header_for_blocks(self.blocks[0:200])\n+        p2p5.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[5].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 154,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": 2375961559,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right, so what's the advantage of `getblockcount() == 1` compared to \"non-zero\"? ",
      "created_at": "2025-09-25T19:03:15Z",
      "updated_at": "2025-09-25T19:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2380071174",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380071174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380262207",
      "pull_request_review_id": 3269380352,
      "id": 2380262207,
      "node_id": "PRRC_kwDOABII586N3-s_",
      "diff_hunk": "@@ -136,40 +142,109 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n+\n+        # nodes[1]\n         with self.nodes[1].assert_debug_log(expected_msgs=[\n-            \"Disabling script verification at block #1\",\n-            \"Enabling script verification at block #103\",\n+            f\"Disabling script verification at block #1 ({self.blocks[0].hash_hex}).\",\n+            f\"Enabling script verification at block #103 ({self.blocks[102].hash_hex}).\",\n         ]):\n+            p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n+\n+            p2p1.send_header_for_blocks(self.blocks[0:2000])\n+            p2p1.send_header_for_blocks(self.blocks[2000:])\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n-        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+            assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n-        p2p2.send_header_for_blocks(self.blocks[0:200])\n \n+        # nodes[2]\n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+            p2p2.send_header_for_blocks(self.blocks[0:200])\n+\n+            self.send_blocks_until_disconnected(p2p2)\n+\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+\n+\n+        # nodes[3]\n+        with self.nodes[3].assert_debug_log(expected_msgs=[\n+        ]):\n+            best_hash = self.nodes[3].getbestblockhash()\n+            tip_block = self.nodes[3].getblock(best_hash)\n+            second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+            second_chain = []\n+            for _ in range(150):\n+                block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+                block.solve()\n+                second_chain.append(block)\n+                second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+            p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+\n+            p2p3.send_header_for_blocks(second_chain)\n+            p2p3.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p3.send_without_ping(msg_block(self.blocks[0]))\n+            self.wait_until(lambda: self.nodes[3].getblockcount() == 1)\n+\n+\n+        # nodes[4]\n+        genesis_hash = self.nodes[4].getbestblockhash()\n+        genesis_time = self.nodes[4].getblock(genesis_hash)['time']\n+        alt1 = create_block(int(genesis_hash, 16), create_coinbase(1), genesis_time + 2)\n+        alt1.solve()\n+        with self.nodes[4].assert_debug_log(expected_msgs=[\n+        ]):\n+            p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\n+            p2p4.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p4.send_without_ping(msg_block(alt1))\n+            self.wait_until(lambda: self.nodes[4].getblockcount() == 1)\n+\n+\n+        # nodes[5]\n+        # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).\n+        p2p5 = self.nodes[5].add_p2p_connection(BaseNode())\n+        p2p5.send_header_for_blocks(self.blocks[0:200])\n+        p2p5.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[5].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 154,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": 2375961559,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Makes the int -> bool coercion explicit to the reader, see https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2362266224",
      "created_at": "2025-09-25T20:31:54Z",
      "updated_at": "2025-09-25T20:33:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2380262207",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2380262207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546287",
      "pull_request_review_id": 3291965004,
      "id": 2396546287,
      "node_id": "PRRC_kwDOABII586O2GTv",
      "diff_hunk": "@@ -27,6 +27,12 @@\n     - node2 has -assumevalid set to the hash of block 102. Try to sync to\n       block 200. node2 will reject block 102 since it's assumed valid, but it\n       isn't buried by at least two weeks' work.\n+    - node3 has -assumevalid set to the hash of block 102. Feed a longer\n+      competing headers-only branch so block #1 is not on the best header chain.\n+    - node4 has -assumevalid set to the hash of block 102. Submit an alternative\n+      block #1 that is not part of the assumevalid chain.\n+    - node5 starts with no -assumevalid parameter. Reindex to deterministically hit",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 17,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": 2375904163,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed",
      "created_at": "2025-10-02T03:35:43Z",
      "updated_at": "2025-10-02T03:35:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2396546287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546324",
      "pull_request_review_id": 3291965043,
      "id": 2396546324,
      "node_id": "PRRC_kwDOABII586O2GUU",
      "diff_hunk": "@@ -136,40 +142,109 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n+\n+        # nodes[1]\n         with self.nodes[1].assert_debug_log(expected_msgs=[\n-            \"Disabling script verification at block #1\",\n-            \"Enabling script verification at block #103\",\n+            f\"Disabling script verification at block #1 ({self.blocks[0].hash_hex}).\",\n+            f\"Enabling script verification at block #103 ({self.blocks[102].hash_hex}).\",\n         ]):\n+            p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n+\n+            p2p1.send_header_for_blocks(self.blocks[0:2000])\n+            p2p1.send_header_for_blocks(self.blocks[2000:])\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n-        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+            assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n-        p2p2.send_header_for_blocks(self.blocks[0:200])\n \n+        # nodes[2]\n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+            p2p2.send_header_for_blocks(self.blocks[0:200])\n+\n+            self.send_blocks_until_disconnected(p2p2)\n+\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+\n+\n+        # nodes[3]\n+        with self.nodes[3].assert_debug_log(expected_msgs=[\n+        ]):\n+            best_hash = self.nodes[3].getbestblockhash()\n+            tip_block = self.nodes[3].getblock(best_hash)\n+            second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+            second_chain = []\n+            for _ in range(150):\n+                block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+                block.solve()\n+                second_chain.append(block)\n+                second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+            p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+\n+            p2p3.send_header_for_blocks(second_chain)\n+            p2p3.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p3.send_without_ping(msg_block(self.blocks[0]))\n+            self.wait_until(lambda: self.nodes[3].getblockcount() == 1)\n+\n+\n+        # nodes[4]\n+        genesis_hash = self.nodes[4].getbestblockhash()\n+        genesis_time = self.nodes[4].getblock(genesis_hash)['time']\n+        alt1 = create_block(int(genesis_hash, 16), create_coinbase(1), genesis_time + 2)\n+        alt1.solve()\n+        with self.nodes[4].assert_debug_log(expected_msgs=[\n+        ]):\n+            p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\n+            p2p4.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p4.send_without_ping(msg_block(alt1))\n+            self.wait_until(lambda: self.nodes[4].getblockcount() == 1)\n+\n+\n+        # nodes[5]\n+        # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 150,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": 2375948743,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed",
      "created_at": "2025-10-02T03:35:44Z",
      "updated_at": "2025-10-02T03:35:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2396546324",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546550",
      "pull_request_review_id": 3291965267,
      "id": 2396546550,
      "node_id": "PRRC_kwDOABII586O2GX2",
      "diff_hunk": "@@ -136,40 +142,109 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n-        # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.start_node(1, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n-        self.start_node(2, extra_args=[\"-assumevalid=\" + block102.hash_hex])\n+        self.start_node(1, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(2, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(3, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(4, extra_args=[f\"-assumevalid={block102.hash_hex}\"])\n+        self.start_node(5)\n \n-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        p2p0.send_header_for_blocks(self.blocks[0:2000])\n-        p2p0.send_header_for_blocks(self.blocks[2000:])\n \n+        # nodes[0]\n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+\n+            p2p0.send_header_for_blocks(self.blocks[0:2000])\n+            p2p0.send_header_for_blocks(self.blocks[2000:])\n+\n+            self.send_blocks_until_disconnected(p2p0)\n+            self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.send_header_for_blocks(self.blocks[0:2000])\n-        p2p1.send_header_for_blocks(self.blocks[2000:])\n+\n+        # nodes[1]\n         with self.nodes[1].assert_debug_log(expected_msgs=[\n-            \"Disabling script verification at block #1\",\n-            \"Enabling script verification at block #103\",\n+            f\"Disabling script verification at block #1 ({self.blocks[0].hash_hex}).\",\n+            f\"Enabling script verification at block #103 ({self.blocks[102].hash_hex}).\",\n         ]):\n+            p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n+\n+            p2p1.send_header_for_blocks(self.blocks[0:2000])\n+            p2p1.send_header_for_blocks(self.blocks[2000:])\n             # Send all blocks to node1. All blocks will be accepted.\n             for i in range(2202):\n                 p2p1.send_without_ping(msg_block(self.blocks[i]))\n             # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n             p2p1.sync_with_ping(timeout=960)\n-        assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n+            assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n-        p2p2.send_header_for_blocks(self.blocks[0:200])\n \n+        # nodes[2]\n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n-        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+            \"Block validation error: block-script-verify-flag-failed\",\n+        ]):\n+            p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+            p2p2.send_header_for_blocks(self.blocks[0:200])\n+\n+            self.send_blocks_until_disconnected(p2p2)\n+\n+            self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+            assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n+\n+\n+        # nodes[3]\n+        with self.nodes[3].assert_debug_log(expected_msgs=[\n+        ]):\n+            best_hash = self.nodes[3].getbestblockhash()\n+            tip_block = self.nodes[3].getblock(best_hash)\n+            second_chain_tip, second_chain_time, second_chain_height = int(best_hash, 16), tip_block[\"time\"] + 1, tip_block[\"height\"] + 1\n+            second_chain = []\n+            for _ in range(150):\n+                block = create_block(second_chain_tip, create_coinbase(second_chain_height), second_chain_time)\n+                block.solve()\n+                second_chain.append(block)\n+                second_chain_tip, second_chain_time, second_chain_height = block.hash_int, second_chain_time + 1, second_chain_height + 1\n+\n+            p2p3 = self.nodes[3].add_p2p_connection(BaseNode())\n+\n+            p2p3.send_header_for_blocks(second_chain)\n+            p2p3.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p3.send_without_ping(msg_block(self.blocks[0]))\n+            self.wait_until(lambda: self.nodes[3].getblockcount() == 1)\n+\n+\n+        # nodes[4]\n+        genesis_hash = self.nodes[4].getbestblockhash()\n+        genesis_time = self.nodes[4].getblock(genesis_hash)['time']\n+        alt1 = create_block(int(genesis_hash, 16), create_coinbase(1), genesis_time + 2)\n+        alt1.solve()\n+        with self.nodes[4].assert_debug_log(expected_msgs=[\n+        ]):\n+            p2p4 = self.nodes[4].add_p2p_connection(BaseNode())\n+            p2p4.send_header_for_blocks(self.blocks[0:103])\n+\n+            p2p4.send_without_ping(msg_block(alt1))\n+            self.wait_until(lambda: self.nodes[4].getblockcount() == 1)\n+\n+\n+        # nodes[5]\n+        # Reindex to deterministically hit specific assumevalid gates (no races with header downloads/chainwork during startup).\n+        p2p5 = self.nodes[5].add_p2p_connection(BaseNode())\n+        p2p5.send_header_for_blocks(self.blocks[0:200])\n+        p2p5.send_without_ping(msg_block(self.blocks[0]))\n+        self.wait_until(lambda: self.nodes[5].getblockcount())",
      "path": "test/functional/feature_assumevalid.py",
      "position": 1,
      "original_position": 154,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "84a9adcfd9ee32348223f37e4faf9f51114ef40f",
      "in_reply_to_id": 2375961559,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-10-02T03:35:48Z",
      "updated_at": "2025-10-02T03:35:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2396546550",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546704",
      "pull_request_review_id": 3291965431,
      "id": 2396546704,
      "node_id": "PRRC_kwDOABII586O2GaQ",
      "diff_hunk": "@@ -2433,15 +2433,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n         if (it == m_blockman.m_block_index.end()) {\n-            // TODO\n+            script_check_reason = \"assumevalid hash not in headers\";\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not part of assumevalid chain\";\n         } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not on best header chain\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2376005833,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed, thanks",
      "created_at": "2025-10-02T03:35:50Z",
      "updated_at": "2025-10-02T03:35:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2396546704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546850",
      "pull_request_review_id": 3291965558,
      "id": 2396546850,
      "node_id": "PRRC_kwDOABII586O2Gci",
      "diff_hunk": "@@ -2433,15 +2433,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n         if (it == m_blockman.m_block_index.end()) {\n-            // TODO\n+            script_check_reason = \"assumevalid hash not in headers\";\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not part of assumevalid chain\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 17,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2376007280,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, thanks",
      "created_at": "2025-10-02T03:35:53Z",
      "updated_at": "2025-10-02T03:35:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2396546850",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2438,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546909",
      "pull_request_review_id": 3291965626,
      "id": 2396546909,
      "node_id": "PRRC_kwDOABII586O2Gdd",
      "diff_hunk": "@@ -2433,15 +2433,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n         if (it == m_blockman.m_block_index.end()) {\n-            // TODO\n+            script_check_reason = \"assumevalid hash not in headers\";\n         } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not part of assumevalid chain\";\n         } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n-            // TODO\n+            script_check_reason = \"block not on best header chain\";\n         } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n-            // TODO\n+            script_check_reason = \"best header chainwork below minimumchainwork\";\n         } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= TWO_WEEKS_IN_SECONDS) {\n-            // TODO\n+            script_check_reason = \"too recent relative to best header\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 26,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "c99fde2c0ac181da656e8c942fa6fea93713de75",
      "in_reply_to_id": 2376011525,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks",
      "created_at": "2025-10-02T03:35:56Z",
      "updated_at": "2025-10-02T03:35:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2396546909",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396546909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2444,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396548075",
      "pull_request_review_id": 3291966962,
      "id": 2396548075,
      "node_id": "PRRC_kwDOABII586O2Gvr",
      "diff_hunk": "@@ -2563,9 +2572,15 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n              Ticks<SecondsDouble>(m_chainman.time_forks),\n              Ticks<MillisecondsDouble>(m_chainman.time_forks) / m_chainman.num_blocks_total);\n \n-    if (fScriptChecks != m_prev_script_checks_logged && GetRole() == ChainstateRole::NORMAL) {\n-        LogInfo(\"%s signature validations at block #%d (%s).\", fScriptChecks ? \"Enabling\" : \"Disabling\", pindex->nHeight, block_hash.ToString());\n-        m_prev_script_checks_logged = fScriptChecks;\n+    if (script_check_reason != m_last_script_check_reason_logged && GetRole() == ChainstateRole::NORMAL) {\n+        if (script_check_reason) {\n+            LogInfo(\"Enabling script verification at block #%d (%s): %s.\",\n+                    pindex->nHeight, block_hash.ToString(), script_check_reason);\n+        } else {\n+            LogInfo(\"Disabling script verification at block #%d (%s).\",\n+                    pindex->nHeight, block_hash.ToString());\n+        }\n+        m_last_script_check_reason_logged = script_check_reason;",
      "path": "src/validation.cpp",
      "position": 82,
      "original_position": 81,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371280673,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks",
      "created_at": "2025-10-02T03:36:17Z",
      "updated_at": "2025-10-02T03:36:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2396548075",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396548075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2584,
      "original_line": 2584,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396551204",
      "pull_request_review_id": 3291970153,
      "id": 2396551204,
      "node_id": "PRRC_kwDOABII586O2Hgk",
      "diff_hunk": "@@ -2423,35 +2423,44 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n+    const char* script_check_reason;\n     if (!m_chainman.AssumedValidBlock().IsNull()) {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            script_check_reason = \"assumevalid hash not in headers\";\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = (pindex->nHeight > it->second.nHeight) ? \"block height above assumevalid height\" : \"block not part of assumevalid chain\";\n+        } else if (m_chainman.m_best_header->GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = \"block not on best header chain\";\n+        } else if (m_chainman.m_best_header->nChainWork < m_chainman.MinimumChainWork()) {\n+            script_check_reason = \"best header chainwork below minimumchainwork\";\n+        } else if (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= TWO_WEEKS_IN_SECONDS) {\n+            script_check_reason = \"too recent relative to best header\";\n+        } else {\n+            // This block is a member of the assumed verified chain and an ancestor of the best header.\n+            // Script verification is skipped when connecting blocks under the\n+            //  assumevalid block. Assuming the assumevalid block is valid this\n+            //  is safe because block merkle hashes are still computed and checked,\n+            // Of course, if an assumed valid block is invalid due to false scriptSigs\n+            //  this optimization would allow an invalid chain to be accepted.\n+            // The equivalent time check discourages hash power from extorting the network via DOS attack\n+            //  into accepting an invalid block through telling users they must manually set assumevalid.\n+            //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n+            //  it hard to hide the implication of the demand. This also avoids having release candidates\n+            //  that are hardly doing any signature verification at all in testing without having to\n+            //  artificially set the default assumed verified block further back.\n+            // The test against the minimum chain work prevents the skipping when denied access to any chain at\n+            //  least as good as the expected chain.\n+            script_check_reason = nullptr;\n         }\n+    } else {\n+        script_check_reason = \"assumevalid=0 (always verify)\";",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 62,
      "commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "original_commit_id": "010cf81407c0df8de766fd2a116463d180f25f33",
      "in_reply_to_id": 2371245648,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks",
      "created_at": "2025-10-02T03:37:11Z",
      "updated_at": "2025-10-02T03:37:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2396551204",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2396551204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2455043810",
      "pull_request_review_id": 3369808963,
      "id": 2455043810,
      "node_id": "PRRC_kwDOABII586SVP7i",
      "diff_hunk": "@@ -2423,34 +2423,43 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n-    if (!m_chainman.AssumedValidBlock().IsNull()) {\n+    const char* script_check_reason;",
      "path": "src/validation.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Would be better to initialise to `nullptr`, IMO. Sanitizers should catch and warn for initialisation being missed in tested code paths though.",
      "created_at": "2025-10-23T12:56:32Z",
      "updated_at": "2025-10-23T13:00:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2455043810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2455043810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2426,
      "original_line": 2426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2455049702",
      "pull_request_review_id": 3369808963,
      "id": 2455049702,
      "node_id": "PRRC_kwDOABII586SVRXm",
      "diff_hunk": "@@ -2423,34 +2423,43 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n-    if (!m_chainman.AssumedValidBlock().IsNull()) {\n+    const char* script_check_reason;\n+    if (m_chainman.AssumedValidBlock().IsNull()) {\n+        script_check_reason = \"assumevalid=0 (always verify)\";\n+    } else {\n+        constexpr int64_t TWO_WEEKS_IN_SECONDS{60 * 60 * 24 * 7 * 2};\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n         // A suitable default value is included with the software and updated from time to time.  Because validity\n         //  relative to a piece of software is an objective fact these defaults can be easily reviewed.\n         // This setting doesn't force the selection of any particular chain but makes validating some faster by\n         //  effectively caching the result of part of the verification.\n         BlockMap::const_iterator it{m_blockman.m_block_index.find(m_chainman.AssumedValidBlock())};\n-        if (it != m_blockman.m_block_index.end()) {\n-            if (it->second.GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->GetAncestor(pindex->nHeight) == pindex &&\n-                m_chainman.m_best_header->nChainWork >= m_chainman.MinimumChainWork()) {\n-                // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // Script verification is skipped when connecting blocks under the\n-                // assumevalid block. Assuming the assumevalid block is valid this\n-                // is safe because block merkle hashes are still computed and checked,\n-                // Of course, if an assumed valid block is invalid due to false scriptSigs\n-                // this optimization would allow an invalid chain to be accepted.\n-                // The equivalent time check discourages hash power from extorting the network via DOS attack\n-                //  into accepting an invalid block through telling users they must manually set assumevalid.\n-                //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n-                //  it hard to hide the implication of the demand.  This also avoids having release candidates\n-                //  that are hardly doing any signature verification at all in testing without having to\n-                //  artificially set the default assumed verified block further back.\n-                // The test against the minimum chain work prevents the skipping when denied access to any chain at\n-                //  least as good as the expected chain.\n-                fScriptChecks = (GetBlockProofEquivalentTime(*m_chainman.m_best_header, *pindex, *m_chainman.m_best_header, params.GetConsensus()) <= 60 * 60 * 24 * 7 * 2);\n-            }\n+        if (it == m_blockman.m_block_index.end()) {\n+            script_check_reason = \"assumevalid hash not in headers\";\n+        } else if (it->second.GetAncestor(pindex->nHeight) != pindex) {\n+            script_check_reason = (pindex->nHeight > it->second.nHeight) ? \"block height above assumevalid height\" : \"block not in assumevalid chain\";",
      "path": "src/validation.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "original_commit_id": "45bd8914658a675d00aa9c83373d6903a8a9ece8",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Better as an `if` than ` .. ? .. : ..` IMO.",
      "created_at": "2025-10-23T12:58:31Z",
      "updated_at": "2025-10-23T13:00:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33336#discussion_r2455049702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2455049702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33336"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2440,
      "original_line": 2440,
      "side": "RIGHT"
    }
  ]
}